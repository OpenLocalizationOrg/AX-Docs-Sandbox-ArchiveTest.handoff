{"content":"---\n# required metadata\n\ntitle: Respond by using EventHandlerResult\ndescription: This topic describes how to subscribe to events that has a parameter of any type that implements the IEventHandlerResult interface.\nauthor: LarsBlaaberg\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: Operations, Platform, AX Platform\n# ms.tgt_pltfrm: \nms.custom: 89563\nms.assetid: \nms.search.region: Global\n# ms.search.industry: \nms.author: lolsen\nms.search.validFrom: 2017-07-01\nms.dyn365.ops.version: Platform update 9\n---\n\n# Respond by using EventHandlerResult or types that implement IEventHandlerResult\n\nSome delegate methods are implemented so that they can request a response from subscribing delegate handler methods. The delegate calling logic then uses the response from a potential subscriber when it continues execution after the response has been received. These delegate methods usually have a signature that has an **EventHandlerResult** parameter as the last parameter. However, because of the support for the **EventHandlerAcceptResult** and **EventHandlerRejectResult** types, the parameter can be of any type that implements the **IEventHandlerResult** interface.\n\n+ In general, the logic that is implemented in the delegate handler method should contain a condition that verifies that the subscribing logic is responsible for providing a response. It should also include logic to provide the response in the form of a result.\n+ When the delegate handler method must provide the response to an **EventHandlerResult** object parameter, the subscribing logic might also contain logic to calculate or retrieve the result.\n+ When the condition and the response logic are implemented, the calculation of the result must occur only when the condition is evaluated to **true**.\n+ All the subscribing delegate handler methods are run when a delegate is called. Therefore, you should make sure that the overhead of running your method is as low as possible when the method isn't responsible for providing a response. Therefore, make sure that the condition is evaluated to **false** as quickly as possible when your delegate handler method isn't responsible for providing a result.\n\n# Examples\nThe following example shows a delegate handler that has a condition in the form of a **switch** statement. The delegate handler also has logic to provide a response in the form of the result. The responding logic is run only when the condition is evaluated to **true**.\n\n```\n[SubscribesTo(tableStr(InventWarehouseEntity), delegateStr(InventWarehouseEntity, validateWarehouseTypeDelegate))]\npublic static void validateWarehouseTypeIsSupportedStandardDelegateHandler(InventLocationType _inventLocationType, EventHandlerResult _result)\n{\n    switch (_inventLocationType)\n    {\n        case InventLocationType::Standard:\n        case InventLocationType::Quarantine:\n        case InventLocationType::Transit:\n            _result.result(true);\n            break;\n    }\n}\n```\n\nWhen the delegate method requests a response by using an **EventHandlerAcceptResult** or an **EventHandlerRejectResult** object parameter, the subscriber is expected to respond only with an accept or a reject. The subscribing logic might also add messages to the Infolog.\n\nThe following example resembles the previous example. However, the delegate method now requests a response by using an **EventHandlerAcceptResult** object and by calling the **accept** method.\n    \n```\n[SubscribesTo(tableStr(InventWarehouseEntity), delegateStr(InventWarehouseEntity, validateWarehouseTypeDelegate))]\npublic static void validateWarehouseTypeIsSupportedStandardDelegateHandler(InventLocationType _inventLocationType, EventHandlerAcceptResult _result)\n{\n    switch (_inventLocationType)\n    {\n        case InventLocationType::Standard:\n        case InventLocationType::Quarantine:\n        case InventLocationType::Transit:\n            _result.accept();\n            break;\n    }\n}\n```\n\nThe following example shows a delegate handler method that responds by using an **EventHandlerRejectResult** object. To respond by using an **EventHandlerRejectResult** object, you can call the **reject** method or the **checkFailed** extension method. If you use the **checkFailed** method, you can add a warning message to the Infolog. Internally, the **checkFailed** method calls the **reject** method.\n\n```\n[SubscribesTo(classStr(ProdTableType), delegateStr(ProdTableType, validateWriteProdTableInventRefTypeDelegate))]\npublic static void validateWriteProdTableInventRefTypeDelegateHandler(ProdTable _prodTable, EventHandlerRejectResult _result)\n{\n    if (_prodTable.InventRefType == InventRefType::ProdLine)\n    {\n        if (! _prodTable.InventRefId || !_prodTable.InventRefTransId)\n        {\n            _result.checkFailed(\"@SYS19558\");\n        }\n        ProdBOM prodBOM;\n        select prodBOM\n            where prodBOM.InventTransId  == _prodTable.InventRefTransId;\n        if (! _prodTable.checkRefProdBOM(prodBOM))\n        {\n            _result.reject();\n        }\n    }\n}\n```\n\n# Guidelines\nIn addition to the previously described practices, the following general guidelines apply:\n\n- Respond only when the subscribing logic is responsible for responding. The delegate handler methods were implemented to provide a response when a specific condition is met. Therefore, the subscribing logic must provide a result when a specific condition is met. Before the subscribing logic responds, it should not evaluate whether the result object parameter already contains a result. For example, a delegate handler method should not contain logic that resembles the logic in the following example. This logic evaluates whether the **EventHandlerResult** object parameter already contains a result when the method is run.\n\n    > [!WARNING]\n    > This example is an example of code that you should **not** write.\n\n    ```\n    [SubscribesTo(tableStr(InventWarehouseEntity), delegateStr(InventWarehouseEntity, validateWarehouseTypeDelegate))]\n    public static void validateWarehouseTypeIsSupportedStandardDelegateHandler(InventLocationType _inventLocationType, EventHandlerResult _result)\n    {\n        // this if statement is an example of the bad practice.\n        if (_result.hasResult())\n        {\n             return;\n        }\n        switch (_inventLocationType)\n        {\n            case InventLocationType::Standard:\n            case InventLocationType::Quarantine:\n            case InventLocationType::Transit:\n                 _result.result(true);\n                break;\n        }\n    }\n    ```\n    \n- Don't provide a response on behalf of other subscribers. If the delegate handler method isn't responsible for providing a response, the method must not provide a response. If the method provides a response when the condition isn't met, it provides a response on behalf of other subscribers. The requesting logic must be responsible for handling situations where no subscribers have responded. The delegate handler method must not contain logic that resembles the logic in the following example. This logic which provides a result when the condition is evaluated to **false**.\n    \n    > [!WARNING]\n    > This example is an example of code that you should **not** write.\n    \n    ```\n    [SubscribesTo(tableStr(InventWarehouseEntity), delegateStr(InventWarehouseEntity, validateWarehouseTypeDelegate))]\n    public static void validateWarehouseTypeIsSupportedStandardDelegateHandler(InventLocationType _inventLocationType, EventHandlerResult _result)\n    {\n        switch (_inventLocationType)\n        {\n            case InventLocationType::Standard:\n            case InventLocationType::Quarantine:\n            case InventLocationType::Transit:\n                _result.result(true);\n                break;\n            // this default block is an example of the bad practice\n            default:\n                _result.result(false);\n                break;\n        }\n    }\n    ```\n","nodes":[{"pos":[4,690],"embed":true,"restype":"x-metadata","content":"# required metadata\n\ntitle: Respond by using EventHandlerResult\ndescription: This topic describes how to subscribe to events that has a parameter of any type that implements the IEventHandlerResult interface.\nauthor: LarsBlaaberg\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: Operations, Platform, AX Platform\n# ms.tgt_pltfrm: \nms.custom: 89563\nms.assetid: \nms.search.region: Global\n# ms.search.industry: \nms.author: lolsen\nms.search.validFrom: 2017-07-01\nms.dyn365.ops.version: Platform update 9","nodes":[{"content":"Respond by using EventHandlerResult","nodes":[{"pos":[0,35],"content":"Respond by using EventHandlerResult","nodes":[{"content":"Respond by using EventHandlerResult","pos":[0,35]}]}],"path":["title"],"extradata":"MT"},{"content":"This topic describes how to subscribe to events that has a parameter of any type that implements the IEventHandlerResult interface.","nodes":[{"pos":[0,131],"content":"This topic describes how to subscribe to events that has a parameter of any type that implements the IEventHandlerResult interface.","nodes":[{"content":"This topic describes how to subscribe to events that has a parameter of any type that implements the IEventHandlerResult interface.","pos":[0,131]}]}],"path":["description"],"extradata":"MT"}],"header":"# required metadata\n","yml":true},{"pos":[698,777],"content":"Respond by using EventHandlerResult or types that implement IEventHandlerResult","linkify":"Respond by using EventHandlerResult or types that implement IEventHandlerResult","nodes":[{"content":"Respond by using EventHandlerResult or types that implement IEventHandlerResult","pos":[0,79]}]},{"content":"Some delegate methods are implemented so that they can request a response from subscribing delegate handler methods.","pos":[779,895]},{"content":"The delegate calling logic then uses the response from a potential subscriber when it continues execution after the response has been received.","pos":[896,1039]},{"content":"These delegate methods usually have a signature that has an <bpt id=\"p1\">**</bpt>EventHandlerResult<ept id=\"p1\">**</ept> parameter as the last parameter.","pos":[1040,1155],"source":" These delegate methods usually have a signature that has an **EventHandlerResult** parameter as the last parameter."},{"content":"However, because of the support for the <bpt id=\"p1\">**</bpt>EventHandlerAcceptResult<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>EventHandlerRejectResult<ept id=\"p2\">**</ept> types, the parameter can be of any type that implements the <bpt id=\"p3\">**</bpt>IEventHandlerResult<ept id=\"p3\">**</ept> interface.","pos":[1156,1352],"source":" However, because of the support for the **EventHandlerAcceptResult** and **EventHandlerRejectResult** types, the parameter can be of any type that implements the **IEventHandlerResult** interface."},{"content":"In general, the logic that is implemented in the delegate handler method should contain a condition that verifies that the subscribing logic is responsible for providing a response.","pos":[1356,1537]},{"content":"It should also include logic to provide the response in the form of a result.","pos":[1538,1615]},{"pos":[1618,1807],"content":"When the delegate handler method must provide the response to an <bpt id=\"p1\">**</bpt>EventHandlerResult<ept id=\"p1\">**</ept> object parameter, the subscribing logic might also contain logic to calculate or retrieve the result.","source":"When the delegate handler method must provide the response to an **EventHandlerResult** object parameter, the subscribing logic might also contain logic to calculate or retrieve the result."},{"pos":[1810,1959],"content":"When the condition and the response logic are implemented, the calculation of the result must occur only when the condition is evaluated to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"When the condition and the response logic are implemented, the calculation of the result must occur only when the condition is evaluated to **true**."},{"content":"All the subscribing delegate handler methods are run when a delegate is called.","pos":[1962,2041]},{"content":"Therefore, you should make sure that the overhead of running your method is as low as possible when the method isn't responsible for providing a response.","pos":[2042,2196]},{"content":"Therefore, make sure that the condition is evaluated to <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> as quickly as possible when your delegate handler method isn't responsible for providing a result.","pos":[2197,2361],"source":" Therefore, make sure that the condition is evaluated to **false** as quickly as possible when your delegate handler method isn't responsible for providing a result."},{"pos":[2365,2373],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a delegate handler that has a condition in the form of a <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> statement.","pos":[2374,2480],"source":"The following example shows a delegate handler that has a condition in the form of a **switch** statement."},{"content":"The delegate handler also has logic to provide a response in the form of the result.","pos":[2481,2565]},{"content":"The responding logic is run only when the condition is evaluated to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[2566,2643],"source":" The responding logic is run only when the condition is evaluated to **true**."},{"content":"When the delegate method requests a response by using an <bpt id=\"p1\">**</bpt>EventHandlerAcceptResult<ept id=\"p1\">**</ept> or an <bpt id=\"p2\">**</bpt>EventHandlerRejectResult<ept id=\"p2\">**</ept> object parameter, the subscriber is expected to respond only with an accept or a reject.","pos":[3144,3353],"source":"When the delegate method requests a response by using an **EventHandlerAcceptResult** or an **EventHandlerRejectResult** object parameter, the subscriber is expected to respond only with an accept or a reject."},{"content":"The subscribing logic might also add messages to the Infolog.","pos":[3354,3415]},{"content":"The following example resembles the previous example.","pos":[3417,3470]},{"content":"However, the delegate method now requests a response by using an <bpt id=\"p1\">**</bpt>EventHandlerAcceptResult<ept id=\"p1\">**</ept> object and by calling the <bpt id=\"p2\">**</bpt>accept<ept id=\"p2\">**</ept> method.","pos":[3471,3609],"source":" However, the delegate method now requests a response by using an **EventHandlerAcceptResult** object and by calling the **accept** method."},{"content":"The following example shows a delegate handler method that responds by using an <bpt id=\"p1\">**</bpt>EventHandlerRejectResult<ept id=\"p1\">**</ept> object.","pos":[4116,4232],"source":"The following example shows a delegate handler method that responds by using an **EventHandlerRejectResult** object."},{"content":"To respond by using an <bpt id=\"p1\">**</bpt>EventHandlerRejectResult<ept id=\"p1\">**</ept> object, you can call the <bpt id=\"p2\">**</bpt>reject<ept id=\"p2\">**</ept> method or the <bpt id=\"p3\">**</bpt>checkFailed<ept id=\"p3\">**</ept> extension method.","pos":[4233,4368],"source":" To respond by using an **EventHandlerRejectResult** object, you can call the **reject** method or the **checkFailed** extension method."},{"content":"If you use the <bpt id=\"p1\">**</bpt>checkFailed<ept id=\"p1\">**</ept> method, you can add a warning message to the Infolog.","pos":[4369,4453],"source":" If you use the **checkFailed** method, you can add a warning message to the Infolog."},{"content":"Internally, the <bpt id=\"p1\">**</bpt>checkFailed<ept id=\"p1\">**</ept> method calls the <bpt id=\"p2\">**</bpt>reject<ept id=\"p2\">**</ept> method.","pos":[4454,4521],"source":" Internally, the **checkFailed** method calls the **reject** method."},{"pos":[5208,5218],"content":"Guidelines","linkify":"Guidelines","nodes":[{"content":"Guidelines","pos":[0,10]}]},{"content":"In addition to the previously described practices, the following general guidelines apply:","pos":[5219,5309]},{"content":"Respond only when the subscribing logic is responsible for responding.","pos":[5313,5383]},{"content":"The delegate handler methods were implemented to provide a response when a specific condition is met.","pos":[5384,5485]},{"content":"Therefore, the subscribing logic must provide a result when a specific condition is met.","pos":[5486,5574]},{"content":"Before the subscribing logic responds, it should not evaluate whether the result object parameter already contains a result.","pos":[5575,5699]},{"content":"For example, a delegate handler method should not contain logic that resembles the logic in the following example.","pos":[5700,5814]},{"content":"This logic evaluates whether the <bpt id=\"p1\">**</bpt>EventHandlerResult<ept id=\"p1\">**</ept> object parameter already contains a result when the method is run.","pos":[5815,5937],"source":" This logic evaluates whether the **EventHandlerResult** object parameter already contains a result when the method is run."},{"pos":[5945,6027],"content":"[!WARNING]\nThis example is an example of code that you should **not** write.","leadings":["","    > "],"nodes":[{"content":"This example is an example of code that you should <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> write.","pos":[11,76],"source":"This example is an example of code that you should **not** write."}]},{"content":"Don't provide a response on behalf of other subscribers.","pos":[6729,6785]},{"content":"If the delegate handler method isn't responsible for providing a response, the method must not provide a response.","pos":[6786,6900]},{"content":"If the method provides a response when the condition isn't met, it provides a response on behalf of other subscribers.","pos":[6901,7019]},{"content":"The requesting logic must be responsible for handling situations where no subscribers have responded.","pos":[7020,7121]},{"content":"The delegate handler method must not contain logic that resembles the logic in the following example.","pos":[7122,7223]},{"content":"This logic which provides a result when the condition is evaluated to <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[7224,7304],"source":" This logic which provides a result when the condition is evaluated to **false**."},{"pos":[7316,7398],"content":"[!WARNING]\nThis example is an example of code that you should **not** write.","leadings":["","    > "],"nodes":[{"content":"This example is an example of code that you should <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> write.","pos":[11,76],"source":"This example is an example of code that you should **not** write."}]}]}