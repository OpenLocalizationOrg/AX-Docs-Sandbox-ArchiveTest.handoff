<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38c6d8d043c2702878e18bf800086babb3445847</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\financial\read-only-entity-financial.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13a95d3f68f8f48faf2d9185e911574edec82651</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d42db966f1f830ece0d7275466bab4dbf90a97</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Build a read-only entity that exposes financial dimensions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>In this topic, we describe how to build an entity for registered transactions.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build a read-only entity that exposes financial dimensions</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>"<ph id="ph1">[!include[banner](../includes/banner.md)]</ph>"</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this topic, we describe how to build an entity for registered transactions that are registered.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic comes from Per Baarsoe Jorgensen of the Solutions Architecture team.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It describes a real-world scenario that we have encountered as we work with customers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Imagine a scenario where we must expose all vendor invoice line transactions together with the financial dimensions that were applied through the distributions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because easy consumption by a third-party tool is essential, we will create an entity for this scenario.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As a result, the entity should not have to be joined with other related entities but should be able to provide value on its own.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We will walk through the process of creating a sample entity to meet these requirements.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(We will leave out instructions for integrating with Microsoft Visual Studio Team Services, because those steps are already well documented.)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create a basic entity</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first step is to create a new element in a project by selecting <bpt id="p1">**</bpt>New Item<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>New item</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the form that opens, under Data Model, we select the <bpt id="p1">**</bpt>Data Entity<ept id="p1">**</ept> element type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Data element</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Be careful when you name the entity, because you can’t rename it later.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Next, in the Data Entity wizard, we select the appropriate primary data source.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For our scenario, this data source is VendInvoiceTrans.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Data entity wizard</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The wizard doesn’t accept tables that don’t have a natural key, as is the case with VendInvoiceTrans.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, we receive the following error message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Natural key error</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The workaround is to select any other primary data source that has a natural key associated, such as VendGroup.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because we don’t really need this data source, we also don’t need any fields for it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, we clear the <bpt id="p1">**</bpt>Select all<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Clear select all</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Finally, we create the template for our entity by clicking <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Customize the basic entity</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The entity, staging table, and security assets have been created, and we can now produce our custom entity.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the project, we open the VendorInvoiceTransactionDetailsEntity entity in the designer.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>VendorInvoiceTransactionDetailsEntity in designer</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the designer, we replace the dummy table (VendGroup) that we applied in the wizard with the transaction table VendInvoiceTrans.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because we didn't choose to add the fields, we don't have to remove fields in the entity.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data Entity Type</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because we are exposing transactional data by using this entity, it's important that we mark the entity as read-only.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Therefore, we set the <bpt id="p1">**</bpt>Is read only<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>Yes<ept id="p2">**</ept> on the top node.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because accounting distributions are versioned, it's important that only the current version be returned when we query.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Therefore, we create a view that makes this part easily reusable across multiple entities.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Replace with VendInvoiceTrans</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the properties, we assign <bpt id="p1">**</bpt>ReferenceDistribution<ept id="p1">**</ept> a range filter value of <bpt id="p2">**</bpt>0<ept id="p2">**</ept> and <bpt id="p3">**</bpt>ReferenceRole<ept id="p3">**</ept> a range filter value of <bpt id="p4">**</bpt>1<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The join mode property for the AccountDistributionReverse data source must be <bpt id="p1">**</bpt>NoExistsJoin<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>After the new view is in place, we can add it to the VendorInvoiceTransactionDetailsEntity entity that we are currently building.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Add to VendorInvoiceTransactionDetailsEntity</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Expose financial dimensions as fields</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The next important step is to expose the financial dimensions as separate fields on the entity.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because our scenario builds on top of a posted transaction, we must add the fields to the DimensionCombinationentity entity.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>We want to make the adjustments in a resilient manner by using the extension approach, so that minimal maintenance will be required when we upgrade the code base to newer versions in the future.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Microsoft Dynamics 365 for Finance and Operations, Enterprise edition version 1611</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For version 1611 or later, you should use the wizard that is available in Microsoft Visual Studio (at <bpt id="p1">**</bpt>Dynamics 365<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Addins<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Add financial dimensions for Odata<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For instructions, see <bpt id="p1">[</bpt>Add dimensions to the Microsoft Excel template<ept id="p1">](dimensions-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Earlier versions</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you're working with earlier versions, you must complete the steps that are outlined here.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>First, we add the entity extension itself.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create extension<ept id="p1">**</ept> on the context menu (shortcut menu).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Next, we create the code that retrieves the data.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Because the entity extension is already in place, we must create a new class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following example adds code for an arbitrary dimension that is named <bpt id="p1">**</bpt>ProductLine<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[ExtensionOf(dataentityviewstr(DimensionCombinationentity))] public final class DimensionCombinationentity_Extension { private static server str getEmptyOrDimensionValueSqlString(str _attributeName) { str sqlStatement;</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>We now add fields to the newly created entity extension by using custom fields that reference these methods.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Add fields</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Next, we set the property values to reflect the fact that the field is unmapped and should be retrieved through the code that we made for the extension class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you create the relation, also set the following values:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Cardinality: <bpt id="p1">**</bpt>ZeroMore<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Related data entity: <bpt id="p1">**</bpt>DimensionCombinationentity<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Related data entity cardinality: <bpt id="p1">**</bpt>ZeroOne<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Relationship type: <bpt id="p1">**</bpt>Association<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Create relation</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>We must fully qualify the data method with the class name.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>We are now ready to add the DimensionCombinationentity entity to our new VendInvoiceTransactionentity entity.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Add DimensionCombinationentity</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Notice that both the AccountingDistributionCurrent and the DimensionCombinationentity entity should be outer-joined.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Outer join</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Now, we just have to drag the required fields from the various data sources to the <bpt id="p1">**</bpt>Fields<ept id="p1">**</ept> node on the new entity (that is, to our newly created ProductLine).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Drag to ProductLine</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>We should add a key to the entity to enable the incremental update functionality during the export configuration.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Therefore, we must make sure that RecId from the VendInvoiceTrans data source is part of the fields named e.g. VendInvoiceTransRecId.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After the field is in the field list, we can drag it to the <bpt id="p1">**</bpt>EntityKey<ept id="p1">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Drag to EntityKey</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To make sure that the staging table is associated with the fully configured entity, we must update it.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>On the context menu for the entity, we select <bpt id="p1">**</bpt>Update staging table<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>[</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Update staging table</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>]</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The entity work is now complete, and we can build it.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In this scenario, a LedgerDimension was associated with the DimensionCombinationentity entity.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In scenarios where there is a DefaultDimension, we must associate it with the DimensionSetentity entity.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The improvements and extensions that are required are identical to the improvements and extensions that we made to the DimensionCombinationentity entity.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Export Dynamics AX 7 Entities to your own Azure SQL Database<ept id="p1">](https://blogs.msdn.microsoft.com/dynamicsaxbi/2016/07/27/export-dynamics-ax7-entities-to-your-own-azure-sql-database/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>