<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7291eae422f9ee403ad2d05fd981e9c91faa5119</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\dev-ref\xpp-syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54cc95eb51f619509a2859c64294bd05dd3e240a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91fe1ad176d34b3776eb8e4631be2e332dbe5035</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>X++ syntax</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic contains contains the syntax reference for X++.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>X++ syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic contains contains the syntax reference for X++.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>X++ Keywords</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The X++ keywords shown in the following table are reserved.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These keywords cannot be used for any other purpose.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Reserved word</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>More information</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>!<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Not.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>!=<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Inequality operator (not equal to).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Prefix on macro names.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How to: Use #define and #if to Test a Macro</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Binary AND.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Logical AND.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>(<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Function call operator, which indicates the beginning of the function call.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>)<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Function call operator, which indicates the end of the function call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Multiply.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The asterisk (<bpt id="p1">&lt;span class="code"&gt;</bpt><ept id="p1">*&lt;/span&gt;</ept>) is also used in X++ SQL.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One use is to signify all fields from the tables on a <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Another use is as a wildcard with the <ph id="ph1">&lt;code&gt;like&lt;/code&gt;</ph> operator, to signify 0 to many characters of any kind.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;like&lt;/code&gt;</ph> operator also uses the <bpt id="p1">&lt;span class="code"&gt;</bpt>?<ept id="p1">&lt;/span&gt;</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>character.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Binary XOR.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Binary OR.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Logical OR.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Not.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Plus.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Increment.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Additive assignment.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>,<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Comma operator.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Expressions separated by commas are evaluated left-to-right.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Minus.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Decrement operator.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Subtractive assignment.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>.<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Class member access operator, for example, <ph id="ph1">&lt;code&gt;formRun.run&lt;/code&gt;</ph> accesses the <ph id="ph2">&lt;code&gt;run&lt;/code&gt;</ph> method of an object of the class type <ph id="ph3">&lt;code&gt;FormRun&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Divide.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Escape in strings.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Escapes extra quotation marks, and certain letters such as <bpt id="p1">&lt;span class="code"&gt;</bpt>\t<ept id="p1">&lt;/span&gt;</ept> for tab.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Escape of keywords.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">&lt;span class="code"&gt;</bpt>str <ph id="ph1">@abstract</ph>;<ept id="p1">&lt;/span&gt;</ept> would fail to compile without the <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph2">@</ph><ept id="p2">&lt;/strong&gt;</ept> sign.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Also affects literal strings, by negating the effect of the \ escape character, and by enabling the string to span more than one line in the source code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The new line is represented by one character of hexadecimal 0x0A, which is commonly called a line feed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>No carriage return character of hexadecimal 0x0D is included, as in 0x0D0A.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>:<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Field declaration or label specifier.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The colon (<bpt id="p1">&lt;span class="code"&gt;</bpt>:<ept id="p1">&lt;/span&gt;</ept>) character is also used on the <ph id="ph1">&lt;code&gt;switch&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>::<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Used to call static (class) methods: <bpt id="p1">&lt;span class="code"&gt;</bpt>ClassName::methodName<ept id="p1">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>;<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Terminates statements.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Used in <ph id="ph1">&lt;code&gt;for&lt;/code&gt;</ph> loops or as a separator of statements.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Less than.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Left shift.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Less than or equal.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The argument to the left of <ph id="ph1">&amp;quot;</ph><bpt id="p1">&lt;strong&gt;</bpt><ph id="ph2">=</ph><ept id="p1">&lt;/strong&gt;</ept><ph id="ph3">&amp;quot;</ph> is set to the value of the argument to the right.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns true if both expressions are equal.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Greater than.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Greater than or equal.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Right shift.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>?<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Ternary operator.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The question mark (<bpt id="p1">&lt;span class="code"&gt;</bpt>?<ept id="p1">&lt;/span&gt;</ept>) character is also used by the <ph id="ph1">&lt;code&gt;like&lt;/code&gt;</ph> operator to signify exactly one character of any kind.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;like&lt;/code&gt;</ph> operator also uses the <bpt id="p1">&lt;span class="code"&gt;</bpt><ept id="p1">*&lt;/span&gt;</ept> character.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Ternary Operator (?)</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>[<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Array declarator, open.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Must be used with <ph id="ph1">&amp;quot;</ph><bpt id="p1">&lt;strong&gt;</bpt>]<ept id="p1">&lt;/strong&gt;</ept><ph id="ph2">&amp;quot;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>]<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Array declarator, close.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Must be used with <ph id="ph1">&amp;quot;</ph><bpt id="p1">&lt;strong&gt;</bpt>[<ept id="p1">&lt;/strong&gt;</ept><ph id="ph2">&amp;quot;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>{<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Indicates the beginning of a number of statements.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The last of these statements must be followed by a <ph id="ph1">&amp;quot;</ph><bpt id="p1">&lt;strong&gt;</bpt>}<ept id="p1">&lt;/strong&gt;</ept><ph id="ph2">&amp;quot;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>}<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Indicates the end of a number of statements.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;quot;</ph><bpt id="p1">&lt;strong&gt;</bpt>{<ept id="p1">&lt;/strong&gt;</ept><ph id="ph2">&amp;quot;</ph> must appear before the first of these statements.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>abstract<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Class and method modifier.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;strong&gt;</bpt>abstract<ept id="p1">&lt;/strong&gt;</ept> class cannot be constructed with the <bpt id="p2">&lt;strong&gt;</bpt>new<ept id="p2">&lt;/strong&gt;</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;strong&gt;</bpt>abstract<ept id="p1">&lt;/strong&gt;</ept> method cannot be called.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A table can also be modified as abstract by setting its <bpt id="p1">&lt;span class="ui"&gt;</bpt>Abstract<ept id="p1">&lt;/span&gt;</ept> property to <bpt id="p2">&lt;span class="ui"&gt;</bpt>Yes<ept id="p2">&lt;/span&gt;</ept> in the AOT, or by using the <ph id="ph1">&lt;code&gt;DictTable&lt;/code&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;span class="ui"&gt;</bpt>Abstract<ept id="p1">&lt;/span&gt;</ept> property defaults to <bpt id="p2">&lt;span class="ui"&gt;</bpt>No<ept id="p2">&lt;/span&gt;</ept>, and it cannot be set unless the table is extended by another table.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Each row in an abstract table must have a dependent row in a derived table.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that each row in an abstract table has a value greater than 0 (zero) in its <bpt id="p1">&lt;span class="ui"&gt;</bpt>InstanceRelationType<ept id="p1">&lt;/span&gt;</ept> property field.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>There are no other effects from marking a table as abstract.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Informally, programmers often use the term <bpt id="p1">&lt;span class="term"&gt;</bpt>concrete<ept id="p1">&lt;/span&gt;</ept> to describe a class that is non-<bpt id="p2">&lt;strong&gt;</bpt>abstract<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Method Modifiers Table Inheritance Overview</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>anytype<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The method can return any data type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Anytype</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>as<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Needed when you assign a base class variable to a derived class variable.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example, given a <ph id="ph1">&lt;code&gt;Derived&lt;/code&gt;</ph> class that <bpt id="p1">&lt;strong&gt;</bpt>extends<ept id="p1">&lt;/strong&gt;</ept> a <ph id="ph2">&lt;code&gt;Base&lt;/code&gt;</ph> class, the statement <ph id="ph3">&lt;code&gt;myDerived = myBase as Derived;&lt;/code&gt;</ph> avoids a compiler error by using the <bpt id="p2">&lt;strong&gt;</bpt>as<ept id="p2">&lt;/strong&gt;</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This keyword also applies when you assign a base table variable to a derived table variable.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Expression Operators: Is and As for Inheritance</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>asc<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An option on the <ph id="ph1">&lt;code&gt;order&lt;/code&gt;</ph> <ph id="ph2">&lt;code&gt;by&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;group&lt;/code&gt;</ph> <ph id="ph4">&lt;code&gt;by&lt;/code&gt;</ph> clause in a <ph id="ph5">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The sorting is ascending.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>at<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Specifies the position of a print window.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Print Statements</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>avg<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns the average of the fields from the rows specified by the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>break<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Immediate exit from code block.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Break Statements</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>breakpoint<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Represents a breakpoint that is set for debugging purposes.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To set a breakpoint in your code, write: <ph id="ph1">&lt;code&gt;breakpoint;&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>by<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Part of a reserved term, such as group by and order by.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>byref<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Specifies that the parameter being passed to the called method is being passed by reference (address), instead of by value.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Byref<ept id="p1">&lt;/strong&gt;</ept> is used in X++ when calling a .NET method that takes a parameter by reference (such as with the C# keywords <bpt id="p2">&lt;strong&gt;</bpt>out<ept id="p2">&lt;/strong&gt;</ept> or <bpt id="p3">&lt;strong&gt;</bpt>ref<ept id="p3">&lt;/strong&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>How to: Use the byref Keyword for CLR Interop.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>case<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Selection within a <ph id="ph1">&lt;code&gt;switch&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Switch Statements</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>catch<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Used in exception handling.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Exception Handling with try and catch Keywords</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>changeCompany<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Changes database settings to another company.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Change Company Design Pattern</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>class<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Declares a class.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Classes in X++</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>client<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Method modifier.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>container<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;container&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>continue<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Forces the next iteration of a loop.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Continue Statements</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>count<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Returns the number of records from the rows specified by the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>crossCompany<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Causes a <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statement to return data for all companies that the user is authorized to read from.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Cross-Company X++ Code Basics</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>date<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;date&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Dates</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>default<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Default case within <ph id="ph1">&lt;code&gt;switch&lt;/code&gt;</ph> statements.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Switch Statements</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>delegate<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A class member that is able to store multiple references to methods in other classes, and to call all those methods when prompted to do so.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A delegate can store references to various kinds of methods including the following:</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>static methods on X++ classes</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>instance methods on X++ classes</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>methods on .NET Framework classes</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Event Terminology and Keywords X++, C# Comparison: Event</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>delete_from<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Allows you to delete multiple records from the database at the same time.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>delete_from</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>desc<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An option on the <ph id="ph1">&lt;code&gt;order by&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id="ph3">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The sorting is descending.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>display<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Method modifier.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>div<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Integer division.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>do<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Beginning of a <ph id="ph1">&lt;code&gt;do...while&lt;/code&gt;</ph> loop.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Do...while Loops</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>edit<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Method modifier.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>else<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Conditional execution (<ph id="ph1">&lt;code&gt;if...else&lt;/code&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>if and if ... else Statements</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>eventHandler<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Must be used each time you either add or delete a method reference from a delegate by using the <bpt id="p1">&lt;span class="code"&gt;</bpt><ph id="ph1">+=</ph><ept id="p1">&lt;/span&gt;</ept> or <bpt id="p2">&lt;span class="code"&gt;</bpt><ph id="ph2">-=</ph><ept id="p2">&lt;/span&gt;</ept> operator.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For example: <bpt id="p1">&lt;span class="code"&gt;</bpt>myDelegate += eventHandler(OtherClass::myStaticMethod);<ept id="p1">&lt;/span&gt;</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Event Terminology and Keywords X++, C# Comparison: Event</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>exists<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">&lt;code&gt;join&lt;/code&gt;</ph> clauses in <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statements.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>extends<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A class or interface declaration clause.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If your class does not explicitly extend another class, your class is considered to extend the <ph id="ph1">&lt;code&gt;Object&lt;/code&gt;</ph> class (as if you had written <ph id="ph2">&amp;quot;</ph>extends Object<ph id="ph3">&amp;quot;</ph>).</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Creating a Subclass</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>false<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Boolean literal.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Booleans</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>final<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Class and method modifier.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>firstFast<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Used in <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statements to speed up the fetch for the first row.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>firstOnly<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Used in <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statements to fetch only the first record.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;firstOnly&lt;/code&gt;</ph> keyword does not guarantee that a maximum of one record is retrieved by an X++ SQL <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If the AOS can use the <ph id="ph1">&lt;code&gt;EntireTable&lt;/code&gt;</ph> cache to satisfy the data demands of the <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement, the <ph id="ph3">&lt;code&gt;firstOnly&lt;/code&gt;</ph> keyword is ignored.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax Set-based Caching</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>firstOnly10<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Same as <bpt id="p1">&lt;strong&gt;</bpt>firstOnly<ept id="p1">&lt;/strong&gt;</ept>, except returns 10 rows instead of one.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>firstOnly100<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Same as <bpt id="p1">&lt;strong&gt;</bpt>firstOnly<ept id="p1">&lt;/strong&gt;</ept>, except returns 100 rows instead of one.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>firstOnly1000<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Same as <bpt id="p1">&lt;strong&gt;</bpt>firstOnly<ept id="p1">&lt;/strong&gt;</ept>, except returns 1000 rows instead of one.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>flush<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Clears an entire table cache.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Here is the syntax for the <ph id="ph1">&lt;code&gt;flush&lt;/code&gt;</ph> statement: <ph id="ph2">&lt;code&gt;YourTable ytBuffer;&lt;/code&gt;</ph>  <ph id="ph3">&lt;code&gt;flush ytBuffer;&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Set-based Caching</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>for<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For loop iteration.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>For Loops</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>forceLiterals<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Used in <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statements to reveal actual values that are used in <ph id="ph2">&lt;code&gt;where&lt;/code&gt;</ph> clauses to the Microsoft SQL Server database at the time of optimization.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>forceNestedLoop<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Forces the SQL Server database to use a nested-loop algorithm to process a particular SQL statement containing a <ph id="ph1">&lt;code&gt;join&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>forcePlaceholders<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Used in <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statements to instruct the kernel not to reveal the actual values used in <ph id="ph2">&lt;code&gt;where&lt;/code&gt;</ph> clauses to the Microsoft SQL Server database at the time of optimization.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>forceSelectOrder<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Forces the SQL Server database to access the tables in a join in the specified order.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>forUpdate<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Selects records exclusively for update.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The operation to be performed on the records that are fetched is an update.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Depending on the underlying database, the records may be locked for other users.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>from<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Part of a <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;from&lt;/code&gt;</ph> clause specifies the table in which the columns exists.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>group<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Part of the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>if<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Conditional execution.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>if and if ... else Statements</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>implements<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Implements an interface.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Interfaces Overview</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>insert_recordset<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Copies data from one or more tables into one resulting destination table on a single server trip.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>insert_recordset</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>int<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;integer&lt;/code&gt;</ph> (32-bit).</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Integers</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>int64<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;integer&lt;/code&gt;</ph> (64-bit).</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Integers</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>interface<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Interface declaration.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Interfaces Overview</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>is<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Asks whether the object referenced by a class variable either inherits from the given class or is of the given class.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>For example, given a <ph id="ph1">&lt;code&gt;Derived&lt;/code&gt;</ph> class that <bpt id="p1">&lt;strong&gt;</bpt>extends<ept id="p1">&lt;/strong&gt;</ept> a <ph id="ph2">&lt;code&gt;Base&lt;/code&gt;</ph> class, the expression <ph id="ph3">&lt;code&gt;(myDerived is Base)&lt;/code&gt;</ph> returns <bpt id="p2">&lt;strong&gt;</bpt>true<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This keyword applies to class inheritance and table inheritance.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Expression Operators: Is and As for Inheritance</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>join<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Tables are joined on columns common to both tables.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>You can generate a single result set based on multiple tables through the use of joins.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>like<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Tests for matches by pattern, with wildcard symbols * and ?.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The string on the right side of the <ph id="ph1">&lt;code&gt;like&lt;/code&gt;</ph> operator must use four backslash characters to represent one backslash.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Examples follow:</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;span class="code"&gt;</bpt>(<ph id="ph1">&amp;quot;</ph><ph id="ph2">\\</ph><ph id="ph3">&amp;quot;</ph> like <ph id="ph4">&amp;quot;</ph><bpt id="p2">*</bpt><ph id="ph5">\\</ph><ept id="p2">*</ept><ph id="ph6">&amp;quot;</ph> )<ept id="p1">&lt;/span&gt;</ept> //Resolves to false.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;span class="code"&gt;</bpt>(<ph id="ph1">&amp;quot;</ph><ph id="ph2">\\</ph><ph id="ph3">&amp;quot;</ph> like <ph id="ph4">&amp;quot;</ph><bpt id="p2">*</bpt><ph id="ph5">\\</ph><ph id="ph6">\\</ph><ept id="p2">*</ept><ph id="ph7">&amp;quot;</ph>)<ept id="p1">&lt;/span&gt;</ept> //Resolves to true.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>maxof<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Returns the maximum of the fields from the rows specified by the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>minof<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Returns the minimum of the fields from the rows specified by the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>mod<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Returns the integer remainder of the left expression1 divided by the right expression2.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Informally this is sometimes called the modulo operator.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;((12 mod 7) == 5)&lt;/code&gt;</ph> is true.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>new<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Operator.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Creates an instance of an anonymous class that is assignment-compatible with the named class/interface reference variables, or allocates memory for an array.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>next<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Fetches the next record in a table.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>noFetch<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Indicates that no records are to be fetched at present.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>notExists<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">&lt;code&gt;join&lt;/code&gt;</ph> clauses in <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statements.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>null<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Symbolic constant.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>optimisticLock<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Forces a statement to run with optimistic concurrency control, even if a different value is set on the table.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>order<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Part of the <ph id="ph1">&lt;code&gt;order by&lt;/code&gt;</ph> clause in a <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>outer<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;span class="keyword"&gt;</bpt>outer join<ept id="p1">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>pause<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Halts the execution of a job.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The user is asked to state whether execution should continue.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Select Statements</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>pessimisticLock<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Forces a statement to run with pessimistic concurrency control, even if a different value is set on the table.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>print<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Allows you to display output on the screen.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Print Statements</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>private<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Method access modifier.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Method Access Control</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>protected<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Method access modifier.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Method Access Control</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>public<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Method access modifier.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Method Access Control</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>real<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;real&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Reals</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>repeatableRead<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Specifies that no other transactions can modify data that has been read by logic inside the current transaction, until after the current transaction completes.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>An explicit transaction completes at either <bpt id="p1">&lt;strong&gt;</bpt>ttsAbort<ept id="p1">&lt;/strong&gt;</ept> or at the outermost <bpt id="p2">&lt;strong&gt;</bpt>ttsCommit<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>For a stand-alone <bpt id="p1">&lt;strong&gt;</bpt>select<ept id="p1">&lt;/strong&gt;</ept> statement, the transaction duration is the duration of the <bpt id="p2">&lt;strong&gt;</bpt>select<ept id="p2">&lt;/strong&gt;</ept> command.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>However, the database sometimes enforces the equivalent of <bpt id="p1">&lt;strong&gt;</bpt>repeatableRead<ept id="p1">&lt;/strong&gt;</ept> in individual <bpt id="p2">&lt;strong&gt;</bpt>select<ept id="p2">&lt;/strong&gt;</ept> statements even without this keyword appearing in your X++ code (depending on how the database decides to scan the tables).</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the underlying relational database product.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>retry<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Used in exception handling.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Exception Handling with try and catch Keywords</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>return<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Exits from a method.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Declaration of Methods</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>reverse<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Records are returned in reverse order.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>select<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> clause designates which columns or views are shown in the result set.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Select Statements</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>server<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Method modifier.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>setting<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Used with the <bpt id="p1">&lt;span class="code"&gt;</bpt>update_recordset<ept id="p1">&lt;/span&gt;</ept> command.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>update_recordset</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Static methods may not refer to instance variables (only to static variables); may be invoked by using the class name rather than on an instance of the class (<ph id="ph1">&amp;quot;</ph><ph id="ph2">&lt;code&gt;MyClass.aStaticProcedure&lt;/code&gt;</ph><ph id="ph3">&amp;quot;</ph>).</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Method Modifiers</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>str<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Specifies a variable of type <ph id="ph1">&lt;code&gt;string&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Strings</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>sum<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Returns the sum of the fields from the rows specified by the <ph id="ph1">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id="ph2">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>super<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Calls the method that was overridden by the current method.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Table Methods</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>switch<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Switch selection statement.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Switch Statements</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>tableLock<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Obsolete; <bpt id="p1">&lt;strong&gt;</bpt>tableLock<ept id="p1">&lt;/strong&gt;</ept> is no longer available.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>this<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>A reference to the current instance of the class.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Used in X++ code inside a method of the class.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Used to reference <bpt id="p1">&lt;em&gt;</bpt>method<ept id="p1">&lt;/em&gt;</ept> members of the class, but not <bpt id="p2">&lt;em&gt;</bpt>field<ept id="p2">&lt;/em&gt;</ept> members of the class.<ph id="ph1">&lt;code&gt;public str getFullName()&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;span class="code"&gt;</bpt>{<ept id="p1">&lt;/span&gt;</ept>  <bpt id="p2">&lt;span class="code"&gt;</bpt>    // Next statement fails to compile without 'this.'.<ept id="p2">&lt;/span&gt;</ept></source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;    return this.concatenateFirstAndLastNames();&lt;/code&gt;</ph>  <bpt id="p1">&lt;span class="code"&gt;</bpt>}<ept id="p1">&lt;/span&gt;</ept></source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Loosely similar to the system variable that is named <ph id="ph1">&lt;code&gt;element&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">&lt;code&gt;element&lt;/code&gt;</ph> in form control methods to reference the containing form.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>For more information, see Using Variables with Forms.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>throw<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Used in exception handling.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Exception Handling with try and catch Keywords</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>true<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Boolean literal.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Booleans</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>try<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Used in exception handling.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Exception Handling with try and catch Keywords</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ttsAbort<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Discards all changes in the current transaction.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Transaction Integrity</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ttsBegin<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Marks the beginning of a transaction.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Transaction Integrity</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ttsCommit<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Marks the end of a transaction.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Transaction Integrity</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>update_recordset<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Allows the manipulation of row sets within one operation.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>update_recordset</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>validTimeState<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Filters rows that are retrieved from a valid time state table by an X++ SQL <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For example: <bpt id="p1">&lt;span class="code"&gt;</bpt>select validTimeState(myDateEffective) * from xMyTable;<ept id="p1">&lt;/span&gt;</ept> ...or...  <bpt id="p2">&lt;span class="code"&gt;</bpt>select validTimeState(myDateFrom, myDateTo) * from xMyTable;<ept id="p2">&lt;/span&gt;</ept></source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Effects of Valid Time State Tables on Read and Write Operations</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>void<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Identifies a method that does not return a value.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Declaration of Methods</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>where<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Part of a <ph id="ph1">&lt;code&gt;select&lt;/code&gt;</ph> statement.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;where&lt;/code&gt;</ph> clause specifies the conditions to be satisfied; that is, the rows that you want to include in the result.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Select Statement Syntax</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>while<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Iteration statement.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Executes a statement or block repeatedly when a test condition is true.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>While Loops while select Statements</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>window<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Allows you to alter the size of the output window.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Print Statements</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Expressions Syntax</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>An expression in X++ is used in either a mathematical or logical way.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Expressions are built on the data types of the language; that is, an expression returns a value of some type.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>This value can be used in calculations, assignments, conditional statements, and so on.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>EBNF Description of Expressions in X++</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Simple-expression <ph id="ph1">\[</ph>RelationalOperator Simple-expression <ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>RelationalOperator</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>!=</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>like</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Simple-expression</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Simple-expression <ph id="ph1">\[</ph><ph id="ph2"> +</ph></source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\]</ph> Term</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Compfactor { Mult-operator CompFactor }</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Mult-operator</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>div</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>mod</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>CompFactor</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph> !</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\]</ph> <ph id="ph2">\[</ph><ph id="ph3"> -</ph></source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><ph id="ph1">~ </ph><ph id="ph2">\]</ph> Factor</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Factor</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Literal</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Variable</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>FunctionCall</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>( If-expression )</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Select-expression</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>EnumName :: Literal</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Variable</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Identifier <ph id="ph1">\[</ph> <ph id="ph2">\[</ph> Expression <ph id="ph3">\]</ph> <ph id="ph4">\]</ph> <ph id="ph5">\[</ph> .</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Expression <ph id="ph1">\]</ph></source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>FunctionCall</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph> Expression (.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>::)</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>this .</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\]</ph> FunctionName ( argumentlist )</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If-expression</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Expression ?</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Expression : Expression</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Semantic restrictions apply on the preceding syntax.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>You cannot call any method using the :: operator.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Similarly, you cannot use the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> keyword without an active object; that is, if you are not within a method and so on.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Example of expression</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>An integer literal.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>NoYes::No</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>An enum-reference.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>A variable-reference.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Debtor::Find("1")</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>A static method-call (returns a customer variable).</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>(A <ph id="ph1">&amp;gt;</ph> 3 ?</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>true : false)</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>An if-expression that returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>(select CustTable where CustTable.Account == "100").NameRef</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>A select-expression.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Returns the nameref field in the customer table.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>This is a string.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;gt;</ph>= B</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>A logical expression.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>A + B</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>An arithmetic expression.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Sums A and B.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>A + B / C</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Calculates B/C, and then adds this to A.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>~A + this.Value()</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Sums binary not A and the result of the method-call Value on the object in scope (this).</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Debtor::Find("1").NameRef</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Returns the NameRef field of the found customer record.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Debtor::Find("1").Balance()</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>A method call to <ph id="ph1">`Balance`</ph> in the customer table (Debtor::Find returns a customer).</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Returns the balance of the customer with account number 1.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>EBNF Overview</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Extended Backus Naur Form (EBNF) is a metalanguage and is used in this guide to describe the language syntax.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>An EBNF definition consists of production rules, nonterminals, and terminals.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The key terms are shown in the following table.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Key terms</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Terminals</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Work<ph id="ph1">\_</ph>Team</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>A terminal is one character or a string of characters that never change.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Nonterminals</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>A nonterminal is a description of part of a valid sentence in the language that is defined either by a production rule or a textual description.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A nonterminal symbol can always be expanded to one or more terminal symbols.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Production rules</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Employee = Developer</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Tester</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>A production rule is a description of a valid sentence.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>A production rule defines how a nonterminal symbol on the left side expands into a number of terminal and nonterminal symbols on the right side.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>If you continue to expand all nonterminal symbols on the right side of the production rules in a particular grammar, you will eventually have a sequence of terminal symbols.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Work<ph id="ph1">\_</ph>Team = Manager Employee {, Employee}  Employee = Developer | Tester This example defines a Work<ph id="ph2">\_</ph>Team as consisting of a <ph id="ph3">`Manager`</ph> and one or more <ph id="ph4">`Employees`</ph>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Employee`</ph> is defined as being a <ph id="ph2">`Developer`</ph>, or a <ph id="ph3">`Tester`</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The symbols used in the example are described in the following table.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Special Symbols in EBNF</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">*</bpt>Expression<ept id="p1">*</ept>)</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Parentheses hold the symbols (terminals and nonterminals) together.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>They can be placed anywhere on the right side of a production rule.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Expression1<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Expression2<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Or: Specifies that all the items on one side of the</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>apply, or else all the items on the other side of the</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>apply.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph><bpt id="p1">*</bpt>Expression<ept id="p1">*</ept><ph id="ph2">\]</ph></source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Optional: The items between <ph id="ph1">\[</ph> and <ph id="ph2">\]</ph> are optional.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>All or none of the items in the brackets are included.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>{Expression}</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Repeat: The items between { and } are optional, but can be repeated as many times as necessary.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>For example, if the accessories you buy for your bicycle consist of a saddle, water-bottle holders, bells, and horns, and you could have either a bell or a horn, and zero, one, or more water bottle holders, and exactly one saddle, this could be expressed as: Bicycle<ph id="ph1">\_</ph>Accessories = saddle <ph id="ph2">\[</ph>bell | horn<ph id="ph3">\]</ph> {water<ph id="ph4">\_</ph>bottle<ph id="ph5">\_</ph>holders} This grammar defines the following possibilities: <ph id="ph6">`saddle`</ph>  <ph id="ph7">`saddle bell`</ph>  <ph id="ph8">`saddle horn`</ph>  saddle water<ph id="ph9">\_</ph>bottle<ph id="ph10">\_</ph>holder  saddle bell water<ph id="ph11">\_</ph>bottle<ph id="ph12">\_</ph>holder  saddle bell water<ph id="ph13">\_</ph>bottle<ph id="ph14">\_</ph>holder water<ph id="ph15">\_</ph>bottle<ph id="ph16">\_</ph>holder And so on.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>X++ Grammar</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>This topic shows the formal grammar of the X++ language.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>How to Interpret the Formal BNF Grammar</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>This section describes the grammar of X++ in Backus Naur Form (BNF).</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>A small example of BNF is described here.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>BNF code</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Interpretation</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Copy Code</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AA`</ph> is the name of a production rule.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`AA`</ph> requires a <ph id="ph2">`BB`</ph>, followed by a CC<ph id="ph3">\_</ph>SYM.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BB`</ph> is also a production rule.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`BB`</ph> is not a terminal.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BB`</ph> must be either a JJ<ph id="ph2">\_</ph>SYM or a KK<ph id="ph3">\_</ph>SYM.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Both JJ<ph id="ph1">\_</ph>SYM and KK<ph id="ph2">\_</ph>SYM are terminals because they are not the names of any other production rules.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>CC<ph id="ph1">\_</ph>SYM is also a terminal.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>In the BNF for X++ grammar, most of the terminals have <ph id="ph1">\_</ph>SYM as the suffix of their name.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The Formal X++ Grammar in BNF</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>This section contains the BNF that defines the grammar of X++.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Copy Code</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>X++ Language Syntax is Stricter in Microsoft Dynamics AX 2012</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Starting in Microsoft Dynamics AX 2012, the syntax rules for X++ are stricter than in previous versions of the product.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>This topic describes the syntax changes.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Table of X++ Syntax Changes</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The following table displays a list of syntax changes that start in Microsoft Dynamics AX 2012.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Area</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Syntax rule</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Before Microsoft Dynamics AX 2012</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Starting with Microsoft Dynamics AX 2012</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Escape</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The backslash character <bpt id="p1">&lt;span class="code"&gt;</bpt><ph id="ph1">\</ph><ept id="p1">&lt;/span&gt;</ept> is rejected by the compiler for unrecognized escapes</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The compiler used to accept <ph id="ph1">&amp;quot;</ph>31\12\2002<ph id="ph2">&amp;quot;</ph>, but during run time the literal string was interpreted as a different value.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Now the following X++ statement is rejected by the compiler: <bpt id="p1">&lt;span class="code"&gt;</bpt>str myDateString = <ph id="ph1">&amp;quot;</ph>31\12\2002<ph id="ph2">&amp;quot;</ph>;<ept id="p1">&lt;/span&gt;</ept> The proper syntax is <bpt id="p2">&lt;span class="code"&gt;</bpt><ph id="ph3">&amp;quot;</ph>31<ph id="ph4">\\</ph>12<ph id="ph5">\\</ph>2002<ph id="ph6">&amp;quot;</ph><ept id="p2">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Retry is no longer allowed outside of a catch block</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>It was possible to write the <bpt id="p1">&lt;strong&gt;</bpt>retry<ept id="p1">&lt;/strong&gt;</ept> keyword outside of a <bpt id="p2">&lt;strong&gt;</bpt>catch<ept id="p2">&lt;/strong&gt;</ept> block.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>This caused the program to end when the <bpt id="p1">&lt;strong&gt;</bpt>retry<ept id="p1">&lt;/strong&gt;</ept> was reached during runtime.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Now <bpt id="p1">&lt;strong&gt;</bpt>retry<ept id="p1">&lt;/strong&gt;</ept> can occur only inside a <bpt id="p2">&lt;strong&gt;</bpt>catch<ept id="p2">&lt;/strong&gt;</ept> block.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>For more information, see Exception Handling with try and catch Keywords.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Now you can throw and catch only <ph id="ph1">&lt;code&gt;int&lt;/code&gt;</ph> values</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>It was possible to throw scalar expressions like strings and dates, such as <ph id="ph1">&lt;code&gt;throw &amp;quot;hello world&amp;quot;;&lt;/code&gt;</ph>, and get no compile error.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>At runtime this was catch-able by a <ph id="ph1">&lt;code&gt;catch&lt;/code&gt;</ph> block that was not decorated with any specific value, such as <bpt id="p1">&lt;span class="code"&gt;</bpt>catch {print(<ph id="ph2">&amp;quot;</ph>Catch worked.<ph id="ph3">&amp;quot;</ph>);}<ept id="p1">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Now the only expression you can put on the <bpt id="p1">&lt;strong&gt;</bpt>throw<ept id="p1">&lt;/strong&gt;</ept> keyword is an <ph id="ph1">&lt;code&gt;int&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Often the best thing to throw is <bpt id="p1">&lt;span class="code"&gt;</bpt>Global::error(<ph id="ph1">&amp;quot;</ph>Explanation<ph id="ph2">&amp;quot;</ph>);<ept id="p1">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Often the best thing to catch is an element of the <ph id="ph1">&lt;code&gt;Exception&lt;/code&gt;</ph> enum.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>For more information, see Exception Handling with try and catch Keywords.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Downcasting can now be explicit.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>It is good programming practice to avoid implicit downcasts.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>It was possible to assign a base object to a derived object with the simple assignment operator, which is the equals sign (<ph id="ph1">&lt;code&gt;=&lt;/code&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The compiler accepted these assignments, but during run time any misuse of an improper downcast assignment caused an error.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Now all downcasts can be explicit.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>This is accomplished with the new <bpt id="p1">&lt;strong&gt;</bpt>as<ept id="p1">&lt;/strong&gt;</ept> expression operator.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Explicit downcasting with the <bpt id="p1">&lt;strong&gt;</bpt>as<ept id="p1">&lt;/strong&gt;</ept> keyword is illustrated by the following code example, in which <ph id="ph1">&lt;code&gt;ThingClass&lt;/code&gt;</ph> extends <ph id="ph2">&lt;code&gt;Object&lt;/code&gt;</ph>: <ph id="ph3">&lt;code&gt;ThingClass myThing = new ThingClass();&lt;/code&gt;</ph>  <ph id="ph4">&lt;code&gt;Object myObject = myThing;&lt;/code&gt;</ph>  <ph id="ph5">&lt;code&gt;myThing = myObject as ThingClass; // Explicit downcast, good.&lt;/code&gt;</ph> For more information, see Expression Operators: Is and As for Inheritance.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Override of a base method cannot be less accessible than the base method</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>It was possible to have a base method be decorated with <bpt id="p1">&lt;strong&gt;</bpt>protected<ept id="p1">&lt;/strong&gt;</ept> and yet have an override of that method be <bpt id="p2">&lt;strong&gt;</bpt>private<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Now when a base method is <bpt id="p1">&lt;strong&gt;</bpt>protected<ept id="p1">&lt;/strong&gt;</ept>, the override method must be either <bpt id="p2">&lt;strong&gt;</bpt>protected<ept id="p2">&lt;/strong&gt;</ept> or <bpt id="p3">&lt;strong&gt;</bpt>public<ept id="p3">&lt;/strong&gt;</ept>, and the override method cannot be <bpt id="p4">&lt;strong&gt;</bpt>private<ept id="p4">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>For more information, see Method Access Control.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Override of a base method must have the exact same return type and parameter signature as the base method</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Suppose a base class had a method that inputs a parameter of the <ph id="ph1">&lt;code&gt;Common&lt;/code&gt;</ph> table, which is the base of all tables.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>In a derived class it was possible to override the method to instead input <ph id="ph1">&lt;code&gt;MyTable&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Now the parameter signatures of the base method and its override method must match exactly.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Also, the return types must match exactly.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>For more information, see Overriding a Method.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Implementation of an interface method must match the parameter signature exactly</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Suppose an interface had a method that input a parameter of an <ph id="ph1">&lt;code&gt;int&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>In a class that implements the interface, it was possible to write the method with a parameter of a <ph id="ph1">&lt;code&gt;str&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Now the parameter signatures of the method must exactly match between the interface and the implementation of the method on a class.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Also, the return types must match exactly.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>For more information, see Interfaces Overview.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>A non-abstract base class that implements an interface cannot rely on a derived class for that implementation</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>When a base class implements an interface, it was possible for the class to not implement the methods of the interface if a derived class implemented the methods.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The only limitation was that the <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> constructor method could not be called on the class.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Now the compiler requires that every class that implements an interface must have or inherit a complete implementation of every method of the interface.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>For more information, see X++, C# Comparison: Object Oriented Programming.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept> modifier should not be applied to an interface</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>It was possible to write <bpt id="p1">&lt;span class="code"&gt;</bpt>static interface IMyInterface {}<ept id="p1">&lt;/span&gt;</ept>, but the <bpt id="p2">&lt;strong&gt;</bpt>static<ept id="p2">&lt;/strong&gt;</ept> modifier had no effect because it makes no sense in this context.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Sometime after Dynamics AX 2009 the X++ compiler might stop allowing the <bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept> modifier on interface declarations.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>For more information, see Interfaces Overview.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept> modifier must not be applied to the <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> constructor</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>It was possible to apply the <bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept> modifier to the declaration of the <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> constructor method.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>This caused <ph id="ph1">&lt;code&gt;new MyClass();&lt;/code&gt;</ph> to behave as a null operation.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Instead, the statement <bpt id="p1">&lt;span class="code"&gt;</bpt>MyClass::new();<ept id="p1">&lt;/span&gt;</ept> would call the static <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> method, but that would not construct an object.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Now the compiler issues an error when the <bpt id="p1">&lt;strong&gt;</bpt>static<ept id="p1">&lt;/strong&gt;</ept> modifier is applied to the <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>For more information, see Constructors.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Use an explicit access modifier on each method</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>In the past the menu item of <bpt id="p1">&lt;span class="ui"&gt;</bpt>AOT<ept id="p1">&lt;/span&gt;</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">&lt;span class="ui"&gt;</bpt>Classes<ept id="p2">&lt;/span&gt;</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">&lt;em&gt;</bpt>MyClass<ept id="p3">&lt;/em&gt;</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p4">&lt;span class="ui"&gt;</bpt>New Method<ept id="p4">&lt;/span&gt;</ept> created the method without any access modifier.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>This meant that the method was implicitly <bpt id="p1">&lt;strong&gt;</bpt>public<ept id="p1">&lt;/strong&gt;</ept>, although some X++ developers might not have been fully aware of the default.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>This created extra work later when a developer needed to modify the code in the method, because the developer had to research everywhere that the method might be called from.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Now the <bpt id="p1">&lt;span class="ui"&gt;</bpt>New Method<ept id="p1">&lt;/span&gt;</ept> menu item explicitly includes the <bpt id="p2">&lt;strong&gt;</bpt>private<ept id="p2">&lt;/strong&gt;</ept> keyword in its automatic declaration of the new method.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>The developer can type in a different modifier if appropriate.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>For more information, see Method Modifiers.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Parameters given in a call to a <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> constructor method must match the parameters on the <ph id="ph2">&lt;code&gt;new&lt;/code&gt;</ph> constructor method</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>It was possible to pass in multiple parameters on call to a <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> constructor method even when the <ph id="ph2">&lt;code&gt;new&lt;/code&gt;</ph> method was declared to input no parameters.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Now the call to the <ph id="ph1">&lt;code&gt;new&lt;/code&gt;</ph> method must exactly match the declared parameter signature of the <ph id="ph2">&lt;code&gt;new&lt;/code&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>For more information, see Creating a Subclass.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Parameters with default values must come after all parameters that do not have default values</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>It was possible to declare a method that takes in two parameters, and have only the first parameter offer a default value.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>There was no purpose to this.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>There was no way to accept the default of the first parameter because the call must specify a value for the second parameter and cannot omit the first parameter.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Now in the declaration of a method, any parameter that offers a default value must come after all the parameters that do not.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Using Optional Parameters</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Best Practices for Parameters</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Override of a method must have the same default parameters as the overridden method</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>It was possible to declare a method as <bpt id="p1">&lt;span class="code"&gt;</bpt>public void myMethod(int i=22){}<ept id="p1">&lt;/span&gt;</ept> and the override as <bpt id="p2">&lt;span class="code"&gt;</bpt>public void myMethod(){}<ept id="p2">&lt;/span&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>But if the override method was called as <ph id="ph1">&lt;code&gt;derivedObject(333);&lt;/code&gt;</ph> an error occurred.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Now the override method must list the same parameter types in the same sequence that they are declared in the overridden method.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>For more information, see Overriding a Method.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Preprocessor</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;strong&gt;</bpt>TODO<ept id="p1">&lt;/strong&gt;</ept> in a comment must be the first non-whitespace in the first line of the comment</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>The X++ preprocessor used to detect the <bpt id="p1">&lt;strong&gt;</bpt>TODO<ept id="p1">&lt;/strong&gt;</ept> keyword in a multi-line <bpt id="p2">&lt;span class="code"&gt;</bpt>/* ... */<ept id="p2">&lt;/span&gt;</ept> task comment even when the <bpt id="p3">&lt;strong&gt;</bpt>TODO<ept id="p3">&lt;/strong&gt;</ept> appeared after other text after the first comment line.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Now the X++ preprocessor detects the <bpt id="p1">&lt;strong&gt;</bpt>TODO<ept id="p1">&lt;/strong&gt;</ept> keyword only if <bpt id="p2">&lt;strong&gt;</bpt>TODO<ept id="p2">&lt;/strong&gt;</ept> appears on the first line of the comment, and as the first non-whitespace in the comment.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>For more information, see TODO Comments for X++ Developer Tasks.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>X++ Language Reference<ept id="p1">](xpp-language-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>