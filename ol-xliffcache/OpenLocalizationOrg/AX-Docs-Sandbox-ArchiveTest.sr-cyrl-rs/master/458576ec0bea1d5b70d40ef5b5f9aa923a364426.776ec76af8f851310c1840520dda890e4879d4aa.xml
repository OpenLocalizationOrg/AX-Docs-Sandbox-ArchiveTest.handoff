{"content":"---\n# required metadata\n\ntitle: Extensible control programming reference\ndescription: This topic provides reference content for extensible control programming.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer, IT Pro\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 50211\nms.assetid: 0a774c73-9e5d-4faa-8716-61476c1a9b6e\nms.search.region: Global\n# ms.search.industry: \nms.author: shshabazz\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Extensible control programming reference\n\n[!include[banner](../includes/banner.md)]\n\n\nThis topic provides reference content for extensible control programming.\n\nThis document describes the API, HTML, and JavaScript support for creating extensible controls.\n\n## Examples\nThis document contains small code snippets that show how to use each API that is documented. More complete examples of finished controls that leverage many of these APIs can be found on Github. [Extensible Control Examples on Github](http://github.com/Microsoft/Dynamics-AX-Extensible-Control-Samples)\n\n## Control block diagram\nThis high-level diagram illustrates the key components of an extensible control and how they interact with each other. Your extensible control solution will contain two X++ classes that implement your control. The runtime class implements the runtime data, presentation, and behavior of your control. The build class defines how your control is displayed in Form Designer, Property Window, and Application Explorer. [![ExtensibilityArchitecture](./media/extensibilityarchitecture.png)](./media/extensibilityarchitecture.png)\n\nX++\n---\n\nThe X++ API of your control is the Form-developer-facing API. Be sure to consider the APIs and behaviors you want to provide to the Form developer when designing the X++ APIs for your control.\n\n## Runtime: The X++ runtime class\nThe runtime class defines the public, developer-facing API for your control. It also contains the runtime logic for your control. The job of the runtime class is to maintain the state of the control via the control’s properties.\n\n## Runtime: Class declaration\nDeclare an X++ class that extends **FormTemplateControl** or a type derived from **FormTemplateControl***. ***FormTemplateControl** contains basic properties that are necessary for every control, such as the Template ID and the Resource Bundle. The following example extends the base control class, **FormTemplateControl**.\n\n    class MyControl extends FormTemplateControl\n\n## Runtime: FormControlAttribute\nYou must apply the **FormControlAttribute** attribute to the X++ class declaration.\n\n    [FormControlAttribute(<Template ID>, <Resource Bundle Path>, <Build class name>))]\n\nYou must supply the following arguments:\n\n-   **Template ID**: A string that specifies the ID of the template. The Template ID is the JavaScript class name & the HTML element ID of the control. By convention, the TemplateID matches the class name of the control's runtime class.\n-   **Resource Bundle Path**: A string that specifies the path to the resource bundle. The Resource Bundle Path is the web path where the main HTM files are located. At runtime, the Client framework will load the HTM file specified by the Resource Bundle Path. At runtime, the Client framework will search the Resource Bundle for the HTML element with an ID matching the specified Template ID. At runtime, the Client framework will instantiate the JavaScript class specified by the Template ID. This path is relative to the root of the web directory.\n-   **Build class name**: A string that specifies the name of the build class. The build class name is the X++ class that determines the design-time behavior. At design time, the Visual Studio framework reflects over this attribute and loads the specified X++ class as the designer class. At runtime, the X++ framework will instantiate the specified X++ class as the build class in the super of applyBuild().\n\nThe following example shows a typical class and attribute declaration for a control named \"MyControl\".\n\n    [FormControlAttribute('MyControl', '/resources/html/MyControl', classstr(MyControlBuild))]\n    class MyControl extends FormTemplateControl\n\n## Runtime: FormCommandAttribute\nThe **FormCommandAttribute** is applied to a method in your control class, which allows the method to be called from a control’s JavaScript class. A method with this attribute applied is called a **command.** Use the **FormCommandAttribute** on only the X++ methods that need to be accessed directly from the control’s JavaScript class. An X++ method serving as a command can only accept string arguments. The method must perform the necessary operations to serialize or deserialize the string arguments into other types. The **FormCommandAttribute** has no effect on the behavior of the X++ method when the method is used from within X++. The **FormCommandAttribute** exposes the X++ method as an external endpoint that is accessible from JavaScript. As such, every command should be threat modeled and tested for exploits, and should perform validation on all of its arguments. The underlying X++ method should be declared private so that it is not accessible from X++. If X++ code needs to access this method’s behavior, then a separate X++ method should be declared as public without the **FormCommandAttribute.** This public method should contain any shared code that is needed by both X++ and JavaScript. The private X++ method with the **FormCommandAttribute** can then call this public method to access the shared code. This practice allows the command to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic. You supply the following arguments to the **FormCommandAttribute** constructor:\n\n-   **Name**: A required string that specifies the name of the command. A few best practices for naming Properties:\n    -   Capitalize the first letter, and use PascalCase.\n    -   Use a verb in the name.\n    -   Include the Property name if the Command is used to read/write a FormProperty (ex: Set\\_&lt;PropertyName&gt;)\n    -   Do not use any of the names of inherited JavaScript properties.\n-   **Execute immediate**: An optional boolean that specifies whether calls to this command are deferred or require immediate execution. By default, commands have **Execute immediate** set to **true,** so calls are not deferred. Most commands likely require immediate execution because their X++ logic must run before allowing the user to complete their next action. However, commands that have no side-effects on the user’s ability to take their next action can likely be safely deferred to gain a performance benefit. For commands that can be deferred, set Execute immediate to **false** to reduce network chattiness.\n\nThe following example declares a command with the name of \"SetText\".\n\n    [FormCommandAttribute(\"SetText\")]\n    private void setText(str value)\n    {\n        // Add implementation code here.\n    }\n\n## Runtime: FormPropertyAttribute\nThe **FormPropertyAttribute** is applied to a method in your control class, which allows an X++ method to be called as a **FormProperty** getter/setter from the control's JavaScript class. A method with this attribute applied is called a **property.** Only use the **FormPropertyAttribute** on those X++ methods which need to be accessed directly from the control’s JavaScript class. The **FormPropertyAttribute** has no effect on the behavior of the X++ method when the method is used from within X++. Every property exposes an endpoint to the browser. As such, every property should be threat modeled and tested for exploits. The underlying X++ method should be declared private so that it is not accessible from other X++ code. If other X++ code needs to access the property, then declare a separate public X++ method without the **FormPropertyAttibute,** and move the shared property logic to this method. Then call this method from the private X++ method with the **FormPropertyAttribute. This practice allows the property to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.** The underlying X++ method must accept and return the desired type of the property. If the desired type if an EDT, the property must accept and return the base type of the EDT. The supported property types are:\n\n-   [X++ primitive types](https://msdn.microsoft.com/en-us/library/aa602290.aspx)\n-   [X++ data contracts](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute(v=vs.110).aspx) (whose members are also supported types)\n-   [X++ List](https://msdn.microsoft.com/en-us/library/list.aspx) (whose items are also supported types)\n\nYou supply the following arguments to the **FormPropertyAttribute** constructor:\n\n-   **FormPropertyKind:** A required **FormProperyKind** value that specifies the type of the property. Use **FormPropertyKind::Value** for Properties not bound to a data source field, and use **FormPropertyKind::BindableValue** for properties that may be bound to a data source field.\n-   **Name:** A required string that specifies the name of the property. A few best practices for naming properties:\n    -   Capitalize the first letter, and use PascalCase.\n    -   Do not use any of the names of inherited JavaScript properties\n-   **Read only**: An optional boolean that specifies whether this property is writable from the control’s JavaScript class. By default, properties have **Read only** set to **false,** so they are writeable. This argument does not affect the ability to write to this property from X++. To make the X++ method read only, remove all method arguments from the method declaration. A majority of properties should not be writable from the control’s JavaScript class. Because most property values require validation, a command should be used as a setter for the property so that validation logic is can be run before the backing property is set.\n-   **Execute immediate**: An optional Boolean that specifies whether writes to this property are deferred or require immediate execution. By default, properties have **Execute immediate** set to **false,** so writes are deferred. Because the majority of properties should not be writeable form the control’s JavaScript class, the **Execute immediate** flag defaults to **false** and provides performance benefits. Even in the case of properties that are writable from the control’s JavaScript class, the performance side effects of immediate execution should be carefully considered before enabling the behavior.\n\nThe following example shows a typical property declaration. Most properties share the same boilerplate code for getting/setting, as shown below. The textProperty variable is the backing FormProperty field for this property.\n\n```\n[FormPropertyAttribute(FormPropertyKind::Value, \"Text\", true)\nprivate void parmText(str value = textProperty.parmValue())\n{\n        if(!prmisDefault(value))\n        {\n                textProperty.setValueOrBinding(value);\n        }\n        return textProperty.parmValue();\n}\n```\n\n## Runtime: FormProperty\n##### Behavior\n\n**FormProperty** is an X++ [derived type](https://msdn.microsoft.com/en-us/library/esd9wew8(v=vs.100).aspx) used by the control framework for the synchronization of property values between X++ and JavaScript. **FormProperty** objects are considered the backing fields used internally by properties. Each **FormProperty** is typically used in 4 places throughout a control’s X++ runtime class:\n\n1.  The **FormProperty** is declared, usually right below the class declaration\n2.  The **FormProperty** is instantiated in the **new** method of the class\n3.  The **FormProperty** is initialized in the **applyBuild** method of the class\n4.  The **FormProperty** is read and written in the X++ method for the property\n\nThe following example shows a **FormProperty** being used in a typical controls’ X++ runtime class.\n\n```\n[FormControlAttribute(\"MyControl\", \"/resources/html/MyControl\", classstr(BuildMyControl))]\nclass MyControl extends FormTemplateControl\n{             \n        FormProperty textProperty;          \n     \n        public void new(FormBuildControl _build, FormRun _formRun)\n        {\n                super(_build, _formRun);\n                this.setTemplateId(\"MyControl\");\n                this.setResourceBundleName(\"/resources/html/MyControl\");\n                textProperty = this.addProperty(\n                methodStr(MyControl, parmText), Types::String);\n        }\n\n        public void applyBuild()\n        {\n                BuildMyControl build;\n                super();\n                build = this.build();\n                if(build)\n                {\n                        this.parmText(build.Text());\n                }\n        }\n\n        [FormPropertyAttribute(FormPropertyKind::Value, \"Text\", true)\n        private void parmText(str value = textProperty.parmValue())\n        {\n                if(!prmisDefault(value))\n                {\n                        textProperty.setValueOrBinding(value);\n                }\n                return textProperty.parmValue();\n        }\n}\n```\n\n## Runtime: new method\nThe **new** method on a control’s X++ runtime class is called as a part of instantiating the control on a form. For the details on when the **new** method is called in the form lifecycle, please see the Control Lifecycle Diagrams. This method is used for instantiation of a control’s FormProperties and setting the control’s Template ID and Resource Bundle Path. See typical use of the **new** method in the example for FormProperty.\n\n## Runtime: applyBuild method\nThe **applyBuild** method on a control’s X++ runtime class is called as a part of instantiating the control on a form. For the details on when the **applyBuild** method is called in the form lifecycle, please see the Control Lifecycle Diagrams. This method is used for initialization of a control’s FormProperties to their default values, or to the values specified by the form developer who placed the control on the form. See typical use of the **applyBuild **method in the example for FormProperty.\n\n## Runtime: FormBindingUtil::initbinding method\nThe **FormBindingUtil** is an API provided by the control framework. It is used to bind FormProperties to data fields and data methods on a data source. The following example binds the data field with name \"Value\" on the data source with name \"DataSource1\" to the textProperty FormProperty of the runtime class.\n\n    [FormControlAttribute(\"MyControl\", \"/resources/html/MyControl\", classstr(BuildMyControl))]\n    class MyControl extends FormTemplateControl\n    {\n            FormProperty textProperty;\n            public void new(FormBuildControl _build, FormRun _formRun)\n            {\n                    super(_build, _formRun);\n                    this.setTemplateId(\"MyControl\");\n                    this.setResourceBundleName(\"/resources/html/MyControl\");\n                    textProperty = this.addProperty(\n                    methodStr(MyControl, parmText), Types::String);\n            }\n\n            public void applyBuild()\n            {\n                    BuildMyControl build;\n                    super();\n                    build = this.build();\n                    if(build)\n                    {\n                            this.parmText(FormBindingUtil::initBinding(\n                            \"DataSource1\", \"Value\", this.formRun()));\n                    }\n            }\n\n            [FormPropertyAttribute(FormPropertyKind::Value, \"Text\", true)\n            private void parmText(str value = textProperty.parmValue())\n            {\n                    if(!prmisDefault(value))\n                    {\n                            textProperty.setValueOrBinding(value);\n                    }\n                    return textProperty.parmValue();\n            }\n    }\n\n## Design time: The X++ build class\nThe build class defines the design time behavior of your control. This class determines which properties appear in the property sheet, and how the control behaves when it is modeled in the Form designer. The job of the design time class is to capture design time information for the runtime class to access later on.\n\n## Design time: Class declaration & FormDesignControlAttribute\nThe FormDesignControlAttribute is necessary for the control to appear in the Visual Studio Form designer when right-clicking on the design node of the form. If the FromDesignControlAttribute is missing, then the control can only be added to a form via imperative X++ code (i.e. via the addControlEx method on the form).\n\n    [FormDesignControlAttribute(\"MyControl\")]\n    class MyControlBuild extends FormBuildControl\n    {\n            \n    }\n\n## Design time: FormDesignPropertyAttribute\nPlacing this attribute on a method in the design time class will result in a new property with the name specified by the first argument (and in the section specified by the second argument) appearing the property sheet for this control, with the corresponding X++ method operating as the getter/setter for the property.\n\n    [FormDesignControlAttribute(\"MyControl\")]\n    class MyControlBuild extends FormBuildControl\n    {\n            str text; \n         \n            [FormDesignPropertyAttribute(\"Text\", \"Data\")]\n            public str Text(str value = text)\n            {\n                    if(!prmisDefault(value))\n                    {\n                            text = value;\n                    }\n                    return text;\n            }\n    }\n\n## Design time: FormDesignProperty** **Attribute\nThere are a number of FormDesignProperty attributes which may be applied alongside the standard FormDesignPropertyAttribute for specialized behavior in the property sheet. The specialized behavior includes enabling the property as a combobox which allows selecting from a list of a values. The different types of lists that used are enumerated below. Whenever the user selects an item from the combobox, the string name of that item is passed into the X++ method getter/setter with the attribute.\n\n-   \\[FormDesignPropertyDataSourceAttribute\\] - Shows a list of the data sources on the form.\n-   \\[FormDesignPropertyDataFieldAttribute(&lt;data source name&gt;)\\] - Shows a list of the data fields on the specified data source.\n-   \\[FormDesignPropertyDataMethodAttribute(&lt;data source name&gt;)\\] - Shows a list of the data methods on the specified data source.\n-   \\[FormDesignPropertyFieldGroupAttribute(&lt;data source name&gt;)\\] - Shows a list of the field groups on the specified data source.\n-   \\[FormDesignPropertyExtendsClassAttribute(&lt;class name&gt;)\\] - Shows a list of the classes which extend the specified class.\n-   \\[FormDesignPropertyImplementsAttribute(&lt;interface name&gt;)\\] - Shows a list of the classes which implement the specified interface.\n-   \\[FormDesignPropertyReferenceAttribute(&lt;FormDesignPropertyReferenceType::&lt;type&gt;)\\] - Shows a list of the specified AOT artifacts with the given type. The supported types are:\n    -   Table\n    -   View\n    -   Map\n    -   EDT\n    -   BaseEnum\n    -   Query\n    -   Class\n    -   Form\n    -   MenuItemDisplay\n    -   MenuItemOuput\n    -   MenuItemAction\n    -   Tile\n    -   KPI\n\nThe following example shows standard properties used to allow a Form developer to specify the Data Source and Data Field for the design time class.\n\n    [FormDesignControlAttribute(\"MyControl\")]\n    class MyControlBuild extends FormBuildControl\n    {\n            str dataSource; \n            str dataField;\n            str dataMethod;\n     \n            [FormDesignPropertyAttribute(\"Data source\", \"Data\"),\n            FormDesignPropertyDataSourceAttribute]\n            public str DataSource(str value = dataSource)\n            {\n                    if(!prmisDefault(value))\n                    {\n                            dataSource = value;\n                    }\n                    return dataSource;\n            }\n\n            [FormDesignPropertyAttribute(\"Data Field\", \"Data\"),\n            FormDesignPropertyDataFieldAttribute(methodStr(MyControlBuild, DataSource))]\n            public str DataField(str value = dataField)\n            {\n                    if(!prmisDefault(dataField))\n                    {\n                            dataField = value;\n                    }\n                    return dataField;\n            }\n\n            [FormDesignPropertyAttribute(\"Data Method\", \"Data\"),\n            FormDesignPropertyDataMethodAttribute(methodStr(MyControlBuild, DataSource))]\n            public str DataMethod(str value = dataMethod)\n            {\n                    if(!prmisDefault(dataMethod))\n                    {\n                            dataMethod = value;\n                    }\n                    return dataMethod;\n            }\n    }\n\nA control with a design time class like the one above can then bind to the specified data source and data field inside of the applyBuild method, as show below.\n\n    public void applyBuild()\n    {\n            BuildMyControl build;\n            super();\n            build = this.build();\n            if(build)\n            {\n                    this.parmText(FormBindingUtil::initBinding(\n                    build.DataSource(), build.DataField(), this.formRun(), build.DataMethod()));\n            }\n    }\n\nIf you supply both a data field and data method to FormBindingUtil::initBinding, the data field binding will override the data method binding.\n\n## HTML\nHTML: Framework attributes\n--------------------------\n\nThe following section documents the HTML attributes that are used in the control framework for control development.\n\n### data-dyn-bind\n\n**data-dyn-bind**, the data binding attribute, standardizes many common DOM manipulations - such as modifying an element’s attributes, properties and CSS, or handling DOM events - through a declarative HTML-based API. The data binding attribute allows for these behaviors without requiring complex JavaScript. Using the data binding attribute rather than writing complex JavaScript can save the control developer valuable time by making things such as designing, debugging and maintaining the control much easier. However, complex JavaScript is still available when scenarios require its use. The data binding attribute binds HTML element behaviors to values supplied by the control developer. The values supplied can be simple JavaScript [variables](http://www.w3schools.com/js/js_variables.asp), JavaScript [comparison](http://www.w3schools.com/js/js_comparisons.asp) or [arithmetic](http://www.w3schools.com/js/js_arithmetic.asp) expressions, JavaScript [functions](http://www.w3schools.com/js/js_functions.asp) and JSON [objects](https://www.w3schools.com/js/js_json_objects.asp). The values supplied can also be observable variables, created using the APIs described in this document. The way in which the supplied value is bound to the HTML element is determined by the binding handler that is used with the data binding attribute. A list of all supported binding handlers is provided in this document. The data binding attribute requires the following syntax when used with any binding handler. The syntax for **data-dyn-bind** is:\n\n    data-dyn-bind=\"[first binding handler]: [value to bind to]\"\n\nThe data binding attribute accepts a comma-separated list of binding handler-value pairs, so you can supply more than one binding handler to the binding attribute at a time. The following example binds the **visible** property of the div element to true, and binds the **textContent** property of the div element to \"Hi\".\n\n    data-dyn-bind=\"text: 'Hi', visible: true\"\n\nThe data binding attribute is a custom HTML attribute understood by the control framework. The data binding attribute can be applied to any HTML element. Some HTML elements may not have the behavior which the binding handler modifies. For example, using the text binding handler on an **&lt;svg&gt;** element will not show the text since the **&lt;svg&gt;** element does not have a textContent property. The control framework reads and executes the data bindings specified in the control’s template at runtime. The lifecycle for the control in the browser can be summarized as follows:\n\n1.  The control’s HTM file is loaded by the browser.\n2.  Any script or resource files referenced in the HTM file are also loaded by the browser. Steps 1 and 2 are executed only once during a user’s session, even if there are multiple instances of the control.\n3.  The JavaScript class's constructor for the control is call and passed with the X++ properties for the control instance.\n4.  The control’s template is copied from the HTM file and into the browser’s memory.\n5.  HTML elements in the control’s template are processed for data binding in hierarchical order (depth first), and data bindings on each element are executed in order from left-to-right\n6.  The final HTML, including the original data binding attributes as well as any other markup added by the binding handlers or by the framework, is added to the browser’s DOM and rendered for the user to see.\n7.  Later, when the value of an observable changes, any binding handlers subscribed to the observable are re-executed and the live DOM is updated in real-time.\n\n## HTML: Binding handlers\n### attr\n\nThe **attr** binding handler applies the supplied HTML attribute and value to the element. For a list of HTML attributes see [W3 Schools – HTML Attributes](http://www.w3schools.com/html/html_attributes.asp). The arguments are passed in as an object array. Each argument is dual-valued. The first value is the name of the attribute, and the second value is the value of the attribute.\n\n-   **Name**: a string that specifies the desired name of the attribute to create.\n-   **Value or Expression:** a string that specifies the value to set on the attribute. If an expression is supplied, the value returned by evaluating the expression will be used.\n\nThe following example creates the title and name attributes and sets their value.\n\n```\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"attr: {title: 'Hello', name: 'Greeting'}\"></div>\n\n<!-- the markup in the browser after the binding handler is applied -->\n<div title=\"Hello\" data-dyn-bind=\"attr: {title: 'Hello', name: 'Greeting'}\" name=\"Greeting\"></div>\n```\n\nThe following example uses expressions and functions. However, using JavaScript functions as in-line HTML like the example below is not recommended.\n\n```\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"attr: {title: false? 'Hello':'World', name: function(){return 'Greetings';}()}\"></div>\n\n<!-- the markup in the browser after the binding handler is applied -->\n<div title=\"World\" data-dyn-bind=\"attr: {title: false? 'Hello':'World', name: function(){return 'Greetings';}()}\" name=\"Greetings\"></div>\n```\n\n#### click\n\n##### Behavior\n\nSubscribes the supplied function to the click event on the element. For more information on subscribing to the click event see [jQuery – click()](http://api.jquery.com/click/).\n\n##### Arguments\n\n###### EventHandler (function)\n\nThe function to call when the event is raised.\n\n##### Example 1\n\nThe following example shows an alert message “Hello” when the element is clicked.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.ElementClicked = function (event) {\n/* handle the click event */\nalert('Hello');\n};\n...\n</script>\n\n<!-- In your control’s template HTM file -->\n<div data-dyn-bind=\"click: $control.ElementClicked\"></div>\n```\n\nThe following example prevents the click event on child elements from bubbling up to parent elements. The example below will show only one alert with message “Hello” when the child element is clicked.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.ParentElementClicked = function (event) {\n        /* handle the click event */\n        alert('Hi');\n};\n\nself.ElementClicked = function (event) {\n        /* prevents the event form bubbling up to parent elements*/\n        event.stopPropagation();\n\n        /* handle the click event */\n        alert('Hello');\n};\n\n...\n</script>\n\n<!-- In your control’s template HTM file -->\n<div data-dyn-bind=\"click: $control.ParentElementClicked\">\n<div data-dyn-bind=\"click: $control.ElementClicked\"></div>\n</div>\n```\n\nThe following example prevents the browser default behavior from executing. For anchor tags, the default hyperlink behavior is prevented, so the browser will not navigate to the link when the element is clicked.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.LinkClicked = function (event) {\n        /* handle the click event */\n        alert($dyn.format('Navigation to ' + {0} + ' was prevented', $(event.target).attr(\"href\")));\n\n        /* prevents the default event behavior */\n        event.preventDefault();\n};\n</script>\n\n<!-- In your control’s template HTM file -->\n<a href=\"http://www.microsoft.com\" data-dyn-bind=\"click: $control.LinkClicked\">Click here</a>\n```\n\n#### css\n\n##### Behavior\n\nAdds or removes the specified CSS class name(s) to the element, based on the specified condition(s). Note that expressions supplied to the binding handler are only executed once.\n\n##### Arguments\n\nThe arguments are passed in as an object array. Each argument is dual-valued. The first value is the Class name, and the second value is the Condition.\n\n###### Class name (string)\n\nThe CSS class name to add to the element.\n\n###### Condition (expression)\n\nThe condition on which to add the CSS class name. If the condition evaluates to true, the CSS class name is added. If the condition evaluates to false, the CSS class name is removed. If a supplied condition takes a dependency on an observable (via $dyn.value), then the condition will be re-evaluated whenever the observable value changes, and the associated CSS class name will be added/removed based on the new condition. The following example adds the CSS class names \"red\", \"green\", and \"yellow\".\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.red = function () { return true; };\nself.yellow = $dyn.observable(true);\n...\n</script>\n\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"css: {green: true, red: $control.red, yellow: $dyn.value($control.yellow)}\"></div>\n\n<!-- the markup in the browser after the binding handler is applied -->\n<div class=\"green red yellow\" data-dyn-bind=\"css: {green: true, red: $data.red, yellow: $dyn.value($control.yellow) }\"></div>\n```\n\n#### event\n\n##### Behavior\n\nSubscribes the supplied event handler to the specified DOM event. For a list of supported DOM events, see [jQuery - Event](http://api.jquery.com/Types/#Event).\n\n##### Arguments\n\nFor details on the arguments to the event binding handler, see [jQuery - .bind()](http://api.jquery.com/bind/). The following example subscribes to the mouseover event and shows an alert when the element is hovered.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.elementHovered = function (event) { alert($dyn.format('{0}',$(event.target).text()))};\n...\n</script>\n\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"event: {mouseover: $data.elementHovered}\">Greetings!</div>\n```\n\n#### foreach\n\n##### Behavior\n\nRepeats the content of the child element, updating the binding context of each child based on the supplied data. Supply ***only one*** child element inside of the element with the **foreach** binding. This one element is the element that will be cloned and repeated. Any other additional elements or content will be removed when the binding is applied. Binding handlers are executed in the order in which they appear on the element. Since the **foreach** binding changes the binding context, it is a best practice to always place the **foreach** binding after all other bindings on the element. This will ensure that preceding bindings are not affected by the binding context created by the **foreach** binding. To avoid performance issues, be careful to not create unintentional dependencies on observables inside of your **foreach.** Do not access an observable in the array using **$dyn.value** from within the child elements of the **foreach,** as the **foreach** binding has already subscribed to the observables in the array. Instead, use **$dyn.peek** to access an observable’s value once without creating a subscription.\n\n##### Arguments\n\n###### Data (array list or JSON object)\n\nThe list of items to bind the child element to. If an array list is supplied, the binding context is an item in the array. If a JSON object array is supplied, the binding context is one of the object’s properties.\n\n##### Scope variables\n\nWhen inside the scope of the **foreach,** the following scope variables are useful and can be used on the repeatable child element: $data, index, control, your own scope variables. The following example uses **foreach** to render a span element for each color in the array.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.colors = ['Red','Blue','Green'];\n...\n</script>\n\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"foreach: $control.Colors\">\n<span data-dyn-bind=\"text: $data\"></span>\n</div>\n\n<!-- the markup in the browser after the binding handler is applied -->\n<div data-dyn-bind=\"foreach: $control.colors\">\n<span data-dyn-bind=\"text: $data\">Red</span>\n<span data-dyn-bind=\"text: $data\">Blue</span>\n<span data-dyn-bind=\"text: $data\">Green</span>\n</div>\n```\n\nThe following examples shows a nested **foreach** binding. This example showcases how to use the index framework scope variable and custom scope variables to access the binding context from the parent element.\n\n```\n    // In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.colors = [\n{\n        Name: 'Red',\n        Variants: ['Maroon','Burgundy','Sunrise']\n},\n{\n        Name: 'Green',\n        Variants: ['Sage','Forest','Lime']\n},\n{\n        Name: 'Blue',\n        Variants: ['Navy','Sky','Ice']\n}\n];\n...\n</script>\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"foreach: $control.colors\">\n<div data-dyn-bind=\"vars: {$BaseIndex: $index, $BaseColor: $data.Name}\">\n<div data-dyn-bind=\"foreach: $data.Variants\">\n<div data-dyn-bind=\"text: $BaseIndex+'.'+$index+' '+$data+' '+$BaseColor\"></div>\n</div>\n</div>\n</div>\n<!-- the markup in the browser after the binding handler is applied -->\n<div data-dyn-bind=\"foreach...\">\n<div data-dyn-bind=\"vars...\">\n<div data-dyn-bind=\"foreach...\">\n<div data-dyn-bind=\"vars...foreach...\">\n<div data-dyn-bind=\"text...\">1.1 (0.2552) X++ Language</div>\n<div data-dyn-bind=\"text...\">1.2 (0.7) Applications</div>\n</div>\n</div>\n<div data-dyn-bind=\"vars...\">\n<div data-dyn-bind=\"text...\">2. (600) Technology</div>\n<div data-dyn-bind=\"vars... foreach...\">\n<div data-dyn-bind=\"text...\">2.1 (600.343) Microsoft Coporation</div>\n<div data-dyn-bind=\"text...\">2.2 (600.117) Enterprise Resource Planning</div>\n</div>\n</div>\n</div>\n```\n\n#### if\n\n##### Behavior\n\nConditionally renders and binds the child elements of the element with this binding. This binding handler only operates on the child elements. It will not show/hide the element with the binding, nor will this binding show/hide the text content of the element with the binding. Bindings on the child elements will only be executed if the condition evaluates to true. Once the bindings on child elements have been evaluated once they will remain data bound even if the condition changes to false. This means that any calculations caused by bindings on child elements will continue to operate even after the child elements are hidden. Consider this when evaluating the performance of your control.\n\n##### Arguments\n\n###### Condition (expression)\n\nDetermines whether to render the children elements. The following example conditionally binds the **show** and **text** elements.\n\n```\n    // In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.show = $dyn.observable(false);\nself.text = \"Hello\";\n...\n</script>\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"if: $control.show\">\n<div data-dyn-bind=\"text: $control.text\"></div>\n</div>\n<!-- the markup in the browser after the binding handler is applied -->\n<div data-dyn-bind=\"if: $control.show\">\n</div>\n// Later on, the value of the “show” observable changes to true\n<script>\n...\nself.show(true);\n...\n</script>\n<!-- the markup in the browser after the binding handler is re-applied due to the observable value changing -->\n<div data-dyn-bind=\"if: $control.show\">\n<div data-dyn-bind=\"text: $control.text\">Hello</div>\n</div>\n```\n\n#### sizing\n\n##### Behavior\n\nSpecifies the height and width of the control. The sizing binding handler should always be applied to the root element of the template (the element that has the id attribute), and supplied the height and width values from the X++ instance of the control by using the $dyn.layout.sizing helper function. See Example 1.\n\n##### Arguments\n\nThe arguments are passed an object containing height and width properties.\n\n###### Height (int)\n\nDetermines the height in pixels of the element on which the binding handler is applied.\n\n###### Width (int)\n\nDetermines the width in pixels of the element on which the binding handler is applied. The following example specifies the size of **MyControl.**\n\n```\n<!-- the markup in the HTML template -->\n<!-- this boilerplate binding ensures that the control’s container is sized based on the height and width properties -->\n<div id=\"MyControl\" data-dyn-bind=\"sizing: $dyn.layout.sizing($control)\"></div>\n<!-- the markup in browser after the binding handler is applied will vary based on the height and width properties defined in $control -->\n```\n\nThe following example makes the control large or small depending on the value of the **bigbox** variable.\n\n```\n// Later on, the value of the “show” observable changes to true\n<script>\n...\nself.bigBox = true;\n...\n</script>\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"sizing: {height: $control.bigBox?50:10, width: $control.bigBox?50:10}\"></div>\n<!-- the markup in the browser after the binding handler is applied -->\n<div style=\"width: 50px; height: 50px;\" data-dyn-bind=\"sizing: {height: $control.bigBox?50:10, width: $control.bigBox?50:10}\"></div>\n```\n\n#### text\n\n##### Behavior\n\nBinds to the textContent property of the element. The text binding handler is meant to be used with UI text. It is not meant to bind non-string values (such as numbers, dates or Booleans) to the element. Convert all values into strings before supplying them to the binding handler, by using the dyn.format function. The text binding handler will replace all of the content inside of the element with the binding, whether or not the existing content is HTML or simple text.\n\n##### Arguments\n\n###### Text (string)\n\nThe text to bind to. The following example binds the textContext property of the div element to the text property on the control.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.text = \"Hello\";\n...\n</script>\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"text: $dyn.format('{0}',$control.text)\"></div>\n<!-- the markup in browser after the binding handler is applied -->\n<div data-dyn-bind=\"text: $dyn.format('{0}',$control.text)\">Hello</div>\n```\n\n#### vars\n\n##### Behavior\n\nCreates an HTML scope variable with the supplied name and value. The created scope variable is accessible only from bindings in the template. In addition, the scope variable is inherited by child elements. Binding handlers are executed in the order in which they appear on the element. Since the vars binding adds variables to the binding context, it is a best practice to always place the vars binding before all other bindings on the element. This will ensure that the subsequent bindings can access scope variables added by the vars binding. Do not create scope variables with any of the following names, as these names are reserved for framework scope variables: $control, $data, $index, and $value.\n\n##### Arguments\n\n###### Scope variables (object array)\n\nThe object array whose keys are the scope variable names and whose values are the initial values for the scope variables. The following example creates scope variables named \"Hello\" and \"World\" and displays their values.\n\n```\n<!-- the markup in the HTML template -->\n<div data-dyn-bind=\"vars: {$myVar: 'Hello', $myObs: $dyn.observable('World')}\">\n<span data-dyn-bind=\"text: $dyn.format('{0} {1}!', $myVar, $myObs)\">\n</span>\n</div>\n<!-- the markup in browser after the binding handler is applied -->\n<div data-dyn-bind=\"vars: {$myVar: 'Hello', $myObs: $dyn.observable('World')}\">\n<span data-dyn-bind=\"text: $dyn.format('{0} {1}!', $myVar, $myObs)\">\nHello World!\n</span>\n</div>\n```\n\n##### Example 2\n\nFor an example, see the foreach binding handler examples.\n\n#### visible\n\n##### Behavior\n\nSets the visibility of the element. Always supply the visible binding handler on the root element of the template, and bind to the *Visible* property from the X++ control. This will ensure that the control respects the *Visible* property when it is set by a form developer or when it is set by the framework. If a control is initialized with its *Visible* X++ property set to false, then the control will not appear on the form, and it the control’s template will not be loaded in the browser. If the control’s *Visible* X++ property is set to true at a later time, then the control’s template will be loaded and instantiated in the browser at that time. A control’s *Visible* X++ property can be inherited from its parent controls on the form. An element’s visibility may be controlled by its parent elements, controls and containers, regardless of whether the visible binding handler is applied. The cascading nature of visibility is a standard HTML behavior and is not specific to the control framework.\n\n##### Arguments\n\n###### Visible (boolean)\n\nDetermines whether the element is visible or not. The following example sets the visibility of the control's outermost div element.\n\n```\n// In your control’s code-behind JS file\n<script>\n... // boilerplate code\nself.Visible(false); // set the X++ observable property to false\n...\n</script>\n<!-- the markup on the root element of the HTML template -->\n<div id=\"MyControl\" data-dyn-bind=\"visible: $control.Visible\">Hello World!</div>\n<!-- the markup in browser after the binding handler is applied -->\n<div id=\"MyControl\" style=\"display: none;\" data-dyn-bind=\"visible: $control.Visible\">Hello World!</div>\n```\n\n## HTML: Scope variables\nScope variables can be used when binding values to binding handlers. Scope variables are only accessible from within the control’s HTML template, and can only be used with the data binding attribute. Scope variables are neither accessible from other HTML attributes nor from the control’s JavaScript class, but scope variables can be used in inline JavaScript expressions, functions and JSON objects that are passed to binding handlers.\n\n#### $control\n\nThe *$control* scope variable provides the bindings in the HTML template with access to the properties and functions on the control’s JavaScript instance. The following example binds visibility of the div element to the of Visible property of the control.\n\n```\n<div id=\"MyControl\" data-dyn-bind=\"visible: $control.Visible\"></div>\n```\n\n#### $data\n\nThe *$data* scope variable provides elements with access to their current binding context. Only variables defined in $data (the binding context) or scope variables, can be used inside of HTML bindings. Variables that do not exist in the current binding context and do not exist as current scope variable cannot be accessed from an HTML binding. In most cases the binding context will be the control’s JavaScript instance, so *$data* and *$control* will be equivalent. However, in some cases the binding context can change. For example, for elements inside of a **foreach** binding, *$data* provides the elements with access to the current array item. In cases involving multiple nested **foreach** bindings, elements in a nested binding may need access to the array item in a parent **foreach** binding. To access items in the parent **foreach** binding, you may create a scope variable which will be accessible to elements in the nested **foreach** biding. For an example, see the foreach binding handler examples.\n\n#### $index\n\nThe $index scope variable provides a 0-based index of the array item when in a **foreach** binding. For an example, see the foreach binding handler examples.\n\n## JavaScript: Inherited properties\n#### Visible\n\nThe **Visible** property is inherited from the base JavaScript class (via **$dyn.ui.Controls.apply**). There is also a **Visible** property in X++ that the runtime class in inherits from the base **FormControl** X++ class. Simply bind this property to the visible binding handler and place it on the root element of the HTML template for your control. The framework takes care of the rest. The following example shows how to use the Visible property.\n\n```\n<!-- the markup in the HTML template -->\n<div id=\"MyControl\" data-dyn-bind=\"visible: $control.Visible\"></div>\n```\n\n## Observable framework\n#### $dyn.observe\n\n##### Usage\n\nSubscribes a function to changes of an observable. We recommend that you use dispose.\n\n```\n$dyn.observe(observable, observer, [context], [disposableObserver])\n```\n\n##### Arguments\n\n###### Observable (observable)\n\nInstance of an observable. Or a function, which will become a $dyn.computed.\n\n###### Observer (function)\n\nFunction is invoked upon registration and also later when the observable is updated. Function is invoked with one argument, the value of the observable. If Observer returns false, then we un-subscribed automatically.\n\n###### Context (options, optional)\n\nContext to pass to the Observer. The Context becomes the ***this*** variable inside of the observer.\n\n###### DisposableObserver (options, optional)\n\nUnsubscribes the supplied DisposableObserver\n\n##### Returns\n\n###### Subscription (object)\n\nObservable, ID, Dispose function (public) used to unsubscribe The following example subscribes to the myObs observable, and executes the supplied function whenever the myObs observable value changes.\n\n```\n$dyn.observe(myObs, function (value) { console.log(value);});\n```\n\nThe following example shows how a function can automatically subscribe to observables simply by accessing the observable using $dyn.value. The first function is treated like an observable whose value is dependent upon the value of two other observables (FirstName and LastName). Every time one of the observables  (FirstName or LastName) changes its value, then the first function has also changed its value. When this happens, the second function (the callback function) will log the concatenation of the observable values to the console.\n\n```\nself.FirstName = $dyn.observable(\"Joanne\");\nself.LastName = $dyn.observable(\"Gordon\");\n$dyn.observe(\nfunction ()\n{\n        // Joann + \" \" + Gordon\n            return $dyn.value(self.FirstName) + \" \" + $dyn.value(self.LastName);\n},\nfunction (value)\n{\n            // \"Joanne Gordon\"\n            console.log(value);\n}\n);\n```\n\nThe following example performs similarly to the previous example. However, this example uses a computed observable, named myComp, to handle the concatenation.\n\n```\nself.FirstName = $dyn.observable(\"Joanne\");\nself.LastName = $dyn.observable(\"Gordon\");\nself.myComp = $dyn.computed(function ()\n{\n        // Joanne + \" \" + Gordon\n        return $dyn.value(self.FirstName) + \" \" + $dyn.value(self.LastName);\n});\n$dyn.observe(\nself.myComp,\nfunction (value)\n{\n        // \"Joanne Gordon\"\n        console.log(value)\n);\n},\n{FirstNameLabel: label1, LastNameLabel: label2}\n);\n```\n\n#### $dyn.observable\n\n##### Usage\n\nCreates an observable variable.\n\n```\n$dyn.observable([initial value])\n```\n\n##### Arguments\n\n###### Initial value (optional)\n\nThe value to initialize the observable to.\n\n##### Returns\n\n###### Observable (function)\n\nThe newly created observable The following example creates and observable variable named \"Hello\".\n\n    var greeting = $dyn.observable(\"Hello\");\n\n#### $dyn.value\n\n##### Usage\n\nAccesses the value of an observable variable. When **$dyn.value** is called from inside of an observer function (such as an observer passed to **$dyn.observe** or **$dyn.computed**, as well as the binding expression passed to a binding handler) a dependency on the observable is created. This will cause the binding handler or callback to re-execute whenever the value of the observable changes. Because this dependency is created automatically when using **$dyn.value**, it is important to only use **$dyn.value** when you intentionally wish to create such a dependency. If you wish to access the value of an observable without creating a dependency, you should use $dyn.peek.\n\n```\n$dyn.value(observable)\n```\n\n##### Arguments\n\n###### Observable\n\nThe observable property whose value to access.\n\n##### Returns\n\n###### Value\n\nThe current value in the observable property The following example returns the value of variable named observable and prints it to the console.\n\n```\nconsole.log($dyn.value(observable));\n```\n\n#### $dyn.peek\n\n##### Usage\n\nAccesses the value of an observable variable, without creating a dependency. For more information about dependency, see the $dyn.value function.\n\n```\n$dyn.peek(observable)\n```\n\n##### Arguments\n\n###### Observable\n\nThe observable whose value to access.\n\n##### Returns\n\n###### Value\n\nThe current value in the observable The following example returns the value of variable named observable and prints it to the console.\n\n```\nconsole.log($dyn.peek(observable));\n```\n\n#### $dyn.computed\n\n##### Usage\n\nWraps a function with an observability scope. If observables are accessed from inside of the function by using the **$dyn.value** function, then the function will re-execute whenever the values of those observables change. Observables that are accessed by using **$dyn.peek** will not cause the function to re-execute when their values change.\n\n```\n$dyn.computed(observer, [context], [disposableObserver])\n```\n\n##### Arguments\n\n###### Observer (function)\n\nFunction is invoked upon registration and can also be invoked later due to an observable value change. The Observer automatically observes any observables that are accessed using $dyn.value from within the scope of the function.\n\n###### Context (options, optional)\n\nContext to pass to the Observer. The Context becomes the *this* variable inside of the observer.\n\n###### DisposableObserver (options, optional)\n\nUnsubscribes the supplied DisposableObserver\n\n##### Returns\n\n###### Anything (optional)\n\nIf the Observer returns a value, then that value will also be returned by the call to **$dyn.computed** on the first time **$dyn.computed** is called (upon registration) as well every time the observer is invoked.\n\n## Framework functions\n#### $dyn.callFunction\n\n##### Usage\n\nCalls the apply method on specified function. Is cannot be used during an interaction.\n\n##### Arguments\n\n###### Function (function or observable)\n\nThe function to call. If an observable is supplied, the current value of the observable will be retrieved and used as the function.\n\n###### This (object, optional)\n\nThe object to assign to *this* within the scope of the function.\n\n###### Arguments (array, optional)\n\nThe arguments to pass to the supplied function.\n\n###### Callback (function, optional)\n\nThe callback function to call when the supplied Function has returned. The callback will be passed any values that are returned by the function that is called. The following example calls the **apply** function on the **printName** function.\n\n```\nself.Name = \"Joanne M Gordon\";\nvar printName = function () {\n        console.log(this.Name);\n};\n$dyn.callFunction(printName, self);\n```\n\nThe following example calls the **getWholeName** function.\n\n```\nvar getWholeName = function (first, middle, last) {\n        var wholeName = first + \" \" + middle + \" \" + last;\n        return wholeName;\n};\nvar printName = function (wholeName) {\nconsole.log(\"Your name is: \" + wholeName);\n};\nvar firstName = \"Joanne\";\nvar middleName = \"M\";\nvar lastName = \"Gordon\";\n$dyn.callFunction(getWholeName, null, [firstName , middleName, lastName], printName);\n```\n\n#### $dyn.format\n\n##### Usage\n\nBuilds a string using the supplied values according to the supplied format.\n\n##### Arguments\n\n###### Format (string)\n\nThe format in which to build the string. Use bracket notation for placeholders.\n\n###### Values (optional)\n\nThe comma separated values to use in the format\n\n##### Returns\n\n###### FormattedString (string)\n\nThe string after formatting has been applied The following example builds a string with the first, middle initial, and the last name.\n\n##### Example 1\n\n```\nvar first = \"Joanne\";\nvar middle = \"M\";\nvar last = \"Gordon\";\nvar $dyn.format(\"Your name is : {0} {1} {2}\", first, middle, last);\n```\n\n#### $dyn.label\n\n##### Usage\n\nProvides access to any labels stored via the Globalization API.\n\n##### Arguments\n\n###### Identifier (string)\n\nThe label ID, as specified to the Globalization API.\n\n##### Returns\n\n###### Value (string)\n\nThe label string in the current culture, if the Identifier is found. Otherwise, returns the supplied Identifier as a string. The following example returns and prints the label named \"greeting\".\n\n```\nGlobalize.addCultureInfo(\"en\", {\nmessages: {\n    \"greeting\": \"Hello!\"\n    },\n});\nconsole.log($dyn.label(\"greeting\"));\n```\n\nCSS\n---\n\nAdd namespaces to all CSS class names by prepending the class name with the control’s template ID. This will prevent your control and its styles from conflicting with other controls in the client.\n\n## Flexbox\nFor advanced layout scenarios we encourage using Flexbox. Flexbox is compatible with the Extensible Control framework. [Using CSS flexible boxes (Mozilla Developer Network)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) Please see the [public Flexbox documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) for explanations and examples of the following topics:\n\n-   Responsive layouts\n-   Building columns and rows\n-   Arranging elements horizontally or vertically\n-   Arranging nesting elements\n-   Auto-sizing elements to stretch and shrink\n-   Locking/Freezing elements\n-   Building scrollable elements\n\nControl Lifecycle Diagrams\n==========================\n\n## Control Instantiation\n[![ExtensibilityProcess](./media/extensibilityprocess-951x1024.png)](./media/extensibilityprocess.png)\n\n\n\n\n\n","nodes":[{"pos":[4,678],"embed":true,"restype":"x-metadata","content":"# required metadata\n\ntitle: Extensible control programming reference\ndescription: This topic provides reference content for extensible control programming.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer, IT Pro\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 50211\nms.assetid: 0a774c73-9e5d-4faa-8716-61476c1a9b6e\nms.search.region: Global\n# ms.search.industry: \nms.author: shshabazz\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"Extensible control programming reference","nodes":[{"pos":[0,40],"content":"Extensible control programming reference","nodes":[{"content":"Extensible control programming reference","pos":[0,40]}]}],"path":["title"],"extradata":"MT"},{"content":"This topic provides reference content for extensible control programming.","nodes":[{"pos":[0,73],"content":"This topic provides reference content for extensible control programming.","nodes":[{"content":"This topic provides reference content for extensible control programming.","pos":[0,73]}]}],"path":["description"],"extradata":"MT"}],"header":"# required metadata\n","yml":true},{"pos":[686,726],"content":"Extensible control programming reference","linkify":"Extensible control programming reference","nodes":[{"content":"Extensible control programming reference","pos":[0,40]}]},{"content":"This topic provides reference content for extensible control programming.","pos":[772,845]},{"content":"This document describes the API, HTML, and JavaScript support for creating extensible controls.","pos":[847,942]},{"pos":[947,955],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This document contains small code snippets that show how to use each API that is documented.","pos":[956,1048]},{"content":"More complete examples of finished controls that leverage many of these APIs can be found on Github.","pos":[1049,1149]},{"content":"<bpt id=\"p1\">[</bpt>Extensible Control Examples on Github<ept id=\"p1\">](http://github.com/Microsoft/Dynamics-AX-Extensible-Control-Samples)</ept>","pos":[1150,1257],"source":"[Extensible Control Examples on Github](http://github.com/Microsoft/Dynamics-AX-Extensible-Control-Samples)"},{"pos":[1262,1283],"content":"Control block diagram","linkify":"Control block diagram","nodes":[{"content":"Control block diagram","pos":[0,21]}]},{"content":"This high-level diagram illustrates the key components of an extensible control and how they interact with each other.","pos":[1284,1402]},{"content":"Your extensible control solution will contain two X++ classes that implement your control.","pos":[1403,1493]},{"content":"The runtime class implements the runtime data, presentation, and behavior of your control.","pos":[1494,1584]},{"content":"The build class defines how your control is displayed in Form Designer, Property Window, and Application Explorer.","pos":[1585,1699]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>ExtensibilityArchitecture<ept id=\"p1\">](./media/extensibilityarchitecture.png)](./media/extensibilityarchitecture.png)</ept>","pos":[1700,1808],"source":"[![ExtensibilityArchitecture](./media/extensibilityarchitecture.png)](./media/extensibilityarchitecture.png)"},{"pos":[1810,1813],"content":"X++","linkify":"X++","nodes":[{"content":"X++","pos":[0,3]}]},{"content":"The X++ API of your control is the Form-developer-facing API.","pos":[1819,1880]},{"content":"Be sure to consider the APIs and behaviors you want to provide to the Form developer when designing the X++ APIs for your control.","pos":[1881,2011]},{"pos":[2016,2046],"content":"Runtime: The X++ runtime class","linkify":"Runtime: The X++ runtime class","nodes":[{"content":"Runtime: The X++ runtime class","pos":[0,30]}]},{"content":"The runtime class defines the public, developer-facing API for your control.","pos":[2047,2123]},{"content":"It also contains the runtime logic for your control.","pos":[2124,2176]},{"content":"The job of the runtime class is to maintain the state of the control via the control’s properties.","pos":[2177,2275]},{"pos":[2280,2306],"content":"Runtime: Class declaration","linkify":"Runtime: Class declaration","nodes":[{"content":"Runtime: Class declaration","pos":[0,26]}]},{"content":"Declare an X++ class that extends <bpt id=\"p1\">**</bpt>FormTemplateControl<ept id=\"p1\">**</ept> or a type derived from <bpt id=\"p2\">**</bpt>FormTemplateControl<ept id=\"p2\">**</ept>*.","pos":[2307,2413],"source":"Declare an X++ class that extends **FormTemplateControl** or a type derived from **FormTemplateControl***."},{"content":"<ph id=\"ph1\"> *</ph><bpt id=\"p1\">**</bpt>FormTemplateControl<ept id=\"p1\">**</ept> contains basic properties that are necessary for every control, such as the Template ID and the Resource Bundle.","pos":[2413,2551],"source":" ***FormTemplateControl** contains basic properties that are necessary for every control, such as the Template ID and the Resource Bundle."},{"content":"The following example extends the base control class, <bpt id=\"p1\">**</bpt>FormTemplateControl<ept id=\"p1\">**</ept>.","pos":[2552,2630],"source":" The following example extends the base control class, **FormTemplateControl**."},{"pos":[2684,2713],"content":"Runtime: FormControlAttribute","linkify":"Runtime: FormControlAttribute","nodes":[{"content":"Runtime: FormControlAttribute","pos":[0,29]}]},{"pos":[2714,2797],"content":"You must apply the <bpt id=\"p1\">**</bpt>FormControlAttribute<ept id=\"p1\">**</ept> attribute to the X++ class declaration.","source":"You must apply the **FormControlAttribute** attribute to the X++ class declaration."},{"content":"You must supply the following arguments:","pos":[2887,2927]},{"content":"<bpt id=\"p1\">**</bpt>Template ID<ept id=\"p1\">**</ept>: A string that specifies the ID of the template.","pos":[2933,2997],"source":"**Template ID**: A string that specifies the ID of the template."},{"content":"The Template ID is the JavaScript class name &amp; the HTML element ID of the control.","pos":[2998,3080],"source":" The Template ID is the JavaScript class name & the HTML element ID of the control."},{"content":"By convention, the TemplateID matches the class name of the control's runtime class.","pos":[3081,3165]},{"content":"<bpt id=\"p1\">**</bpt>Resource Bundle Path<ept id=\"p1\">**</ept>: A string that specifies the path to the resource bundle.","pos":[3170,3252],"source":"**Resource Bundle Path**: A string that specifies the path to the resource bundle."},{"content":"The Resource Bundle Path is the web path where the main HTM files are located.","pos":[3253,3331]},{"content":"At runtime, the Client framework will load the HTM file specified by the Resource Bundle Path.","pos":[3332,3426]},{"content":"At runtime, the Client framework will search the Resource Bundle for the HTML element with an ID matching the specified Template ID.","pos":[3427,3559]},{"content":"At runtime, the Client framework will instantiate the JavaScript class specified by the Template ID.","pos":[3560,3660]},{"content":"This path is relative to the root of the web directory.","pos":[3661,3716]},{"content":"<bpt id=\"p1\">**</bpt>Build class name<ept id=\"p1\">**</ept>: A string that specifies the name of the build class.","pos":[3721,3795],"source":"**Build class name**: A string that specifies the name of the build class."},{"content":"The build class name is the X++ class that determines the design-time behavior.","pos":[3796,3875]},{"content":"At design time, the Visual Studio framework reflects over this attribute and loads the specified X++ class as the designer class.","pos":[3876,4005]},{"content":"At runtime, the X++ framework will instantiate the specified X++ class as the build class in the super of applyBuild().","pos":[4006,4125]},{"content":"The following example shows a typical class and attribute declaration for a control named \"MyControl\".","pos":[4127,4229]},{"pos":[4378,4407],"content":"Runtime: FormCommandAttribute","linkify":"Runtime: FormCommandAttribute","nodes":[{"content":"Runtime: FormCommandAttribute","pos":[0,29]}]},{"content":"The <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> is applied to a method in your control class, which allows the method to be called from a control’s JavaScript class.","pos":[4408,4554],"source":"The **FormCommandAttribute** is applied to a method in your control class, which allows the method to be called from a control’s JavaScript class."},{"content":"A method with this attribute applied is called a <bpt id=\"p1\">**</bpt>command.<ept id=\"p1\">**</ept>","pos":[4555,4616],"source":" A method with this attribute applied is called a **command.**"},{"content":"Use the <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> on only the X++ methods that need to be accessed directly from the control’s JavaScript class.","pos":[4617,4744],"source":" Use the **FormCommandAttribute** on only the X++ methods that need to be accessed directly from the control’s JavaScript class."},{"content":"An X++ method serving as a command can only accept string arguments.","pos":[4745,4813]},{"content":"The method must perform the necessary operations to serialize or deserialize the string arguments into other types.","pos":[4814,4929]},{"content":"The <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> has no effect on the behavior of the X++ method when the method is used from within X++.","pos":[4930,5047],"source":" The **FormCommandAttribute** has no effect on the behavior of the X++ method when the method is used from within X++."},{"content":"The <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> exposes the X++ method as an external endpoint that is accessible from JavaScript.","pos":[5048,5159],"source":" The **FormCommandAttribute** exposes the X++ method as an external endpoint that is accessible from JavaScript."},{"content":"As such, every command should be threat modeled and tested for exploits, and should perform validation on all of its arguments.","pos":[5160,5287]},{"content":"The underlying X++ method should be declared private so that it is not accessible from X++.","pos":[5288,5379]},{"content":"If X++ code needs to access this method’s behavior, then a separate X++ method should be declared as public without the <bpt id=\"p1\">**</bpt>FormCommandAttribute.<ept id=\"p1\">**</ept>","pos":[5380,5525],"source":" If X++ code needs to access this method’s behavior, then a separate X++ method should be declared as public without the **FormCommandAttribute.**"},{"content":"This public method should contain any shared code that is needed by both X++ and JavaScript.","pos":[5526,5618]},{"content":"The private X++ method with the <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> can then call this public method to access the shared code.","pos":[5619,5735],"source":" The private X++ method with the **FormCommandAttribute** can then call this public method to access the shared code."},{"content":"This practice allows the command to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.","pos":[5736,5966]},{"content":"You supply the following arguments to the <bpt id=\"p1\">**</bpt>FormCommandAttribute<ept id=\"p1\">**</ept> constructor:","pos":[5967,6046],"source":" You supply the following arguments to the **FormCommandAttribute** constructor:"},{"content":"<bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>: A required string that specifies the name of the command.","pos":[6052,6119],"source":"**Name**: A required string that specifies the name of the command."},{"content":"A few best practices for naming Properties:","pos":[6120,6163]},{"content":"Capitalize the first letter, and use PascalCase.","pos":[6172,6220]},{"content":"Use a verb in the name.","pos":[6229,6252]},{"content":"Include the Property name if the Command is used to read/write a FormProperty (ex: Set<ph id=\"ph1\">\\_</ph><ph id=\"ph2\">&amp;lt;</ph>PropertyName<ph id=\"ph3\">&amp;gt;</ph>)","pos":[6261,6370],"source":"Include the Property name if the Command is used to read/write a FormProperty (ex: Set\\_&lt;PropertyName&gt;)"},{"content":"Do not use any of the names of inherited JavaScript properties.","pos":[6379,6442]},{"content":"<bpt id=\"p1\">**</bpt>Execute immediate<ept id=\"p1\">**</ept>: An optional boolean that specifies whether calls to this command are deferred or require immediate execution.","pos":[6447,6579],"source":"**Execute immediate**: An optional boolean that specifies whether calls to this command are deferred or require immediate execution."},{"content":"By default, commands have <bpt id=\"p1\">**</bpt>Execute immediate<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>true,<ept id=\"p2\">**</ept> so calls are not deferred.","pos":[6580,6671],"source":" By default, commands have **Execute immediate** set to **true,** so calls are not deferred."},{"content":"Most commands likely require immediate execution because their X++ logic must run before allowing the user to complete their next action.","pos":[6672,6809]},{"content":"However, commands that have no side-effects on the user’s ability to take their next action can likely be safely deferred to gain a performance benefit.","pos":[6810,6962]},{"content":"For commands that can be deferred, set Execute immediate to <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> to reduce network chattiness.","pos":[6963,7062],"source":" For commands that can be deferred, set Execute immediate to **false** to reduce network chattiness."},{"content":"The following example declares a command with the name of \"SetText\".","pos":[7064,7132]},{"pos":[7265,7295],"content":"Runtime: FormPropertyAttribute","linkify":"Runtime: FormPropertyAttribute","nodes":[{"content":"Runtime: FormPropertyAttribute","pos":[0,30]}]},{"content":"The <bpt id=\"p1\">**</bpt>FormPropertyAttribute<ept id=\"p1\">**</ept> is applied to a method in your control class, which allows an X++ method to be called as a <bpt id=\"p2\">**</bpt>FormProperty<ept id=\"p2\">**</ept> getter/setter from the control's JavaScript class.","pos":[7296,7484],"source":"The **FormPropertyAttribute** is applied to a method in your control class, which allows an X++ method to be called as a **FormProperty** getter/setter from the control's JavaScript class."},{"content":"A method with this attribute applied is called a <bpt id=\"p1\">**</bpt>property.<ept id=\"p1\">**</ept>","pos":[7485,7547],"source":" A method with this attribute applied is called a **property.**"},{"content":"Only use the <bpt id=\"p1\">**</bpt>FormPropertyAttribute<ept id=\"p1\">**</ept> on those X++ methods which need to be accessed directly from the control’s JavaScript class.","pos":[7548,7679],"source":" Only use the **FormPropertyAttribute** on those X++ methods which need to be accessed directly from the control’s JavaScript class."},{"content":"The <bpt id=\"p1\">**</bpt>FormPropertyAttribute<ept id=\"p1\">**</ept> has no effect on the behavior of the X++ method when the method is used from within X++.","pos":[7680,7798],"source":" The **FormPropertyAttribute** has no effect on the behavior of the X++ method when the method is used from within X++."},{"content":"Every property exposes an endpoint to the browser.","pos":[7799,7849]},{"content":"As such, every property should be threat modeled and tested for exploits.","pos":[7850,7923]},{"content":"The underlying X++ method should be declared private so that it is not accessible from other X++ code.","pos":[7924,8026]},{"content":"If other X++ code needs to access the property, then declare a separate public X++ method without the <bpt id=\"p1\">**</bpt>FormPropertyAttibute,<ept id=\"p1\">**</ept> and move the shared property logic to this method.","pos":[8027,8205],"source":" If other X++ code needs to access the property, then declare a separate public X++ method without the **FormPropertyAttibute,** and move the shared property logic to this method."},{"content":"Then call this method from the private X++ method with the <bpt id=\"p1\">**</bpt>FormPropertyAttribute. This practice allows the property to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.<ept id=\"p1\">**</ept>","pos":[8206,8523],"source":" Then call this method from the private X++ method with the **FormPropertyAttribute. This practice allows the property to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.**"},{"content":"The underlying X++ method must accept and return the desired type of the property.","pos":[8524,8606]},{"content":"If the desired type if an EDT, the property must accept and return the base type of the EDT.","pos":[8607,8699]},{"content":"The supported property types are:","pos":[8700,8733]},{"pos":[8739,8816],"content":"<bpt id=\"p1\">[</bpt>X++ primitive types<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/aa602290.aspx)</ept>","source":"[X++ primitive types](https://msdn.microsoft.com/en-us/library/aa602290.aspx)"},{"pos":[8821,8990],"content":"<bpt id=\"p1\">[</bpt>X++ data contracts<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute(v=vs.110).aspx)</ept> (whose members are also supported types)","source":"[X++ data contracts](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute(v=vs.110).aspx) (whose members are also supported types)"},{"pos":[8995,9096],"content":"<bpt id=\"p1\">[</bpt>X++ List<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/list.aspx)</ept> (whose items are also supported types)","source":"[X++ List](https://msdn.microsoft.com/en-us/library/list.aspx) (whose items are also supported types)"},{"pos":[9098,9178],"content":"You supply the following arguments to the <bpt id=\"p1\">**</bpt>FormPropertyAttribute<ept id=\"p1\">**</ept> constructor:","source":"You supply the following arguments to the **FormPropertyAttribute** constructor:"},{"content":"<bpt id=\"p1\">**</bpt>FormPropertyKind:<ept id=\"p1\">**</ept> A required <bpt id=\"p2\">**</bpt>FormProperyKind<ept id=\"p2\">**</ept> value that specifies the type of the property.","pos":[9184,9283],"source":"**FormPropertyKind:** A required **FormProperyKind** value that specifies the type of the property."},{"content":"Use <bpt id=\"p1\">**</bpt>FormPropertyKind::Value<ept id=\"p1\">**</ept> for Properties not bound to a data source field, and use <bpt id=\"p2\">**</bpt>FormPropertyKind::BindableValue<ept id=\"p2\">**</ept> for properties that may be bound to a data source field.","pos":[9284,9465],"source":" Use **FormPropertyKind::Value** for Properties not bound to a data source field, and use **FormPropertyKind::BindableValue** for properties that may be bound to a data source field."},{"content":"<bpt id=\"p1\">**</bpt>Name:<ept id=\"p1\">**</ept> A required string that specifies the name of the property.","pos":[9470,9538],"source":"**Name:** A required string that specifies the name of the property."},{"content":"A few best practices for naming properties:","pos":[9539,9582]},{"content":"Capitalize the first letter, and use PascalCase.","pos":[9591,9639]},{"content":"Do not use any of the names of inherited JavaScript properties","pos":[9648,9710]},{"content":"<bpt id=\"p1\">**</bpt>Read only<ept id=\"p1\">**</ept>: An optional boolean that specifies whether this property is writable from the control’s JavaScript class.","pos":[9715,9835],"source":"**Read only**: An optional boolean that specifies whether this property is writable from the control’s JavaScript class."},{"content":"By default, properties have <bpt id=\"p1\">**</bpt>Read only<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>false,<ept id=\"p2\">**</ept> so they are writeable.","pos":[9836,9918],"source":" By default, properties have **Read only** set to **false,** so they are writeable."},{"content":"This argument does not affect the ability to write to this property from X++.","pos":[9919,9996]},{"content":"To make the X++ method read only, remove all method arguments from the method declaration.","pos":[9997,10087]},{"content":"A majority of properties should not be writable from the control’s JavaScript class.","pos":[10088,10172]},{"content":"Because most property values require validation, a command should be used as a setter for the property so that validation logic is can be run before the backing property is set.","pos":[10173,10350]},{"content":"<bpt id=\"p1\">**</bpt>Execute immediate<ept id=\"p1\">**</ept>: An optional Boolean that specifies whether writes to this property are deferred or require immediate execution.","pos":[10355,10489],"source":"**Execute immediate**: An optional Boolean that specifies whether writes to this property are deferred or require immediate execution."},{"content":"By default, properties have <bpt id=\"p1\">**</bpt>Execute immediate<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>false,<ept id=\"p2\">**</ept> so writes are deferred.","pos":[10490,10581],"source":" By default, properties have **Execute immediate** set to **false,** so writes are deferred."},{"content":"Because the majority of properties should not be writeable form the control’s JavaScript class, the <bpt id=\"p1\">**</bpt>Execute immediate<ept id=\"p1\">**</ept> flag defaults to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> and provides performance benefits.","pos":[10582,10765],"source":" Because the majority of properties should not be writeable form the control’s JavaScript class, the **Execute immediate** flag defaults to **false** and provides performance benefits."},{"content":"Even in the case of properties that are writable from the control’s JavaScript class, the performance side effects of immediate execution should be carefully considered before enabling the behavior.","pos":[10766,10964]},{"content":"The following example shows a typical property declaration.","pos":[10966,11025]},{"content":"Most properties share the same boilerplate code for getting/setting, as shown below.","pos":[11026,11110]},{"content":"The textProperty variable is the backing FormProperty field for this property.","pos":[11111,11189]},{"pos":[11478,11499],"content":"Runtime: FormProperty","linkify":"Runtime: FormProperty","nodes":[{"content":"Runtime: FormProperty","pos":[0,21]}]},{"pos":[11506,11514],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is an X++ <bpt id=\"p2\">[</bpt>derived type<ept id=\"p2\">](https://msdn.microsoft.com/en-us/library/esd9wew8(v=vs.100).aspx)</ept> used by the control framework for the synchronization of property values between X++ and JavaScript.","pos":[11516,11724],"source":"**FormProperty** is an X++ [derived type](https://msdn.microsoft.com/en-us/library/esd9wew8(v=vs.100).aspx) used by the control framework for the synchronization of property values between X++ and JavaScript."},{"content":"<bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> objects are considered the backing fields used internally by properties.","pos":[11725,11814],"source":"**FormProperty** objects are considered the backing fields used internally by properties."},{"content":"Each <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is typically used in 4 places throughout a control’s X++ runtime class:","pos":[11815,11908],"source":" Each **FormProperty** is typically used in 4 places throughout a control’s X++ runtime class:"},{"pos":[11914,11989],"content":"The <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is declared, usually right below the class declaration","source":"The **FormProperty** is declared, usually right below the class declaration"},{"pos":[11994,12065],"content":"The <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is instantiated in the <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept> method of the class","source":"The **FormProperty** is instantiated in the **new** method of the class"},{"pos":[12070,12147],"content":"The <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is initialized in the <bpt id=\"p2\">**</bpt>applyBuild<ept id=\"p2\">**</ept> method of the class","source":"The **FormProperty** is initialized in the **applyBuild** method of the class"},{"pos":[12152,12227],"content":"The <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> is read and written in the X++ method for the property","source":"The **FormProperty** is read and written in the X++ method for the property"},{"pos":[12229,12328],"content":"The following example shows a <bpt id=\"p1\">**</bpt>FormProperty<ept id=\"p1\">**</ept> being used in a typical controls’ X++ runtime class.","source":"The following example shows a **FormProperty** being used in a typical controls’ X++ runtime class."},{"pos":[13526,13545],"content":"Runtime: new method","linkify":"Runtime: new method","nodes":[{"content":"Runtime: new method","pos":[0,19]}]},{"content":"The <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> method on a control’s X++ runtime class is called as a part of instantiating the control on a form.","pos":[13546,13657],"source":"The **new** method on a control’s X++ runtime class is called as a part of instantiating the control on a form."},{"content":"For the details on when the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> method is called in the form lifecycle, please see the Control Lifecycle Diagrams.","pos":[13658,13776],"source":" For the details on when the **new** method is called in the form lifecycle, please see the Control Lifecycle Diagrams."},{"content":"This method is used for instantiation of a control’s FormProperties and setting the control’s Template ID and Resource Bundle Path.","pos":[13777,13908]},{"content":"See typical use of the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> method in the example for FormProperty.","pos":[13909,13979],"source":" See typical use of the **new** method in the example for FormProperty."},{"pos":[13984,14010],"content":"Runtime: applyBuild method","linkify":"Runtime: applyBuild method","nodes":[{"content":"Runtime: applyBuild method","pos":[0,26]}]},{"content":"The <bpt id=\"p1\">**</bpt>applyBuild<ept id=\"p1\">**</ept> method on a control’s X++ runtime class is called as a part of instantiating the control on a form.","pos":[14011,14129],"source":"The **applyBuild** method on a control’s X++ runtime class is called as a part of instantiating the control on a form."},{"content":"For the details on when the <bpt id=\"p1\">**</bpt>applyBuild<ept id=\"p1\">**</ept> method is called in the form lifecycle, please see the Control Lifecycle Diagrams.","pos":[14130,14255],"source":" For the details on when the **applyBuild** method is called in the form lifecycle, please see the Control Lifecycle Diagrams."},{"content":"This method is used for initialization of a control’s FormProperties to their default values, or to the values specified by the form developer who placed the control on the form.","pos":[14256,14434]},{"content":"See typical use of the **applyBuild **method in the example for FormProperty.","pos":[14435,14512]},{"pos":[14517,14561],"content":"Runtime: FormBindingUtil::initbinding method","linkify":"Runtime: FormBindingUtil::initbinding method","nodes":[{"content":"Runtime: FormBindingUtil::initbinding method","pos":[0,44]}]},{"content":"The <bpt id=\"p1\">**</bpt>FormBindingUtil<ept id=\"p1\">**</ept> is an API provided by the control framework.","pos":[14562,14630],"source":"The **FormBindingUtil** is an API provided by the control framework."},{"content":"It is used to bind FormProperties to data fields and data methods on a data source.","pos":[14631,14714]},{"content":"The following example binds the data field with name \"Value\" on the data source with name \"DataSource1\" to the textProperty FormProperty of the runtime class.","pos":[14715,14873]},{"pos":[16247,16279],"content":"Design time: The X++ build class","linkify":"Design time: The X++ build class","nodes":[{"content":"Design time: The X++ build class","pos":[0,32]}]},{"content":"The build class defines the design time behavior of your control.","pos":[16280,16345]},{"content":"This class determines which properties appear in the property sheet, and how the control behaves when it is modeled in the Form designer.","pos":[16346,16483]},{"content":"The job of the design time class is to capture design time information for the runtime class to access later on.","pos":[16484,16596]},{"pos":[16601,16660],"content":"Design time: Class declaration & FormDesignControlAttribute","linkify":"Design time: Class declaration & FormDesignControlAttribute","nodes":[{"content":"Design time: Class declaration &amp; FormDesignControlAttribute","pos":[0,59],"source":"Design time: Class declaration & FormDesignControlAttribute"}]},{"content":"The FormDesignControlAttribute is necessary for the control to appear in the Visual Studio Form designer when right-clicking on the design node of the form.","pos":[16661,16817]},{"content":"If the FromDesignControlAttribute is missing, then the control can only be added to a form via imperative X++ code (i.e. via the addControlEx method on the form).","pos":[16818,16980]},{"pos":[17107,17147],"content":"Design time: FormDesignPropertyAttribute","linkify":"Design time: FormDesignPropertyAttribute","nodes":[{"content":"Design time: FormDesignPropertyAttribute","pos":[0,40]}]},{"content":"Placing this attribute on a method in the design time class will result in a new property with the name specified by the first argument (and in the section specified by the second argument) appearing the property sheet for this control, with the corresponding X++ method operating as the getter/setter for the property.","pos":[17148,17467]},{"pos":[17910,17955],"content":"Design time: FormDesignProperty** **Attribute","linkify":"Design time: FormDesignProperty** **Attribute","nodes":[{"content":"Design time: FormDesignProperty** **Attribute","pos":[0,45]}]},{"content":"There are a number of FormDesignProperty attributes which may be applied alongside the standard FormDesignPropertyAttribute for specialized behavior in the property sheet.","pos":[17956,18127]},{"content":"The specialized behavior includes enabling the property as a combobox which allows selecting from a list of a values.","pos":[18128,18245]},{"content":"The different types of lists that used are enumerated below.","pos":[18246,18306]},{"content":"Whenever the user selects an item from the combobox, the string name of that item is passed into the X++ method getter/setter with the attribute.","pos":[18307,18452]},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyDataSourceAttribute<ph id=\"ph2\">\\]</ph> - Shows a list of the data sources on the form.","pos":[18458,18547],"source":"\\[FormDesignPropertyDataSourceAttribute\\] - Shows a list of the data sources on the form."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyDataFieldAttribute(<ph id=\"ph2\">&amp;lt;</ph>data source name<ph id=\"ph3\">&amp;gt;</ph>)<ph id=\"ph4\">\\]</ph> - Shows a list of the data fields on the specified data source.","pos":[18552,18682],"source":"\\[FormDesignPropertyDataFieldAttribute(&lt;data source name&gt;)\\] - Shows a list of the data fields on the specified data source."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyDataMethodAttribute(<ph id=\"ph2\">&amp;lt;</ph>data source name<ph id=\"ph3\">&amp;gt;</ph>)<ph id=\"ph4\">\\]</ph> - Shows a list of the data methods on the specified data source.","pos":[18687,18819],"source":"\\[FormDesignPropertyDataMethodAttribute(&lt;data source name&gt;)\\] - Shows a list of the data methods on the specified data source."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyFieldGroupAttribute(<ph id=\"ph2\">&amp;lt;</ph>data source name<ph id=\"ph3\">&amp;gt;</ph>)<ph id=\"ph4\">\\]</ph> - Shows a list of the field groups on the specified data source.","pos":[18824,18956],"source":"\\[FormDesignPropertyFieldGroupAttribute(&lt;data source name&gt;)\\] - Shows a list of the field groups on the specified data source."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyExtendsClassAttribute(<ph id=\"ph2\">&amp;lt;</ph>class name<ph id=\"ph3\">&amp;gt;</ph>)<ph id=\"ph4\">\\]</ph> - Shows a list of the classes which extend the specified class.","pos":[18961,19088],"source":"\\[FormDesignPropertyExtendsClassAttribute(&lt;class name&gt;)\\] - Shows a list of the classes which extend the specified class."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyImplementsAttribute(<ph id=\"ph2\">&amp;lt;</ph>interface name<ph id=\"ph3\">&amp;gt;</ph>)<ph id=\"ph4\">\\]</ph> - Shows a list of the classes which implement the specified interface.","pos":[19093,19229],"source":"\\[FormDesignPropertyImplementsAttribute(&lt;interface name&gt;)\\] - Shows a list of the classes which implement the specified interface."},{"content":"<ph id=\"ph1\">\\[</ph>FormDesignPropertyReferenceAttribute(<ph id=\"ph2\">&amp;lt;</ph>FormDesignPropertyReferenceType::<ph id=\"ph3\">&amp;lt;</ph>type<ph id=\"ph4\">&amp;gt;</ph>)<ph id=\"ph5\">\\]</ph> - Shows a list of the specified AOT artifacts with the given type.","pos":[19234,19392],"source":"\\[FormDesignPropertyReferenceAttribute(&lt;FormDesignPropertyReferenceType::&lt;type&gt;)\\] - Shows a list of the specified AOT artifacts with the given type."},{"content":"The supported types are:","pos":[19393,19417]},{"content":"Table","pos":[19426,19431]},{"content":"View","pos":[19440,19444]},{"content":"Map","pos":[19453,19456]},{"content":"EDT","pos":[19465,19468]},{"content":"BaseEnum","pos":[19477,19485]},{"content":"Query","pos":[19494,19499]},{"content":"Class","pos":[19508,19513]},{"content":"Form","pos":[19522,19526]},{"content":"MenuItemDisplay","pos":[19535,19550]},{"content":"MenuItemOuput","pos":[19559,19572]},{"content":"MenuItemAction","pos":[19581,19595]},{"content":"Tile","pos":[19604,19608]},{"content":"KPI","pos":[19617,19620]},{"content":"The following example shows standard properties used to allow a Form developer to specify the Data Source and Data Field for the design time class.","pos":[19622,19769]},{"content":"A control with a design time class like the one above can then bind to the specified data source and data field inside of the applyBuild method, as show below.","pos":[21187,21346]},{"content":"If you supply both a data field and data method to FormBindingUtil::initBinding, the data field binding will override the data method binding.","pos":[21690,21832]},{"pos":[21837,21841],"content":"HTML","linkify":"HTML","nodes":[{"content":"HTML","pos":[0,4]}]},{"pos":[21842,21868],"content":"HTML: Framework attributes","linkify":"HTML: Framework attributes","nodes":[{"content":"HTML: Framework attributes","pos":[0,26]}]},{"content":"The following section documents the HTML attributes that are used in the control framework for control development.","pos":[21897,22012]},{"pos":[22018,22031],"content":"data-dyn-bind","linkify":"data-dyn-bind","nodes":[{"content":"data-dyn-bind","pos":[0,13]}]},{"content":"<bpt id=\"p1\">**</bpt>data-dyn-bind<ept id=\"p1\">**</ept>, the data binding attribute, standardizes many common DOM manipulations - such as modifying an element’s attributes, properties and CSS, or handling DOM events - through a declarative HTML-based API.","pos":[22033,22250],"source":"**data-dyn-bind**, the data binding attribute, standardizes many common DOM manipulations - such as modifying an element’s attributes, properties and CSS, or handling DOM events - through a declarative HTML-based API."},{"content":"The data binding attribute allows for these behaviors without requiring complex JavaScript.","pos":[22251,22342]},{"content":"Using the data binding attribute rather than writing complex JavaScript can save the control developer valuable time by making things such as designing, debugging and maintaining the control much easier.","pos":[22343,22546]},{"content":"However, complex JavaScript is still available when scenarios require its use.","pos":[22547,22625]},{"content":"The data binding attribute binds HTML element behaviors to values supplied by the control developer.","pos":[22626,22726]},{"content":"The values supplied can be simple JavaScript <bpt id=\"p1\">[</bpt>variables<ept id=\"p1\">](http://www.w3schools.com/js/js_variables.asp)</ept>, JavaScript <bpt id=\"p2\">[</bpt>comparison<ept id=\"p2\">](http://www.w3schools.com/js/js_comparisons.asp)</ept> or <bpt id=\"p3\">[</bpt>arithmetic<ept id=\"p3\">](http://www.w3schools.com/js/js_arithmetic.asp)</ept> expressions, JavaScript <bpt id=\"p4\">[</bpt>functions<ept id=\"p4\">](http://www.w3schools.com/js/js_functions.asp)</ept> and JSON <bpt id=\"p5\">[</bpt>objects<ept id=\"p5\">](https://www.w3schools.com/js/js_json_objects.asp)</ept>.","pos":[22727,23117],"source":" The values supplied can be simple JavaScript [variables](http://www.w3schools.com/js/js_variables.asp), JavaScript [comparison](http://www.w3schools.com/js/js_comparisons.asp) or [arithmetic](http://www.w3schools.com/js/js_arithmetic.asp) expressions, JavaScript [functions](http://www.w3schools.com/js/js_functions.asp) and JSON [objects](https://www.w3schools.com/js/js_json_objects.asp)."},{"content":"The values supplied can also be observable variables, created using the APIs described in this document.","pos":[23118,23222]},{"content":"The way in which the supplied value is bound to the HTML element is determined by the binding handler that is used with the data binding attribute.","pos":[23223,23370]},{"content":"A list of all supported binding handlers is provided in this document.","pos":[23371,23441]},{"content":"The data binding attribute requires the following syntax when used with any binding handler.","pos":[23442,23534]},{"content":"The syntax for <bpt id=\"p1\">**</bpt>data-dyn-bind<ept id=\"p1\">**</ept> is:","pos":[23535,23571],"source":" The syntax for **data-dyn-bind** is:"},{"content":"The data binding attribute accepts a comma-separated list of binding handler-value pairs, so you can supply more than one binding handler to the binding attribute at a time.","pos":[23638,23811]},{"content":"The following example binds the <bpt id=\"p1\">**</bpt>visible<ept id=\"p1\">**</ept> property of the div element to true, and binds the <bpt id=\"p2\">**</bpt>textContent<ept id=\"p2\">**</ept> property of the div element to \"Hi\".","pos":[23812,23959],"source":" The following example binds the **visible** property of the div element to true, and binds the **textContent** property of the div element to \"Hi\"."},{"content":"The data binding attribute is a custom HTML attribute understood by the control framework.","pos":[24008,24098]},{"content":"The data binding attribute can be applied to any HTML element.","pos":[24099,24161]},{"content":"Some HTML elements may not have the behavior which the binding handler modifies.","pos":[24162,24242]},{"content":"For example, using the text binding handler on an <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>svg<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> element will not show the text since the <bpt id=\"p2\">**</bpt><ph id=\"ph3\">&amp;lt;</ph>svg<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">**</ept> element does not have a textContent property.","pos":[24243,24411],"source":" For example, using the text binding handler on an **&lt;svg&gt;** element will not show the text since the **&lt;svg&gt;** element does not have a textContent property."},{"content":"The control framework reads and executes the data bindings specified in the control’s template at runtime.","pos":[24412,24518]},{"content":"The lifecycle for the control in the browser can be summarized as follows:","pos":[24519,24593]},{"content":"The control’s HTM file is loaded by the browser.","pos":[24599,24647]},{"content":"Any script or resource files referenced in the HTM file are also loaded by the browser.","pos":[24652,24739]},{"content":"Steps 1 and 2 are executed only once during a user’s session, even if there are multiple instances of the control.","pos":[24740,24854]},{"content":"The JavaScript class's constructor for the control is call and passed with the X++ properties for the control instance.","pos":[24859,24978]},{"content":"The control’s template is copied from the HTM file and into the browser’s memory.","pos":[24983,25064]},{"content":"HTML elements in the control’s template are processed for data binding in hierarchical order (depth first), and data bindings on each element are executed in order from left-to-right","pos":[25069,25251]},{"content":"The final HTML, including the original data binding attributes as well as any other markup added by the binding handlers or by the framework, is added to the browser’s DOM and rendered for the user to see.","pos":[25256,25461]},{"content":"Later, when the value of an observable changes, any binding handlers subscribed to the observable are re-executed and the live DOM is updated in real-time.","pos":[25466,25621]},{"pos":[25626,25648],"content":"HTML: Binding handlers","linkify":"HTML: Binding handlers","nodes":[{"content":"HTML: Binding handlers","pos":[0,22]}]},{"pos":[25653,25657],"content":"attr","linkify":"attr","nodes":[{"content":"attr","pos":[0,4]}]},{"content":"The <bpt id=\"p1\">**</bpt>attr<ept id=\"p1\">**</ept> binding handler applies the supplied HTML attribute and value to the element.","pos":[25659,25749],"source":"The **attr** binding handler applies the supplied HTML attribute and value to the element."},{"content":"For a list of HTML attributes see <bpt id=\"p1\">[</bpt>W3 Schools – HTML Attributes<ept id=\"p1\">](http://www.w3schools.com/html/html_attributes.asp)</ept>.","pos":[25750,25866],"source":" For a list of HTML attributes see [W3 Schools – HTML Attributes](http://www.w3schools.com/html/html_attributes.asp)."},{"content":"The arguments are passed in as an object array.","pos":[25867,25914]},{"content":"Each argument is dual-valued.","pos":[25915,25944]},{"content":"The first value is the name of the attribute, and the second value is the value of the attribute.","pos":[25945,26042]},{"pos":[26048,26126],"content":"<bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>: a string that specifies the desired name of the attribute to create.","source":"**Name**: a string that specifies the desired name of the attribute to create."},{"content":"<bpt id=\"p1\">**</bpt>Value or Expression:<ept id=\"p1\">**</ept> a string that specifies the value to set on the attribute.","pos":[26131,26214],"source":"**Value or Expression:** a string that specifies the value to set on the attribute."},{"content":"If an expression is supplied, the value returned by evaluating the expression will be used.","pos":[26215,26306]},{"content":"The following example creates the title and name attributes and sets their value.","pos":[26308,26389]},{"content":"The following example uses expressions and functions.","pos":[26682,26735]},{"content":"However, using JavaScript functions as in-line HTML like the example below is not recommended.","pos":[26736,26830]},{"pos":[27205,27210],"content":"click","linkify":"click","nodes":[{"content":"click","pos":[0,5]}]},{"pos":[27218,27226],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Subscribes the supplied function to the click event on the element.","pos":[27228,27295]},{"content":"For more information on subscribing to the click event see <bpt id=\"p1\">[</bpt>jQuery – click()<ept id=\"p1\">](http://api.jquery.com/click/)</ept>.","pos":[27296,27404],"source":" For more information on subscribing to the click event see [jQuery – click()](http://api.jquery.com/click/)."},{"pos":[27412,27421],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[27430,27453],"content":"EventHandler (function)","linkify":"EventHandler (function)","nodes":[{"content":"EventHandler (function)","pos":[0,23]}]},{"content":"The function to call when the event is raised.","pos":[27455,27501]},{"pos":[27509,27518],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"content":"The following example shows an alert message “Hello” when the element is clicked.","pos":[27520,27601]},{"content":"The following example prevents the click event on child elements from bubbling up to parent elements.","pos":[27894,27995]},{"content":"The example below will show only one alert with message “Hello” when the child element is clicked.","pos":[27996,28094]},{"content":"The following example prevents the browser default behavior from executing.","pos":[28681,28756]},{"content":"For anchor tags, the default hyperlink behavior is prevented, so the browser will not navigate to the link when the element is clicked.","pos":[28757,28892]},{"pos":[29394,29397],"content":"css","linkify":"css","nodes":[{"content":"css","pos":[0,3]}]},{"pos":[29405,29413],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Adds or removes the specified CSS class name(s) to the element, based on the specified condition(s).","pos":[29415,29515]},{"content":"Note that expressions supplied to the binding handler are only executed once.","pos":[29516,29593]},{"pos":[29601,29610],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The arguments are passed in as an object array.","pos":[29612,29659]},{"content":"Each argument is dual-valued.","pos":[29660,29689]},{"content":"The first value is the Class name, and the second value is the Condition.","pos":[29690,29763]},{"pos":[29772,29791],"content":"Class name (string)","linkify":"Class name (string)","nodes":[{"content":"Class name (string)","pos":[0,19]}]},{"content":"The CSS class name to add to the element.","pos":[29793,29834]},{"pos":[29843,29865],"content":"Condition (expression)","linkify":"Condition (expression)","nodes":[{"content":"Condition (expression)","pos":[0,22]}]},{"content":"The condition on which to add the CSS class name.","pos":[29867,29916]},{"content":"If the condition evaluates to true, the CSS class name is added.","pos":[29917,29981]},{"content":"If the condition evaluates to false, the CSS class name is removed.","pos":[29982,30049]},{"content":"If a supplied condition takes a dependency on an observable (via $dyn.value), then the condition will be re-evaluated whenever the observable value changes, and the associated CSS class name will be added/removed based on the new condition.","pos":[30050,30290]},{"content":"The following example adds the CSS class names \"red\", \"green\", and \"yellow\".","pos":[30291,30367]},{"pos":[30893,30898],"content":"event","linkify":"event","nodes":[{"content":"event","pos":[0,5]}]},{"pos":[30906,30914],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Subscribes the supplied event handler to the specified DOM event.","pos":[30916,30981]},{"content":"For a list of supported DOM events, see <bpt id=\"p1\">[</bpt>jQuery - Event<ept id=\"p1\">](http://api.jquery.com/Types/#Event)</ept>.","pos":[30982,31075],"source":" For a list of supported DOM events, see [jQuery - Event](http://api.jquery.com/Types/#Event)."},{"pos":[31083,31092],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"For details on the arguments to the event binding handler, see <bpt id=\"p1\">[</bpt>jQuery - .bind()<ept id=\"p1\">](http://api.jquery.com/bind/)</ept>.","pos":[31094,31205],"source":"For details on the arguments to the event binding handler, see [jQuery - .bind()](http://api.jquery.com/bind/)."},{"content":"The following example subscribes to the mouseover event and shows an alert when the element is hovered.","pos":[31206,31309]},{"pos":[31626,31633],"content":"foreach","linkify":"foreach","nodes":[{"content":"foreach","pos":[0,7]}]},{"pos":[31641,31649],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Repeats the content of the child element, updating the binding context of each child based on the supplied data.","pos":[31651,31763]},{"content":"Supply <bpt id=\"p1\">***</bpt>only one<ept id=\"p1\">***</ept> child element inside of the element with the <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> binding.","pos":[31764,31851],"source":" Supply ***only one*** child element inside of the element with the **foreach** binding."},{"content":"This one element is the element that will be cloned and repeated.","pos":[31852,31917]},{"content":"Any other additional elements or content will be removed when the binding is applied.","pos":[31918,32003]},{"content":"Binding handlers are executed in the order in which they appear on the element.","pos":[32004,32083]},{"content":"Since the <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding changes the binding context, it is a best practice to always place the <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> binding after all other bindings on the element.","pos":[32084,32245],"source":" Since the **foreach** binding changes the binding context, it is a best practice to always place the **foreach** binding after all other bindings on the element."},{"content":"This will ensure that preceding bindings are not affected by the binding context created by the <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding.","pos":[32246,32362],"source":" This will ensure that preceding bindings are not affected by the binding context created by the **foreach** binding."},{"content":"To avoid performance issues, be careful to not create unintentional dependencies on observables inside of your <bpt id=\"p1\">**</bpt>foreach.<ept id=\"p1\">**</ept>","pos":[32363,32486],"source":" To avoid performance issues, be careful to not create unintentional dependencies on observables inside of your **foreach.**"},{"content":"Do not access an observable in the array using <bpt id=\"p1\">**</bpt>$dyn.value<ept id=\"p1\">**</ept> from within the child elements of the <bpt id=\"p2\">**</bpt>foreach,<ept id=\"p2\">**</ept> as the <bpt id=\"p3\">**</bpt>foreach<ept id=\"p3\">**</ept> binding has already subscribed to the observables in the array.","pos":[32487,32682],"source":" Do not access an observable in the array using **$dyn.value** from within the child elements of the **foreach,** as the **foreach** binding has already subscribed to the observables in the array."},{"content":"Instead, use <bpt id=\"p1\">**</bpt>$dyn.peek<ept id=\"p1\">**</ept> to access an observable’s value once without creating a subscription.","pos":[32683,32779],"source":" Instead, use **$dyn.peek** to access an observable’s value once without creating a subscription."},{"pos":[32787,32796],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[32805,32837],"content":"Data (array list or JSON object)","linkify":"Data (array list or JSON object)","nodes":[{"content":"Data (array list or JSON object)","pos":[0,32]}]},{"content":"The list of items to bind the child element to.","pos":[32839,32886]},{"content":"If an array list is supplied, the binding context is an item in the array.","pos":[32887,32961]},{"content":"If a JSON object array is supplied, the binding context is one of the object’s properties.","pos":[32962,33052]},{"pos":[33060,33075],"content":"Scope variables","linkify":"Scope variables","nodes":[{"content":"Scope variables","pos":[0,15]}]},{"content":"When inside the scope of the <bpt id=\"p1\">**</bpt>foreach,<ept id=\"p1\">**</ept> the following scope variables are useful and can be used on the repeatable child element: $data, index, control, your own scope variables.","pos":[33077,33257],"source":"When inside the scope of the **foreach,** the following scope variables are useful and can be used on the repeatable child element: $data, index, control, your own scope variables."},{"content":"The following example uses <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> to render a span element for each color in the array.","pos":[33258,33350],"source":" The following example uses **foreach** to render a span element for each color in the array."},{"content":"The following examples shows a nested <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding.","pos":[33890,33948],"source":"The following examples shows a nested **foreach** binding."},{"content":"This example showcases how to use the index framework scope variable and custom scope variables to access the binding context from the parent element.","pos":[33949,34099]},{"pos":[35383,35385],"content":"if","linkify":"if","nodes":[{"content":"if","pos":[0,2]}]},{"pos":[35393,35401],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Conditionally renders and binds the child elements of the element with this binding.","pos":[35403,35487]},{"content":"This binding handler only operates on the child elements.","pos":[35488,35545]},{"content":"It will not show/hide the element with the binding, nor will this binding show/hide the text content of the element with the binding.","pos":[35546,35679]},{"content":"Bindings on the child elements will only be executed if the condition evaluates to true.","pos":[35680,35768]},{"content":"Once the bindings on child elements have been evaluated once they will remain data bound even if the condition changes to false.","pos":[35769,35897]},{"content":"This means that any calculations caused by bindings on child elements will continue to operate even after the child elements are hidden.","pos":[35898,36034]},{"content":"Consider this when evaluating the performance of your control.","pos":[36035,36097]},{"pos":[36105,36114],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[36123,36145],"content":"Condition (expression)","linkify":"Condition (expression)","nodes":[{"content":"Condition (expression)","pos":[0,22]}]},{"content":"Determines whether to render the children elements.","pos":[36147,36198]},{"content":"The following example conditionally binds the <bpt id=\"p1\">**</bpt>show<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>text<ept id=\"p2\">**</ept> elements.","pos":[36199,36276],"source":" The following example conditionally binds the **show** and **text** elements."},{"pos":[37016,37022],"content":"sizing","linkify":"sizing","nodes":[{"content":"sizing","pos":[0,6]}]},{"pos":[37030,37038],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Specifies the height and width of the control.","pos":[37040,37086]},{"content":"The sizing binding handler should always be applied to the root element of the template (the element that has the id attribute), and supplied the height and width values from the X++ instance of the control by using the $dyn.layout.sizing helper function.","pos":[37087,37342]},{"content":"See Example 1.","pos":[37343,37357]},{"pos":[37365,37374],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The arguments are passed an object containing height and width properties.","pos":[37376,37450]},{"pos":[37459,37471],"content":"Height (int)","linkify":"Height (int)","nodes":[{"content":"Height (int)","pos":[0,12]}]},{"content":"Determines the height in pixels of the element on which the binding handler is applied.","pos":[37473,37560]},{"pos":[37569,37580],"content":"Width (int)","linkify":"Width (int)","nodes":[{"content":"Width (int)","pos":[0,11]}]},{"content":"Determines the width in pixels of the element on which the binding handler is applied.","pos":[37582,37668]},{"content":"The following example specifies the size of <bpt id=\"p1\">**</bpt>MyControl.<ept id=\"p1\">**</ept>","pos":[37669,37727],"source":" The following example specifies the size of **MyControl.**"},{"pos":[38119,38224],"content":"The following example makes the control large or small depending on the value of the <bpt id=\"p1\">**</bpt>bigbox<ept id=\"p1\">**</ept> variable.","source":"The following example makes the control large or small depending on the value of the **bigbox** variable."},{"pos":[38695,38699],"content":"text","linkify":"text","nodes":[{"content":"text","pos":[0,4]}]},{"pos":[38707,38715],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Binds to the textContent property of the element.","pos":[38717,38766]},{"content":"The text binding handler is meant to be used with UI text.","pos":[38767,38825]},{"content":"It is not meant to bind non-string values (such as numbers, dates or Booleans) to the element.","pos":[38826,38920]},{"content":"Convert all values into strings before supplying them to the binding handler, by using the dyn.format function.","pos":[38921,39032]},{"content":"The text binding handler will replace all of the content inside of the element with the binding, whether or not the existing content is HTML or simple text.","pos":[39033,39189]},{"pos":[39197,39206],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[39215,39228],"content":"Text (string)","linkify":"Text (string)","nodes":[{"content":"Text (string)","pos":[0,13]}]},{"content":"The text to bind to.","pos":[39230,39250]},{"content":"The following example binds the textContext property of the div element to the text property on the control.","pos":[39251,39359]},{"pos":[39732,39736],"content":"vars","linkify":"vars","nodes":[{"content":"vars","pos":[0,4]}]},{"pos":[39744,39752],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Creates an HTML scope variable with the supplied name and value.","pos":[39754,39818]},{"content":"The created scope variable is accessible only from bindings in the template.","pos":[39819,39895]},{"content":"In addition, the scope variable is inherited by child elements.","pos":[39896,39959]},{"content":"Binding handlers are executed in the order in which they appear on the element.","pos":[39960,40039]},{"content":"Since the vars binding adds variables to the binding context, it is a best practice to always place the vars binding before all other bindings on the element.","pos":[40040,40198]},{"content":"This will ensure that the subsequent bindings can access scope variables added by the vars binding.","pos":[40199,40298]},{"content":"Do not create scope variables with any of the following names, as these names are reserved for framework scope variables: $control, $data, $index, and $value.","pos":[40299,40457]},{"pos":[40465,40474],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[40483,40513],"content":"Scope variables (object array)","linkify":"Scope variables (object array)","nodes":[{"content":"Scope variables (object array)","pos":[0,30]}]},{"content":"The object array whose keys are the scope variable names and whose values are the initial values for the scope variables.","pos":[40515,40636]},{"content":"The following example creates scope variables named \"Hello\" and \"World\" and displays their values.","pos":[40637,40735]},{"pos":[41202,41211],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"content":"For an example, see the foreach binding handler examples.","pos":[41213,41270]},{"pos":[41277,41284],"content":"visible","linkify":"visible","nodes":[{"content":"visible","pos":[0,7]}]},{"pos":[41292,41300],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Sets the visibility of the element.","pos":[41302,41337]},{"content":"Always supply the visible binding handler on the root element of the template, and bind to the <bpt id=\"p1\">*</bpt>Visible<ept id=\"p1\">*</ept> property from the X++ control.","pos":[41338,41473],"source":" Always supply the visible binding handler on the root element of the template, and bind to the *Visible* property from the X++ control."},{"content":"This will ensure that the control respects the <bpt id=\"p1\">*</bpt>Visible<ept id=\"p1\">*</ept> property when it is set by a form developer or when it is set by the framework.","pos":[41474,41610],"source":" This will ensure that the control respects the *Visible* property when it is set by a form developer or when it is set by the framework."},{"content":"If a control is initialized with its <bpt id=\"p1\">*</bpt>Visible<ept id=\"p1\">*</ept> X++ property set to false, then the control will not appear on the form, and it the control’s template will not be loaded in the browser.","pos":[41611,41795],"source":" If a control is initialized with its *Visible* X++ property set to false, then the control will not appear on the form, and it the control’s template will not be loaded in the browser."},{"content":"If the control’s <bpt id=\"p1\">*</bpt>Visible<ept id=\"p1\">*</ept> X++ property is set to true at a later time, then the control’s template will be loaded and instantiated in the browser at that time.","pos":[41796,41956],"source":" If the control’s *Visible* X++ property is set to true at a later time, then the control’s template will be loaded and instantiated in the browser at that time."},{"content":"A control’s <bpt id=\"p1\">*</bpt>Visible<ept id=\"p1\">*</ept> X++ property can be inherited from its parent controls on the form.","pos":[41957,42046],"source":" A control’s *Visible* X++ property can be inherited from its parent controls on the form."},{"content":"An element’s visibility may be controlled by its parent elements, controls and containers, regardless of whether the visible binding handler is applied.","pos":[42047,42199]},{"content":"The cascading nature of visibility is a standard HTML behavior and is not specific to the control framework.","pos":[42200,42308]},{"pos":[42316,42325],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[42334,42351],"content":"Visible (boolean)","linkify":"Visible (boolean)","nodes":[{"content":"Visible (boolean)","pos":[0,17]}]},{"content":"Determines whether the element is visible or not.","pos":[42353,42402]},{"content":"The following example sets the visibility of the control's outermost div element.","pos":[42403,42484]},{"pos":[42965,42986],"content":"HTML: Scope variables","linkify":"HTML: Scope variables","nodes":[{"content":"HTML: Scope variables","pos":[0,21]}]},{"content":"Scope variables can be used when binding values to binding handlers.","pos":[42987,43055]},{"content":"Scope variables are only accessible from within the control’s HTML template, and can only be used with the data binding attribute.","pos":[43056,43186]},{"content":"Scope variables are neither accessible from other HTML attributes nor from the control’s JavaScript class, but scope variables can be used in inline JavaScript expressions, functions and JSON objects that are passed to binding handlers.","pos":[43187,43423]},{"pos":[43430,43438],"content":"$control","linkify":"$control","nodes":[{"content":"$control","pos":[0,8]}]},{"content":"The <bpt id=\"p1\">*</bpt>$control<ept id=\"p1\">*</ept> scope variable provides the bindings in the HTML template with access to the properties and functions on the control’s JavaScript instance.","pos":[43440,43594],"source":"The *$control* scope variable provides the bindings in the HTML template with access to the properties and functions on the control’s JavaScript instance."},{"content":"The following example binds visibility of the div element to the of Visible property of the control.","pos":[43595,43695]},{"pos":[43780,43785],"content":"$data","linkify":"$data","nodes":[{"content":"$data","pos":[0,5]}]},{"content":"The <bpt id=\"p1\">*</bpt>$data<ept id=\"p1\">*</ept> scope variable provides elements with access to their current binding context.","pos":[43787,43877],"source":"The *$data* scope variable provides elements with access to their current binding context."},{"content":"Only variables defined in $data (the binding context) or scope variables, can be used inside of HTML bindings.","pos":[43878,43988]},{"content":"Variables that do not exist in the current binding context and do not exist as current scope variable cannot be accessed from an HTML binding.","pos":[43989,44131]},{"content":"In most cases the binding context will be the control’s JavaScript instance, so <bpt id=\"p1\">*</bpt>$data<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>$control<ept id=\"p2\">*</ept> will be equivalent.","pos":[44132,44254],"source":" In most cases the binding context will be the control’s JavaScript instance, so *$data* and *$control* will be equivalent."},{"content":"However, in some cases the binding context can change.","pos":[44255,44309]},{"content":"For example, for elements inside of a <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding, <bpt id=\"p2\">*</bpt>$data<ept id=\"p2\">*</ept> provides the elements with access to the current array item.","pos":[44310,44437],"source":" For example, for elements inside of a **foreach** binding, *$data* provides the elements with access to the current array item."},{"content":"In cases involving multiple nested <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> bindings, elements in a nested binding may need access to the array item in a parent <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> binding.","pos":[44438,44590],"source":" In cases involving multiple nested **foreach** bindings, elements in a nested binding may need access to the array item in a parent **foreach** binding."},{"content":"To access items in the parent <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding, you may create a scope variable which will be accessible to elements in the nested <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> biding.","pos":[44591,44744],"source":" To access items in the parent **foreach** binding, you may create a scope variable which will be accessible to elements in the nested **foreach** biding."},{"content":"For an example, see the foreach binding handler examples.","pos":[44745,44802]},{"pos":[44809,44815],"content":"$index","linkify":"$index","nodes":[{"content":"$index","pos":[0,6]}]},{"content":"The $index scope variable provides a 0-based index of the array item when in a <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> binding.","pos":[44817,44916],"source":"The $index scope variable provides a 0-based index of the array item when in a **foreach** binding."},{"content":"For an example, see the foreach binding handler examples.","pos":[44917,44974]},{"pos":[44979,45011],"content":"JavaScript: Inherited properties","linkify":"JavaScript: Inherited properties","nodes":[{"content":"JavaScript: Inherited properties","pos":[0,32]}]},{"pos":[45017,45024],"content":"Visible","linkify":"Visible","nodes":[{"content":"Visible","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>Visible<ept id=\"p1\">**</ept> property is inherited from the base JavaScript class (via <bpt id=\"p2\">**</bpt>$dyn.ui.Controls.apply<ept id=\"p2\">**</ept>).","pos":[45026,45128],"source":"The **Visible** property is inherited from the base JavaScript class (via **$dyn.ui.Controls.apply**)."},{"content":"There is also a <bpt id=\"p1\">**</bpt>Visible<ept id=\"p1\">**</ept> property in X++ that the runtime class in inherits from the base <bpt id=\"p2\">**</bpt>FormControl<ept id=\"p2\">**</ept> X++ class.","pos":[45129,45248],"source":" There is also a **Visible** property in X++ that the runtime class in inherits from the base **FormControl** X++ class."},{"content":"Simply bind this property to the visible binding handler and place it on the root element of the HTML template for your control.","pos":[45249,45377]},{"content":"The framework takes care of the rest.","pos":[45378,45415]},{"content":"The following example shows how to use the Visible property.","pos":[45416,45476]},{"pos":[45600,45620],"content":"Observable framework","linkify":"Observable framework","nodes":[{"content":"Observable framework","pos":[0,20]}]},{"pos":[45626,45638],"content":"$dyn.observe","linkify":"$dyn.observe","nodes":[{"content":"$dyn.observe","pos":[0,12]}]},{"pos":[45646,45651],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Subscribes a function to changes of an observable.","pos":[45653,45703]},{"content":"We recommend that you use dispose.","pos":[45704,45738]},{"pos":[45823,45832],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[45841,45864],"content":"Observable (observable)","linkify":"Observable (observable)","nodes":[{"content":"Observable (observable)","pos":[0,23]}]},{"content":"Instance of an observable.","pos":[45866,45892]},{"content":"Or a function, which will become a $dyn.computed.","pos":[45893,45942]},{"pos":[45951,45970],"content":"Observer (function)","linkify":"Observer (function)","nodes":[{"content":"Observer (function)","pos":[0,19]}]},{"content":"Function is invoked upon registration and also later when the observable is updated.","pos":[45972,46056]},{"content":"Function is invoked with one argument, the value of the observable.","pos":[46057,46124]},{"content":"If Observer returns false, then we un-subscribed automatically.","pos":[46125,46188]},{"pos":[46197,46224],"content":"Context (options, optional)","linkify":"Context (options, optional)","nodes":[{"content":"Context (options, optional)","pos":[0,27]}]},{"content":"Context to pass to the Observer.","pos":[46226,46258]},{"content":"The Context becomes the <bpt id=\"p1\">***</bpt>this<ept id=\"p1\">***</ept> variable inside of the observer.","pos":[46259,46326],"source":" The Context becomes the ***this*** variable inside of the observer."},{"pos":[46335,46373],"content":"DisposableObserver (options, optional)","linkify":"DisposableObserver (options, optional)","nodes":[{"content":"DisposableObserver (options, optional)","pos":[0,38]}]},{"content":"Unsubscribes the supplied DisposableObserver","pos":[46375,46419]},{"pos":[46427,46434],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[46443,46464],"content":"Subscription (object)","linkify":"Subscription (object)","nodes":[{"content":"Subscription (object)","pos":[0,21]}]},{"content":"Observable, ID, Dispose function (public) used to unsubscribe The following example subscribes to the myObs observable, and executes the supplied function whenever the myObs observable value changes.","pos":[46466,46665]},{"content":"The following example shows how a function can automatically subscribe to observables simply by accessing the observable using $dyn.value.","pos":[46738,46876]},{"content":"The first function is treated like an observable whose value is dependent upon the value of two other observables (FirstName and LastName).","pos":[46877,47016]},{"content":"Every time one of the observables  (FirstName or LastName) changes its value, then the first function has also changed its value.","pos":[47017,47146]},{"content":"When this happens, the second function (the callback function) will log the concatenation of the observable values to the console.","pos":[47147,47277]},{"content":"The following example performs similarly to the previous example.","pos":[47606,47671]},{"content":"However, this example uses a computed observable, named myComp, to handle the concatenation.","pos":[47672,47764]},{"pos":[48180,48195],"content":"$dyn.observable","linkify":"$dyn.observable","nodes":[{"content":"$dyn.observable","pos":[0,15]}]},{"pos":[48203,48208],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Creates an observable variable.","pos":[48210,48241]},{"pos":[48291,48300],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[48309,48333],"content":"Initial value (optional)","linkify":"Initial value (optional)","nodes":[{"content":"Initial value (optional)","pos":[0,24]}]},{"content":"The value to initialize the observable to.","pos":[48335,48377]},{"pos":[48385,48392],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[48401,48422],"content":"Observable (function)","linkify":"Observable (function)","nodes":[{"content":"Observable (function)","pos":[0,21]}]},{"content":"The newly created observable The following example creates and observable variable named \"Hello\".","pos":[48424,48521]},{"pos":[48574,48584],"content":"$dyn.value","linkify":"$dyn.value","nodes":[{"content":"$dyn.value","pos":[0,10]}]},{"pos":[48592,48597],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Accesses the value of an observable variable.","pos":[48599,48644]},{"content":"When <bpt id=\"p1\">**</bpt>$dyn.value<ept id=\"p1\">**</ept> is called from inside of an observer function (such as an observer passed to <bpt id=\"p2\">**</bpt>$dyn.observe<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>$dyn.computed<ept id=\"p3\">**</ept>, as well as the binding expression passed to a binding handler) a dependency on the observable is created.","pos":[48645,48886],"source":" When **$dyn.value** is called from inside of an observer function (such as an observer passed to **$dyn.observe** or **$dyn.computed**, as well as the binding expression passed to a binding handler) a dependency on the observable is created."},{"content":"This will cause the binding handler or callback to re-execute whenever the value of the observable changes.","pos":[48887,48994]},{"content":"Because this dependency is created automatically when using <bpt id=\"p1\">**</bpt>$dyn.value<ept id=\"p1\">**</ept>, it is important to only use <bpt id=\"p2\">**</bpt>$dyn.value<ept id=\"p2\">**</ept> when you intentionally wish to create such a dependency.","pos":[48995,49170],"source":" Because this dependency is created automatically when using **$dyn.value**, it is important to only use **$dyn.value** when you intentionally wish to create such a dependency."},{"content":"If you wish to access the value of an observable without creating a dependency, you should use $dyn.peek.","pos":[49171,49276]},{"pos":[49316,49325],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[49334,49344],"content":"Observable","linkify":"Observable","nodes":[{"content":"Observable","pos":[0,10]}]},{"content":"The observable property whose value to access.","pos":[49346,49392]},{"pos":[49400,49407],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[49416,49421],"content":"Value","linkify":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"content":"The current value in the observable property The following example returns the value of variable named observable and prints it to the console.","pos":[49423,49566]},{"pos":[49619,49628],"content":"$dyn.peek","linkify":"$dyn.peek","nodes":[{"content":"$dyn.peek","pos":[0,9]}]},{"pos":[49636,49641],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Accesses the value of an observable variable, without creating a dependency.","pos":[49643,49719]},{"content":"For more information about dependency, see the $dyn.value function.","pos":[49720,49787]},{"pos":[49826,49835],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[49844,49854],"content":"Observable","linkify":"Observable","nodes":[{"content":"Observable","pos":[0,10]}]},{"content":"The observable whose value to access.","pos":[49856,49893]},{"pos":[49901,49908],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[49917,49922],"content":"Value","linkify":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"content":"The current value in the observable The following example returns the value of variable named observable and prints it to the console.","pos":[49924,50058]},{"pos":[50110,50123],"content":"$dyn.computed","linkify":"$dyn.computed","nodes":[{"content":"$dyn.computed","pos":[0,13]}]},{"pos":[50131,50136],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Wraps a function with an observability scope.","pos":[50138,50183]},{"content":"If observables are accessed from inside of the function by using the <bpt id=\"p1\">**</bpt>$dyn.value<ept id=\"p1\">**</ept> function, then the function will re-execute whenever the values of those observables change.","pos":[50184,50360],"source":" If observables are accessed from inside of the function by using the **$dyn.value** function, then the function will re-execute whenever the values of those observables change."},{"content":"Observables that are accessed by using <bpt id=\"p1\">**</bpt>$dyn.peek<ept id=\"p1\">**</ept> will not cause the function to re-execute when their values change.","pos":[50361,50481],"source":" Observables that are accessed by using **$dyn.peek** will not cause the function to re-execute when their values change."},{"pos":[50555,50564],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[50573,50592],"content":"Observer (function)","linkify":"Observer (function)","nodes":[{"content":"Observer (function)","pos":[0,19]}]},{"content":"Function is invoked upon registration and can also be invoked later due to an observable value change.","pos":[50594,50696]},{"content":"The Observer automatically observes any observables that are accessed using $dyn.value from within the scope of the function.","pos":[50697,50822]},{"pos":[50831,50858],"content":"Context (options, optional)","linkify":"Context (options, optional)","nodes":[{"content":"Context (options, optional)","pos":[0,27]}]},{"content":"Context to pass to the Observer.","pos":[50860,50892]},{"content":"The Context becomes the <bpt id=\"p1\">*</bpt>this<ept id=\"p1\">*</ept> variable inside of the observer.","pos":[50893,50956],"source":" The Context becomes the *this* variable inside of the observer."},{"pos":[50965,51003],"content":"DisposableObserver (options, optional)","linkify":"DisposableObserver (options, optional)","nodes":[{"content":"DisposableObserver (options, optional)","pos":[0,38]}]},{"content":"Unsubscribes the supplied DisposableObserver","pos":[51005,51049]},{"pos":[51057,51064],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[51073,51092],"content":"Anything (optional)","linkify":"Anything (optional)","nodes":[{"content":"Anything (optional)","pos":[0,19]}]},{"pos":[51094,51307],"content":"If the Observer returns a value, then that value will also be returned by the call to <bpt id=\"p1\">**</bpt>$dyn.computed<ept id=\"p1\">**</ept> on the first time <bpt id=\"p2\">**</bpt>$dyn.computed<ept id=\"p2\">**</ept> is called (upon registration) as well every time the observer is invoked.","source":"If the Observer returns a value, then that value will also be returned by the call to **$dyn.computed** on the first time **$dyn.computed** is called (upon registration) as well every time the observer is invoked."},{"pos":[51312,51331],"content":"Framework functions","linkify":"Framework functions","nodes":[{"content":"Framework functions","pos":[0,19]}]},{"pos":[51337,51354],"content":"$dyn.callFunction","linkify":"$dyn.callFunction","nodes":[{"content":"$dyn.callFunction","pos":[0,17]}]},{"pos":[51362,51367],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Calls the apply method on specified function.","pos":[51369,51414]},{"content":"Is cannot be used during an interaction.","pos":[51415,51455]},{"pos":[51463,51472],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[51481,51514],"content":"Function (function or observable)","linkify":"Function (function or observable)","nodes":[{"content":"Function (function or observable)","pos":[0,33]}]},{"content":"The function to call.","pos":[51516,51537]},{"content":"If an observable is supplied, the current value of the observable will be retrieved and used as the function.","pos":[51538,51647]},{"pos":[51656,51679],"content":"This (object, optional)","linkify":"This (object, optional)","nodes":[{"content":"This (object, optional)","pos":[0,23]}]},{"pos":[51681,51745],"content":"The object to assign to <bpt id=\"p1\">*</bpt>this<ept id=\"p1\">*</ept> within the scope of the function.","source":"The object to assign to *this* within the scope of the function."},{"pos":[51754,51781],"content":"Arguments (array, optional)","linkify":"Arguments (array, optional)","nodes":[{"content":"Arguments (array, optional)","pos":[0,27]}]},{"content":"The arguments to pass to the supplied function.","pos":[51783,51830]},{"pos":[51839,51868],"content":"Callback (function, optional)","linkify":"Callback (function, optional)","nodes":[{"content":"Callback (function, optional)","pos":[0,29]}]},{"content":"The callback function to call when the supplied Function has returned.","pos":[51870,51940]},{"content":"The callback will be passed any values that are returned by the function that is called.","pos":[51941,52029]},{"content":"The following example calls the <bpt id=\"p1\">**</bpt>apply<ept id=\"p1\">**</ept> function on the <bpt id=\"p2\">**</bpt>printName<ept id=\"p2\">**</ept> function.","pos":[52030,52111],"source":" The following example calls the **apply** function on the **printName** function."},{"pos":[52254,52312],"content":"The following example calls the <bpt id=\"p1\">**</bpt>getWholeName<ept id=\"p1\">**</ept> function.","source":"The following example calls the **getWholeName** function."},{"pos":[52712,52723],"content":"$dyn.format","linkify":"$dyn.format","nodes":[{"content":"$dyn.format","pos":[0,11]}]},{"pos":[52731,52736],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Builds a string using the supplied values according to the supplied format.","pos":[52738,52813]},{"pos":[52821,52830],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[52839,52854],"content":"Format (string)","linkify":"Format (string)","nodes":[{"content":"Format (string)","pos":[0,15]}]},{"content":"The format in which to build the string.","pos":[52856,52896]},{"content":"Use bracket notation for placeholders.","pos":[52897,52935]},{"pos":[52944,52961],"content":"Values (optional)","linkify":"Values (optional)","nodes":[{"content":"Values (optional)","pos":[0,17]}]},{"content":"The comma separated values to use in the format","pos":[52963,53010]},{"pos":[53018,53025],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[53034,53058],"content":"FormattedString (string)","linkify":"FormattedString (string)","nodes":[{"content":"FormattedString (string)","pos":[0,24]}]},{"content":"The string after formatting has been applied The following example builds a string with the first, middle initial, and the last name.","pos":[53060,53193]},{"pos":[53201,53210],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"pos":[53355,53365],"content":"$dyn.label","linkify":"$dyn.label","nodes":[{"content":"$dyn.label","pos":[0,10]}]},{"pos":[53373,53378],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"content":"Provides access to any labels stored via the Globalization API.","pos":[53380,53443]},{"pos":[53451,53460],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[53469,53488],"content":"Identifier (string)","linkify":"Identifier (string)","nodes":[{"content":"Identifier (string)","pos":[0,19]}]},{"content":"The label ID, as specified to the Globalization API.","pos":[53490,53542]},{"pos":[53550,53557],"content":"Returns","linkify":"Returns","nodes":[{"content":"Returns","pos":[0,7]}]},{"pos":[53566,53580],"content":"Value (string)","linkify":"Value (string)","nodes":[{"content":"Value (string)","pos":[0,14]}]},{"content":"The label string in the current culture, if the Identifier is found.","pos":[53582,53650]},{"content":"Otherwise, returns the supplied Identifier as a string.","pos":[53651,53706]},{"content":"The following example returns and prints the label named \"greeting\".","pos":[53707,53775]},{"pos":[53904,53907],"content":"CSS","linkify":"CSS","nodes":[{"content":"CSS","pos":[0,3]}]},{"content":"Add namespaces to all CSS class names by prepending the class name with the control’s template ID.","pos":[53913,54011]},{"content":"This will prevent your control and its styles from conflicting with other controls in the client.","pos":[54012,54109]},{"pos":[54114,54121],"content":"Flexbox","linkify":"Flexbox","nodes":[{"content":"Flexbox","pos":[0,7]}]},{"content":"For advanced layout scenarios we encourage using Flexbox.","pos":[54122,54179]},{"content":"Flexbox is compatible with the Extensible Control framework.","pos":[54180,54240]},{"content":"<bpt id=\"p1\">[</bpt>Using CSS flexible boxes (Mozilla Developer Network)<ept id=\"p1\">](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)</ept> Please see the <bpt id=\"p2\">[</bpt>public Flexbox documentation<ept id=\"p2\">](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)</ept> for explanations and examples of the following topics:","pos":[54241,54594],"source":"[Using CSS flexible boxes (Mozilla Developer Network)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) Please see the [public Flexbox documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) for explanations and examples of the following topics:"},{"content":"Responsive layouts","pos":[54600,54618]},{"content":"Building columns and rows","pos":[54623,54648]},{"content":"Arranging elements horizontally or vertically","pos":[54653,54698]},{"content":"Arranging nesting elements","pos":[54703,54729]},{"content":"Auto-sizing elements to stretch and shrink","pos":[54734,54776]},{"content":"Locking/Freezing elements","pos":[54781,54806]},{"content":"Building scrollable elements","pos":[54811,54839]},{"pos":[54841,54867],"content":"Control Lifecycle Diagrams","linkify":"Control Lifecycle Diagrams","nodes":[{"content":"Control Lifecycle Diagrams","pos":[0,26]}]},{"pos":[54899,54920],"content":"Control Instantiation","linkify":"Control Instantiation","nodes":[{"content":"Control Instantiation","pos":[0,21]}]},{"pos":[54921,55023],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>ExtensibilityProcess<ept id=\"p1\">](./media/extensibilityprocess-951x1024.png)](./media/extensibilityprocess.png)</ept>","source":"[![ExtensibilityProcess](./media/extensibilityprocess-951x1024.png)](./media/extensibilityprocess.png)"}]}