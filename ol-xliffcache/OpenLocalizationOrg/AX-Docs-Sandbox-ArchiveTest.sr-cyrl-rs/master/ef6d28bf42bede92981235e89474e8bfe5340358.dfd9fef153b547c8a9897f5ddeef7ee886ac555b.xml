{"content":"---\n# required metadata\n\ntitle: X++ session run-time functions\ndescription: This topic describes the session run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 31421\nms.assetid: a83ec18b-cc9e-40e3-ab06-87ff1c972a6a\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ session run-time functions\n\n[!include[banner](../includes/banner.md)]\n\n\nThis topic describes the session run-time functions.\n\ncurExt\n------\n\nRetrieves the extension that is used for the current company.\n\n    str curExt()\n\n### Return value\n\nThe extension for the current company.\n\n### Remarks\n\nUse this method to avoid a call to the server tier. The alternative is the **company** method of the **Application** class, which does call the server tier.\n\n### Example\n\n    static void curExtExample(Args _arg)\n    {\n            str s;\n            // Sets s to the extension of the current company.\n            s = curExt();\n            print \"Current extension is \" + s;\n    }\n\n## curUserId\nRetrieves the nonnumeric ID that represents the current user.\n\n    str curUserId()\n\n### Return value\n\nThe nonnumeric ID that represents the current user.\n\n### Example\n\n    static void curUserIdExample(Args _arg)\n    {\n            str s;\n            s = curUserId();\n            print \"Current user ID is \" + s;\n    }\n\n## funcName\nRetrieves a string that contains the current function context.\n\n    str funcName()\n\n### Return value\n\nThe name of the method that is executing this method.\n\n### Remarks\n\nIf execution is currently within the member of a table or class, the name of the method is prefixed with the name of that table or class.\n\n### Example\n\n    static void funcNameExample(Args _arg)\n    {\n            print \"Current function context is \" + funcName();\n    }\n\n## getCurrentPartition\nRetrieves the short name of the current partition.\n\n    str getCurrentPartition()\n\n### Return value\n\nThe short name of the current partition.\n\n### Remarks\n\nThe maximum length of the data partition name that is returned is eight characters.\n\n### Example\n\nThe following code example shows calls to, and output from, the **getCurrentPartition** function of the X++ language, and related functions or methods.\n\n    static public void Main(Args _args)  // X++ method.\n    {\n            int64 iPartition;\n            str sPartition;\n            SelectableDataArea oSelectableDataArea;  // System ExDT.\n            iPartition = getCurrentPartitionRecId();\n            sPartition = getcurrentpartition();\n            oSelectableDataArea = Global::getCompany( tableNum(BankAccountTable) );\n            Global::info( strFmt(\n                    \"getCurrentPartitionRecId =%1 , getCurrentPartition =%2 , getCompany =%3\",\n                    iPartition, sPartition, oSelectableDataArea) );\n    }\n    /**** Pasted from Infolog window:\n    Message_@SYS14327 (03:42:38 pm)\n    getCurrentPartitionRecId =5637144576 , getCurrentPartition =initial , getCompany =ceu\n    ****/\n\n## getCurrentPartitionRecId\nRetrieves the **RecId** field of the current partition.\n\n    int64 getCurrentPartitionRecId()\n\n### Return value\n\nThe **RecId** field of the current data partition.\n\n### Remarks\n\nTo see a code example that relies on the **getCurrentPartitionRecId** function, see [How to: Include a Filter for Partition in Direct Transact-SQL](http://msdn.microsoft.com/library/5ce90a42-e862-464e-90bc-1eb16a8afd1a(AX.60).aspx).\n\n### Example\n\nThe following code example shows calls to, and output from, the **getCurrentPartitionRecId** function of the X++ language, and related functions or methods.\n\n    static public void Main(Args _args)  // X++ method.\n    {\n            int64 iPartition;\n            str sPartition;\n            SelectableDataArea oSelectableDataArea;  // System ExDT.\n            iPartition = getCurrentPartitionRecId();\n            sPartition = getcurrentpartition();\n            oSelectableDataArea = Global::getCompany( tableNum(BankAccountTable) );\n            Global::info( strFmt(\n                    \"getCurrentPartitionRecId =%1 , getCurrentPartition =%2 , getCompany =%3\",\n                    iPartition, sPartition, oSelectableDataArea) );\n    }\n    /**** Pasted from Infolog window:\n    Message_@SYS14327 (03:42:38 pm)\n    getCurrentPartitionRecId =5637144576 , getCurrentPartition =initial , getCompany =ceu\n    ****/\n\n## getPrefix\nRetrieves the current execution prefix after successive calls to the **setPrefix** function.\n\n    str getPrefix()\n\n### Return value\n\nThe current execution prefix.\n\n### Remarks\n\nThe prefix mechanism makes it more straightforward to write precise error messages about the transactions that an application performs. Because a hierarchical display is created in the Infolog, it can be easier to determine where each error came from.\n\n### Example\n\n    static void getPrefixExample(Args _arg)\n    {\n            setPrefix(\"Prefix\");\n            setPrefix(\"Another prefix\");\n            print getPrefix();\n    }\n\n## sessionId\nRetrieves the session number of the current session.\n\n    int sessionId()\n\n### Return value\n\nThe numeric ID of the current session.\n\n### Remarks\n\nA session number is assigned when the client is started and connects to Application Object Server (AOS). Every call of this function during the life of the client returns the same integer value. The returned value is compatible with the **SessionID** extended data type. The **contains** methods return information about individual user sessions.\n\n### Example\n\n    static void sessionIdExample(Args _arg)\n    {\n            int session;\n            session = sessionId();\n            print \"This session ID is number \" + int2Str(session);\n    }\n\n## prmIsDefault\nDetermines whether the specified parameter for the current method has the default value.\n\n    int prmIsDefault(anytype argument)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| Argument  | The parameter to test. |\n\n### Return value\n\n**1** if the default value for the parameter was used; otherwise, **0** (zero).\n\n### Example\n\n    static void prmIsDefaultExample(Args _arg)\n    {\n            void fn(boolean b = true, int j = 42)\n            {\n                    if (prmIsDefault(b) == 1)\n                    {\n                            print \"First parameter is using the default value.\";\n                    }\n                    else\n                    {\n                            print \"First parameter is not using the default value.\";\n                    }\n            }\n            fn();\n            fn(false);\n    }\n\n## runAs\nEnables the caller to run an X++ method in the security context of another user. This function is most often used with batch processing.\n\n    container runAs(\n            str userId,\n            int classId,\n            str staticMethodName\n            [,\n            container params,\n            str company,\n            str language,\n            str partition\n            ])\n\n### Parameters\n\n| Parameter        | Description                                                                                       |\n|------------------|---------------------------------------------------------------------------------------------------|\n| userId           | The user to impersonate.                                                                          |\n| classId          | The class to invoke in the impersonated session.                                                  |\n| staticMethodName | The class method to invoke in the new user context.                                               |\n| params           | The parameters to pass to the method; optional.                                                   |\n| company          | The company that is selected for the impersonated session; optional.                              |\n| language         | The language that is selected for the impersonated session; optional.                             |\n| partition        | The partition key of the type that is returned by the **getCurrentPartition** function; optional. |\n\n### Return value\n\nA container that holds the return value or values of the method that is called by the **runAs** function, if any values were returned.\n\n### Remarks\n\nThis function makes it possible to run code as another user. This capability presents a security threat. Therefore, this function runs under [Code Access Security](http://msdn.microsoft.com/library/09299e91-5b73-4cf5-a17e-f1f39b6bae76(AX.60).aspx). Calls to this function on the server require permission from the **RunAsPermission** class. Each use of this application programming interface (API) should be threat-modeled. If a security vulnerability is discovered, validate input to this API. The debugger might ignore breakpoints that are located in a method that is called by using the **runAs** function. X++ code that is executed by the **runAs** function must run as Microsoft .NET Framework Common Intermediate Language (CIL). If CIL hasn't been generated for the target static method, an error message indicates that the method isn't found. The **PartitionKey** system type is the exact type of the *partition* parameter. **PartitionKey** is a string that has a maximum length of eight characters.\n\n### Example\n\nThe following example calls the **runDueDateEventsForUser** method in the **EventJobDueDate** class. The code runs in the security context of a user. Run this code by applying it to a method in a new class.\n\n    server static public void Main(Args _args)\n    {\n            RunAsPermission perm;\n            UserId runAsUser;\n            SysUserInfo userInfo;\n            userInfo = SysUserInfo::find();\n            runAsUser = userInfo.Id;\n            perm = new RunAsPermission(runAsUser);\n            perm.assert();\n            runAs(runAsUser, classnum(EventJobDueDate), \"runDueDateEventsForUser\");\n            CodeAccessPermission::revertAssert();\n    }\n\n## setPrefix\nSets the prefix for the current execution scope.\n\n    int setPrefix(str _prefix)\n\n### Parameters\n\n| Parameter | Description                                 |\n|-----------|---------------------------------------------|\n| \\_prefix  | The prefix for the current execution scope. |\n\n### Return value\n\n**0** if the prefix was set successfully.\n\n### Remarks\n\nThe complete prefix for the execution can be fetched by using the **getPrefix** function. When the scope is left, the prefix is automatically reset to the previous level. The prefix mechanism makes it more straightforward to write precise error messages about the transactions that an application performs. For example, the **AA** method calls the **BB** method, and each method calls the **setPrefix** function. Messages that the **BB** method writes to the Infolog appear nested in a hierarchy. When the **BB** method ends, and control returns to the **AA** method, the prefix that was set by the **BB** method isn't attached to subsequent messages.\n\n### Example\n\n    static void setPrefixExample(Args _arg)\n    {\n            int i;\n            i = setPrefix(\"Prefix\");\n            print i;\n    }\n\n\n\n","nodes":[{"pos":[4,636],"embed":true,"restype":"x-metadata","content":"# required metadata\n\ntitle: X++ session run-time functions\ndescription: This topic describes the session run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 31421\nms.assetid: a83ec18b-cc9e-40e3-ab06-87ff1c972a6a\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"X++ session run-time functions","nodes":[{"pos":[0,30],"content":"X++ session run-time functions","nodes":[{"content":"X++ session run-time functions","pos":[0,30]}]}],"path":["title"],"extradata":"MT"},{"content":"This topic describes the session run-time functions.","nodes":[{"pos":[0,52],"content":"This topic describes the session run-time functions.","nodes":[{"content":"This topic describes the session run-time functions.","pos":[0,52]}]}],"path":["description"],"extradata":"MT"}],"header":"# required metadata\n","yml":true},{"pos":[644,674],"content":"X++ session run-time functions","linkify":"X++ session run-time functions","nodes":[{"content":"X++ session run-time functions","pos":[0,30]}]},{"content":"This topic describes the session run-time functions.","pos":[720,772]},{"pos":[774,780],"content":"curExt","linkify":"curExt","nodes":[{"content":"curExt","pos":[0,6]}]},{"content":"Retrieves the extension that is used for the current company.","pos":[789,850]},{"pos":[874,886],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The extension for the current company.","pos":[888,926]},{"pos":[932,939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to avoid a call to the server tier.","pos":[941,992]},{"content":"The alternative is the <bpt id=\"p1\">**</bpt>company<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>Application<ept id=\"p2\">**</ept> class, which does call the server tier.","pos":[993,1097],"source":" The alternative is the **company** method of the **Application** class, which does call the server tier."},{"pos":[1103,1110],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1324,1333],"content":"curUserId","linkify":"curUserId","nodes":[{"content":"curUserId","pos":[0,9]}]},{"content":"Retrieves the nonnumeric ID that represents the current user.","pos":[1334,1395]},{"pos":[1422,1434],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The nonnumeric ID that represents the current user.","pos":[1436,1487]},{"pos":[1493,1500],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1655,1663],"content":"funcName","linkify":"funcName","nodes":[{"content":"funcName","pos":[0,8]}]},{"content":"Retrieves a string that contains the current function context.","pos":[1664,1726]},{"pos":[1752,1764],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the method that is executing this method.","pos":[1766,1819]},{"pos":[1825,1832],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If execution is currently within the member of a table or class, the name of the method is prefixed with the name of that table or class.","pos":[1834,1971]},{"pos":[1977,1984],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2108,2127],"content":"getCurrentPartition","linkify":"getCurrentPartition","nodes":[{"content":"getCurrentPartition","pos":[0,19]}]},{"content":"Retrieves the short name of the current partition.","pos":[2128,2178]},{"pos":[2215,2227],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The short name of the current partition.","pos":[2229,2269]},{"pos":[2275,2282],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The maximum length of the data partition name that is returned is eight characters.","pos":[2284,2367]},{"pos":[2373,2380],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2382,2533],"content":"The following code example shows calls to, and output from, the <bpt id=\"p1\">**</bpt>getCurrentPartition<ept id=\"p1\">**</ept> function of the X++ language, and related functions or methods.","source":"The following code example shows calls to, and output from, the **getCurrentPartition** function of the X++ language, and related functions or methods."},{"pos":[3290,3314],"content":"getCurrentPartitionRecId","linkify":"getCurrentPartitionRecId","nodes":[{"content":"getCurrentPartitionRecId","pos":[0,24]}]},{"pos":[3315,3370],"content":"Retrieves the <bpt id=\"p1\">**</bpt>RecId<ept id=\"p1\">**</ept> field of the current partition.","source":"Retrieves the **RecId** field of the current partition."},{"pos":[3414,3426],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[3428,3478],"content":"The <bpt id=\"p1\">**</bpt>RecId<ept id=\"p1\">**</ept> field of the current data partition.","source":"The **RecId** field of the current data partition."},{"pos":[3484,3491],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3493,3725],"content":"To see a code example that relies on the <bpt id=\"p1\">**</bpt>getCurrentPartitionRecId<ept id=\"p1\">**</ept> function, see <bpt id=\"p2\">[</bpt>How to: Include a Filter for Partition in Direct Transact-SQL<ept id=\"p2\">](http://msdn.microsoft.com/library/5ce90a42-e862-464e-90bc-1eb16a8afd1a(AX.60).aspx)</ept>.","source":"To see a code example that relies on the **getCurrentPartitionRecId** function, see [How to: Include a Filter for Partition in Direct Transact-SQL](http://msdn.microsoft.com/library/5ce90a42-e862-464e-90bc-1eb16a8afd1a(AX.60).aspx)."},{"pos":[3731,3738],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3740,3896],"content":"The following code example shows calls to, and output from, the <bpt id=\"p1\">**</bpt>getCurrentPartitionRecId<ept id=\"p1\">**</ept> function of the X++ language, and related functions or methods.","source":"The following code example shows calls to, and output from, the **getCurrentPartitionRecId** function of the X++ language, and related functions or methods."},{"pos":[4653,4662],"content":"getPrefix","linkify":"getPrefix","nodes":[{"content":"getPrefix","pos":[0,9]}]},{"pos":[4663,4755],"content":"Retrieves the current execution prefix after successive calls to the <bpt id=\"p1\">**</bpt>setPrefix<ept id=\"p1\">**</ept> function.","source":"Retrieves the current execution prefix after successive calls to the **setPrefix** function."},{"pos":[4782,4794],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The current execution prefix.","pos":[4796,4825]},{"pos":[4831,4838],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The prefix mechanism makes it more straightforward to write precise error messages about the transactions that an application performs.","pos":[4840,4975]},{"content":"Because a hierarchical display is created in the Infolog, it can be easier to determine where each error came from.","pos":[4976,5091]},{"pos":[5097,5104],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5271,5280],"content":"sessionId","linkify":"sessionId","nodes":[{"content":"sessionId","pos":[0,9]}]},{"content":"Retrieves the session number of the current session.","pos":[5281,5333]},{"pos":[5360,5372],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The numeric ID of the current session.","pos":[5374,5412]},{"pos":[5418,5425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A session number is assigned when the client is started and connects to Application Object Server (AOS).","pos":[5427,5531]},{"content":"Every call of this function during the life of the client returns the same integer value.","pos":[5532,5621]},{"content":"The returned value is compatible with the <bpt id=\"p1\">**</bpt>SessionID<ept id=\"p1\">**</ept> extended data type.","pos":[5622,5697],"source":" The returned value is compatible with the **SessionID** extended data type."},{"content":"The <bpt id=\"p1\">**</bpt>contains<ept id=\"p1\">**</ept> methods return information about individual user sessions.","pos":[5698,5773],"source":" The **contains** methods return information about individual user sessions."},{"pos":[5779,5786],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5975,5987],"content":"prmIsDefault","linkify":"prmIsDefault","nodes":[{"content":"prmIsDefault","pos":[0,12]}]},{"content":"Determines whether the specified parameter for the current method has the default value.","pos":[5988,6076]},{"pos":[6122,6132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6136,6145]},{"content":"Description","pos":[6148,6159]},{"content":"Argument","pos":[6214,6222]},{"content":"The parameter to test.","pos":[6226,6248]},{"pos":[6256,6268],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[6270,6349],"content":"<bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> if the default value for the parameter was used; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"**1** if the default value for the parameter was used; otherwise, **0** (zero)."},{"pos":[6355,6362],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6871,6876],"content":"runAs","linkify":"runAs","nodes":[{"content":"runAs","pos":[0,5]}]},{"content":"Enables the caller to run an X++ method in the security context of another user.","pos":[6877,6957]},{"content":"This function is most often used with batch processing.","pos":[6958,7013]},{"pos":[7260,7270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7274,7283]},{"content":"Description","pos":[7293,7304]},{"content":"userId","pos":[7516,7522]},{"content":"The user to impersonate.","pos":[7535,7559]},{"content":"classId","pos":[7637,7644]},{"content":"The class to invoke in the impersonated session.","pos":[7656,7704]},{"content":"staticMethodName","pos":[7758,7774]},{"content":"The class method to invoke in the new user context.","pos":[7777,7828]},{"content":"params","pos":[7879,7885]},{"content":"The parameters to pass to the method; optional.","pos":[7898,7945]},{"content":"company","pos":[8000,8007]},{"content":"The company that is selected for the impersonated session; optional.","pos":[8019,8087]},{"content":"language","pos":[8121,8129]},{"content":"The language that is selected for the impersonated session; optional.","pos":[8140,8209]},{"content":"partition","pos":[8242,8251]},{"pos":[8261,8358],"content":"The partition key of the type that is returned by the <bpt id=\"p1\">**</bpt>getCurrentPartition<ept id=\"p1\">**</ept> function; optional.","source":"The partition key of the type that is returned by the **getCurrentPartition** function; optional."},{"pos":[8366,8378],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8380,8514],"content":"A container that holds the return value or values of the method that is called by the <bpt id=\"p1\">**</bpt>runAs<ept id=\"p1\">**</ept> function, if any values were returned.","source":"A container that holds the return value or values of the method that is called by the **runAs** function, if any values were returned."},{"pos":[8520,8527],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function makes it possible to run code as another user.","pos":[8529,8589]},{"content":"This capability presents a security threat.","pos":[8590,8633]},{"content":"Therefore, this function runs under <bpt id=\"p1\">[</bpt>Code Access Security<ept id=\"p1\">](http://msdn.microsoft.com/library/09299e91-5b73-4cf5-a17e-f1f39b6bae76(AX.60).aspx)</ept>.","pos":[8634,8777],"source":" Therefore, this function runs under [Code Access Security](http://msdn.microsoft.com/library/09299e91-5b73-4cf5-a17e-f1f39b6bae76(AX.60).aspx)."},{"content":"Calls to this function on the server require permission from the <bpt id=\"p1\">**</bpt>RunAsPermission<ept id=\"p1\">**</ept> class.","pos":[8778,8869],"source":" Calls to this function on the server require permission from the **RunAsPermission** class."},{"content":"Each use of this application programming interface (API) should be threat-modeled.","pos":[8870,8952]},{"content":"If a security vulnerability is discovered, validate input to this API.","pos":[8953,9023]},{"content":"The debugger might ignore breakpoints that are located in a method that is called by using the <bpt id=\"p1\">**</bpt>runAs<ept id=\"p1\">**</ept> function.","pos":[9024,9138],"source":" The debugger might ignore breakpoints that are located in a method that is called by using the **runAs** function."},{"content":"X++ code that is executed by the <bpt id=\"p1\">**</bpt>runAs<ept id=\"p1\">**</ept> function must run as Microsoft .NET Framework Common Intermediate Language (CIL).","pos":[9139,9263],"source":" X++ code that is executed by the **runAs** function must run as Microsoft .NET Framework Common Intermediate Language (CIL)."},{"content":"If CIL hasn't been generated for the target static method, an error message indicates that the method isn't found.","pos":[9264,9378]},{"content":"The <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> system type is the exact type of the <bpt id=\"p2\">*</bpt>partition<ept id=\"p2\">*</ept> parameter.","pos":[9379,9459],"source":" The **PartitionKey** system type is the exact type of the *partition* parameter."},{"content":"<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> is a string that has a maximum length of eight characters.","pos":[9460,9535],"source":"**PartitionKey** is a string that has a maximum length of eight characters."},{"pos":[9541,9548],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example calls the <bpt id=\"p1\">**</bpt>runDueDateEventsForUser<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>EventJobDueDate<ept id=\"p2\">**</ept> class.","pos":[9550,9650],"source":"The following example calls the **runDueDateEventsForUser** method in the **EventJobDueDate** class."},{"content":"The code runs in the security context of a user.","pos":[9651,9699]},{"content":"Run this code by applying it to a method in a new class.","pos":[9700,9756]},{"pos":[10212,10221],"content":"setPrefix","linkify":"setPrefix","nodes":[{"content":"setPrefix","pos":[0,9]}]},{"content":"Sets the prefix for the current execution scope.","pos":[10222,10270]},{"pos":[10308,10318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10322,10331]},{"content":"Description","pos":[10334,10345]},{"content":"<ph id=\"ph1\">\\_</ph>prefix","pos":[10442,10450],"source":"\\_prefix"},{"content":"The prefix for the current execution scope.","pos":[10454,10497]},{"pos":[10505,10517],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[10519,10560],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> if the prefix was set successfully.","source":"**0** if the prefix was set successfully."},{"pos":[10566,10573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The complete prefix for the execution can be fetched by using the <bpt id=\"p1\">**</bpt>getPrefix<ept id=\"p1\">**</ept> function.","pos":[10575,10664],"source":"The complete prefix for the execution can be fetched by using the **getPrefix** function."},{"content":"When the scope is left, the prefix is automatically reset to the previous level.","pos":[10665,10745]},{"content":"The prefix mechanism makes it more straightforward to write precise error messages about the transactions that an application performs.","pos":[10746,10881]},{"content":"For example, the <bpt id=\"p1\">**</bpt>AA<ept id=\"p1\">**</ept> method calls the <bpt id=\"p2\">**</bpt>BB<ept id=\"p2\">**</ept> method, and each method calls the <bpt id=\"p3\">**</bpt>setPrefix<ept id=\"p3\">**</ept> function.","pos":[10882,10987],"source":" For example, the **AA** method calls the **BB** method, and each method calls the **setPrefix** function."},{"content":"Messages that the <bpt id=\"p1\">**</bpt>BB<ept id=\"p1\">**</ept> method writes to the Infolog appear nested in a hierarchy.","pos":[10988,11071],"source":" Messages that the **BB** method writes to the Infolog appear nested in a hierarchy."},{"content":"When the <bpt id=\"p1\">**</bpt>BB<ept id=\"p1\">**</ept> method ends, and control returns to the <bpt id=\"p2\">**</bpt>AA<ept id=\"p2\">**</ept> method, the prefix that was set by the <bpt id=\"p3\">**</bpt>BB<ept id=\"p3\">**</ept> method isn't attached to subsequent messages.","pos":[11072,11226],"source":" When the **BB** method ends, and control returns to the **AA** method, the prefix that was set by the **BB** method isn't attached to subsequent messages."},{"pos":[11232,11239],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}]}