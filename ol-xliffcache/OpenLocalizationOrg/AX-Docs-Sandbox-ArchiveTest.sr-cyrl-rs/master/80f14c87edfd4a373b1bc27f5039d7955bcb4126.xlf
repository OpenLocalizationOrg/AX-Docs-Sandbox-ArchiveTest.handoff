<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80f14c87edfd4a373b1bc27f5039d7955bcb4126</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\dev-tools\linq-provider-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24141ca863fcee439e464d507647dcdb309eaee3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">764fad4f6b1304f300eea0018bc7d5a2886b25e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>LINQ provider for C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic discusses the LINQ provider.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>LINQ provider for C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses the LINQ provider.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query) is a set of classes and methods that enable you to access data that is stored in a variety of places and formats.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The LINQ framework is the standard for accessing data in managed languages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>LINQ presents to programmers a unified and consistent API for data access from heterogeneous data sources, such as:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In-memory object graphs</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Active Directory entries</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Flickr pictures and XML</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>SQL Server</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The LINQ provider allows the user to access business data by using .NET managed languages.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Two syntactical mechanisms for accessing LINQ</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are two syntactical approaches for using LINQ, as described in the following table.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X++<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C<ph id="ph1">\#</ph> and Visual Basic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LINQ by standard method call syntax.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Impractical.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Language support for generics is vital for LINQ and is not supported in X++.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Available, requires lambda syntax.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LINQ by specialized syntax that is understood by the compiler.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Not available.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Available, easier to use.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There are two syntactic mechanisms for accessing the LINQ provider in C<ph id="ph1">\#</ph> (or in Visual Basic):</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>By standard, or fluent, method call syntax.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By specialized syntax that the C<ph id="ph1">\#</ph> compiler has been enhanced to understand as equivalent to the LINQ method calls.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(Such syntax is sometimes called “syntactic sugar”.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This topic is going to review each syntactic mechanism for LINQ, starting with the easier specialized syntax.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>LINQ by specialized syntax in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Some .NET languages understand specialized syntax for LINQ as an alternative that is easier for us to write.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C<ph id="ph1">\#</ph> is one such language.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Note about var:<ept id="p1">***</ept> To use LINQ in C<ph id="ph1">\#</ph>, you must understand the C<ph id="ph2">\#</ph> keyword <bpt id="p2">**</bpt>var<ept id="p2">**</ept>, which is used to declare variables.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The var keyword tells the compiler to figure out the data type of the variable by what is assigned to the variable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This feature is now also available in X++.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The type is implicit in the source code, and the type is settled and unvarying after the compilation completes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Comparing X++ to C<ph id="ph1">\#</ph> LINQ</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The X++ language supports the useful and easy to use <ph id="ph1">`while select`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This lest you compare the X++ <ph id="ph1">`while select`</ph> syntax to the specialized C<ph id="ph2">\#</ph> LINQ syntax.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>First, here is the X++ sample.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next is an equivalent query in C<ph id="ph1">\#</ph> with the specialized LINQ syntax.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>LINQ query in C<ph id="ph1">\#</ph> by method syntax, using the lambda operator =<ph id="ph2">&amp;gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Next is another use of LINQ in C<ph id="ph1">\#</ph>, except this time the more standard syntax is used to call the LINQ API.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The approach also involves use of the lambda operator <bpt id="p1">**</bpt><ph id="ph1">=</ph><ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following C<ph id="ph1">\#</ph> query is functionally equivalent to the preceding C<ph id="ph2">\#</ph> query.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There's a good match between the <ph id="ph1">`while select`</ph> syntax used in X++ and the specialized LINQ syntax in C<ph id="ph2">\#</ph> (Visual Basic has particularly good LINQ syntax).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It's evident that the specialized LINQ syntax is actually very useful in expressing joins, but the specialized syntax built into the C<ph id="ph1">\#</ph> compiler doesn't handle the extensions provided by Finance and Operations.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Limitation of the specialized LINQ syntax</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A limitation of the specialized LINQ syntax is that is can't be augmented with extensions to the LINQ provider.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In contrast, standard syntax of method calls plus the lambda operator can be extended as needed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For instance, the LINQ framework provides a method for cross-company hints that can't be expressed in the special syntax for LINQ in C<ph id="ph1">\#</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Fortunately, due to the ability to compose queries, this limitation need not be a major problem.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Calls to esoteric LINQ methods can be appended to the specialized LINQ syntax.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following C<ph id="ph1">\#</ph> code shows this being done for the <bpt id="p1">**</bpt>crosscompany<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>LINQ query execution</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The code generated for a LINQ query builds a tree at run time.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When the results of the query are required, this tree is passed to the backend that will interpret it, and will provide the data as expressed in the query.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The X++ compiler also builds a tree to express the query, but the X++ compiler has intimate knowledge about the capabilities of the database backend.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This has several important implications as described in the following subsections.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Inability to diagnose problems at LINQ compile-time</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The C<ph id="ph1">\#</ph> compiler is largely unable to foresee and diagnose errors that will occur at run time due to the inability of the backend to process an incompatible LINQ query.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For instance, in the following C<ph id="ph1">\#</ph> code block, the specialized LINQ syntax is valid according to the C<ph id="ph2">\#</ph> compiler.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Yet at run time, an error would occur.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This query can't be handled by the current data layer, and while no errors are diagnosed at compile time, an error would occur at run time.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performance penalty with LINQ</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>There is an overhead penalty paid at run time, when analysis of the tree occurs, and a suitable access language is generated.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>As we might expect, the performance penalty is incurred when analyzing the LINQ expression tree.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The time required at run time to actually fetch the data doesn't vary much between C<ph id="ph1">\#</ph> and LINQ versus X++ with <ph id="ph2">`while select`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Our preliminary numbers show that the beginning-to-end performance of the query is about three times longer with C<ph id="ph1">\#</ph> LINQ, compared to X++ <ph id="ph2">`while select`</ph>, when very few records are fetched.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>But when many records are fetched, the total times are about the same between C<ph id="ph1">\#</ph> and X++.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The conclusion is that it takes much longer to fetch a lot of records than it takes to analyze the language tree.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Query composability with LINQ</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The model that's provided by LINQ allows queries to be composed of subqueries.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The X++ language can't cleanly provide this feature.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To understand this, consider the following C<ph id="ph1">\#</ph> LINQ code.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A flag is passed to a method to control the ordering of data results.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Set based operations with LINQ</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>LINQ queries can be applied for CRUD operations.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>But the model for updating, deleting, and inserting records isn't useful for the expression of set based operations.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>We're now working on extensions to add to the LINQ model that will translate into set based operations.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming language support<ept id="p1">](programming-language-support.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Technical Concepts Guide<ept id="p1">](developer-home-page.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>