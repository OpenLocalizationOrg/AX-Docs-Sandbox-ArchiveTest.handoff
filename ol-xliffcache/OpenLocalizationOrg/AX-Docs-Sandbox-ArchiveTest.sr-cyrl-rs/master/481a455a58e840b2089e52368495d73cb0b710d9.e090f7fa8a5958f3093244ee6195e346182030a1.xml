{"content":"---\n# required metadata\n\ntitle: R Classes\ndescription: System API classes that start with the letter R.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 51721\nms.assetid: c41fab91-b526-4a6a-b0ed-574fdc037848\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# R Classes\n\n[!include[banner](../includes/banner.md)]\n\n\n\n\nClass Random\n------------\n\n    class Random extends Object\n\nThe Random class generates random numbers.\n\n### Remarks\n\nBecause this class operates on a global random generator, the individual random objects will interfere with each other. Therefore, it is not possible to predict the sequence of numbers for a specific random object.\n\n### Examples\n\nThe following example prints 100 random numbers.\n\n    static void example() \n    { \n        Random myRand = new Random(); \n        int i; \n        for(i=0;i<100;i++) \n        { \n            print myRand.nextInt(); \n        } \n    }\n\n### Methods\n\n| Method               | Description                                               |\n|----------------------|-----------------------------------------------------------|\n| public int nextInt() | Returns the next random number from the random generator. |\n| public void new()    | Initializes a new instance of the Random class.           |\n\n### Method nextInt\n\nReturns the next random number from the random generator.\n\n    public int nextInt()\n\n#### Return Value\n\nThe next random integer number from the random generator.\n\n#### Remarks\n\nThe value will be in the range from 0 to 32767 (0x7FFF).\n\n### Method new\n\nInitializes a new instance of the Random class.\n\n    public void new()\n\n## Class RecordInsertList\n    class RecordInsertList extends Object\n\nThe RecordInsertList class provides array insertion capabilities in the kernel.\n\n### Remarks\n\nThis class lets you insert more than one record into the database at a time, which reduces communication between the application and the database. Records are inserted only when the kernel finds the time appropriate, but they are inserted no later than the call to the insertDatabase, add, and insertDatabase methods. The RecordInsertList.add and RecordInsertList.insertDatabase methods return the accumulated number of records that are currently inserted, so that you can keep track of when the records are actually inserted. The array insert operation automatically falls back to classic record-by-record inserts when non-SQL based tables are used (for example, temporary tables) or when the insert method on the table is overridden (unless it is explicitly discarded). The RecordInsertList class resembles the RecordSortedList class, but it has built-in client/server support (it automatically packs data from one tier to another when this is required) and lacks the sort order features that are available in the RecordSortedList class.\n\n### Examples\n\nThe following example uses the RecordInsertList class to copy a bill of materials (BOM) from one BOM to another.\n\n    void copyBOM(BOMId _FromBOM, BOMId _ToBOM) \n    { \n        RecordInsertList BOMList; \n        BOM BOM, newBOM; \n        BOMList = new RecordInsertList(tableNum(BOM)); \n        while select BOM \n        where BOM.BOMId == _FromBOM \n        { \n            newBOM.data(BOM); \n            newBOM.BOMId = _ToBOM; \n            BOMList.add(newBOM); \n        } \n        BOMList.insertDatabase(); \n    }\n\n### Methods\n\n| Method                                                                                                                                                                                              | Description                                                                                       |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|\n| public int add(Common record)                                                                                                                                                                       | Adds a record to a RecordInsertList object for subsequent insertion into the database.            |\n| public int insertDatabase()                                                                                                                                                                         | Inserts all records that have not already been inserted into the current RecordInsertList object. |\n| public void new(TableId tableId, \\[boolean skipInsertMethod\\], \\[boolean skipDatabaseLog\\], \\[boolean skipEvents\\], \\[boolean skipAosValidation\\], \\[boolean skipRLSValidation\\], \\[Common table\\]) | Creates a new object to hold records for insertion into the database.                             |\n\n### Method add\n\nAdds a record to a RecordInsertList object for subsequent insertion into the database.\n\n    public int add(Common record)\n\n#### Parameters\n\nrecord  \nA database buffer of the same type that is used to instantiate the class.\n\n#### Return Value\n\nAn integer that indicates whether the record has been successfully added to the list.\n\n#### Remarks\n\nThe add method can flush records to the database whenever this will speed up performance. However, to guarantee that all records in the list are inserted, use the RecordInsertList.insertDatabase method.\n\n#### Examples\n\nThe following example uses the RecordInsertList class to copy a BOM from one BOM to another. The add method is used to add all the records in the BOM to the RecordInsertList object before a final call is made to the insertDatabase method to insert all remaining records.\n\n    void copyBOM(BOMId _FromBOM, BOMId _ToBOM) \n    { \n        RecordInsertList BOMList; \n        BOM BOM, newBOM; \n        BOMList = new RecordInsertList(tableNum(BOM)); \n        while select BOM \n        where BOM.BOMId == _FromBOM \n        { \n            newBOM.data(BOM); \n            newBOM.BOMId = _ToBOM; \n            BOMList.add(newBOM); \n        } \n        BOMList.insertDatabase(); \n    }\n\n### Method insertDatabase\n\nInserts all records that have not already been inserted into the current RecordInsertList object.\n\n    public int insertDatabase()\n\n#### Return Value\n\nAn integer that represents the total number of records that were inserted.\n\n#### Remarks\n\nThe RecordInsertList.add method flushes records to the database whenever this will speed up performance.\n\n#### Examples\n\nThe following example uses the RecordInsertList class to copy a BOM from one BOM to another. The RecordInsertList.add method is used to add all the records in the BOM to the RecordInsertList class before a final call is made to the insertDatabase method to insert all remaining records.\n\n    void copyBOM(BOMId _FromBOM, BOMId _ToBOM) \n    { \n        RecordInsertList BOMList; \n        BOM BOM, newBOM; \n        BOMList = new RecordInsertList(tableNum(BOM)); \n        while select BOM \n        where BOM.BOMId == _FromBOM \n        { \n            newBOM.data(BOM); \n            newBOM.BOMId = _ToBOM; \n            BOMList.add(newBOM); \n        } \n        BOMList.insertDatabase(); \n    }\n\n### Method new\n\nCreates a new object to hold records for insertion into the database.\n\n    public void new(TableId tableId, [boolean skipInsertMethod], [boolean skipDatabaseLog], [boolean skipEvents], [boolean skipAosValidation], [boolean skipRLSValidation], [Common table])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nskipInsertMethod  \n\n<!-- -->\n\nskipDatabaseLog  \n\n<!-- -->\n\nskipEvents  \n\n<!-- -->\n\nskipAosValidation  \n\n<!-- -->\n\nskipRLSValidation  \n\n<!-- -->\n\ntable  \n\n#### Examples\n\nThe following example creates a new RecordInsertList class for the EventRuleField table. The insert method for the table is run when these records are inserted, and the insertion is recorded in the database log. However, CUD events are not generated for the insertion.\n\n    recordInsertList = new RecordInsertList( \n        tablenum(EventRuleField), \n        false, \n        false, \n        true);\n\n## Class RecordLinkList\n    class RecordLinkList extends Object\n\nThe RecordLinkList class dynamically creates a cache of record buffers that can hold records of different types, and that is not keyed or sorted.\n\n### Remarks\n\nA recordLinkList object is a double-linked list that can hold records of different types at the same time. It is not keyed or sorted. The recordLinkList object is especially useful for passing records from different tables as a parameter instead of retrieving the same records again. There is no limit to the size of a recordSortedList object. It is the responsibility of the programmer to control its size and therefore its memory consumption.\n\n### Examples\n\n### Methods\n\n| Method                                           | Description                                                                                                                                |\n|--------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| public int del()                                 | Deletes the record at the current position in the list.                                                                                    |\n| public TableId fileId()                          | Retrieves the table ID of the record at the current position in the list.                                                                  |\n| public boolean first(\\[Common record\\])          | Puts the pointer on the first record in the list and, if it is present, copies the record into the buffer that is provided.                |\n| public boolean get(Common record, \\[int index\\]) | Copies the record at the current position or the specified position to the provided record buffer, without affecting the pointer position. |\n| public int ins(Common record)                    | Inserts a record at the end of a list.                                                                                                     |\n| public boolean last(\\[Common record\\])           | Puts the list at the last record and copies the record to the specified record buffer.                                                     |\n| public int len()                                 | Returns the current number of records in the list.                                                                                         |\n| public boolean next(\\[Common record\\])           | Puts the pointer on the next record and copies it to the provided buffer.                                                                  |\n| public Common peek()                             | Retrieves the record at the current position in the list.                                                                                  |\n| public boolean prev(\\[Common record\\])           | Puts the pointer on the previous record in the list and copies the record to the specified buffer.                                         |\n| public void new()                                | Initializes a new instance of the RecordLinkList class.                                                                                    |\n\n### Method del\n\nDeletes the record at the current position in the list.\n\n    public int del()\n\n#### Return Value\n\nThe number of records that remain in the list.\n\n### Method fileId\n\nRetrieves the table ID of the record at the current position in the list.\n\n    public TableId fileId()\n\n#### Return Value\n\nThe table ID.\n\n### Method first\n\nPuts the pointer on the first record in the list and, if it is present, copies the record into the buffer that is provided.\n\n    public boolean first([Common record])\n\n#### Parameters\n\nrecord  \nThe record buffer that will contain the result; optional.\n\n#### Return Value\n\ntrue if the method succeeds; false if no records exist.\n\n### Method get\n\nCopies the record at the current position or the specified position to the provided record buffer, without affecting the pointer position.\n\n    public boolean get(Common record, [int index])\n\n#### Parameters\n\nrecord  \nThe number of the record in the list to retrieve if the current record is not being retrieved; optional.\n\n<!-- -->\n\nindex  \nThe number of the record in the list to retrieve if the current record is not being retrieved; optional.\n\n#### Return Value\n\ntrue if a record could be retrieved; otherwise, false.\n\n### Method ins\n\nInserts a record at the end of a list.\n\n    public int ins(Common record)\n\n#### Parameters\n\nrecord  \nThe record buffer that is used to hold the record to insert.\n\n#### Return Value\n\nThe number of elements in the list.\n\n### Method last\n\nPuts the list at the last record and copies the record to the specified record buffer.\n\n    public boolean last([Common record])\n\n#### Parameters\n\nrecord  \nA record buffer that is used to hold the record that is retrieved; optional.\n\n#### Return Value\n\ntrue if the method succeeds; false if there are no records in the list.\n\n### Method len\n\nReturns the current number of records in the list.\n\n    public int len()\n\n#### Return Value\n\nThe number of records in the list.\n\n### Method next\n\nPuts the pointer on the next record and copies it to the provided buffer.\n\n    public boolean next([Common record])\n\n#### Parameters\n\nrecord  \nThe record buffer of same type as the record at the position; optional.\n\n#### Return Value\n\ntrue if the method succeeds; false if there are no more records.\n\n### Method peek\n\nRetrieves the record at the current position in the list.\n\n    public Common peek()\n\n#### Return Value\n\nA record buffer if the record is found.\n\n### Method prev\n\nPuts the pointer on the previous record in the list and copies the record to the specified buffer.\n\n    public boolean prev([Common record])\n\n#### Parameters\n\nrecord  \nThe record buffer of the same type as the record to copy; optional.\n\n#### Return Value\n\ntrue if the pointer is not at the first record; otherwise, false.\n\n### Method new\n\nInitializes a new instance of the RecordLinkList class.\n\n    public void new()\n\n## Class RecordSortedList\n    class RecordSortedList extends Object\n\nThe RecordSortedList class inserts multiple records in a single database trip.\n\n### Remarks\n\nUse RecordSortedList when you want a subset of data from a particular table, and you want it sorted in an order that does not currently exist as an index. A RecordSortedList object holds records from a single table. The list has a unique key that is defined by the fields listed by using the sortOrder method. Records are automatically sorted as they are inserted, they do not have to be inserted in sort sequence. RecordSortedList objects are particularly useful for passing a result-set as a parameter There is no limit to the size of a RecordSortedList object, but they are completely memory-based, so there are potential memory consumption problems. RecordSortedList objects must be server-located before the insertDatabase method can be called. Otherwise, an exception is thrown. Record level security (RLS) cannot be applied by the RecordSortedList class. RLS is applied by the RecordInsertList class). Use a RecordSortedList in preference to a temporary table in the following situations:\n\n-   Only one sort order is needed.\n-   The number of records is not too high (to avoid memory problems).\n\nCompared to temporary tables, RecordSortedList objects:\n\n-   Are faster.\n-   Are not disk-based.\n-   Only have one index.\n-   Cannot be used in forms.\n-   Require a call between the client and server per (grouped) read.\n\n### Examples\n\n### Methods\n\n| Method                                                        | Description                                                                                                                                                          |\n|---------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean del(Common record)                             | Removes a record that has a key that matches the key fields in the recordBuffer from the recordSortedList.                                                           |\n| public boolean find(Common record)                            | Sets the record buffer to the contents of the record that has a key that matches the key fields in the record buffer, and positions the list to the record returned. |\n| public boolean first(Common record)                           | Positions the list to the first record in the list, and copies its contents to the record buffer.                                                                    |\n| public boolean ins(Common record, \\[boolean updateIfExists\\]) | Inserts a new record in a RecordSortedList, unless it is a duplicate.                                                                                                |\n| public int len()                                              | Returns the current number of records in a RecordSortedList object.                                                                                                  |\n| public boolean next(Common record)                            | Sets the record buffer to the contents of the next record in the recordSortedList and positions the list to the record returned.                                     |\n| public void new(TableId tableId, \\[Common table\\])            | Initializes a new instance of the Object class.                                                                                                                      |\n| public void sortOrder(FieldId fieldId, VarArg )               | Defines the fields on which the records are sorted.                                                                                                                  |\n| public void sortOrderFromContainer(container container)       | Defines the fields on which the records are sorted.                                                                                                                  |\n| public void insertDatabase(\\[Connection connection\\])         | Inserts multiple records on a single trip to the database.                                                                                                           |\n\n### Method del\n\nRemoves a record that has a key that matches the key fields in the recordBuffer from the recordSortedList.\n\n    public boolean del(Common record)\n\n#### Parameters\n\nrecord  \nA record buffer that contains the key values of the record to be deleted.\n\n#### Return Value\n\ntrue if a record was removed; otherwise false.\n\n### Method find\n\nSets the record buffer to the contents of the record that has a key that matches the key fields in the record buffer, and positions the list to the record returned.\n\n    public boolean find(Common record)\n\n#### Parameters\n\nrecord  \nA record buffer that contains the key values to be searched for. The record found will replace the contents of the record buffer.\n\n#### Return Value\n\ntrue if a record is found; otherwise false.\n\n### Method first\n\nPositions the list to the first record in the list, and copies its contents to the record buffer.\n\n    public boolean first(Common record)\n\n#### Parameters\n\nrecord  \nA record buffer to contain first record in list.\n\n#### Return Value\n\ntrue if the method is successful; otherwise false.\n\n### Method ins\n\nInserts a new record in a RecordSortedList, unless it is a duplicate.\n\n    public boolean ins(Common record, [boolean updateIfExists])\n\n#### Parameters\n\nrecord  \nWhether to discard or replace duplicate records; optional. If false, the new record will be discarded if it is a duplicate. If true, the new record will replace an existing record if it is a duplicate.\n\n<!-- -->\n\nupdateIfExists  \nWhether to discard or replace duplicate records; optional. If false, the new record will be discarded if it is a duplicate. If true, the new record will replace an existing record if it is a duplicate.\n\n#### Return Value\n\ntrue if the record was added or replaced; otherwise false.\n\n### Method len\n\nReturns the current number of records in a RecordSortedList object.\n\n    public int len()\n\n#### Return Value\n\nThe current number of records in the list.\n\n### Method next\n\nSets the record buffer to the contents of the next record in the recordSortedList and positions the list to the record returned.\n\n    public boolean next(Common record)\n\n#### Parameters\n\nrecord  \nA record buffer to receive the result.\n\n#### Return Value\n\ntrue if the operation was successful; otherwise false.\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(TableId tableId, [Common table])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\ntable  \n\n#### Remarks\n\nThe list can contain records of the type that is specified by the tableId parameter.\n\n#### Examples\n\nThe following example uses a RecordInsertList object to insert three records in a single database operation.\n\n    { \n        RecordSortedList recordSortedList; \n        CustTable        custTable; \n        recordSortedList = new RecordSortedList(tablenum(CustTable)); \n        recordSortedList.sortOrder(fieldnum(custTable,AccountNum)); \n        ttsbegin; \n        // Prepare record #1 for insertion. \n        custTable.AccountNum = '1000'; \n        custTable.CreditMax = 10000.0; \n        recordSortedList.ins(custTable); \n        // Prepare record #2 for insertion. \n        custTable.AccountNum = '2000'; \n        custTable.CreditMax = 500.0; \n        recordSortedList.ins(custTable); \n        // Prepare record #3 for insertion. \n        custTable.AccountNum = '3000'; \n        custTable.CreditMax = 9999999.9; \n        recordSortedList.ins(custTable); \n        // All 3 records inserted in one database operation. \n        recordSortedList.insertDatabase();   \n        ttscommit; \n    }\n\n### Method sortOrder\n\nDefines the fields on which the records are sorted.\n\n    public void sortOrder(FieldId fieldId, VarArg )\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\n  \n\n#### Remarks\n\nYou can specify one or more fields to sort on. This method can only be called one time on the same instance of the RecordSortedList class. You cannot change the sorting order after it has been set.\n\n#### Examples\n\nThe following example creates a list of DimensionSetRuleTable table records, and then sorts them by the SetId field, and then by the HierarchyId field.\n\n    static RecordSortedList initRulesList() \n    { \n        RecordSortedList list; \n        list = new RecordSortedList(tablenum(DimensionSetRuleTable)); \n        list.sortOrder( \n            fieldnum(DimensionSetRuleTable, SetId),  \n            fieldnum(DimensionSetRuleTable, HierarchyId)); \n        return list; \n    }\n\n### Method sortOrderFromContainer\n\nDefines the fields on which the records are sorted.\n\n    public void sortOrderFromContainer(container container)\n\n#### Parameters\n\ncontainer  \nThe fields on which the list should be sorted. Each field is specified by a field ID; for example, by using the FieldNum function.\n\n#### Remarks\n\nIf you do not have to supply the field list in a container, use RecordSortedList.sortOrder.\n\n### Method insertDatabase\n\nInserts multiple records on a single trip to the database.\n\n    public void insertDatabase([Connection connection])\n\n#### Parameters\n\nconnection  \n\n#### Remarks\n\nAfter the call, the list entries remain in the RecordSortedList object. The RecordSortedList class must be located on the server before the insertDatabase method is called; otherwise, an exception is thrown. RecIds and other system-maintained fields are not assigned values until the insertDatabase method call is made. The method reverts to a record by record insert if any of the following conditions are met:\n\n-   The table is not SQL-stored.\n-   The insert method for the table is overloaded.\n-   The table includes memo or container fields.\n\n#### Examples\n\nThe following example shows how to insert three records in a single database operation.\n\n    { \n        RecordSortedList recordSortedList; \n        CustTable        custTable; \n        recordSortedList = new RecordSortedList(tablenum(CustTable)); \n        recordSortedList.sortOrder(fieldnum(custTable,AccountNum)); \n        ttsbegin; \n        // Prepare record #1 for insertion. \n        custTable.AccountNum = '1000'; \n        custTable.CreditMax = 10000.0; \n        recordSortedList.ins(custTable); \n        // Prepare record #2 for insertion. \n        custTable.AccountNum = '2000'; \n        custTable.CreditMax = 500.0; \n        recordSortedList.ins(custTable); \n        // Prepare record #3 for insertion. \n        custTable.AccountNum = '3000'; \n        custTable.CreditMax = 9999999.9; \n        recordSortedList.ins(custTable); \n        // All three records inserted in one database operation. \n        recordSortedList.insertDatabase();   \n        ttscommit; \n    }\n\n## Class RecordViewCache\n    class RecordViewCache extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                       | Description                                     |\n|------------------------------|-------------------------------------------------|\n| public void new(Common view) | Initializes a new instance of the Object class. |\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(Common view)\n\n#### Parameters\n\nview  \n\n## Class ReferenceNode\n    class ReferenceNode extends TreeNode\n\nThe ReferenceNode class represents a reference AOT node, exposing the kernel class to X++.\n\n### Remarks\n\nThis class represents a node under the AOT References node. This class describes a managed assembly that is referenced from X++ code.\n\n### Examples\n\n### Methods\n\n| Method | Description |\n|--------|-------------|\n\n## Class RelationPath\n    class RelationPath extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                        | Description                                           |\n|-----------------------------------------------------------------------------------------------|-------------------------------------------------------|\n| public boolean isEqualTo(RelationPath otherRelationPath)                                      |                                                       |\n| public boolean isPathCyclical(boolean excludePathRootTable)                                   |                                                       |\n| public boolean isPathValid()                                                                  |                                                       |\n| public List pathAsList()                                                                      |                                                       |\n| public str pathAsString(\\[str delimiter\\])                                                    |                                                       |\n| public str pathRelativeTable()                                                                |                                                       |\n| public str pathRootTable()                                                                    |                                                       |\n| ::public static RelationPath construct(RelationPath sourceRelationPath)                       |                                                       |\n| ::public static RelationPath constructFromPathList(str pathRootTableName, List relationPath)  |                                                       |\n| ::public static RelationPath constructFromPathString(str pathRootTableName, str relationPath) |                                                       |\n| private void new()                                                                            | Initializes a new instance of the RelationPath class. |\n| public void trimPathAtFront()                                                                 |                                                       |\n| public void trimPathAtEnd()                                                                   |                                                       |\n\n### Method isEqualTo\n\n    public boolean isEqualTo(RelationPath otherRelationPath)\n\n#### Parameters\n\notherRelationPath  \n\n#### Return Value\n\n### Method isPathCyclical\n\n    public boolean isPathCyclical(boolean excludePathRootTable)\n\n#### Parameters\n\nexcludePathRootTable  \n\n#### Return Value\n\n### Method isPathValid\n\n    public boolean isPathValid()\n\n#### Return Value\n\n### Method pathAsList\n\n    public List pathAsList()\n\n#### Return Value\n\n### Method pathAsString\n\n    public str pathAsString([str delimiter])\n\n#### Parameters\n\ndelimiter  \n\n#### Return Value\n\n### Method pathRelativeTable\n\n    public str pathRelativeTable()\n\n#### Return Value\n\n### Method pathRootTable\n\n    public str pathRootTable()\n\n#### Return Value\n\n### Method construct\n\n    public static RelationPath construct(RelationPath sourceRelationPath)\n\n#### Parameters\n\nsourceRelationPath  \n\n#### Return Value\n\n### Method constructFromPathList\n\n    public static RelationPath constructFromPathList(str pathRootTableName, List relationPath)\n\n#### Parameters\n\npathRootTableName  \n\n<!-- -->\n\nrelationPath  \n\n#### Return Value\n\n### Method constructFromPathString\n\n    public static RelationPath constructFromPathString(str pathRootTableName, str relationPath)\n\n#### Parameters\n\npathRootTableName  \n\n<!-- -->\n\nrelationPath  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the RelationPath class.\n\n    private void new()\n\n### Method trimPathAtFront\n\n    public void trimPathAtFront()\n\n### Method trimPathAtEnd\n\n    public void trimPathAtEnd()\n\n## Class RelativeFieldBinding\n    class RelativeFieldBinding extends FieldBinding\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                   | Description                                                   |\n|------------------------------------------------------------------------------------------|---------------------------------------------------------------|\n| public RelationPath relationPath()                                                       |                                                               |\n| ::public static RelativeFieldBinding construct(str fieldName, RelationPath relationPath) |                                                               |\n| ::public static RelativeFieldBinding create(container packedRelativeFieldBinding)        |                                                               |\n| private void new()                                                                       | Initializes a new instance of the RelativeFieldBinding class. |\n\n### Method relationPath\n\n    public RelationPath relationPath()\n\n#### Return Value\n\n### Method construct\n\n    public static RelativeFieldBinding construct(str fieldName, RelationPath relationPath)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nrelationPath  \n\n#### Return Value\n\n### Method create\n\n    public static RelativeFieldBinding create(container packedRelativeFieldBinding)\n\n#### Parameters\n\npackedRelativeFieldBinding  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the RelativeFieldBinding class.\n\n    private void new()\n\n## Class Report\n    class Report extends TreeNode\n\nThe Report class lets users use reports that are present in the Finance and Operations Application Object Tree (AOT) and report creation by using code instead of the AOT.\n\n### Remarks\n\nA Report object contains a query and zero or more designs. Each design is a definition of the layout of a report that can be displayed on screen or printed. A Report object also has ReportRun methods that can be overridden. This class enables you to create, read, update, and delete X++ code and metadata.\n\n### Examples\n\nThe following code example creates and runs a report that is not present in the AOT.\n\n    static void test(args a) \n    { \n        report r; \n        reportDesign rd; \n        reportSection rs; \n        reportRun rr; \n        // Creates a simple report that is not present in  \n        // the AOT. \n        r = new report(); \n        rd = r.addDesign(\"myDesign\"); \n        // Adds a section that is triggered by execute(1). \n        rs = rd.addProgrammableSection(1);\n        rs.addTextControl(\"Hello world\"); \n        // Runs the report. \n        rr = new reportRun(r); \n        // Runs the SysPrintForm form. \n        if (rr.prompt())  \n        { \n            // Executes the programmable section. \n            rr.execute(1);  \n            // Prints the report to the target selected \n            // during the previous prompt call. \n            rr.print();    \n        } \n    }\n\n### Methods\n\n| Method                                                              | Description                                                                                                                               |\n|---------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public ReportDesign addDesign(\\[str name\\], \\[container buffer\\])   | Creates a reportDesign that belongs to a report.                                                                                          |\n| public boolean allowCheck(\\[boolean value\\])                        |                                                                                                                                           |\n| public boolean autoJoin(\\[boolean value\\])                          |                                                                                                                                           |\n| public str changedBy(\\[str value\\])                                 | Gets or sets the name of the user who last changed the application object.                                                                |\n| public Date changedDate(\\[Date value\\])                             | Gets or sets the date an application object was last changed.                                                                             |\n| public str changedTime(\\[str value\\])                               | Gets or sets the time an application object was last changed.                                                                             |\n| public str createdBy(\\[str value\\])                                 | Gets or sets the name of the user who created the application object.                                                                     |\n| public Date creationDate(\\[Date value\\])                            | Gets or sets the date an application object was created.                                                                                  |\n| public str creationTime(\\[str value\\])                              |                                                                                                                                           |\n| public ReportDesign design(\\[str name\\])                            | Retrieves an existing design.                                                                                                             |\n| public int designCount()                                            | Retrieves the number of designs in a given report.                                                                                        |\n| public ReportDesign designNumber(\\[int number\\])                    | Gets an existing design.                                                                                                                  |\n| public boolean interactive(\\[boolean value\\])                       |                                                                                                                                           |\n| public str name(\\[str value\\])                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])                                  |                                                                                                                                           |\n| public container pack()                                             | Serializes the current instance of the Report class.                                                                                      |\n| public Query query(\\[Query query\\])                                 |                                                                                                                                           |\n| public boolean saved()                                              | Indicates whether the report has been saved to disk.                                                                                      |\n| public void new(\\[AnyType nameOrContainer\\], \\[AnyType container\\]) | Initializes a new instance of the TreeNode class.                                                                                         |\n| public void dump()                                                  | Writes an overview of the report's contents to the Infolog.                                                                               |\n\n### Method addDesign\n\nCreates a reportDesign that belongs to a report.\n\n    public ReportDesign addDesign([str name], [container buffer])\n\n#### Parameters\n\nname  \nLets the design have the contents given by buffer.\n\n<!-- -->\n\nbuffer  \nLets the design have the contents given by buffer.\n\n#### Return Value\n\nThe created reportDesign.\n\n#### Remarks\n\nThe buffer argument can be a container created by the pack method.\n\n#### Examples\n\nThis job demonstrates how addDesign can be used to generate a design that is a copy of another design.\n\n    static void demoAddDesign(args a) \n    {  \n        report r1; \n        report r2; \n        reportDesign rd; \n        reportSection rs; \n        reportRun rr; \n        container c; \n        // Create a simple report r1. \n        r1 = new report(); \n        rd = r1.addDesign(\"Design1\"); \n        rs = rd.addProgrammableSection(1); \n        rs.addTextControl(\"Hello world\"); \n        c = rd.Pack(); // make a container containing r1's design \n        // Create a report r2 having a design that is a copy of r1's design. \n        r2 = new report(); \n        r2.AddDesign(\"design2\", c); \n        // Run the report. \n        rr = new reportRun(r2, \"design2\"); \n        // Run the sysPrintForm form. \n        if (rr.prompt()) \n        { \n            // Execute the programableSection. \n            rr.execute(1);  \n            // Print report to the target, such as printer or screen. \n            rr.print();    \n        } \n    }\n\n### Method allowCheck\n\n    public boolean allowCheck([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoJoin\n\n    public boolean autoJoin([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method design\n\nRetrieves an existing design.\n\n    public ReportDesign design([str name])\n\n#### Parameters\n\nname  \nThe name of the report to be returned; optional.\n\n#### Return Value\n\nThe design that has the specified name, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if it was not found.\n\n#### Remarks\n\nIf no argument is supplied and the report only contains one design, the method returns the one design.\n\n#### Examples\n\n    static void testDesign(args a) \n    { \n        report r; \n        reportDesign rd; \n        r = new report(\"Cust\"); \n        rd = r.Design(); \n        if (rd) \n            print \"a) r.design() : \", rd.Name(); \n        rd = r.Design(\"\"); \n        if (rd) \n            print \"b) r.design(emptyString) : \", rd.Name(); \n        rd = r.Design('customer'); \n        if (rd) \n            print \"c) r.design(customer) : \", rd.Name(); \n        pause; \n    }\n\n### Method designCount\n\nRetrieves the number of designs in a given report.\n\n    public int designCount()\n\n#### Return Value\n\nThe number of designs.\n\n#### Examples\n\n    static void testDesign(args a) \n    { \n        report r = new report(); \n        print \"A newly created report has \", r.DesignCount(), \" designs\"; \n        pause; \n    }\n\n### Method designNumber\n\nGets an existing design.\n\n    public ReportDesign designNumber([int number])\n\n#### Parameters\n\nnumber  \nAn integer that specifies the desired design; optional.\n\n#### Return Value\n\nThe specified reportDesign, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if the design did not exist.\n\n#### Remarks\n\nIf number is &lt; 1, design 1 is returned.\n\n#### Examples\n\n    void testDesign(args a) \n    { \n        report r; \n        reportDesign rd; \n        int i; \n        r = new report(\"myReport\"); \n        if (r.DesignCount() == 0) \n        { \n            print \"The report has no designs\"; pause; \n        } \n        for (i=1; i<=r.DesignCount();i++) \n        { \n            rd = r.DesignNumber(i); \n            print \"Design No. \", i, \" has name \", rd.Name(); \n        } \n        pause; \n    }\n\n### Method interactive\n\n    public boolean interactive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method pack\n\nSerializes the current instance of the Report class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the Report class.\n\n#### Remarks\n\nThe returned container can be used as first argument to the report constructor.\n\n#### Examples\n\nThe following example stores a report named \"cust\" in a container and runs the report in the container (not the container in the AOT).\n\n    static void testReportPack(args a) \n    { \n        report r1; \n        report r2; \n        reportRun rr; \n        container c; \n        r1 = new report(\"cust\"); \n        c = r1.Pack(); \n        r2 = new report(c); \n        rr = new reportrun(r2); \n        rr.Run(); \n    }\n\n### Method query\n\n    public Query query([Query query])\n\n#### Parameters\n\nquery  \n\n#### Return Value\n\n### Method saved\n\nIndicates whether the report has been saved to disk.\n\n    public boolean saved()\n\n#### Return Value\n\ntrue if the report has been saved to disc; otherwise false.\n\n#### Remarks\n\nA report in the AOT can only be run if it has been saved to disk.\n\n#### Examples\n\n    static void testReportSaved(args a) \n    { \n        report r; \n        reportRun rr; \n        r = new report(); \n        r.AddDesign(); \n        print \"before save, saved : \", r.Saved(); pause; \n        r.saved(); \n        print \"after save, saved : \", r.Saved(); pause; \n        rr = new reportrun(r); \n        rr.Run(); \n    }\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new([AnyType nameOrContainer], [AnyType container])\n\n#### Parameters\n\nnameOrContainer  \n\n<!-- -->\n\ncontainer  \n\n#### Remarks\n\nThe parameter format is as follows:\n\n-   () – Creates a report object that is not present in the AOT.\n-   (c) – Creates a report object that is not present in the AOT, the contents of which are given by the container c.\n-   (\"existingReportName\") – Retrieves a report object that is found in the AOT.\n-   (\"nonExistingReportName\") – Creates a report object in the AOT.\n-   (\"nonExistingReportName\", c) – Creates a report object in the AOT, the contents of which are given by the container c.\n\nThe container c should be created by the pack method.\n\n### Method dump\n\nWrites an overview of the report's contents to the Infolog.\n\n    public void dump()\n\n#### Remarks\n\nThe lines written to the Infolog are identical to the information shown when you expand the report in the AOT.\n\n#### Examples\n\n    static void testReportDump(args a) \n    { \n        report r = new report(\"cust\"); \n        r.Dump(); \n    }\n\n## Class ReportAutoDesignSpecs\n    class ReportAutoDesignSpecs extends TreeNode\n\nThe ReportAutoDesignSpecs class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                            | Description                                                        |\n|-----------------------------------------------------------------------------------|--------------------------------------------------------------------|\n| public ReportSection addProgrammableSection(int number)                           |                                                                    |\n| public ReportSection addSection(ReportBlockType sectionType, \\[TableId tableId\\]) |                                                                    |\n| public boolean autoHeader(\\[boolean value\\])                                      |                                                                    |\n| public str footerText(\\[str value\\])                                              |                                                                    |\n| public boolean grandHeader(\\[boolean value\\])                                     |                                                                    |\n| public boolean grandTotal(\\[boolean value\\])                                      | Determines whether the FooterText property value can be displayed. |\n| public str headerText(\\[str value\\])                                              |                                                                    |\n| public boolean view()                                                             |                                                                    |\n\n### Method addProgrammableSection\n\n    public ReportSection addProgrammableSection(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method addSection\n\n    public ReportSection addSection(ReportBlockType sectionType, [TableId tableId])\n\n#### Parameters\n\nsectionType  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method autoHeader\n\n    public boolean autoHeader([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method footerText\n\n    public str footerText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method grandHeader\n\n    public boolean grandHeader([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method grandTotal\n\nDetermines whether the FooterText property value can be displayed.\n\n    public boolean grandTotal([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the FooterText property value is displayed; otherwise, false.\n\n#### Remarks\n\nThe grandTotal property is available only when a report has untested, multiple data sources.\n\n### Method headerText\n\n    public str headerText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method view\n\n    public boolean view()\n\n#### Return Value\n\n## Class ReportBitmapControl\n    class ReportBitmapControl extends ReportControl\n\nThe ReportBitmapControl class creates, reads, updates, and deletes X++ code and metadata.\n\n### Remarks\n\nYou must have access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public str imageName(\\[str value\\])                                      |                                                                                                                                           |\n| public int imageResource(\\[int value\\])                                  |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public boolean resizeBitmap(\\[boolean value\\])                           |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean showPicAsText(\\[boolean value\\])                          |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public boolean warnIfMissing(\\[boolean value\\])                          |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void show()                                                       |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void hide()                                                       |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method imageName\n\n    public str imageName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageResource\n\n    public int imageResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method resizeBitmap\n\n    public boolean resizeBitmap([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showPicAsText\n\n    public boolean showPicAsText([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method warnIfMissing\n\n    public boolean warnIfMissing([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method hide\n\n    public void hide()\n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n## Class ReportControl\n    class ReportControl extends TreeNode\n\nThe ReportControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                     | Description |\n|------------------------------------------------------------|-------------|\n| public int bottomMarginAndFrame()                          |             |\n| public ReportFieldType controlType()                       |             |\n| public int delete()                                        |             |\n| public str effectiveFont()                                 |             |\n| public str fontInfoPrinter()                               |             |\n| public int fontInfoPrinterAscent()                         |             |\n| public int fontInfoPrinterDescent()                        |             |\n| public int fontInfoPrinterExtLead()                        |             |\n| public int fontInfoPrinterHeight()                         |             |\n| public int fontInfoPrinterIntLead()                        |             |\n| public str fontInfoScreen()                                |             |\n| public int fontInfoScreenAscent()                          |             |\n| public int fontInfoScreenDescent()                         |             |\n| public int fontInfoScreenExtLead()                         |             |\n| public int fontInfoScreenHeight()                          |             |\n| public int fontInfoScreenIntLead()                         |             |\n| public int height100mm(\\[int heightExclBorder\\])           |             |\n| public int height100mmInclBorder(\\[int heightInclBorder\\]) |             |\n| public int heightOfWordWrappedString100mm(str string)      |             |\n| public int left100mm(\\[int leftExclBorder\\])               |             |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])     |             |\n| public int leftMarginAnFrame()                             |             |\n| public int numberOfLines(int height100mm)                  |             |\n| public int position(\\[int value\\])                         |             |\n| public str previewInfo(str string)                         |             |\n| public int previewXCompensation100mm(str string)           |             |\n| public int right100mm()                                    |             |\n| public int right100mmInclBorder()                          |             |\n| public int rightMarginAndFrame()                           |             |\n| public str setHeightGetText(int lines, str string)         |             |\n| public int top100mm(\\[int topExclBorder\\])                 |             |\n| public int top100mmInclBorder(\\[int topInclBorder\\])       |             |\n| public int topMarginAndFrame()                             |             |\n| public int width100mm(\\[int widthExclBorder\\])             |             |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])   |             |\n| public int widthOfString100mm(str string)                  |             |\n| public void show()                                         |             |\n| public void hide()                                         |             |\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method show\n\n    public void show()\n\n### Method hide\n\n    public void hide()\n\n## Class ReportDateControl\n    class ReportDateControl extends ReportControl\n\nThe ReportDateControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int dateDay(\\[int value\\])                                        |                                                                                                                                           |\n| public int dateFormat(\\[int value\\])                                     |                                                                                                                                           |\n| public int dateMonth(\\[int value\\])                                      |                                                                                                                                           |\n| public int dateSeparator(\\[int value\\])                                  |                                                                                                                                           |\n| public int dateYear(\\[int value\\])                                       |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void hide()                                                       |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void show()                                                       |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method hide\n\n    public void hide()\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method show\n\n    public void show()\n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n## Class ReportDateTimeControl\n    class ReportDateTimeControl extends ReportControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                                |\n|--------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                            |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                            |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                         |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                          |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                             |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                                |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                            |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                            |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                            |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                            |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                            |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                            |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                                |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                              |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                        |\n| public ReportFieldType controlType()                                     |                                                                                                                                            |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                            |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                            |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                            |\n| public int dateDay(\\[int value\\])                                        |                                                                                                                                            |\n| public int dateFormat(\\[int value\\])                                     |                                                                                                                                            |\n| public int dateMonth(\\[int value\\])                                      |                                                                                                                                            |\n| public int dateSeparator(\\[int value\\])                                  |                                                                                                                                            |\n| public int dateYear(\\[int value\\])                                       |                                                                                                                                            |\n| public int delete()                                                      |                                                                                                                                            |\n| public str effectiveFont()                                               |                                                                                                                                            |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                            |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                  |\n| public str fontInfoPrinter()                                             |                                                                                                                                            |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                            |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                            |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                            |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                            |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                            |\n| public str fontInfoScreen()                                              |                                                                                                                                            |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                            |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                            |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                            |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                            |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                            |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                  |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                        |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                            |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                            |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                             |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                            |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                            |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                            |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                    |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                            |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                      |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                            |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                            |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                            |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                            |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                            |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                            |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                            |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                            |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                            |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                            |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                            |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                            |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                            |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                            |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                            |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                            |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                            |\n| public int leftMarginAnFrame()                                           |                                                                                                                                            |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                            |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                            |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                            |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                            |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                            |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                            |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                            |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                            |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                            |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                            |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                                |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                            |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                            |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                            |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                            |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                            |\n| public str name(\\[str value\\])                                           | Gets or sets the name that used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                            |\n| public int position(\\[int value\\])                                       |                                                                                                                                            |\n| public str previewInfo(str string)                                       |                                                                                                                                            |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                            |\n| public int right100mm()                                                  |                                                                                                                                            |\n| public int right100mmInclBorder()                                        |                                                                                                                                            |\n| public int rightMarginAndFrame()                                         |                                                                                                                                            |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                            |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                            |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                            |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                            |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                            |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                            |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                            |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                      |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                            |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                            |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                            |\n| public int topMarginAndFrame()                                           |                                                                                                                                            |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                            |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                            |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                            |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                            |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                            |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                            |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                            |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                            |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                            |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                            |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                            |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                            |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                            |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                            |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                            |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                             |\n| public int widthOfString100mm(str string)                                |                                                                                                                                            |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                            |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                            |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                     |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                    |\n| public void left(Real value, Units unit)                                 |                                                                                                                                            |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                            |\n| public void hide()                                                       |                                                                                                                                            |\n| public void top(Real value, Units unit)                                  |                                                                                                                                            |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                            |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                            |\n| public void show()                                                       |                                                                                                                                            |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                            |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                     |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                            |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n## Class ReportDesign\n    class ReportDesign extends TreeNode\n\nThe ReportDesign class determines the contents of a report.\n\n### Remarks\n\nA ReportDesign object is a collection of ReportSection objects or SectionTemplate objects that determines the contents of a report. Each report contains a ReportDesign node in the Finance and Operations Application Object Tree (AOT), below the Designs node. The ReportDesign node always contains a node that is named AutoDesignSpecs, and it can contain a node that is named Design, which is referred to as the generated design. A ReportDesign node should contain either one or more SectionTemplate nodes (below the AutoDesignSpecs node) or a generated design. If it contains both, only the generated design is used. This class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called. A report that does not have a generated design offers more flexibility to the end user than a report that has a generated design. For example, a user who is running a report that does not have a generated design can decide in the query which sums to include in the report. A generated design is then created during the execution of the report, and it will contain footer sections that correspond to the user's choice. If a report has a generated design, the existence of footer sections in the generated design controls which sums are printed in the report.\n\n### Examples\n\nThe following example creates a simple report that is not present in the AOT.\n\n    static void test(args a) \n    {  \n        report r; \n        reportDesign rd; \n        reportSection rs; \n        reportRun rr; \n        r = new report(); \n        rd = r.addDesign(\"myDesign\"); \n        // Add a section triggered by execute(1). \n        rs = rd.addProgrammableSection(1);  \n        rs.addTextControl(\"Hello world\"); \n        // Run the report. \n        rr = new reportRun(r); \n        // Run the sysPrintForm form. \n        if (rr.prompt())  \n        { \n            // Execute the programmableSection. \n            rr.execute(1);  \n            // Print the report to the target, such as printer or screen. \n            rr.print();    \n        } \n    }\n\n### Methods\n\n| Method                                                                                                 | Description                                                                                                                               |\n|--------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public ReportSection addProgrammableSection(int number)                                                |                                                                                                                                           |\n| public ReportSection addSection(ReportBlockType sectionType, \\[TableId tableId\\], \\[FieldId fieldId\\]) | Adds a report section to a design.                                                                                                        |\n| public ReportSectionGroup addSectionGroup(TableId tableId, \\[FieldId fieldId\\])                        | Adds a section group to a design.                                                                                                         |\n| public int arrange()                                                                                   |                                                                                                                                           |\n| public int arrangeWhen(\\[int value\\])                                                                  |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                                      | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public ReportAutoDesignSpecs autoDesignSpecs()                                                         |                                                                                                                                           |\n| public ReportSection autoSection(TableId tableId, \\[int number\\])                                      |                                                                                                                                           |\n| public int autoSectionControlCount()                                                                   |                                                                                                                                           |\n| public ReportControl autoSectionControlNumber(int number)                                              |                                                                                                                                           |\n| public int autoSectionCount()                                                                          |                                                                                                                                           |\n| public ReportSection autoSectionNumber(int number)                                                     |                                                                                                                                           |\n| public int bold(\\[int value\\])                                                                         | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginMode(\\[int value\\])                                                             |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                                              |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                                                         |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                                                          |                                                                                                                                           |\n| public str caption(\\[str value\\])                                                                      | Gets or set the caption of the control.                                                                                                   |\n| public int characterSet(\\[int value\\])                                                                 | Gets or sets the character set of the font.                                                                                               |\n| public boolean collate(\\[boolean collate\\])                                                            |                                                                                                                                           |\n| public int colorScheme(\\[int value\\])                                                                  | Gets or sets the color scheme of the control.                                                                                             |\n| public ReportControl control(TableId tableId, FieldId fieldId)                                         | Finds a control in the generated design, based on the control's table and dataField properties.                                           |\n| public int controlCount()                                                                              |                                                                                                                                           |\n| public ReportControl controlName(str name)                                                             | Finds a control in the generated design, based on the control's Name property.                                                            |\n| public ReportControl controlNumber(int number)                                                         |                                                                                                                                           |\n| public int copies(\\[int numberOfCopies\\])                                                              |                                                                                                                                           |\n| public int delete()                                                                                    | Deletes the node from the AOT.                                                                                                            |\n| public str description(\\[str value\\])                                                                  |                                                                                                                                           |\n| public str deviceName(\\[str device\\])                                                                  |                                                                                                                                           |\n| public str driverName()                                                                                |                                                                                                                                           |\n| public boolean edit()                                                                                  |                                                                                                                                           |\n| public str emptyReportPrompt(\\[str value\\])                                                            |                                                                                                                                           |\n| public int fitToPage(\\[int value\\])                                                                    |                                                                                                                                           |\n| public str font(\\[str value\\])                                                                         | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                     | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                                              | Gets or sets the text color for the control to use.                                                                                       |\n| public int from(\\[int fromPage\\])                                                                      |                                                                                                                                           |\n| public int generateDesign()                                                                            |                                                                                                                                           |\n| public int getNumberOfPrinters()                                                                       |                                                                                                                                           |\n| public str getPrinter(int number)                                                                      |                                                                                                                                           |\n| public PrintMedium getTarget()                                                                         | Returns the print medium target for the report.                                                                                           |\n| public boolean hideBorder(\\[boolean value\\])                                                           |                                                                                                                                           |\n| public boolean italic(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public str jobType(\\[str value\\])                                                                      |                                                                                                                                           |\n| public int language(\\[int value\\])                                                                     |                                                                                                                                           |\n| public str languageID(\\[str lan\\])                                                                     |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                                               |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                                                |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                                                           |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                                                            |                                                                                                                                           |\n| public container loadDiskSettings()                                                                    |                                                                                                                                           |\n| public str localWebMenu(\\[str value\\])                                                                 |                                                                                                                                           |\n| public str lookupCaption(\\[str lan\\])                                                                  |                                                                                                                                           |\n| public str lookupLabel(str label, \\[str lan\\])                                                         |                                                                                                                                           |\n| public int makeAutoSection(\\[Query query\\])                                                            |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                         | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int orientation(\\[int value\\])                                                                  |                                                                                                                                           |\n| public container pack()                                                                                | Serializes the current instance of the ReportDesign class.                                                                                |\n| public container packPageSettings()                                                                    |                                                                                                                                           |\n| public container packPrinterSettings()                                                                 |                                                                                                                                           |\n| public container packPrintJobSettings()                                                                |                                                                                                                                           |\n| public boolean pageFormatting()                                                                        |                                                                                                                                           |\n| public PrinterOrientation paperOrientation(\\[PrinterOrientation orientation\\])                         |                                                                                                                                           |\n| public int paperTray(\\[int tray\\])                                                                     |                                                                                                                                           |\n| public int printerAttributes()                                                                         |                                                                                                                                           |\n| public int printerAveragePPM()                                                                         |                                                                                                                                           |\n| public str printerComment()                                                                            |                                                                                                                                           |\n| public str printerDatatype()                                                                           |                                                                                                                                           |\n| public int printerDefaultPriority()                                                                    |                                                                                                                                           |\n| public str printerDriverName()                                                                         |                                                                                                                                           |\n| public str printerLocation()                                                                           |                                                                                                                                           |\n| public int printerPageHeight()                                                                         |                                                                                                                                           |\n| public int printerPageWidth()                                                                          |                                                                                                                                           |\n| public int printerPaper()                                                                              |                                                                                                                                           |\n| public str printerParameters()                                                                         |                                                                                                                                           |\n| public str printerPortName()                                                                           |                                                                                                                                           |\n| public str printerPrinterName()                                                                        |                                                                                                                                           |\n| public str printerPrintProcessor()                                                                     |                                                                                                                                           |\n| public int printerPriority()                                                                           |                                                                                                                                           |\n| public int printerQueuedJobs()                                                                         |                                                                                                                                           |\n| public str printerSepFile()                                                                            |                                                                                                                                           |\n| public str printerServerName()                                                                         |                                                                                                                                           |\n| public boolean printerSettings(\\[ReportRun reportRun\\], \\[int showWhat\\])                              |                                                                                                                                           |\n| public str printerShareName()                                                                          |                                                                                                                                           |\n| public int printerStartTime()                                                                          |                                                                                                                                           |\n| public int printerStatus()                                                                             |                                                                                                                                           |\n| public int printerUntilTime()                                                                          |                                                                                                                                           |\n| public str printFormName(\\[str value\\])                                                                |                                                                                                                                           |\n| public PrintJobSettings printJobSettings()                                                             |                                                                                                                                           |\n| public boolean removeRedundantFooters(\\[boolean value\\])                                               |                                                                                                                                           |\n| public boolean removeRepeatedFooters(\\[boolean value\\])                                                |                                                                                                                                           |\n| public boolean removeRepeatedHeaders(\\[boolean value\\])                                                |                                                                                                                                           |\n| public str reportTemplate(\\[str value\\])                                                               |                                                                                                                                           |\n| public str resolutionX(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int resolutionXStr(str value)                                                                   |                                                                                                                                           |\n| public Units resolutionXUnit(\\[Units value\\])                                                          |                                                                                                                                           |\n| public str resolutionY(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int resolutionYStr(str value)                                                                   |                                                                                                                                           |\n| public Units resolutionYUnit(\\[Units value\\])                                                          |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                                              |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                                               |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                                                          |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                                                           |                                                                                                                                           |\n| public int ruler(\\[int value\\])                                                                        |                                                                                                                                           |\n| public boolean saveDiskSettings(container buffer)                                                      |                                                                                                                                           |\n| public ReportSection section(int number)                                                               | Finds a section below the generated design node.                                                                                          |\n| public int sectionCount()                                                                              |                                                                                                                                           |\n| public ReportSectionGroup sectionGroup(TableId tableId, \\[FieldId fieldId\\])                           | Finds a reportSectionGroup object below a reportDesign object.                                                                            |\n| public ReportSection sectionName(str name)                                                             |                                                                                                                                           |\n| public ReportSection sectionNumber(int number)                                                         |                                                                                                                                           |\n| public PrintMedium setTarget(PrintMedium target)                                                       | Sets the print medium target for the report.                                                                                              |\n| public int to(\\[int toPage\\])                                                                          |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                                                |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                                                 |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                                                            |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                                                             |                                                                                                                                           |\n| public str toString()                                                                                  | Returns a string that contains the class handle and name.                                                                                 |\n| public boolean underline(\\[boolean value\\])                                                            |                                                                                                                                           |\n| public boolean unpackPageSettings(container packedPageSetup)                                           |                                                                                                                                           |\n| public boolean unpackPrinterSettings(container packedPrintSetup)                                       |                                                                                                                                           |\n| public boolean unpackPrintJobSettings(container packedPrintJobSettings)                                |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                                                         |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                                                       |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                                                        |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                                                          |                                                                                                                                           |\n| public void deleteDiskSettings(\\[boolean allUsers\\])                                                   |                                                                                                                                           |\n\n### Method addProgrammableSection\n\n    public ReportSection addProgrammableSection(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method addSection\n\nAdds a report section to a design.\n\n    public ReportSection addSection(ReportBlockType sectionType, [TableId tableId], [FieldId fieldId])\n\n#### Parameters\n\nsectionType  \nIf the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.\n\n<!-- -->\n\ntableId  \nIf the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.\n\n<!-- -->\n\nfieldId  \nIf the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.\n\n#### Return Value\n\nThe section that is created.\n\n#### Remarks\n\nThis method creates a generated design if it does not already exist. If the sectionType parameter is set to Header, Body, or Footer, this method creates a section group if it does not already exist.\n\n### Method addSectionGroup\n\nAdds a section group to a design.\n\n    public ReportSectionGroup addSectionGroup(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe dataField property of the section group; optional.\n\n<!-- -->\n\nfieldId  \nThe dataField property of the section group; optional.\n\n#### Return Value\n\nThe section group that is created.\n\n#### Remarks\n\nThis method creates a generated design (if it does not already exist).\n\n### Method arrange\n\n    public int arrange()\n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoDesignSpecs\n\n    public ReportAutoDesignSpecs autoDesignSpecs()\n\n#### Return Value\n\n### Method autoSection\n\n    public ReportSection autoSection(TableId tableId, [int number])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nnumber  \n\n#### Return Value\n\n### Method autoSectionControlCount\n\n    public int autoSectionControlCount()\n\n#### Return Value\n\n### Method autoSectionControlNumber\n\n    public ReportControl autoSectionControlNumber(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method autoSectionCount\n\n    public int autoSectionCount()\n\n#### Return Value\n\n### Method autoSectionNumber\n\n    public ReportSection autoSectionNumber(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method collate\n\n    public boolean collate([boolean collate])\n\n#### Parameters\n\ncollate  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method control\n\nFinds a control in the generated design, based on the control's table and dataField properties.\n\n    public ReportControl control(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \nThe dataField property of the control.\n\n<!-- -->\n\nfieldId  \nThe dataField property of the control.\n\n#### Return Value\n\nThe control that is found.\n\n#### Examples\n\n    reportDesign rd = ...; \n    reportControl rc = rd.control(tablenum(CustGroup), \n        fieldnum(CustGroup, Name));\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlName\n\nFinds a control in the generated design, based on the control's Name property.\n\n    public ReportControl controlName(str name)\n\n#### Parameters\n\nname  \nThe Name property of the control, expressed as a string.\n\n#### Return Value\n\nThe control that is found.\n\n### Method controlNumber\n\n    public ReportControl controlNumber(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method copies\n\n    public int copies([int numberOfCopies])\n\n#### Parameters\n\nnumberOfCopies  \n\n#### Return Value\n\n### Method delete\n\nDeletes the node from the AOT.\n\n    public int delete()\n\n#### Return Value\n\nAn integer.\n\n### Method description\n\n    public str description([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method deviceName\n\n    public str deviceName([str device])\n\n#### Parameters\n\ndevice  \n\n#### Return Value\n\n### Method driverName\n\n    public str driverName()\n\n#### Return Value\n\n### Method edit\n\n    public boolean edit()\n\n#### Return Value\n\n### Method emptyReportPrompt\n\n    public str emptyReportPrompt([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fitToPage\n\n    public int fitToPage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method from\n\n    public int from([int fromPage])\n\n#### Parameters\n\nfromPage  \n\n#### Return Value\n\n### Method generateDesign\n\n    public int generateDesign()\n\n#### Return Value\n\n### Method getNumberOfPrinters\n\n    public int getNumberOfPrinters()\n\n#### Return Value\n\n### Method getPrinter\n\n    public str getPrinter(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getTarget\n\nReturns the print medium target for the report.\n\n    public PrintMedium getTarget()\n\n#### Return Value\n\nThe target for the report.\n\n### Method hideBorder\n\n    public boolean hideBorder([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method jobType\n\n    public str jobType([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method language\n\n    public int language([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method languageID\n\n    public str languageID([str lan])\n\n#### Parameters\n\nlan  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method loadDiskSettings\n\n    public container loadDiskSettings()\n\n#### Return Value\n\n### Method localWebMenu\n\n    public str localWebMenu([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupCaption\n\n    public str lookupCaption([str lan])\n\n#### Parameters\n\nlan  \n\n#### Return Value\n\n### Method lookupLabel\n\n    public str lookupLabel(str label, [str lan])\n\n#### Parameters\n\nlabel  \n\n<!-- -->\n\nlan  \n\n#### Return Value\n\n### Method makeAutoSection\n\n    public int makeAutoSection([Query query])\n\n#### Parameters\n\nquery  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method orientation\n\n    public int orientation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method pack\n\nSerializes the current instance of the ReportDesign class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the ReportDesign class.\n\n### Method packPageSettings\n\n    public container packPageSettings()\n\n#### Return Value\n\n### Method packPrinterSettings\n\n    public container packPrinterSettings()\n\n#### Return Value\n\n### Method packPrintJobSettings\n\n    public container packPrintJobSettings()\n\n#### Return Value\n\n### Method pageFormatting\n\n    public boolean pageFormatting()\n\n#### Return Value\n\n### Method paperOrientation\n\n    public PrinterOrientation paperOrientation([PrinterOrientation orientation])\n\n#### Parameters\n\norientation  \n\n#### Return Value\n\n### Method paperTray\n\n    public int paperTray([int tray])\n\n#### Parameters\n\ntray  \n\n#### Return Value\n\n### Method printerAttributes\n\n    public int printerAttributes()\n\n#### Return Value\n\n### Method printerAveragePPM\n\n    public int printerAveragePPM()\n\n#### Return Value\n\n### Method printerComment\n\n    public str printerComment()\n\n#### Return Value\n\n### Method printerDatatype\n\n    public str printerDatatype()\n\n#### Return Value\n\n### Method printerDefaultPriority\n\n    public int printerDefaultPriority()\n\n#### Return Value\n\n### Method printerDriverName\n\n    public str printerDriverName()\n\n#### Return Value\n\n### Method printerLocation\n\n    public str printerLocation()\n\n#### Return Value\n\n### Method printerPageHeight\n\n    public int printerPageHeight()\n\n#### Return Value\n\n### Method printerPageWidth\n\n    public int printerPageWidth()\n\n#### Return Value\n\n### Method printerPaper\n\n    public int printerPaper()\n\n#### Return Value\n\n### Method printerParameters\n\n    public str printerParameters()\n\n#### Return Value\n\n### Method printerPortName\n\n    public str printerPortName()\n\n#### Return Value\n\n### Method printerPrinterName\n\n    public str printerPrinterName()\n\n#### Return Value\n\n### Method printerPrintProcessor\n\n    public str printerPrintProcessor()\n\n#### Return Value\n\n### Method printerPriority\n\n    public int printerPriority()\n\n#### Return Value\n\n### Method printerQueuedJobs\n\n    public int printerQueuedJobs()\n\n#### Return Value\n\n### Method printerSepFile\n\n    public str printerSepFile()\n\n#### Return Value\n\n### Method printerServerName\n\n    public str printerServerName()\n\n#### Return Value\n\n### Method printerSettings\n\n    public boolean printerSettings([ReportRun reportRun], [int showWhat])\n\n#### Parameters\n\nreportRun  \n\n<!-- -->\n\nshowWhat  \n\n#### Return Value\n\n### Method printerShareName\n\n    public str printerShareName()\n\n#### Return Value\n\n### Method printerStartTime\n\n    public int printerStartTime()\n\n#### Return Value\n\n### Method printerStatus\n\n    public int printerStatus()\n\n#### Return Value\n\n### Method printerUntilTime\n\n    public int printerUntilTime()\n\n#### Return Value\n\n### Method printFormName\n\n    public str printFormName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method printJobSettings\n\n    public PrintJobSettings printJobSettings()\n\n#### Return Value\n\n### Method removeRedundantFooters\n\n    public boolean removeRedundantFooters([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method removeRepeatedFooters\n\n    public boolean removeRepeatedFooters([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method removeRepeatedHeaders\n\n    public boolean removeRepeatedHeaders([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method reportTemplate\n\n    public str reportTemplate([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionX\n\n    public str resolutionX([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionXStr\n\n    public int resolutionXStr(str value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionXUnit\n\n    public Units resolutionXUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionY\n\n    public str resolutionY([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionYStr\n\n    public int resolutionYStr(str value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionYUnit\n\n    public Units resolutionYUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method ruler\n\n    public int ruler([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveDiskSettings\n\n    public boolean saveDiskSettings(container buffer)\n\n#### Parameters\n\nbuffer  \n\n#### Return Value\n\n### Method section\n\nFinds a section below the generated design node.\n\n    public ReportSection section(int number)\n\n#### Parameters\n\nnumber  \nThe section number.\n\n#### Return Value\n\nThe report section that is found.\n\n### Method sectionCount\n\n    public int sectionCount()\n\n#### Return Value\n\n### Method sectionGroup\n\nFinds a reportSectionGroup object below a reportDesign object.\n\n    public ReportSectionGroup sectionGroup(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe field of the section group; optional.\n\n<!-- -->\n\nfieldId  \nThe field of the section group; optional.\n\n#### Return Value\n\nThe section group that matches the arguments.\n\n#### Examples\n\nThe following example finds the section group that is created by the addSection method:\n\n    static void test(args a) \n    { \n        reportRun rr; \n        inventTrans rec; \n        int i; \n        int t = tablenum(inventTrans); \n        int f = fieldnum(inventTrans, datePhysical); \n        // Create a simple report that is not present in \n        // the Application Object Tree. \n        report r = new report(); \n        reportDesign rd = r.addDesign(\"myDesign\"); \n        reportSectionGroup rsg; \n        reportSection rs = rd.AddSection(reportBlockType::body, t); \n        rs.addControl(t,f); \n        rsg = rd.SectionGroup(t); \n        if (rsg) \n        { \n            rs = rsg.AddSection(ReportBlockType::Header); \n            rs.AddTextControl(\"This is the groupHeader\"); \n        } \n        // Run the report. \n        rr = new reportRun(r); \n        // Run the sysPrintForm form \n        if (rr.prompt()) \n        { \n            select rec; \n            rr.send(rec); \n            // Print the report to the target, such as printer or screen, that  \n            // was selected during the prompt call above. \n            rr.print();  \n        } \n    }\n\n### Method sectionName\n\n    public ReportSection sectionName(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method sectionNumber\n\n    public ReportSection sectionNumber(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method setTarget\n\nSets the print medium target for the report.\n\n    public PrintMedium setTarget(PrintMedium target)\n\n#### Parameters\n\ntarget  \nThe print medium for the report.\n\n#### Return Value\n\nThe print medium for the report.\n\n#### Remarks\n\nTo select a specific printer as the target for the report, call the PrintJobSettings.deviceName method on the object that is returned by the ReportDesign.printJobSettings method.\n\n### Method to\n\n    public int to([int toPage])\n\n#### Parameters\n\ntoPage  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that contains the class handle and name.\n\n    public str toString()\n\n#### Return Value\n\nA textual description of the class.\n\n#### Remarks\n\nIn some classes, additional information is returned in the string.\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method unpackPageSettings\n\n    public boolean unpackPageSettings(container packedPageSetup)\n\n#### Parameters\n\npackedPageSetup  \n\n#### Return Value\n\n### Method unpackPrinterSettings\n\n    public boolean unpackPrinterSettings(container packedPrintSetup)\n\n#### Parameters\n\npackedPrintSetup  \n\n#### Return Value\n\n### Method unpackPrintJobSettings\n\n    public boolean unpackPrintJobSettings(container packedPrintJobSettings)\n\n#### Parameters\n\npackedPrintJobSettings  \n\n#### Return Value\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method deleteDiskSettings\n\n    public void deleteDiskSettings([boolean allUsers])\n\n#### Parameters\n\nallUsers  \n\n## Class ReportEnumControl\n    class ReportEnumControl extends ReportControl\n\nThe ReportEnumControl class lets you to create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeCase(\\[int value\\])                                     |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void show()                                                       |                                                                                                                                           |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void hide()                                                       |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method show\n\n    public void show()\n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n## Class ReportFieldGroup\n    class ReportFieldGroup extends TreeNode\n\nThe ReportFieldGroup class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                        | Description                                                   |\n|-----------------------------------------------|---------------------------------------------------------------|\n| public int autoFieldGroupOrder(\\[int value\\]) |                                                               |\n| public str dataGroup(\\[str value\\])           |                                                               |\n| public int fieldCount()                       |                                                               |\n| public ReportControl fieldNumber(int number)  |                                                               |\n| public TableId table(\\[TableId value\\])       | Gets or sets the table ID that is associated with the object. |\n\n### Method autoFieldGroupOrder\n\n    public int autoFieldGroupOrder([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataGroup\n\n    public str dataGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fieldCount\n\n    public int fieldCount()\n\n#### Return Value\n\n### Method fieldNumber\n\n    public ReportControl fieldNumber(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID that is associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID that is associated with the object.\n\n## Class ReportGuidControl\n    class ReportGuidControl extends ReportControl\n\nThe ReportGuidControl class enables you to create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                                   |\n|--------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                               |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                             |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                                |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                                   |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                               |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                               |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                               |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                               |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                               |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                               |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                                   |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                                 |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public ReportFieldType controlType()                                     |                                                                                                                                               |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                               |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                               |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                               |\n| public int delete()                                                      |                                                                                                                                               |\n| public str effectiveFont()                                               |                                                                                                                                               |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                               |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                     |\n| public str fontInfoPrinter()                                             |                                                                                                                                               |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                               |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                               |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                               |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                               |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                               |\n| public str fontInfoScreen()                                              |                                                                                                                                               |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                               |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                               |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                               |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                               |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                               |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                           |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                               |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                               |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                               |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                               |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                               |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                       |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                               |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                         |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                               |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                               |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                               |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                               |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                               |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                               |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                               |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                               |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                               |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                               |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                               |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                               |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                               |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                               |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                               |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                               |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                               |\n| public int leftMarginAnFrame()                                           |                                                                                                                                               |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                               |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                               |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                               |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                               |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                               |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                               |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                               |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                               |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                               |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                                   |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                               |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                               |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                               |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                               |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                               |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                               |\n| public int position(\\[int value\\])                                       |                                                                                                                                               |\n| public str previewInfo(str string)                                       |                                                                                                                                               |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                               |\n| public int right100mm()                                                  |                                                                                                                                               |\n| public int right100mmInclBorder()                                        |                                                                                                                                               |\n| public int rightMarginAndFrame()                                         |                                                                                                                                               |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                               |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                               |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                               |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                               |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                               |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                               |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                         |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                               |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                               |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                               |\n| public int topMarginAndFrame()                                           |                                                                                                                                               |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                               |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                               |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                               |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                               |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                               |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                               |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                               |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                               |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                               |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                               |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                               |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                               |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                               |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthOfString100mm(str string)                                |                                                                                                                                               |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                               |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                               |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                        |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                        |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                               |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                               |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                               |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                               |\n| public void show()                                                       |                                                                                                                                               |\n| public void hide()                                                       |                                                                                                                                               |\n| public void top(Real value, Units unit)                                  |                                                                                                                                               |\n| public void left(Real value, Units unit)                                 |                                                                                                                                               |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                               |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                       |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method hide\n\n    public void hide()\n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n## Class ReportIntegerControl\n    class ReportIntegerControl extends ReportControl\n\nThe ReportIntegerControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int allowNegative(\\[int value\\])                                  |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that was used to output text in the control.                                                              |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])            |                                                                                                                                           |\n| public AutoMode displaceNegativeMode(\\[AutoMode mode\\])                  |                                                                                                                                           |\n| public int displaceNegativeValue(\\[int value\\])                          |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public int extraSumWidthMode(\\[int value\\])                              |                                                                                                                                           |\n| public str extraSumWidthStr(\\[str value\\])                               |                                                                                                                                           |\n| public Units extraSumWidthUnit(\\[Units value\\])                          |                                                                                                                                           |\n| public Real extraSumWidthValue(\\[Real value\\])                           |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public int rotateSign(\\[int value\\])                                     |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public int showZero(\\[int value\\])                                       |                                                                                                                                           |\n| public int signDisplay(\\[int value\\])                                    |                                                                                                                                           |\n| public boolean sumAll(\\[boolean value\\])                                 |                                                                                                                                           |\n| public boolean sumNeg(\\[boolean value\\])                                 |                                                                                                                                           |\n| public boolean sumPos(\\[boolean value\\])                                 |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void show()                                                       |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void extraSumWidth(Real value, Units unit)                        |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void hide()                                                       |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowNegative\n\n    public int allowNegative([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that was used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method displaceNegative\n\n    public int displaceNegative([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeMode\n\n    public AutoMode displaceNegativeMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeValue\n\n    public int displaceNegativeValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthMode\n\n    public int extraSumWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthStr\n\n    public str extraSumWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthUnit\n\n    public Units extraSumWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthValue\n\n    public Real extraSumWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rotateSign\n\n    public int rotateSign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showZero\n\n    public int showZero([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method signDisplay\n\n    public int signDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumAll\n\n    public boolean sumAll([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumNeg\n\n    public boolean sumNeg([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumPos\n\n    public boolean sumPos([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method show\n\n    public void show()\n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method extraSumWidth\n\n    public void extraSumWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n## Class ReportLibraryNode\n    class ReportLibraryNode extends xresourceNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                       | Description                                                                                                                               |\n|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public str changedBy(\\[str value\\])          | Gets or sets the name of the user who last changed the application object.                                                                |\n| public Date changedDate(\\[Date value\\])      | Gets or sets the date an application object was last changed.                                                                             |\n| public str changedTime(\\[str value\\])        | Gets or sets the time an application object was last changed.                                                                             |\n| public str createdBy(\\[str value\\])          | Gets or sets the name of the user who created the application object.                                                                     |\n| public Date creationDate(\\[Date value\\])     | Gets or sets the date an application object was created.                                                                                  |\n| public str creationTime(\\[str value\\])       |                                                                                                                                           |\n| public str designs(\\[str value\\])            |                                                                                                                                           |\n| public str name(\\[str value\\])               | Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])           |                                                                                                                                           |\n| public str projectGuid(\\[str value\\])        |                                                                                                                                           |\n| public str referencedProjects(\\[str value\\]) |                                                                                                                                           |\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method designs\n\n    public str designs([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method projectGuid\n\n    public str projectGuid([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referencedProjects\n\n    public str referencedProjects([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class ReportOutput\n    class ReportOutput extends Object\n\nThe ReportOutput class handles the output of a report to a printer or file.\n\n### Remarks\n\nThis class serves as the base class for the ReportViewer class, which handles preview of reports, and for the ReportOutputUser class, which handles output of reports to a user-defined target in a user-defined format. In general, if a report is printed to the printer, the print method creates a ReportOutput object and calls its print method. If the call printJobSettings::outputToClient(TRUE) has been made, a ReportViewer object is created instead. The call to the print method prints the report on a printer that is set up on the client, because a ReportViewer object can only exist on the client, not on the server.\n\n### Examples\n\nThe following example prints the job descriptions and page numbers of jobs that have been inserted into the printArchive table on the current date, and prints page 1 on the default printer.\n\n    static void aaaReportOutputExample(args a) \n    { \n        printJobHeader printJobHeader; \n        printJobPages printJobPages; \n        int myrecId; \n        reportViewer reportViewer; \n        while select printJobHeader where printJobHeader.createdDateTime >=\n            str2datetime(\"01/01/2011 12:00:00\", 123) \n        { \n            myrecId = printJobHeader.recId; \n            print printJobHeader.jobDescription; \n            while select printJobPages  \n                where printJobPages.pagesHeaderRecId == myRecId \n            print printJobPages.PageNo; \n            reportViewer = new reportOutput(printJobHeader); \n            reportViewer.print(); \n        } \n    }\n\n### Methods\n\n| Method                                                                    | Description                                     |\n|---------------------------------------------------------------------------|-------------------------------------------------|\n| public str description(\\[str description\\])                               |                                                 |\n| public int getCopyNo()                                                    |                                                 |\n| public boolean getDeclineOverwrite()                                      |                                                 |\n| public int getLastCopyNo()                                                |                                                 |\n| public int getLastPageNo()                                                |                                                 |\n| public int getPageNo()                                                    |                                                 |\n| public str getTempFileName(str prefix)                                    |                                                 |\n| public PrintJobStatus jobStatus()                                         |                                                 |\n| public PrintJobSettings printJobSettings()                                |                                                 |\n| public boolean setNumberOfPages(int pageNo)                               |                                                 |\n| public str type(\\[str type\\])                                             |                                                 |\n| public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\]) | Initializes a new instance of the Object class. |\n| public void printAscii(str filename)                                      |                                                 |\n| public void printTextUTF8(str filename)                                   | Prints a report to a UTF-8 format.              |\n| public void printRTF(str filename)                                        |                                                 |\n| public void print()                                                       |                                                 |\n| public void printPDF(str filename, \\[boolean embedFonts\\])                |                                                 |\n| public void printHTML(str filename)                                       |                                                 |\n| public void abort()                                                       |                                                 |\n| public void dialogAndPrint()                                              |                                                 |\n| public void printToTarget()                                               |                                                 |\n\n### Method description\n\n    public str description([str description])\n\n#### Parameters\n\ndescription  \n\n#### Return Value\n\n### Method getCopyNo\n\n    public int getCopyNo()\n\n#### Return Value\n\n### Method getDeclineOverwrite\n\n    public boolean getDeclineOverwrite()\n\n#### Return Value\n\n### Method getLastCopyNo\n\n    public int getLastCopyNo()\n\n#### Return Value\n\n### Method getLastPageNo\n\n    public int getLastPageNo()\n\n#### Return Value\n\n### Method getPageNo\n\n    public int getPageNo()\n\n#### Return Value\n\n### Method getTempFileName\n\n    public str getTempFileName(str prefix)\n\n#### Parameters\n\nprefix  \n\n#### Return Value\n\n### Method jobStatus\n\n    public PrintJobStatus jobStatus()\n\n#### Return Value\n\n### Method printJobSettings\n\n    public PrintJobSettings printJobSettings()\n\n#### Return Value\n\n### Method setNumberOfPages\n\n    public boolean setNumberOfPages(int pageNo)\n\n#### Parameters\n\npageNo  \n\n#### Return Value\n\n### Method type\n\n    public str type([str type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(PrintJobHeader jobsCursor, [PrintJobPages pagesCursor])\n\n#### Parameters\n\njobsCursor  \n\n<!-- -->\n\npagesCursor  \n\n### Method printAscii\n\n    public void printAscii(str filename)\n\n#### Parameters\n\nfilename  \n\n### Method printTextUTF8\n\nPrints a report to a UTF-8 format.\n\n    public void printTextUTF8(str filename)\n\n#### Parameters\n\nfilename  \nA string that specifies the name of the file that the report is printed to.\n\n#### Remarks\n\nUTF-8 is a method of character encoding that allows for both single and multibyte characters in one string.\n\n#### Examples\n\nThe following example shows a call to the printTextUTF8 method.\n\n    void printTextUTF8() \n    { \n        ReportOutput reportOutput; \n        printJobHeader printJobHeader; \n        while select printJobHeader where printJobHeader.createdDateTime >= \n            str2datetime(\"01/01/2011 12:00:00\", 123)\n        { \n            print printJobHeader.jobDescription; \n            reportOutput = new ReportOutput(printJobHeader); \n            reportOutput.printTextUTF8(\"c:\\\\report.txt\"); \n        } \n    }\n\n### Method printRTF\n\n    public void printRTF(str filename)\n\n#### Parameters\n\nfilename  \n\n### Method print\n\n    public void print()\n\n### Method printPDF\n\n    public void printPDF(str filename, [boolean embedFonts])\n\n#### Parameters\n\nfilename  \n\n<!-- -->\n\nembedFonts  \n\n### Method printHTML\n\n    public void printHTML(str filename)\n\n#### Parameters\n\nfilename  \n\n### Method abort\n\n    public void abort()\n\n### Method dialogAndPrint\n\n    public void dialogAndPrint()\n\n### Method printToTarget\n\n    public void printToTarget()\n\n## Class ReportOutputUser\n    class ReportOutputUser extends ReportOutput\n\nThe ReportOutputUser class implements a user-defined target for report formatting.\n\n### Remarks\n\nBy default, Finance and Operations prints reports to a screen, printer, file, or email address. The following API items support a user-defined target:\n\n-   ReportOutputUserType system enumeration\n-   ViewerClass value for the PrintMedium system enumeration\n-   ClassFactory::createViewer method\n\nWhen a report is run, the print method creates a reportOutputUser object if the target is PrintMedium::Viewer class. This object will be created by calling the createViewer method and giving reportOutputUserType as one of the arguments. The report will then be printed by calling methods on the object: startReport, startPage, startSection, writeField, and so on. In general, if the target is, for example, a printer, the reportRun::print method will create a reportOutput object and call its print method to print the report to a printer. If the target is viewerClass, it will instead call the createViewer method to get a ReportOutputUser object. Then it will call methods on the object: startReport, startPage, startSection, startField, outputStringField, and so on. When the report is run, the Text property of the text controls of the report will be written to the print window.\n\n### Examples\n\n### Methods\n\n| Method                                                                                            | Description                                     |\n|---------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| public boolean pageCreated(int page)                                                              |                                                 |\n| public str result()                                                                               |                                                 |\n| public void writeAutoLabel(OutputAutoLabelField field, OuputSection section)                      |                                                 |\n| public void endHeaderSection(OutputHeaderSection section)                                         |                                                 |\n| public void writeString(OutputStringField field, OuputSection section)                            |                                                 |\n| public void endPageHeaderSection(OutputPageHeaderSection section)                                 |                                                 |\n| public void writeBitmap(OutputBitmapField field, OuputSection section)                            |                                                 |\n| public void endBodySection(OutputBodySection section)                                             |                                                 |\n| public void startPageHeaderSection(OutputPageHeaderSection section)                               |                                                 |\n| public void printViaClass()                                                                       |                                                 |\n| public void endPageFooterSection(OutputPageFooterSection section)                                 |                                                 |\n| public void writeReal(OutputRealField field, OuputSection section)                                |                                                 |\n| public void startColumnHeadingsSection(OutputColumnHeadingsSection section)                       |                                                 |\n| public void writeShape(OutputShapeField field, OuputSection section)                              |                                                 |\n| public void writeDateTime(OutputDateTimeField field, OuputSection section)                        |                                                 |\n| public void writeStaticText(OutputStaticTextField field, OuputSection section)                    |                                                 |\n| public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\], \\[container settings\\]) | Initializes a new instance of the Object class. |\n| public void writeInteger(OutputIntegerField field, OuputSection section)                          |                                                 |\n| public void startColumnSection()                                                                  |                                                 |\n| public void startSection(OuputSection section)                                                    |                                                 |\n| public void writeDate(OutputDateField field, OuputSection section)                                |                                                 |\n| public void pagesTotal(int pagesTotal)                                                            |                                                 |\n| public void writeInt64(OutputInt64Field field, OuputSection section)                              |                                                 |\n| public void endReport(PrintJobStatus printJobStatus)                                              |                                                 |\n| public void endColumnSection()                                                                    |                                                 |\n| public void startReport(PrintJobSettings printJobSettings)                                        |                                                 |\n| public void printPageViaClass(int page)                                                           |                                                 |\n| public void endEpilogSection(OutputEpilogSection section)                                         |                                                 |\n| public void endPrologSection(OutputPrologSection section)                                         |                                                 |\n| public void endPage()                                                                             |                                                 |\n| public void startFooterSection(OutputFooterSection section)                                       |                                                 |\n| public void endProgrammableSection(OutputProgrammableSection section)                             |                                                 |\n| public void startBodySection(OutputBodySection section)                                           |                                                 |\n| public void endSection(OuputSection section)                                                      |                                                 |\n| public void startProgrammableSection(OutputProgrammableSection section)                           |                                                 |\n| public void startEpilogSection(OutputEpilogSection section)                                       |                                                 |\n| public void startHeaderSection(OutputHeaderSection section)                                       |                                                 |\n| public void endColumnHeadingsSection(OutputColumnHeadingsSection section)                         |                                                 |\n| public void writeLabel(OutputLabelField field, OuputSection section)                              |                                                 |\n| public void endFooterSection(OutputFooterSection section)                                         |                                                 |\n| public void writeField(OutputField field, OuputSection section)                                   |                                                 |\n| public void writeEnum(OutputEnumField field, OuputSection section)                                |                                                 |\n| public void startPageFooterSection(OutputPageFooterSection section)                               |                                                 |\n| public void writeSum(OutputSumField field, OuputSection section)                                  |                                                 |\n| public void writeTime(OutputTimeField field, OuputSection section)                                |                                                 |\n| public void startPage(OutputPage page)                                                            |                                                 |\n| public void startPrologSection(OutputPrologSection section)                                       |                                                 |\n\n### Method pageCreated\n\n    public boolean pageCreated(int page)\n\n#### Parameters\n\npage  \n\n#### Return Value\n\n### Method result\n\n    public str result()\n\n#### Return Value\n\n### Method writeAutoLabel\n\n    public void writeAutoLabel(OutputAutoLabelField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method endHeaderSection\n\n    public void endHeaderSection(OutputHeaderSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeString\n\n    public void writeString(OutputStringField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method endPageHeaderSection\n\n    public void endPageHeaderSection(OutputPageHeaderSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeBitmap\n\n    public void writeBitmap(OutputBitmapField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method endBodySection\n\n    public void endBodySection(OutputBodySection section)\n\n#### Parameters\n\nsection  \n\n### Method startPageHeaderSection\n\n    public void startPageHeaderSection(OutputPageHeaderSection section)\n\n#### Parameters\n\nsection  \n\n### Method printViaClass\n\n    public void printViaClass()\n\n### Method endPageFooterSection\n\n    public void endPageFooterSection(OutputPageFooterSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeReal\n\n    public void writeReal(OutputRealField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method startColumnHeadingsSection\n\n    public void startColumnHeadingsSection(OutputColumnHeadingsSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeShape\n\n    public void writeShape(OutputShapeField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method writeDateTime\n\n    public void writeDateTime(OutputDateTimeField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method writeStaticText\n\n    public void writeStaticText(OutputStaticTextField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(PrintJobHeader jobsCursor, [PrintJobPages pagesCursor], [container settings])\n\n#### Parameters\n\njobsCursor  \n\n<!-- -->\n\npagesCursor  \n\n<!-- -->\n\nsettings  \n\n### Method writeInteger\n\n    public void writeInteger(OutputIntegerField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method startColumnSection\n\n    public void startColumnSection()\n\n### Method startSection\n\n    public void startSection(OuputSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeDate\n\n    public void writeDate(OutputDateField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method pagesTotal\n\n    public void pagesTotal(int pagesTotal)\n\n#### Parameters\n\npagesTotal  \n\n### Method writeInt64\n\n    public void writeInt64(OutputInt64Field field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method endReport\n\n    public void endReport(PrintJobStatus printJobStatus)\n\n#### Parameters\n\nprintJobStatus  \n\n### Method endColumnSection\n\n    public void endColumnSection()\n\n### Method startReport\n\n    public void startReport(PrintJobSettings printJobSettings)\n\n#### Parameters\n\nprintJobSettings  \n\n### Method printPageViaClass\n\n    public void printPageViaClass(int page)\n\n#### Parameters\n\npage  \n\n### Method endEpilogSection\n\n    public void endEpilogSection(OutputEpilogSection section)\n\n#### Parameters\n\nsection  \n\n### Method endPrologSection\n\n    public void endPrologSection(OutputPrologSection section)\n\n#### Parameters\n\nsection  \n\n### Method endPage\n\n    public void endPage()\n\n### Method startFooterSection\n\n    public void startFooterSection(OutputFooterSection section)\n\n#### Parameters\n\nsection  \n\n### Method endProgrammableSection\n\n    public void endProgrammableSection(OutputProgrammableSection section)\n\n#### Parameters\n\nsection  \n\n### Method startBodySection\n\n    public void startBodySection(OutputBodySection section)\n\n#### Parameters\n\nsection  \n\n### Method endSection\n\n    public void endSection(OuputSection section)\n\n#### Parameters\n\nsection  \n\n### Method startProgrammableSection\n\n    public void startProgrammableSection(OutputProgrammableSection section)\n\n#### Parameters\n\nsection  \n\n### Method startEpilogSection\n\n    public void startEpilogSection(OutputEpilogSection section)\n\n#### Parameters\n\nsection  \n\n### Method startHeaderSection\n\n    public void startHeaderSection(OutputHeaderSection section)\n\n#### Parameters\n\nsection  \n\n### Method endColumnHeadingsSection\n\n    public void endColumnHeadingsSection(OutputColumnHeadingsSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeLabel\n\n    public void writeLabel(OutputLabelField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method endFooterSection\n\n    public void endFooterSection(OutputFooterSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeField\n\n    public void writeField(OutputField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method writeEnum\n\n    public void writeEnum(OutputEnumField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method startPageFooterSection\n\n    public void startPageFooterSection(OutputPageFooterSection section)\n\n#### Parameters\n\nsection  \n\n### Method writeSum\n\n    public void writeSum(OutputSumField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method writeTime\n\n    public void writeTime(OutputTimeField field, OuputSection section)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nsection  \n\n### Method startPage\n\n    public void startPage(OutputPage page)\n\n#### Parameters\n\npage  \n\n### Method startPrologSection\n\n    public void startPrologSection(OutputPrologSection section)\n\n#### Parameters\n\nsection  \n\n## Class ReportPrinter\n    class ReportPrinter extends ReportOutput\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method | Description |\n|--------|-------------|\n\n## Class ReportPromptControl\n    class ReportPromptControl extends ReportControl\n\nThe ReportPromptControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeCase(\\[int value\\])                                     |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public int typeHeaderPrompt(\\[int value\\])                               |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void show()                                                       |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void hide()                                                       |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method typeHeaderPrompt\n\n    public int typeHeaderPrompt([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method hide\n\n    public void hide()\n\n## Class ReportRealControl\n    class ReportRealControl extends ReportControl\n\nThe ReportRealControl class enables you to create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                                   |\n|--------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                               |\n| public int allowNegative(\\[int value\\])                                  |                                                                                                                                               |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int autoInsSeparator(\\[int value\\])                               |                                                                                                                                               |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                             |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                                |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                                   |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                               |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                               |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                               |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                               |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                               |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                               |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                                   |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                                 |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public ReportFieldType controlType()                                     |                                                                                                                                               |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                               |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                               |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                               |\n| public int decimalSeparator(\\[int value\\])                               |                                                                                                                                               |\n| public int delete()                                                      |                                                                                                                                               |\n| public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])            |                                                                                                                                               |\n| public AutoMode displaceNegativeMode(\\[AutoMode mode\\])                  |                                                                                                                                               |\n| public int displaceNegativeValue(\\[int value\\])                          |                                                                                                                                               |\n| public str effectiveFont()                                               |                                                                                                                                               |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                               |\n| public int extraSumWidthMode(\\[int value\\])                              |                                                                                                                                               |\n| public str extraSumWidthStr(\\[str value\\])                               |                                                                                                                                               |\n| public Units extraSumWidthUnit(\\[Units value\\])                          |                                                                                                                                               |\n| public Real extraSumWidthValue(\\[Real value\\])                           |                                                                                                                                               |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                     |\n| public str fontInfoPrinter()                                             |                                                                                                                                               |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                               |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                               |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                               |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                               |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                               |\n| public str fontInfoScreen()                                              |                                                                                                                                               |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                               |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                               |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                               |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                               |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                               |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                           |\n| public int formatMST(\\[int value\\])                                      |                                                                                                                                               |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                               |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                               |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                               |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                               |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                               |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                       |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                               |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                         |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                               |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                               |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                               |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                               |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                               |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                               |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                               |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                               |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                               |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                               |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                               |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                               |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                               |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                               |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                               |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                               |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                               |\n| public int leftMarginAnFrame()                                           |                                                                                                                                               |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                               |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                               |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                               |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                               |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                               |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                               |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                               |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                               |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                               |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                                   |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                               |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                               |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                               |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                               |\n| public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])             |                                                                                                                                               |\n| public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])                   |                                                                                                                                               |\n| public int minNoOfDecimalsValue(\\[int value\\])                           |                                                                                                                                               |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                               |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])                |                                                                                                                                               |\n| public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])                      |                                                                                                                                               |\n| public int noOfDecimalsValue(\\[int value\\])                              |                                                                                                                                               |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                               |\n| public int position(\\[int value\\])                                       |                                                                                                                                               |\n| public str previewInfo(str string)                                       |                                                                                                                                               |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                               |\n| public int right100mm()                                                  |                                                                                                                                               |\n| public int right100mmInclBorder()                                        |                                                                                                                                               |\n| public int rightMarginAndFrame()                                         |                                                                                                                                               |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                               |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                               |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                               |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                               |\n| public int rotateSign(\\[int value\\])                                     |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                               |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                               |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                               |\n| public int showZero(\\[int value\\])                                       |                                                                                                                                               |\n| public int signDisplay(\\[int value\\])                                    |                                                                                                                                               |\n| public boolean sumAll(\\[boolean value\\])                                 |                                                                                                                                               |\n| public boolean sumNeg(\\[boolean value\\])                                 |                                                                                                                                               |\n| public boolean sumPos(\\[boolean value\\])                                 |                                                                                                                                               |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                         |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                               |\n| public int thousandSeparator(\\[int value\\])                              |                                                                                                                                               |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                               |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                               |\n| public int topMarginAndFrame()                                           |                                                                                                                                               |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                               |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                               |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                               |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                               |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                               |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                               |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                               |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                               |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                               |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                               |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                               |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                               |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                               |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthOfString100mm(str string)                                |                                                                                                                                               |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                               |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                               |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                        |\n| public void show()                                                       |                                                                                                                                               |\n| public void hide()                                                       |                                                                                                                                               |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                       |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                               |\n| public void left(Real value, Units unit)                                 |                                                                                                                                               |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                        |\n| public void extraSumWidth(Real value, Units unit)                        |                                                                                                                                               |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                               |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                               |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                               |\n| public void top(Real value, Units unit)                                  |                                                                                                                                               |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                               |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowNegative\n\n    public int allowNegative([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoInsSeparator\n\n    public int autoInsSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method decimalSeparator\n\n    public int decimalSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method displaceNegative\n\n    public int displaceNegative([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeMode\n\n    public AutoMode displaceNegativeMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeValue\n\n    public int displaceNegativeValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthMode\n\n    public int extraSumWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthStr\n\n    public str extraSumWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthUnit\n\n    public Units extraSumWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthValue\n\n    public Real extraSumWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method formatMST\n\n    public int formatMST([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method minNoOfDecimals\n\n    public int minNoOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsMode\n\n    public AutoMode minNoOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsValue\n\n    public int minNoOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method noOfDecimals\n\n    public int noOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsMode\n\n    public AutoMode noOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsValue\n\n    public int noOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rotateSign\n\n    public int rotateSign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showZero\n\n    public int showZero([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method signDisplay\n\n    public int signDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumAll\n\n    public boolean sumAll([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumNeg\n\n    public boolean sumNeg([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumPos\n\n    public boolean sumPos([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method thousandSeparator\n\n    public int thousandSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method show\n\n    public void show()\n\n### Method hide\n\n    public void hide()\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method extraSumWidth\n\n    public void extraSumWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n## Class ReportRun\n    class ReportRun extends ObjectRun\n\nThe ReportRun class generates and prints a report or previews a report on the screen.\n\n### Remarks\n\nAs opposed to the , which defines the structure of a report, a ReportRun object contains the runtime characteristics of the report.A ReportRun object can be created by using one of the following arguments:\n\n-   An Args object where the name and optionally designName parameters are specified.\n-   A created container, by using the for example.\n-   The report name and an optional design name.\n\nThe section template node type allows the sections to be defined once and reuse them many times in different reports. A typical example of this would be a check or a giro.\n\n### Examples\n\nThe following example runs the Customer design of the existing Cust report:\n\n    static void testReportRun(args a) \n    {  \n        reportRun rr; \n        args aa = new args(\"Cust\"); \n        aa.designName(\"Customer\"); \n        rr = new reportRun(aa); \n        rr.run(); \n    }\n\n### Methods\n\n| Method                                                                                                                                                    | Description                                                                                                                                       |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean allPages(\\[boolean all\\])                                                                                                                  |                                                                                                                                                   |\n| public boolean callMenuFunction(xMenuFunction menuFunction)                                                                                               |                                                                                                                                                   |\n| public str caption(str reportSpelling, str reportName, str designCaption, str designName)                                                                 | Creates a caption when previewing a report, or a document name when printing a report.                                                            |\n| public boolean collate(\\[boolean collate\\])                                                                                                               |                                                                                                                                                   |\n| public TableId columnHeadings(\\[TableId tableId\\])                                                                                                        | Provides control of column headings in a report.                                                                                                  |\n| public ReportControl control()                                                                                                                            | Retrieves the control that is being executed.                                                                                                     |\n| public int copies(\\[int numberOfCopies\\])                                                                                                                 |                                                                                                                                                   |\n| public int copiesTotal()                                                                                                                                  | Enables marking copies of reports.                                                                                                                |\n| public int copy()                                                                                                                                         | Returns the number of the copy of a report.                                                                                                       |\n| public str copyDescription()                                                                                                                              |                                                                                                                                                   |\n| public xFormRun createProgressForm()                                                                                                                      | Creates the form that contains progress information.                                                                                              |\n| public int currentYmm100()                                                                                                                                |                                                                                                                                                   |\n| public ReportDesign design(\\[AnyType nameOrReportDesign\\])                                                                                                | Gets or sets the name of the design.                                                                                                              |\n| public str deviceName(\\[str device\\])                                                                                                                     |                                                                                                                                                   |\n| public Object dialog(Object dialog)                                                                                                                       |                                                                                                                                                   |\n| public str driverName()                                                                                                                                   | Returns the printer driver name.                                                                                                                  |\n| public boolean enableAllBodies(\\[boolean enable\\])                                                                                                        |                                                                                                                                                   |\n| public boolean execute(int number)                                                                                                                        | Prints the programmable sections of a report.                                                                                                     |\n| public boolean executeBodyColumnHeadings(TableId tableId, \\[FieldId fieldId\\])                                                                            | Prints the column headings of a body section in a report.                                                                                         |\n| public boolean executeColumnHeadings(ReportSection section)                                                                                               |                                                                                                                                                   |\n| public boolean executeControlColumnHeadings(int number)                                                                                                   | Executes the column headings of a programmable section.                                                                                           |\n| public boolean executeFooter(\\[TableId tableId\\], \\[FieldId fieldId\\])                                                                                    | Execute a footer section.                                                                                                                         |\n| public boolean executeHeader(\\[TableId tableId\\], \\[FieldId fieldId\\])                                                                                    | Executes a header section.                                                                                                                        |\n| public boolean executeSection(ReportSection section)                                                                                                      | Prints the specified section in the report.                                                                                                       |\n| public boolean fetch()                                                                                                                                    | Executes the report query and calls the send method for the record that is found by the query.                                                    |\n| public int from(\\[int fromPage\\])                                                                                                                         |                                                                                                                                                   |\n| public int generateDesign(\\[Query query\\], \\[int designNo\\])                                                                                              |                                                                                                                                                   |\n| public boolean getDeclineOverwrite()                                                                                                                      |                                                                                                                                                   |\n| public int getNumberOfPrinters()                                                                                                                          |                                                                                                                                                   |\n| public str getPrinter(int number)                                                                                                                         |                                                                                                                                                   |\n| public str getRangeDescription(int number)                                                                                                                |                                                                                                                                                   |\n| public ReportViewer getReportViewer()                                                                                                                     |                                                                                                                                                   |\n| public PrintMedium getTarget()                                                                                                                            |                                                                                                                                                   |\n| public boolean hasGeneratedDesign()                                                                                                                       |                                                                                                                                                   |\n| public str headerDescription()                                                                                                                            |                                                                                                                                                   |\n| public int heightOfPageFooters()                                                                                                                          |                                                                                                                                                   |\n| public int indent()                                                                                                                                       |                                                                                                                                                   |\n| public boolean isBodyEnabled(TableId tableId)                                                                                                             |                                                                                                                                                   |\n| public Int64 jobId()                                                                                                                                      |                                                                                                                                                   |\n| public Common last(TableId tableId)                                                                                                                       |                                                                                                                                                   |\n| public int mm100Left()                                                                                                                                    |                                                                                                                                                   |\n| public int mm100PageHeight()                                                                                                                              |                                                                                                                                                   |\n| public str name(\\[str name\\])                                                                                                                             | Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.                         |\n| public container pack()                                                                                                                                   | Serializes the current instance of the ReportRun class.                                                                                           |\n| public container packDesign()                                                                                                                             |                                                                                                                                                   |\n| public container packPageSettings()                                                                                                                       |                                                                                                                                                   |\n| public container packPrinterSettings()                                                                                                                    |                                                                                                                                                   |\n| public container packPrintJobSettings()                                                                                                                   |                                                                                                                                                   |\n| public container packSubtotalSettings()                                                                                                                   |                                                                                                                                                   |\n| public int page(\\[int number\\])                                                                                                                           |                                                                                                                                                   |\n| public boolean pageFormatting()                                                                                                                           | Displays the printer properties of the printer.                                                                                                   |\n| public int pagesTotal()                                                                                                                                   |                                                                                                                                                   |\n| public str passThrough(str str)                                                                                                                           |                                                                                                                                                   |\n| public int pixelsLeft()                                                                                                                                   |                                                                                                                                                   |\n| public int print()                                                                                                                                        | Sends the generated report to a print medium, such as a printer or the screen.                                                                    |\n| public int printerAttributes()                                                                                                                            |                                                                                                                                                   |\n| public int printerAveragePPM()                                                                                                                            |                                                                                                                                                   |\n| public str printerComment()                                                                                                                               |                                                                                                                                                   |\n| public str printerDatatype()                                                                                                                              |                                                                                                                                                   |\n| public int printerDefaultPriority()                                                                                                                       |                                                                                                                                                   |\n| public str printerDriverName()                                                                                                                            |                                                                                                                                                   |\n| public str printerFontInfo()                                                                                                                              | Indicates which font is used to print the report.                                                                                                 |\n| public str printerLocation()                                                                                                                              |                                                                                                                                                   |\n| public int printerPageHeight()                                                                                                                            |                                                                                                                                                   |\n| public int printerPageWidth()                                                                                                                             |                                                                                                                                                   |\n| public int printerPaper()                                                                                                                                 |                                                                                                                                                   |\n| public str printerParameters()                                                                                                                            |                                                                                                                                                   |\n| public str printerPortName()                                                                                                                              |                                                                                                                                                   |\n| public str printerPrinterName()                                                                                                                           |                                                                                                                                                   |\n| public str printerPrintProcessor()                                                                                                                        |                                                                                                                                                   |\n| public int printerPriority()                                                                                                                              |                                                                                                                                                   |\n| public int printerQueuedJobs()                                                                                                                            |                                                                                                                                                   |\n| public str printerSepFile()                                                                                                                               |                                                                                                                                                   |\n| public str printerServerName()                                                                                                                            |                                                                                                                                                   |\n| public boolean printerSettings(\\[int showWhat\\])                                                                                                          | Enables the user to select printer settings.                                                                                                      |\n| public str printerShareName()                                                                                                                             |                                                                                                                                                   |\n| public TimeOfDay printerStartTime()                                                                                                                       |                                                                                                                                                   |\n| public int printerStatus()                                                                                                                                |                                                                                                                                                   |\n| public TimeOfDay printerUntilTime()                                                                                                                       |                                                                                                                                                   |\n| public PrintJobSettings printJobSettings(\\[container packedPrintJobSettings\\])                                                                            |                                                                                                                                                   |\n| public int printSum()                                                                                                                                     |                                                                                                                                                   |\n| public xFormRun progressForm(\\[xFormRun form\\])                                                                                                           |                                                                                                                                                   |\n| public str progressInfo(int pageNo, int lineNo)                                                                                                           | Creates a string that describes how much of the report has been generated during the execution of a report every time that a section is executed. |\n| public boolean prompt(\\[boolean enableCopy\\], \\[boolean enablePages\\], \\[boolean enableDevice\\], \\[boolean enableProperties\\], \\[boolean enablePrintTo\\]) | Prompts the user a report is run.                                                                                                                 |\n| public Query query(\\[Query query\\])                                                                                                                       |                                                                                                                                                   |\n| public QueryRun queryRun(\\[QueryRun queryRun\\])                                                                                                           |                                                                                                                                                   |\n| public Report report()                                                                                                                                    |                                                                                                                                                   |\n| public str reportUser(\\[str user\\])                                                                                                                       |                                                                                                                                                   |\n| public int rulerCM()                                                                                                                                      |                                                                                                                                                   |\n| public int rulerINCH()                                                                                                                                    |                                                                                                                                                   |\n| public str screenFontInfo()                                                                                                                               |                                                                                                                                                   |\n| public ReportSection section()                                                                                                                            |                                                                                                                                                   |\n| public int sectionsLeft(ReportSection section)                                                                                                            |                                                                                                                                                   |\n| public boolean send(Common cursor, \\[int level\\], \\[boolean triggerOffBody\\], \\[boolean newPageBeforeBody\\])                                              | Triggers the body sections that belong to a section group.                                                                                        |\n| public PrintMedium setTarget(PrintMedium target)                                                                                                          |                                                                                                                                                   |\n| public boolean showMenuFunction(xMenuFunction menuFunction)                                                                                               |                                                                                                                                                   |\n| public boolean showMenuReference(WebMenu menuReference)                                                                                                   |                                                                                                                                                   |\n| public str sortInfo(Common cursor)                                                                                                                        |                                                                                                                                                   |\n| public Date startDate()                                                                                                                                   |                                                                                                                                                   |\n| public DateTime startDateTime()                                                                                                                           |                                                                                                                                                   |\n| public Date startMachineDate()                                                                                                                            |                                                                                                                                                   |\n| public TimeOfDay startTime()                                                                                                                              |                                                                                                                                                   |\n| public Real sum(TableId tableId, FieldId fieldId, \\[int indent\\])                                                                                         |                                                                                                                                                   |\n| public Real sumControl(str fieldName, \\[int indent\\])                                                                                                     |                                                                                                                                                   |\n| public Real sumControlNeg(str fieldName, \\[int indent\\])                                                                                                  |                                                                                                                                                   |\n| public Real sumControlPos(str fieldName, \\[int indent\\])                                                                                                  |                                                                                                                                                   |\n| public str sumDescription()                                                                                                                               |                                                                                                                                                   |\n| public Real sumNeg(TableId tableId, FieldId fieldId, \\[int indent\\])                                                                                      |                                                                                                                                                   |\n| public Real sumPos(TableId tableId, FieldId fieldId, \\[int indent\\])                                                                                      |                                                                                                                                                   |\n| public boolean suppressReportIsEmptyMessage(\\[boolean suppress\\])                                                                                         |                                                                                                                                                   |\n| public str title(\\[str title\\])                                                                                                                           | Gets or sets the print job description.                                                                                                           |\n| public int to(\\[int toPage\\])                                                                                                                             |                                                                                                                                                   |\n| public str toString()                                                                                                                                     | Returns a textual description of the class.                                                                                                       |\n| public boolean unpackPageSettings(container packedPageSetup)                                                                                              |                                                                                                                                                   |\n| public boolean unpackPrinterSettings(container packedPrinterSetup)                                                                                        |                                                                                                                                                   |\n| public boolean unpackPrintJobSettings(container packedPrintJobSettings)                                                                                   |                                                                                                                                                   |\n| public boolean unpackSubtotalSettings(container packedSubtotalSetup)                                                                                      |                                                                                                                                                   |\n| public PrinterOrientation userSelectedOrientation()                                                                                                       |                                                                                                                                                   |\n| public void disableBody(\\[TableId tableId\\])                                                                                                              |                                                                                                                                                   |\n| public void attach()                                                                                                                                      |                                                                                                                                                   |\n| public void new(AnyType argsOrReportOrContainer, \\[str designName\\], \\[boolean isWebReport\\])                                                             | Initializes an instance of the ReportRun class.                                                                                                   |\n| public void disableSection(ReportSection section)                                                                                                         |                                                                                                                                                   |\n| public void arrangeLevelGlobal()                                                                                                                          |                                                                                                                                                   |\n| public void setEscapeSequence(str str)                                                                                                                    |                                                                                                                                                   |\n| public void enableBody(\\[TableId tableId\\])                                                                                                               |                                                                                                                                                   |\n| public void clearAllRangeDescriptions()                                                                                                                   |                                                                                                                                                   |\n| public void header(ReportSection headerSection, TableId tableId, FieldId fieldId)                                                                         | Controls the header.                                                                                                                              |\n| public void unpackDesign(container packedDesign)                                                                                                          |                                                                                                                                                   |\n| public void newPage(\\[boolean doPageFooter\\])                                                                                                             |                                                                                                                                                   |\n| public void footer(ReportSection footerSection, TableId tableId, FieldId fieldId)                                                                         | Controls the footer.                                                                                                                              |\n| public void reset(\\[boolean delayExceptions\\])                                                                                                            | Enables a single instance of the ReportRun class to create multiple reports.                                                                      |\n| public void arrangeLevelNone()                                                                                                                            |                                                                                                                                                   |\n| public void run()                                                                                                                                         | Runs the report.                                                                                                                                  |\n| public void gotoYmm100(\\[int mm100\\])                                                                                                                     |                                                                                                                                                   |\n| public void disableColumnHeadings(\\[TableId tableId\\])                                                                                                    |                                                                                                                                                   |\n| public void enablePageFooter()                                                                                                                            |                                                                                                                                                   |\n| public void init()                                                                                                                                        |                                                                                                                                                   |\n| public void arrangeLevelControl()                                                                                                                         |                                                                                                                                                   |\n| public void disablePageFooter()                                                                                                                           |                                                                                                                                                   |\n| public void addPendingSums()                                                                                                                              | Prints the relevant footers of the report.                                                                                                        |\n| public void arrangeLevelSection()                                                                                                                         |                                                                                                                                                   |\n| public void enableSection(ReportSection section)                                                                                                          |                                                                                                                                                   |\n| public void detach()                                                                                                                                      |                                                                                                                                                   |\n| public void addRangeDescription(int x, int y, str text, \\[str fontName\\], \\[int fontSize\\])                                                               |                                                                                                                                                   |\n| public void finalize()                                                                                                                                    |                                                                                                                                                   |\n\n### Method allPages\n\n    public boolean allPages([boolean all])\n\n#### Parameters\n\nall  \n\n#### Return Value\n\n### Method callMenuFunction\n\n    public boolean callMenuFunction(xMenuFunction menuFunction)\n\n#### Parameters\n\nmenuFunction  \n\n#### Return Value\n\n### Method caption\n\nCreates a caption when previewing a report, or a document name when printing a report.\n\n    public str caption(str reportSpelling, str reportName, str designCaption, str designName)\n\n#### Parameters\n\nreportSpelling  \nThe name of the design.\n\n<!-- -->\n\nreportName  \nThe name of the design.\n\n<!-- -->\n\ndesignCaption  \nThe name of the design.\n\n<!-- -->\n\ndesignName  \nThe name of the design.\n\n#### Return Value\n\nA string that contains \"DesignLabel - ReportSpelling\" if the DesignLabel is not empty. A string that contains \"ReportName(DesignName) - ReportSpelling\" if the DesignLabel is empty.\n\n#### Remarks\n\nThe call to the super method in this method creates a string that is used as a caption when previewing a report and as the document name when printing a report.It is recommended that you always fill out the Caption property of the report design so that the caption that is used during the preview of the report is in the actual language.\n\n### Method collate\n\n    public boolean collate([boolean collate])\n\n#### Parameters\n\ncollate  \n\n#### Return Value\n\n### Method columnHeadings\n\nProvides control of column headings in a report.\n\n    public TableId columnHeadings([TableId tableId])\n\n#### Parameters\n\ntableId  \nA table ID; optional.\n\n#### Return Value\n\nThe last tableId value for which columnHeading objects were printed.\n\n### Method control\n\nRetrieves the control that is being executed.\n\n    public ReportControl control()\n\n#### Return Value\n\nThe control that is being executed.\n\n#### Remarks\n\nThis method is intended for internal use.\n\n### Method copies\n\n    public int copies([int numberOfCopies])\n\n#### Parameters\n\nnumberOfCopies  \n\n#### Return Value\n\n### Method copiesTotal\n\nEnables marking copies of reports.\n\n    public int copiesTotal()\n\n#### Return Value\n\nThe number of copies the user requested in the sysPrintForm form.\n\n#### Remarks\n\nControls are typically evaluated during the execution of a report. A control that uses this method is evaluated when the report is printed.\n\n### Method copy\n\nReturns the number of the copy of a report.\n\n    public int copy()\n\n#### Return Value\n\nThe number of the copy.\n\n#### Remarks\n\nIf the user prints three copies of a report a control that have a dataFunction method, this method will return one for the first copy, two for the second copy, and three for the last copy.\n\n### Method copyDescription\n\n    public str copyDescription()\n\n#### Return Value\n\n### Method createProgressForm\n\nCreates the form that contains progress information.\n\n    public xFormRun createProgressForm()\n\n#### Return Value\n\nThe form to use to display the progress information.\n\n#### Remarks\n\nYou can overload this method. The method is called when the first page is created. The default implementation will open the SysPrintProgress form.If you implement your own progress form, you must implement the setNames and setPagePercent methods because these methods are called within the kernel.This form is shown when the pages are created, not when the pages are printed.\n\n### Method currentYmm100\n\n    public int currentYmm100()\n\n#### Return Value\n\n### Method design\n\nGets or sets the name of the design.\n\n    public ReportDesign design([AnyType nameOrReportDesign])\n\n#### Parameters\n\nnameOrReportDesign  \nThe name of the design; optional.\n\n#### Return Value\n\nThe name of the design.\n\n#### Remarks\n\nThis method can be used to change from one design to another while the report is executed.\n\n### Method deviceName\n\n    public str deviceName([str device])\n\n#### Parameters\n\ndevice  \n\n#### Return Value\n\n### Method dialog\n\n    public Object dialog(Object dialog)\n\n#### Parameters\n\ndialog  \n\n#### Return Value\n\n### Method driverName\n\nReturns the printer driver name.\n\n    public str driverName()\n\n#### Return Value\n\nThe printer driver name.\n\n#### Remarks\n\nThe method often returns the string \"winspool\". This is the printer driver name that is used when the printer device context is created.If no printers have been set up on the computer, the string \"Screen\" is returned.\n\n### Method enableAllBodies\n\n    public boolean enableAllBodies([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method execute\n\nPrints the programmable sections of a report.\n\n    public boolean execute(int number)\n\n#### Parameters\n\nnumber  \nThe controlNumber value of the programmable section.\n\n#### Return Value\n\nfalse if the toPage object has been generated; otherwise, true.\n\n### Method executeBodyColumnHeadings\n\nPrints the column headings of a body section in a report.\n\n    public boolean executeBodyColumnHeadings(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe field ID of the DataField property of a section group; optional.\n\n<!-- -->\n\nfieldId  \nThe field ID of the DataField property of a section group; optional.\n\n#### Return Value\n\ntrue if any column headings were printed; otherwise, false.\n\n#### Remarks\n\nThis method is useful when a report should contain more column headings than those automatically printed in the report.\n\n### Method executeColumnHeadings\n\n    public boolean executeColumnHeadings(ReportSection section)\n\n#### Parameters\n\nsection  \n\n#### Return Value\n\n### Method executeControlColumnHeadings\n\nExecutes the column headings of a programmable section.\n\n    public boolean executeControlColumnHeadings(int number)\n\n#### Parameters\n\nnumber  \nThe controlNumber value of the programmable section.\n\n#### Return Value\n\ntrue if any sections were printed; otherwise, false.\n\n#### Remarks\n\nThis method is useful if you want to add columnHeading objects to a programmable section.If a programmable section causes a page break, the columnHeadings objects of the section are repeated. Under these circumstances this method not have to be called.\n\n### Method executeFooter\n\nExecute a footer section.\n\n    public boolean executeFooter([TableId tableId], [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe field ID of the dataField property of the footer section group; optional.\n\n<!-- -->\n\nfieldId  \nThe field ID of the dataField property of the footer section group; optional.\n\n#### Return Value\n\ntrue if anything was printed; otherwise, false.\n\n### Method executeHeader\n\nExecutes a header section.\n\n    public boolean executeHeader([TableId tableId], [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe field ID of the dataField property of the header section group; optional.\n\n<!-- -->\n\nfieldId  \nThe field ID of the dataField property of the header section group; optional.\n\n#### Return Value\n\n### Method executeSection\n\nPrints the specified section in the report.\n\n    public boolean executeSection(ReportSection section)\n\n#### Parameters\n\nsection  \nThe section to print.\n\n#### Return Value\n\n### Method fetch\n\nExecutes the report query and calls the send method for the record that is found by the query.\n\n    public boolean fetch()\n\n#### Return Value\n\ntrue if execution of the report should continue; otherwise, false.\n\n#### Remarks\n\nThe fetch method is called from the super call in the run method.\n\n### Method from\n\n    public int from([int fromPage])\n\n#### Parameters\n\nfromPage  \n\n#### Return Value\n\n### Method generateDesign\n\n    public int generateDesign([Query query], [int designNo])\n\n#### Parameters\n\nquery  \n\n<!-- -->\n\ndesignNo  \n\n#### Return Value\n\n### Method getDeclineOverwrite\n\n    public boolean getDeclineOverwrite()\n\n#### Return Value\n\n### Method getNumberOfPrinters\n\n    public int getNumberOfPrinters()\n\n#### Return Value\n\n### Method getPrinter\n\n    public str getPrinter(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getRangeDescription\n\n    public str getRangeDescription(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getReportViewer\n\n    public ReportViewer getReportViewer()\n\n#### Return Value\n\n### Method getTarget\n\n    public PrintMedium getTarget()\n\n#### Return Value\n\n### Method hasGeneratedDesign\n\n    public boolean hasGeneratedDesign()\n\n#### Return Value\n\n### Method headerDescription\n\n    public str headerDescription()\n\n#### Return Value\n\n### Method heightOfPageFooters\n\n    public int heightOfPageFooters()\n\n#### Return Value\n\n### Method indent\n\n    public int indent()\n\n#### Return Value\n\n### Method isBodyEnabled\n\n    public boolean isBodyEnabled(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\n### Method jobId\n\n    public Int64 jobId()\n\n#### Return Value\n\n### Method last\n\n    public Common last(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\n### Method mm100Left\n\n    public int mm100Left()\n\n#### Return Value\n\n### Method mm100PageHeight\n\n    public int mm100PageHeight()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.\n\n    public str name([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method pack\n\nSerializes the current instance of the ReportRun class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the ReportRun class.\n\n### Method packDesign\n\n    public container packDesign()\n\n#### Return Value\n\n### Method packPageSettings\n\n    public container packPageSettings()\n\n#### Return Value\n\n### Method packPrinterSettings\n\n    public container packPrinterSettings()\n\n#### Return Value\n\n### Method packPrintJobSettings\n\n    public container packPrintJobSettings()\n\n#### Return Value\n\n### Method packSubtotalSettings\n\n    public container packSubtotalSettings()\n\n#### Return Value\n\n### Method page\n\n    public int page([int number])\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method pageFormatting\n\nDisplays the printer properties of the printer.\n\n    public boolean pageFormatting()\n\n#### Return Value\n\n#### Remarks\n\nThis method on the Report object is never called by the kernel. It could be called by the sysPrintForm form when the user clicks the Properties button, but instead, the sysPrintForm form calls the directly.\n\n### Method pagesTotal\n\n    public int pagesTotal()\n\n#### Return Value\n\n### Method passThrough\n\n    public str passThrough(str str)\n\n#### Parameters\n\nstr  \n\n#### Return Value\n\n### Method pixelsLeft\n\n    public int pixelsLeft()\n\n#### Return Value\n\n### Method print\n\nSends the generated report to a print medium, such as a printer or the screen.\n\n    public int print()\n\n#### Return Value\n\n#### Remarks\n\nThe call to the super method in this method directs the generated report to a printMedium object, such as printer or screen.If the target is a screen, the call to the super method will create a reportViewer object on the client and call the showPage method.If the target is a printer, the call to the super method will create a reportOutput object and call the print method on this object. If the outputToClient method of the PrintJobSettings class has been called with a parameter of true, a reportViewer object will be created and the print method of that object will be called. In in this manner, a report that is generated on the server can be output to a printer that is set up on the client.\n\n### Method printerAttributes\n\n    public int printerAttributes()\n\n#### Return Value\n\n### Method printerAveragePPM\n\n    public int printerAveragePPM()\n\n#### Return Value\n\n### Method printerComment\n\n    public str printerComment()\n\n#### Return Value\n\n### Method printerDatatype\n\n    public str printerDatatype()\n\n#### Return Value\n\n### Method printerDefaultPriority\n\n    public int printerDefaultPriority()\n\n#### Return Value\n\n### Method printerDriverName\n\n    public str printerDriverName()\n\n#### Return Value\n\n### Method printerFontInfo\n\nIndicates which font is used to print the report.\n\n    public str printerFontInfo()\n\n#### Return Value\n\nThe name of the font.\n\n#### Remarks\n\nThe font to use to print the report is not necessarily the same as that set on the font property of the control as that font might not be available on the user system.\n\n### Method printerLocation\n\n    public str printerLocation()\n\n#### Return Value\n\n### Method printerPageHeight\n\n    public int printerPageHeight()\n\n#### Return Value\n\n### Method printerPageWidth\n\n    public int printerPageWidth()\n\n#### Return Value\n\n### Method printerPaper\n\n    public int printerPaper()\n\n#### Return Value\n\n### Method printerParameters\n\n    public str printerParameters()\n\n#### Return Value\n\n### Method printerPortName\n\n    public str printerPortName()\n\n#### Return Value\n\n### Method printerPrinterName\n\n    public str printerPrinterName()\n\n#### Return Value\n\n### Method printerPrintProcessor\n\n    public str printerPrintProcessor()\n\n#### Return Value\n\n### Method printerPriority\n\n    public int printerPriority()\n\n#### Return Value\n\n### Method printerQueuedJobs\n\n    public int printerQueuedJobs()\n\n#### Return Value\n\n### Method printerSepFile\n\n    public str printerSepFile()\n\n#### Return Value\n\n### Method printerServerName\n\n    public str printerServerName()\n\n#### Return Value\n\n### Method printerSettings\n\nEnables the user to select printer settings.\n\n    public boolean printerSettings([int showWhat])\n\n#### Parameters\n\nshowWhat  \nThis parameter is currently not functional.\n\n#### Return Value\n\ntrue if execution of the report should continue; otherwise, false.\n\n#### Remarks\n\nThe call to the super method in this method runs the sysPrintForm form. The prompt method is called from the super method call in the prompt method. The PrintFormName property on the reportDesign object determines which form the call to the super method in the printerSettiings object will run.\n\n### Method printerShareName\n\n    public str printerShareName()\n\n#### Return Value\n\n### Method printerStartTime\n\n    public TimeOfDay printerStartTime()\n\n#### Return Value\n\n### Method printerStatus\n\n    public int printerStatus()\n\n#### Return Value\n\n### Method printerUntilTime\n\n    public TimeOfDay printerUntilTime()\n\n#### Return Value\n\n### Method printJobSettings\n\n    public PrintJobSettings printJobSettings([container packedPrintJobSettings])\n\n#### Parameters\n\npackedPrintJobSettings  \n\n#### Return Value\n\n### Method printSum\n\n    public int printSum()\n\n#### Return Value\n\n### Method progressForm\n\n    public xFormRun progressForm([xFormRun form])\n\n#### Parameters\n\nform  \n\n#### Return Value\n\n### Method progressInfo\n\nCreates a string that describes how much of the report has been generated during the execution of a report every time that a section is executed.\n\n    public str progressInfo(int pageNo, int lineNo)\n\n#### Parameters\n\npageNo  \nThe section number of the page.\n\n<!-- -->\n\nlineNo  \nThe section number of the page.\n\n#### Return Value\n\nA string that describes how much of the report has been generated.\n\n### Method prompt\n\nPrompts the user a report is run.\n\n    public boolean prompt([boolean enableCopy], [boolean enablePages], [boolean enableDevice], [boolean enableProperties], [boolean enablePrintTo])\n\n#### Parameters\n\nenableCopy  \nA Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.\n\n<!-- -->\n\nenablePages  \nA Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.\n\n<!-- -->\n\nenableDevice  \nA Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.\n\n<!-- -->\n\nenableProperties  \nA Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.\n\n<!-- -->\n\nenablePrintTo  \nA Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.\n\n#### Return Value\n\ntrue if execution of report should continue; otherwise, false.\n\n#### Remarks\n\nThe call to the super method in the prompt method runs the sysPrintForm form.This method is called from the run method.\n\n### Method query\n\n    public Query query([Query query])\n\n#### Parameters\n\nquery  \n\n#### Return Value\n\n### Method queryRun\n\n    public QueryRun queryRun([QueryRun queryRun])\n\n#### Parameters\n\nqueryRun  \n\n#### Return Value\n\n### Method report\n\n    public Report report()\n\n#### Return Value\n\n### Method reportUser\n\n    public str reportUser([str user])\n\n#### Parameters\n\nuser  \n\n#### Return Value\n\n### Method rulerCM\n\n    public int rulerCM()\n\n#### Return Value\n\n### Method rulerINCH\n\n    public int rulerINCH()\n\n#### Return Value\n\n### Method screenFontInfo\n\n    public str screenFontInfo()\n\n#### Return Value\n\n### Method section\n\n    public ReportSection section()\n\n#### Return Value\n\n### Method sectionsLeft\n\n    public int sectionsLeft(ReportSection section)\n\n#### Parameters\n\nsection  \n\n#### Return Value\n\n### Method send\n\nTriggers the body sections that belong to a section group.\n\n    public boolean send(Common cursor, [int level], [boolean triggerOffBody], [boolean newPageBeforeBody])\n\n#### Parameters\n\ncursor  \n\n<!-- -->\n\nlevel  \n\n<!-- -->\n\ntriggerOffBody  \n\n<!-- -->\n\nnewPageBeforeBody  \n\n#### Return Value\n\nfalse if the toPage object has been generated; otherwise true.\n\n#### Remarks\n\nThe executeSection method of the ReportSection class is called on each triggered section.By default in a master-detail report, the records from the master table have level of one, and the records from the details table have level of two.\n\n### Method setTarget\n\n    public PrintMedium setTarget(PrintMedium target)\n\n#### Parameters\n\ntarget  \n\n#### Return Value\n\n### Method showMenuFunction\n\n    public boolean showMenuFunction(xMenuFunction menuFunction)\n\n#### Parameters\n\nmenuFunction  \n\n#### Return Value\n\n### Method showMenuReference\n\n    public boolean showMenuReference(WebMenu menuReference)\n\n#### Parameters\n\nmenuReference  \n\n#### Return Value\n\n### Method sortInfo\n\n    public str sortInfo(Common cursor)\n\n#### Parameters\n\ncursor  \n\n#### Return Value\n\n### Method startDate\n\n    public Date startDate()\n\n#### Return Value\n\n### Method startDateTime\n\n    public DateTime startDateTime()\n\n#### Return Value\n\n### Method startMachineDate\n\n    public Date startMachineDate()\n\n#### Return Value\n\n### Method startTime\n\n    public TimeOfDay startTime()\n\n#### Return Value\n\n### Method sum\n\n    public Real sum(TableId tableId, FieldId fieldId, [int indent])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method sumControl\n\n    public Real sumControl(str fieldName, [int indent])\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method sumControlNeg\n\n    public Real sumControlNeg(str fieldName, [int indent])\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method sumControlPos\n\n    public Real sumControlPos(str fieldName, [int indent])\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method sumDescription\n\n    public str sumDescription()\n\n#### Return Value\n\n### Method sumNeg\n\n    public Real sumNeg(TableId tableId, FieldId fieldId, [int indent])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method sumPos\n\n    public Real sumPos(TableId tableId, FieldId fieldId, [int indent])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\nindent  \n\n#### Return Value\n\n### Method suppressReportIsEmptyMessage\n\n    public boolean suppressReportIsEmptyMessage([boolean suppress])\n\n#### Parameters\n\nsuppress  \n\n#### Return Value\n\n### Method title\n\nGets or sets the print job description.\n\n    public str title([str title])\n\n#### Parameters\n\ntitle  \nThe new printJobDescription value; optional.\n\n#### Return Value\n\nA string that contains the job description.\n\n#### Remarks\n\nIf reports are written to the printArchive object, the print job description is stored in the jobDescription field of the printJobHeader table. If the report is previewed, the print job description is used as the caption.This method is not called by the kernel during the execution of a report. Therefore overriding the method will have no effect.\n\n### Method to\n\n    public int to([int toPage])\n\n#### Parameters\n\ntoPage  \n\n#### Return Value\n\n### Method toString\n\nReturns a textual description of the class.\n\n    public str toString()\n\n#### Return Value\n\nA string that describes the class.\n\n#### Remarks\n\nFor most classes the toString method returns a string that contains the class handle and name, but for some classes more information is returned in the string.\n\n### Method unpackPageSettings\n\n    public boolean unpackPageSettings(container packedPageSetup)\n\n#### Parameters\n\npackedPageSetup  \n\n#### Return Value\n\n### Method unpackPrinterSettings\n\n    public boolean unpackPrinterSettings(container packedPrinterSetup)\n\n#### Parameters\n\npackedPrinterSetup  \n\n#### Return Value\n\n### Method unpackPrintJobSettings\n\n    public boolean unpackPrintJobSettings(container packedPrintJobSettings)\n\n#### Parameters\n\npackedPrintJobSettings  \n\n#### Return Value\n\n### Method unpackSubtotalSettings\n\n    public boolean unpackSubtotalSettings(container packedSubtotalSetup)\n\n#### Parameters\n\npackedSubtotalSetup  \n\n#### Return Value\n\n### Method userSelectedOrientation\n\n    public PrinterOrientation userSelectedOrientation()\n\n#### Return Value\n\n### Method disableBody\n\n    public void disableBody([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method attach\n\n    public void attach()\n\n### Method new\n\nInitializes an instance of the ReportRun class.\n\n    public void new(AnyType argsOrReportOrContainer, [str designName], [boolean isWebReport])\n\n#### Parameters\n\nargsOrReportOrContainer  \n\n<!-- -->\n\ndesignName  \n\n<!-- -->\n\nisWebReport  \n\n### Method disableSection\n\n    public void disableSection(ReportSection section)\n\n#### Parameters\n\nsection  \n\n### Method arrangeLevelGlobal\n\n    public void arrangeLevelGlobal()\n\n### Method setEscapeSequence\n\n    public void setEscapeSequence(str str)\n\n#### Parameters\n\nstr  \n\n### Method enableBody\n\n    public void enableBody([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method clearAllRangeDescriptions\n\n    public void clearAllRangeDescriptions()\n\n### Method header\n\nControls the header.\n\n    public void header(ReportSection headerSection, TableId tableId, FieldId fieldId)\n\n#### Parameters\n\nheaderSection  \nThe ID of the field that contains the changed value.\n\n<!-- -->\n\ntableId  \nThe ID of the field that contains the changed value.\n\n<!-- -->\n\nfieldId  \nThe ID of the field that contains the changed value.\n\n#### Remarks\n\nThis method works just like the footer method, except it is called before a group of records, whereas the footer method is called after a group of records.\n\n### Method unpackDesign\n\n    public void unpackDesign(container packedDesign)\n\n#### Parameters\n\npackedDesign  \n\n### Method newPage\n\n    public void newPage([boolean doPageFooter])\n\n#### Parameters\n\ndoPageFooter  \n\n### Method footer\n\nControls the footer.\n\n    public void footer(ReportSection footerSection, TableId tableId, FieldId fieldId)\n\n#### Parameters\n\nfooterSection  \nThe ID of the field that contains the changed value.\n\n<!-- -->\n\ntableId  \nThe ID of the field that contains the changed value.\n\n<!-- -->\n\nfieldId  \nThe ID of the field that contains the changed value.\n\n#### Remarks\n\nThis method is called when a field is sorted after it changes value, even if the user has chosen not to print headers or footers.One call of the send method can trigger the printing of multiple footer sections and header sections before the body sections. The header and footer methods allow the user to execute code before or after printing the header or footer.\n\n### Method reset\n\nEnables a single instance of the ReportRun class to create multiple reports.\n\n    public void reset([boolean delayExceptions])\n\n#### Parameters\n\ndelayExceptions  \n\n### Method arrangeLevelNone\n\n    public void arrangeLevelNone()\n\n### Method run\n\nRuns the report.\n\n    public void run()\n\n#### Remarks\n\nThe call to the super method in this method calls the following methods:\n\n-   prompt - Lets the user select the printer in the sysPrintForm form\n-   fetch - Runs the report query\n-   print - Directs the report to the printer or display.\n\n### Method gotoYmm100\n\n    public void gotoYmm100([int mm100])\n\n#### Parameters\n\nmm100  \n\n### Method disableColumnHeadings\n\n    public void disableColumnHeadings([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method enablePageFooter\n\n    public void enablePageFooter()\n\n### Method init\n\n    public void init()\n\n### Method arrangeLevelControl\n\n    public void arrangeLevelControl()\n\n### Method disablePageFooter\n\n    public void disablePageFooter()\n\n### Method addPendingSums\n\nPrints the relevant footers of the report.\n\n    public void addPendingSums()\n\n#### Remarks\n\nThis method should only be called in reports where the fetch method is called more than once.\n\n### Method arrangeLevelSection\n\n    public void arrangeLevelSection()\n\n### Method enableSection\n\n    public void enableSection(ReportSection section)\n\n#### Parameters\n\nsection  \n\n### Method detach\n\n    public void detach()\n\n### Method addRangeDescription\n\n    public void addRangeDescription(int x, int y, str text, [str fontName], [int fontSize])\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\ntext  \n\n<!-- -->\n\nfontName  \n\n<!-- -->\n\nfontSize  \n\n### Method finalize\n\n    public void finalize()\n\n## Class ReportSection\n    class ReportSection extends TreeNode\n\nThe ReportSection class contains a collection of report controls.\n\n### Remarks\n\nA section is printed on the report when the query for the report is executed or when the methods of the report are executed. This class lets you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called. A report section can be one of the following types: prologue, page header, header, footer, page footer, epilogue, programmable section, header, body, or footer. The section template node type lets you define sections one time and then reuse them many times in different reports. A typical example of this is a check or a giro.\n\n### Examples\n\nThe following example adds a section to a report:\n\n    static void test(args a) \n    {  \n        report r; \n        reportDesign rd; \n        reportSection rs; \n        reportRun rr; \n        // Create a simple report that is not present in  \n        // the Application Object Tree. \n        r = new report(); \n        rd = r.addDesign(\"myDesign\"); \n        rs = rd.addProgrammableSection(1);  \n        // Add a section triggered by execute(1). \n        rs.addTextControl(\"Hello world\"); \n        // Run the report. \n        rr = new reportRun(r); \n        if (rr.prompt()) // Run the sysPrintForm form. \n        { \n            rr.execute(1); // Execute the programmableSection. \n            rr.print();   // Print report to the target \n                          // (for example, printer or screen) \n                          // selected during the previous prompt call. \n        } \n    }\n\n### Methods\n\n| Method                                                                                       | Description                                                                                                                               |\n|----------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public ReportBitmapControl addBitmapControl()                                                | Adds a bitmap control to a report section.                                                                                                |\n| public ReportShapeControl addBoxControl(\\[ShapeType type\\])                                  | Adds a shape control to a report section.                                                                                                 |\n| public ReportControl addControl(TableId tableId, FieldId fieldId, \\[int arrayIndex\\])        | Adds a report control to a report section.                                                                                                |\n| public ReportDateControl addDateControl(TableId tableId, FieldId fieldId)                    | Adds a date control to a report section.                                                                                                  |\n| public ReportDateControl addDateDisplayControl(str displayFunc, \\[TableId tableId\\])         | Adds a date control to a report section.                                                                                                  |\n| public ReportDateTimeControl addDateTimeControl(TableId tableId, FieldId fieldId)            |                                                                                                                                           |\n| public ReportDateTimeControl addDateTimeDisplayControl(str displayFunc, \\[TableId tableId\\]) |                                                                                                                                           |\n| public ReportControl addDisplayControl(str displayFunc, \\[TableId tableId\\])                 |                                                                                                                                           |\n| public ReportEnumControl addEnumControl(TableId tableId, FieldId fieldId)                    |                                                                                                                                           |\n| public ReportEnumControl addEnumDisplayControl(str displayFunc, \\[TableId tableId\\])         |                                                                                                                                           |\n| public ReportFieldGroup addFieldGroup(TableId tableId, str name)                             |                                                                                                                                           |\n| public ReportGuidControl addGuidControl(TableId tableId, FieldId fieldId)                    |                                                                                                                                           |\n| public ReportGuidControl addGuidDisplayControl(str displayFunc, \\[TableId tableId\\])         |                                                                                                                                           |\n| public ReportInt64Control addInt64Control(TableId tableId, FieldId fieldId)                  |                                                                                                                                           |\n| public ReportInt64Control addInt64DisplayControl(str displayFunc, \\[TableId tableId\\])       |                                                                                                                                           |\n| public ReportIntegerControl addIntegerControl(TableId tableId, FieldId fieldId)              |                                                                                                                                           |\n| public ReportIntegerControl addIntegerDisplayControl(str displayFunc, \\[TableId tableId\\])   |                                                                                                                                           |\n| public ReportPromptControl addPromptControl(TableId tableId, \\[FieldId fieldId\\])            |                                                                                                                                           |\n| public ReportRealControl addRealControl(TableId tableId, FieldId fieldId)                    |                                                                                                                                           |\n| public ReportRealControl addRealDisplayControl(str displayFunc, \\[TableId tableId\\])         |                                                                                                                                           |\n| public ReportSectionGroup addSection(TableId tableId, \\[FieldId fieldId\\])                   |                                                                                                                                           |\n| public ReportShapeControl addShapeControl(\\[ShapeType type\\])                                |                                                                                                                                           |\n| public ReportStringControl addStringControl(TableId tableId, FieldId fieldId)                |                                                                                                                                           |\n| public ReportStringControl addStringDisplayControl(str displayFunc, \\[TableId tableId\\])     |                                                                                                                                           |\n| public ReportSumControl addSumControl(TableId tableId, FieldId fieldId)                      |                                                                                                                                           |\n| public ReportSumControl addSumNameControl(str name)                                          |                                                                                                                                           |\n| public ReportTextControl addTextControl(str text)                                            |                                                                                                                                           |\n| public ReportTimeControl addTimeControl(TableId tableId, FieldId fieldId)                    |                                                                                                                                           |\n| public ReportTimeControl addTimeDisplayControl(str displayFunc, \\[TableId tableId\\])         |                                                                                                                                           |\n| public int arrange()                                                                         |                                                                                                                                           |\n| public int arrangeMethod(\\[int value\\])                                                      |                                                                                                                                           |\n| public int arrangeWhen(\\[int value\\])                                                        |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                            | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public boolean autoHeader(\\[boolean value\\])                                                 |                                                                                                                                           |\n| public int bold(\\[int value\\])                                                               | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                                            |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                                                   |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                                    |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                                               |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                                                |                                                                                                                                           |\n| public int bottomMode(\\[int value\\])                                                         |                                                                                                                                           |\n| public str bottomStr(\\[str value\\])                                                          |                                                                                                                                           |\n| public Units bottomUnit(\\[Units value\\])                                                     |                                                                                                                                           |\n| public Real bottomValue(\\[Real value\\])                                                      |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                                       | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                        | Gets or sets the color scheme of the control.                                                                                             |\n| public int columnHeadingsStrategy(\\[int value\\])                                             |                                                                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                      |                                                                                                                                           |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                         |                                                                                                                                           |\n| public int columnspaceMode(\\[int value\\])                                                    |                                                                                                                                           |\n| public str columnspaceStr(\\[str value\\])                                                     |                                                                                                                                           |\n| public Units columnspaceUnit(\\[Units value\\])                                                |                                                                                                                                           |\n| public Real columnspaceValue(\\[Real value\\])                                                 |                                                                                                                                           |\n| public int columnsValue(\\[int value\\])                                                       |                                                                                                                                           |\n| public ReportControl control(FieldId fieldId, \\[TableId tableId\\])                           | Finds a control in the section, based on the control’s table and dataField properties.                                                    |\n| public int controlCount()                                                                    |                                                                                                                                           |\n| public ReportControl controlName(str name)                                                   | Finds a control in a section, based on the control's Name property.                                                                       |\n| public ReportControl controlNo(int number)                                                   |                                                                                                                                           |\n| public int controlNumber(\\[int value\\])                                                      |                                                                                                                                           |\n| public int delete()                                                                          | Deletes the current node from the AOT.                                                                                                    |\n| public str font(\\[str value\\])                                                               | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                           | Gets or sets the size of the font for the control to use.                                                                                 |\n| public str footerText(\\[str value\\])                                                         |                                                                                                                                           |\n| public int foregroundColor(\\[int value\\])                                                    | Gets or sets the text color for the control to use.                                                                                       |\n| public boolean grandHeader(\\[boolean value\\])                                                |                                                                                                                                           |\n| public boolean grandTotal(\\[boolean value\\])                                                 | Determines whether the FooterText property value can be displayed.                                                                        |\n| public boolean hasButtons(\\[boolean value\\])                                                 |                                                                                                                                           |\n| public int headerDetailLevel(\\[int value\\], \\[AutoMode mode\\])                               |                                                                                                                                           |\n| public AutoMode headerDetailLevelMode(\\[AutoMode mode\\])                                     |                                                                                                                                           |\n| public int headerDetailLevelValue(\\[int value\\])                                             |                                                                                                                                           |\n| public str headerText(\\[str value\\])                                                         |                                                                                                                                           |\n| public int height100mm(\\[int height\\])                                                       | Gets or sets the height of a section, excluding the height of the border and the top and bottom margins.                                  |\n| public int heightmm100(\\[int heightInclMargins\\])                                            | Gets or sets the height of a section, including the height of the border and the top and bottom margins.                                  |\n| public int heightMode(\\[int value\\])                                                         | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public str heightStr(\\[str value\\])                                                          |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                                     |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                                      | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                                     |                                                                                                                                           |\n| public str label()                                                                           | Gets the description of the section node in the AOT.                                                                                      |\n| public int labelBottomMarginMode(\\[int value\\])                                              |                                                                                                                                           |\n| public str labelBottomMarginStr(\\[str value\\])                                               |                                                                                                                                           |\n| public Units labelBottomMarginUnit(\\[Units value\\])                                          |                                                                                                                                           |\n| public Real labelBottomMarginValue(\\[Real value\\])                                           |                                                                                                                                           |\n| public int labelTopMarginMode(\\[int value\\])                                                 |                                                                                                                                           |\n| public str labelTopMarginStr(\\[str value\\])                                                  |                                                                                                                                           |\n| public Units labelTopMarginUnit(\\[Units value\\])                                             |                                                                                                                                           |\n| public Real labelTopMarginValue(\\[Real value\\])                                              |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                                     |                                                                                                                                           |\n| public int leftMarginsEtc()                                                                  |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                                      |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                                                 |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                                                  |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                                                |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                                                |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                                                 | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                                                |                                                                                                                                           |\n| public TableId map(\\[TableId value\\])                                                        |                                                                                                                                           |\n| public str name(\\[str value\\])                                                               | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int noOfHeadingLines(\\[int value\\], \\[AutoMode mode\\])                                |                                                                                                                                           |\n| public AutoMode noOfHeadingLinesMode(\\[AutoMode mode\\])                                      |                                                                                                                                           |\n| public int noOfHeadingLinesValue(\\[int value\\])                                              |                                                                                                                                           |\n| public str resolutionX(\\[str value\\])                                                        |                                                                                                                                           |\n| public int resolutionXStr(str value)                                                         |                                                                                                                                           |\n| public Units resolutionXUnit(\\[Units value\\])                                                |                                                                                                                                           |\n| public str resolutionY(\\[str value\\])                                                        |                                                                                                                                           |\n| public int resolutionYStr(str value)                                                         |                                                                                                                                           |\n| public Units resolutionYUnit(\\[Units value\\])                                                |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                                    |                                                                                                                                           |\n| public int rightMarginsEtc()                                                                 |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                                     |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                                                |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                                                 |                                                                                                                                           |\n| public int ruler(\\[int value\\])                                                              |                                                                                                                                           |\n| public ReportSectionGroup sectionGroup(TableId tableId, \\[FieldId fieldId\\])                 | Finds an existing section group in the generated design.                                                                                  |\n| public ReportBlockType sectionType()                                                         | Retrieves the type of a given report section, such as ReportBlockType::Prolog, ReportBlockType::PageHeader, or ReportBlockType::Body.     |\n| public int sumDetailLevel(\\[int value\\], \\[AutoMode mode\\])                                  |                                                                                                                                           |\n| public AutoMode sumDetailLevelMode(\\[AutoMode mode\\])                                        |                                                                                                                                           |\n| public int sumDetailLevelValue(\\[int value\\])                                                |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                                      | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                                      |                                                                                                                                           |\n| public int topMarginAndFrame()                                                               |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                                      |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                                       |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                                                  |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                                                   |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                            |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                                             |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                                        |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                                         |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                  |                                                                                                                                           |\n| public void columnspace(Real value, Units unit)                                              |                                                                                                                                           |\n| public void bottom(Real value, Units unit)                                                   |                                                                                                                                           |\n| public void labelBottomMargin(Real value, Units unit)                                        |                                                                                                                                           |\n| public void labelTopMargin(Real value, Units unit)                                           |                                                                                                                                           |\n| public void executeColumnHeadings()                                                          |                                                                                                                                           |\n| public void executeSection()                                                                 | Prints the section on the report.                                                                                                         |\n| public void rightMargin(Real value, Units unit)                                              |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                                             |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                                                |                                                                                                                                           |\n| public void leftMargin(Real value, Units unit)                                               |                                                                                                                                           |\n| public void top(Real value, Units unit)                                                      |                                                                                                                                           |\n| public void height(Real value, Units unit)                                                   | Gets or sets the height of the control.                                                                                                   |\n\n### Method addBitmapControl\n\nAdds a bitmap control to a report section.\n\n    public ReportBitmapControl addBitmapControl()\n\n#### Return Value\n\nThe bitmap control that is created.\n\n### Method addBoxControl\n\nAdds a shape control to a report section.\n\n    public ReportShapeControl addBoxControl([ShapeType type])\n\n#### Parameters\n\ntype  \nThe type of shape control to add; optional.\n\n#### Return Value\n\nThe shape control that is created.\n\n### Method addControl\n\nAdds a report control to a report section.\n\n    public ReportControl addControl(TableId tableId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\nThe report control that is created.\n\n#### Remarks\n\nThis method adds the specified type of control, such as string, enumeration, integer, real, or date, depending on the type of the field that is specified by the arguments.\n\n### Method addDateControl\n\nAdds a date control to a report section.\n\n    public ReportDateControl addDateControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \nThe field ID.\n\n<!-- -->\n\nfieldId  \nThe field ID.\n\n#### Return Value\n\nThe date control that is created.\n\n#### Examples\n\n    static void test(args a) \n    { \n        reportRun rr; \n        inventTrans rec; \n        int i; \n        // Create a simple report that is not present in \n        // the Application Object Tree. \n        report r = new report(); \n        reportDesign rd = r.addDesign(\"myDesign\"); \n        reportSection rs = rd.AddSection(reportBlockType::body,  \n        tablenum(inventTrans)); \n        int t = tablenum(inventTrans); \n        int f; \n        f = fieldnum(inventTrans, datePhysical); \n        rs.addDateControl(t,f); \n        // run the report \n        rr = new reportRun(r); \n        // Run the sysPrintForm form. \n        if (rr.prompt())  \n        { \n            while select rec \n                rr.send(rec); \n            // Print report to the target (e.g. printer or screen) selected during the  \n            // prompt call above. \n            rr.print();  \n        } \n    }\n\n### Method addDateDisplayControl\n\nAdds a date control to a report section.\n\n    public ReportDateControl addDateDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \nThe name of the table on which the display method is declared; optional.\n\n<!-- -->\n\ntableId  \nThe name of the table on which the display method is declared; optional.\n\n#### Return Value\n\nThe date control that is created.\n\n#### Remarks\n\nThe data control shows the result when a display method returns a date.\n\n### Method addDateTimeControl\n\n    public ReportDateTimeControl addDateTimeControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addDateTimeDisplayControl\n\n    public ReportDateTimeControl addDateTimeDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addDisplayControl\n\n    public ReportControl addDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addEnumControl\n\n    public ReportEnumControl addEnumControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addEnumDisplayControl\n\n    public ReportEnumControl addEnumDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addFieldGroup\n\n    public ReportFieldGroup addFieldGroup(TableId tableId, str name)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nname  \n\n#### Return Value\n\n### Method addGuidControl\n\n    public ReportGuidControl addGuidControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addGuidDisplayControl\n\n    public ReportGuidControl addGuidDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addInt64Control\n\n    public ReportInt64Control addInt64Control(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addInt64DisplayControl\n\n    public ReportInt64Control addInt64DisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addIntegerControl\n\n    public ReportIntegerControl addIntegerControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addIntegerDisplayControl\n\n    public ReportIntegerControl addIntegerDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addPromptControl\n\n    public ReportPromptControl addPromptControl(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addRealControl\n\n    public ReportRealControl addRealControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addRealDisplayControl\n\n    public ReportRealControl addRealDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addSection\n\n    public ReportSectionGroup addSection(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addShapeControl\n\n    public ReportShapeControl addShapeControl([ShapeType type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method addStringControl\n\n    public ReportStringControl addStringControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addStringDisplayControl\n\n    public ReportStringControl addStringDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method addSumControl\n\n    public ReportSumControl addSumControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addSumNameControl\n\n    public ReportSumControl addSumNameControl(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method addTextControl\n\n    public ReportTextControl addTextControl(str text)\n\n#### Parameters\n\ntext  \n\n#### Return Value\n\n### Method addTimeControl\n\n    public ReportTimeControl addTimeControl(TableId tableId, FieldId fieldId)\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method addTimeDisplayControl\n\n    public ReportTimeControl addTimeDisplayControl(str displayFunc, [TableId tableId])\n\n#### Parameters\n\ndisplayFunc  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method arrange\n\n    public int arrange()\n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoHeader\n\n    public boolean autoHeader([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMode\n\n    public int bottomMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomStr\n\n    public str bottomStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomUnit\n\n    public Units bottomUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomValue\n\n    public Real bottomValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows:\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows:\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows:\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method columnHeadingsStrategy\n\n    public int columnHeadingsStrategy([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public int columnspaceMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnspaceStr\n\n    public str columnspaceStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnspaceUnit\n\n    public Units columnspaceUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public Real columnspaceValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method control\n\nFinds a control in the section, based on the control’s table and dataField properties.\n\n    public ReportControl control(FieldId fieldId, [TableId tableId])\n\n#### Parameters\n\nfieldId  \nThe control's table property; optional.\n\n<!-- -->\n\ntableId  \nThe control's table property; optional.\n\n#### Return Value\n\nThe report control that is found.\n\n#### Remarks\n\nIf the table ID is not supplied, the table property from the section’s parent section group is used.\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlName\n\nFinds a control in a section, based on the control's Name property.\n\n    public ReportControl controlName(str name)\n\n#### Parameters\n\nname  \nThe Name property of the control.\n\n#### Return Value\n\nThe control that is found.\n\n### Method controlNo\n\n    public ReportControl controlNo(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method controlNumber\n\n    public int controlNumber([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\nDeletes the current node from the AOT.\n\n    public int delete()\n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method footerText\n\n    public str footerText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method grandHeader\n\n    public boolean grandHeader([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method grandTotal\n\nDetermines whether the FooterText property value can be displayed.\n\n    public boolean grandTotal([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the FooterText property value is displayed; otherwise, false.\n\n#### Remarks\n\nThe grandTotal property is available only when a report has unnested, multiple data sources.\n\n### Method hasButtons\n\n    public boolean hasButtons([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method headerDetailLevel\n\n    public int headerDetailLevel([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method headerDetailLevelMode\n\n    public AutoMode headerDetailLevelMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method headerDetailLevelValue\n\n    public int headerDetailLevelValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method headerText\n\n    public str headerText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height100mm\n\nGets or sets the height of a section, excluding the height of the border and the top and bottom margins.\n\n    public int height100mm([int height])\n\n#### Parameters\n\nheight  \nThe new value in 1/100 mm; optional.\n\n#### Return Value\n\nThe height in 1/100 mm.\n\n#### Remarks\n\nThis method acts as a heightExclBorderAndMargins method. The height that is returned corresponds to the value of the height property. Before you use this function to set the height property, make sure that the height property is not set to AUTO. Otherwise, built-in logic might recalculate the value.\n\n### Method heightmm100\n\nGets or sets the height of a section, including the height of the border and the top and bottom margins.\n\n    public int heightmm100([int heightInclMargins])\n\n#### Parameters\n\nheightInclMargins  \nThe new total height of the section in 1/100 mm; optional.\n\n#### Return Value\n\nThe height in 1/100 mm.\n\n#### Remarks\n\nThis method acts as a heightInclBorderAndMargins method. Before you use this function to set the height property, make sure that the height property is not set to AUTO. Otherwise, the built-in logic might set the height. If the heightmm100 method returns 1000, the total height of the section is 10 mm.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets the description of the section node in the AOT.\n\n    public str label()\n\n#### Return Value\n\nA string that contains the description of the section node.\n\n### Method labelBottomMarginMode\n\n    public int labelBottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBottomMarginStr\n\n    public str labelBottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBottomMarginUnit\n\n    public Units labelBottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBottomMarginValue\n\n    public Real labelBottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTopMarginMode\n\n    public int labelTopMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTopMarginStr\n\n    public str labelTopMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTopMarginUnit\n\n    public Units labelTopMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTopMarginValue\n\n    public Real labelTopMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginsEtc\n\n    public int leftMarginsEtc()\n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method map\n\n    public TableId map([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method noOfHeadingLines\n\n    public int noOfHeadingLines([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method noOfHeadingLinesMode\n\n    public AutoMode noOfHeadingLinesMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method noOfHeadingLinesValue\n\n    public int noOfHeadingLinesValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionX\n\n    public str resolutionX([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionXStr\n\n    public int resolutionXStr(str value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionXUnit\n\n    public Units resolutionXUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionY\n\n    public str resolutionY([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionYStr\n\n    public int resolutionYStr(str value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolutionYUnit\n\n    public Units resolutionYUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginsEtc\n\n    public int rightMarginsEtc()\n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method ruler\n\n    public int ruler([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sectionGroup\n\nFinds an existing section group in the generated design.\n\n    public ReportSectionGroup sectionGroup(TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntableId  \nThe field ID; optional.\n\n<!-- -->\n\nfieldId  \nThe field ID; optional.\n\n#### Return Value\n\nThe specified section group.\n\n#### Examples\n\n    static void test(args a) \n    {  \n        reportRun rr;  \n        inventTrans rec;  \n        int i;  \n        int t = tablenum(inventTrans);  \n        int f = fieldnum(inventTrans, datePhysical);  \n        // Create a simple report that is not present in  \n        // the Application Object Tree. \n        report r = new report();  \n        reportDesign rd = r.addDesign(\"myDesign\");  \n        reportSectionGroup rsg;  \n        reportSection rs = rd.AddSection(reportBlockType::body, t);  \n        rs.addControl(t,f);  \n        rsg = rd.SectionGroup(t);  \n        if (rsg) \n        { \n            rs = rsg.AddSection(ReportBlockType::Header);  \n            // Run the report. \n            rs.AddTextControl(\"This is the groupHeader\"); \n        } \n        rr = new reportRun(r);  \n        // Run the sysPrintForm form. \n        if (rr.prompt())  \n        {  \n            select rec;  \n            rr.send(rec);  \n            // Print report to the target, such as printer or screen. \n            rr.print();  \n        } \n    }\n\n### Method sectionType\n\nRetrieves the type of a given report section, such as ReportBlockType::Prolog, ReportBlockType::PageHeader, or ReportBlockType::Body.\n\n    public ReportBlockType sectionType()\n\n#### Return Value\n\nThe report block type of the section.\n\n#### Remarks\n\nThe reportBlockType type should be reportSectionType.\n\n### Method sumDetailLevel\n\n    public int sumDetailLevel([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method sumDetailLevelMode\n\n    public AutoMode sumDetailLevelMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method sumDetailLevelValue\n\n    public int sumDetailLevelValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnspace\n\n    public void columnspace(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottom\n\n    public void bottom(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelBottomMargin\n\n    public void labelBottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelTopMargin\n\n    public void labelTopMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method executeColumnHeadings\n\n    public void executeColumnHeadings()\n\n### Method executeSection\n\nPrints the section on the report.\n\n    public void executeSection()\n\n#### Remarks\n\nThis method is called when the section is triggered. For example, a body section is triggered when ReportRun::send method is executed. It is the super method call in the executeSection method that actually prints the section in the report. In the Finance and Operations Application Object Tree (AOT), you will find the executeSection method below each section's methods node. If you want to perform some action before a section is printed, such as go to the next page, this action can be coded in the executeSection method.\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n## Class ReportSectionGroup\n    class ReportSectionGroup extends TreeNode\n\nThe ReportSectionGroup class defines a collection of report sections.\n\n### Remarks\n\nA report section group can contain header sections, body sections, and footer sections. This class lets you create, read, update, and delete X++ code and metadata. You must have access to the development security key (SysDevelopment) before you call this API.\n\n### Examples\n\n### Methods\n\n| Method                                                       | Description                                                                                                               |\n|--------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public ReportSection addSection(ReportBlockType sectionType) |                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                  |                                                                                                                           |\n| public int delete()                                          |                                                                                                                           |\n| public str name(\\[str value\\])                               | Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object. |\n| public ReportSection section(ReportBlockType sectionType)    |                                                                                                                           |\n| public TableId table(\\[TableId value\\])                      | Gets or sets the table ID associated with the object.                                                                     |\n\n### Method addSection\n\n    public ReportSection addSection(ReportBlockType sectionType)\n\n#### Parameters\n\nsectionType  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method section\n\n    public ReportSection section(ReportBlockType sectionType)\n\n#### Parameters\n\nsectionType  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n## Class ReportShapeControl\n    class ReportShapeControl extends ReportControl\n\nThe ReportShapeControl class enables you to create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                       |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                |\n| public int bottomMarginAndFrame()                                        |                                                                                                                   |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                   |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                   |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                   |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                   |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                   |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                     |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                               |\n| public ReportFieldType controlType()                                     |                                                                                                                   |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                   |\n| public int delete()                                                      |                                                                                                                   |\n| public str effectiveFont()                                               |                                                                                                                   |\n| public str fontInfoPrinter()                                             |                                                                                                                   |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                   |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                   |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                   |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                   |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                   |\n| public str fontInfoScreen()                                              |                                                                                                                   |\n| public int fontInfoScreenAscent()                                        |                                                                                                                   |\n| public int fontInfoScreenDescent()                                       |                                                                                                                   |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                   |\n| public int fontInfoScreenHeight()                                        |                                                                                                                   |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                   |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                               |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                   |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                   |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                    |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                   |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                   |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                   |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                             |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                   |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                   |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                   |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                   |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                   |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                   |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                   |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                   |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                   |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                   |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                   |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                   |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                   |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                   |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                   |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                   |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                   |\n| public int leftMarginAnFrame()                                           |                                                                                                                   |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                   |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                   |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                   |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                   |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                   |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                   |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                   |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                   |\n| public LineType line(\\[LineType value\\])                                 |                                                                                                                   |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                   |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                   |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                       |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                   |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                   |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                   |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                   |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                   |\n| public str name(\\[str value\\])                                           | Gets or sets the name used in code to identify a form, report, rable, query, or another MSDAX application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                   |\n| public int position(\\[int value\\])                                       |                                                                                                                   |\n| public str previewInfo(str string)                                       |                                                                                                                   |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                   |\n| public int right100mm()                                                  |                                                                                                                   |\n| public int right100mmInclBorder()                                        |                                                                                                                   |\n| public int rightMarginAndFrame()                                         |                                                                                                                   |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                   |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                   |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                   |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                   |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                   |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                   |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                   |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                   |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                   |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                   |\n| public int topMarginAndFrame()                                           |                                                                                                                   |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                   |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                   |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                   |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                   |\n| public int topMode(\\[int value\\])                                        |                                                                                                                   |\n| public str topStr(\\[str value\\])                                         |                                                                                                                   |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                   |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                   |\n| public ShapeType type(\\[ShapeType value\\])                               |                                                                                                                   |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                   |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                   |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                   |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                   |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                   |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                   |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                    |\n| public int widthOfString100mm(str string)                                |                                                                                                                   |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                   |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                   |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                            |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                   |\n| public void left(Real value, Units unit)                                 |                                                                                                                   |\n| public void top(Real value, Units unit)                                  |                                                                                                                   |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                   |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                           |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                   |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                   |\n| public void hide()                                                       |                                                                                                                   |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                   |\n| public void show()                                                       |                                                                                                                   |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                            |\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method line\n\n    public LineType line([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name used in code to identify a form, report, rable, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public ShapeType type([ShapeType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n## Class ReportStringControl\n    class ReportStringControl extends ReportControl\n\nThe ReportStringControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determines whether the control background can be transparent.                                                                             |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeCase(\\[int value\\])                                     |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public boolean dynamicHeight(\\[boolean value\\])                          |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public str eval()                                                        |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void hide()                                                       |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void show()                                                       |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method dynamicHeight\n\n    public boolean dynamicHeight([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method eval\n\n    public str eval()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n## Class ReportSumControl\n    class ReportSumControl extends ReportControl\n\nThe ReportSumcontrol class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                       |\n|--------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                   |\n| public int allowNegative(\\[int value\\])                                  |                                                                                                                                   |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                   |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                |\n| public int autoInsSeparator(\\[int value\\])                               |                                                                                                                                   |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                 |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                    |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                   |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                   |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                   |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                   |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                   |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                   |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                       |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                     |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                               |\n| public ReportFieldType controlType()                                     |                                                                                                                                   |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                   |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                   |\n| public str dataFieldName(\\[str value\\])                                  |                                                                                                                                   |\n| public int decimalSeparator(\\[int value\\])                               |                                                                                                                                   |\n| public int delete()                                                      |                                                                                                                                   |\n| public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])            |                                                                                                                                   |\n| public AutoMode displaceNegativeMode(\\[AutoMode mode\\])                  |                                                                                                                                   |\n| public int displaceNegativeValue(\\[int value\\])                          |                                                                                                                                   |\n| public str effectiveFont()                                               |                                                                                                                                   |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                   |\n| public int extraSumWidthMode(\\[int value\\])                              |                                                                                                                                   |\n| public str extraSumWidthStr(\\[str value\\])                               |                                                                                                                                   |\n| public Units extraSumWidthUnit(\\[Units value\\])                          |                                                                                                                                   |\n| public Real extraSumWidthValue(\\[Real value\\])                           |                                                                                                                                   |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                         |\n| public str fontInfoPrinter()                                             |                                                                                                                                   |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                   |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                   |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                   |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                   |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                   |\n| public str fontInfoScreen()                                              |                                                                                                                                   |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                   |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                   |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                   |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                   |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                   |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                         |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                               |\n| public int formatMST(\\[int value\\])                                      |                                                                                                                                   |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                   |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                   |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                    |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                   |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                   |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                   |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                           |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                   |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                             |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                   |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                   |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                   |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                   |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                   |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                   |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                   |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                   |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                   |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                   |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                   |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                   |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                   |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                   |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                   |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                   |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                   |\n| public int leftMarginAnFrame()                                           |                                                                                                                                   |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                   |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                   |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                   |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                   |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                   |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                   |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                   |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                   |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                   |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                   |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                       |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                   |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                   |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                   |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                   |\n| public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])             |                                                                                                                                   |\n| public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])                   |                                                                                                                                   |\n| public int minNoOfDecimalsValue(\\[int value\\])                           |                                                                                                                                   |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                   |\n| public str name(\\[str value\\])                                           | Gets or sets the name used in code to identify a form, report, rable, query, or another Finance and Operations application object. |\n| public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])                |                                                                                                                                   |\n| public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])                      |                                                                                                                                   |\n| public int noOfDecimalsValue(\\[int value\\])                              |                                                                                                                                   |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                   |\n| public int position(\\[int value\\])                                       |                                                                                                                                   |\n| public str previewInfo(str string)                                       |                                                                                                                                   |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                   |\n| public int right100mm()                                                  |                                                                                                                                   |\n| public int right100mmInclBorder()                                        |                                                                                                                                   |\n| public int rightMarginAndFrame()                                         |                                                                                                                                   |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                   |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                   |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                   |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                   |\n| public int rotateSign(\\[int value\\])                                     |                                                                                                                                   |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                   |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                   |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                   |\n| public int showZero(\\[int value\\])                                       |                                                                                                                                   |\n| public int signDisplay(\\[int value\\])                                    |                                                                                                                                   |\n| public int sumType(\\[int value\\])                                        |                                                                                                                                   |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                             |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                   |\n| public int thousandSeparator(\\[int value\\])                              |                                                                                                                                   |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                   |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                   |\n| public int topMarginAndFrame()                                           |                                                                                                                                   |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                   |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                   |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                   |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                   |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                   |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                   |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                   |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                   |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                   |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                   |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                   |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                   |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                   |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                   |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                   |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                    |\n| public int widthOfString100mm(str string)                                |                                                                                                                                   |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                   |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                   |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                            |\n| public void top(Real value, Units unit)                                  |                                                                                                                                   |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                   |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                   |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                   |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                   |\n| public void show()                                                       |                                                                                                                                   |\n| public void left(Real value, Units unit)                                 |                                                                                                                                   |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                            |\n| public void extraSumWidth(Real value, Units unit)                        |                                                                                                                                   |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                   |\n| public void hide()                                                       |                                                                                                                                   |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowNegative\n\n    public int allowNegative([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoInsSeparator\n\n    public int autoInsSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldName\n\n    public str dataFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method decimalSeparator\n\n    public int decimalSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method displaceNegative\n\n    public int displaceNegative([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeMode\n\n    public AutoMode displaceNegativeMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeValue\n\n    public int displaceNegativeValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthMode\n\n    public int extraSumWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthStr\n\n    public str extraSumWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthUnit\n\n    public Units extraSumWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extraSumWidthValue\n\n    public Real extraSumWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method formatMST\n\n    public int formatMST([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method minNoOfDecimals\n\n    public int minNoOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsMode\n\n    public AutoMode minNoOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsValue\n\n    public int minNoOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name used in code to identify a form, report, rable, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method noOfDecimals\n\n    public int noOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsMode\n\n    public AutoMode noOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsValue\n\n    public int noOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rotateSign\n\n    public int rotateSign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showZero\n\n    public int showZero([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method signDisplay\n\n    public int signDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sumType\n\n    public int sumType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method thousandSeparator\n\n    public int thousandSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method show\n\n    public void show()\n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method extraSumWidth\n\n    public void extraSumWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n## Class ReportTextControl\n    class ReportTextControl extends ReportControl\n\nThe ReportTextControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determines whether the control background can be transparent.                                                                             |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeCase(\\[int value\\])                                     |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public str eval()                                                        |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public str text(\\[str value\\])                                           |                                                                                                                                           |\n| public int textExtentX100mm()                                            |                                                                                                                                           |\n| public int textExtentY100mm()                                            |                                                                                                                                           |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public int typeHeaderPrompt(\\[int value\\])                               |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void show()                                                       |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void hide()                                                       |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe Integer values that are retrieved indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method eval\n\n    public str eval()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method textExtentX100mm\n\n    public int textExtentX100mm()\n\n#### Return Value\n\n### Method textExtentY100mm\n\n    public int textExtentY100mm()\n\n#### Return Value\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method typeHeaderPrompt\n\n    public int typeHeaderPrompt([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method show\n\n    public void show()\n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n## Class ReportTimeControl\n    class ReportTimeControl extends ReportControl\n\nThe ReportTimeControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                                               |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public int alignment(\\[int value\\])                                      |                                                                                                                                           |\n| public int arrayIndex(\\[int value\\])                                     |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                        | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                      | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                           | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int bottomMarginAndFrame()                                        |                                                                                                                                           |\n| public int bottomMarginMode(\\[int value\\])                               |                                                                                                                                           |\n| public str bottomMarginStr(\\[str value\\])                                |                                                                                                                                           |\n| public Units bottomMarginUnit(\\[Units value\\])                           |                                                                                                                                           |\n| public Real bottomMarginValue(\\[Real value\\])                            |                                                                                                                                           |\n| public int changeLabelCase(\\[int value\\])                                |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                   | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                    | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public ReportFieldType controlType()                                     |                                                                                                                                           |\n| public str cssClass(\\[str value\\])                                       |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                              |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                     |                                                                                                                                           |\n| public int delete()                                                      |                                                                                                                                           |\n| public str effectiveFont()                                               |                                                                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])         |                                                                                                                                           |\n| public str font(\\[str value\\])                                           | Gets or sets the name of the font for the control to use.                                                                                 |\n| public str fontInfoPrinter()                                             |                                                                                                                                           |\n| public int fontInfoPrinterAscent()                                       |                                                                                                                                           |\n| public int fontInfoPrinterDescent()                                      |                                                                                                                                           |\n| public int fontInfoPrinterExtLead()                                      |                                                                                                                                           |\n| public int fontInfoPrinterHeight()                                       |                                                                                                                                           |\n| public int fontInfoPrinterIntLead()                                      |                                                                                                                                           |\n| public str fontInfoScreen()                                              |                                                                                                                                           |\n| public int fontInfoScreenAscent()                                        |                                                                                                                                           |\n| public int fontInfoScreenDescent()                                       |                                                                                                                                           |\n| public int fontInfoScreenExtLead()                                       |                                                                                                                                           |\n| public int fontInfoScreenHeight()                                        |                                                                                                                                           |\n| public int fontInfoScreenIntLead()                                       |                                                                                                                                           |\n| public int fontSize(\\[int value\\])                                       | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                | Gets or sets the text color for the control to use.                                                                                       |\n| public int height100mm(\\[int heightExclBorder\\])                         |                                                                                                                                           |\n| public int height100mmInclBorder(\\[int heightInclBorder\\])               |                                                                                                                                           |\n| public int heightMode(\\[int value\\])                                     | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightOfWordWrappedString100mm(str string)                    |                                                                                                                                           |\n| public str heightStr(\\[str value\\])                                      |                                                                                                                                           |\n| public Units heightUnit(\\[Units value\\])                                 |                                                                                                                                           |\n| public Real heightValue(\\[Real value\\])                                  | Gets or sets the height of the control.                                                                                                   |\n| public boolean italic(\\[boolean value\\])                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                                     |\n| public int labelBold(\\[int value\\])                                      |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                              |                                                                                                                                           |\n| public str labelCssClass(\\[str value\\])                                  |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                      |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                            |                                                                                                                                           |\n| public LineType labelLineBelow(\\[LineType value\\])                       |                                                                                                                                           |\n| public LineThickness labelLineThickness(\\[LineThickness value\\])         |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                  |                                                                                                                                           |\n| public int labelTabLeader(\\[int value\\])                                 |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                         |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str labelWidthStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units labelWidthUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real labelWidthValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int left100mm(\\[int leftExclBorder\\])                             |                                                                                                                                           |\n| public int left100mmInclBorder(\\[int leftInclBorder\\])                   |                                                                                                                                           |\n| public int leftMarginAnFrame()                                           |                                                                                                                                           |\n| public int leftMarginMode(\\[int value\\])                                 |                                                                                                                                           |\n| public str leftMarginStr(\\[str value\\])                                  |                                                                                                                                           |\n| public Units leftMarginUnit(\\[Units value\\])                             |                                                                                                                                           |\n| public Real leftMarginValue(\\[Real value\\])                              |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                       |                                                                                                                                           |\n| public str leftStr(\\[str value\\])                                        |                                                                                                                                           |\n| public Units leftUnit(\\[Units value\\])                                   |                                                                                                                                           |\n| public Real leftValue(\\[Real value\\])                                    |                                                                                                                                           |\n| public LineType lineAbove(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineBelow(\\[LineType value\\])                            |                                                                                                                                           |\n| public LineType lineLeft(\\[LineType value\\])                             | Gets or sets the type of line that is used as the left border of a section.                                                               |\n| public LineType lineRight(\\[LineType value\\])                            |                                                                                                                                           |\n| public str menuItemLabel(\\[str value\\])                                  |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                                           |\n| public str modelFieldName(\\[str value\\])                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int numberOfLines(int height100mm)                                |                                                                                                                                           |\n| public int position(\\[int value\\])                                       |                                                                                                                                           |\n| public str previewInfo(str string)                                       |                                                                                                                                           |\n| public int previewXCompensation100mm(str string)                         |                                                                                                                                           |\n| public int right100mm()                                                  |                                                                                                                                           |\n| public int right100mmInclBorder()                                        |                                                                                                                                           |\n| public int rightMarginAndFrame()                                         |                                                                                                                                           |\n| public int rightMarginMode(\\[int value\\])                                |                                                                                                                                           |\n| public str rightMarginStr(\\[str value\\])                                 |                                                                                                                                           |\n| public Units rightMarginUnit(\\[Units value\\])                            |                                                                                                                                           |\n| public Real rightMarginValue(\\[Real value\\])                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                                           |\n| public str setHeightGetText(int lines, str string)                       |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                              |                                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                  | Gets or sets the table ID associated with the object.                                                                                     |\n| public LineThickness thickness(\\[LineThickness value\\])                  |                                                                                                                                           |\n| public int timeFormat(\\[int value\\])                                     |                                                                                                                                           |\n| public int timeHours(\\[int value\\])                                      |                                                                                                                                           |\n| public int timeMinute(\\[int value\\])                                     |                                                                                                                                           |\n| public int timeSeconds(\\[int value\\])                                    |                                                                                                                                           |\n| public int timeSeparator(\\[int value\\])                                  |                                                                                                                                           |\n| public int top100mm(\\[int topExclBorder\\])                               |                                                                                                                                           |\n| public int top100mmInclBorder(\\[int topInclBorder\\])                     |                                                                                                                                           |\n| public int topMarginAndFrame()                                           |                                                                                                                                           |\n| public int topMarginMode(\\[int value\\])                                  |                                                                                                                                           |\n| public str topMarginStr(\\[str value\\])                                   |                                                                                                                                           |\n| public Units topMarginUnit(\\[Units value\\])                              |                                                                                                                                           |\n| public Real topMarginValue(\\[Real value\\])                               |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                        |                                                                                                                                           |\n| public str topStr(\\[str value\\])                                         |                                                                                                                                           |\n| public Units topUnit(\\[Units value\\])                                    |                                                                                                                                           |\n| public Real topValue(\\[Real value\\])                                     |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                |                                                                                                                                           |\n| public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])        |                                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                                           |\n| public int width100mm(\\[int widthExclBorder\\])                           |                                                                                                                                           |\n| public int width100mmInclBorder(\\[int widthInclBorder\\])                 |                                                                                                                                           |\n| public int widthMode(\\[int value\\])                                      | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthOfString100mm(str string)                                |                                                                                                                                           |\n| public str widthStr(\\[str value\\])                                       |                                                                                                                                           |\n| public Units widthUnit(\\[Units value\\])                                  |                                                                                                                                           |\n| public Real widthValue(\\[Real value\\])                                   | Gets or sets the width of the control.                                                                                                    |\n| public void leftMargin(Real value, Units unit)                           |                                                                                                                                           |\n| public void rightMargin(Real value, Units unit)                          |                                                                                                                                           |\n| public void bottomMargin(Real value, Units unit)                         |                                                                                                                                           |\n| public void width(Real value, Units unit)                                | Gets or sets the width of the control.                                                                                                    |\n| public void top(Real value, Units unit)                                  |                                                                                                                                           |\n| public void height(Real value, Units unit)                               | Gets or sets the height of the control.                                                                                                   |\n| public void labelWidth(Real value, Units unit)                           |                                                                                                                                           |\n| public void topMargin(Real value, Units unit)                            |                                                                                                                                           |\n| public void left(Real value, Units unit)                                 |                                                                                                                                           |\n| public void hide()                                                       |                                                                                                                                           |\n| public void show()                                                       |                                                                                                                                           |\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMarginAndFrame\n\n    public int bottomMarginAndFrame()\n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public int bottomMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginStr\n\n    public str bottomMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginUnit\n\n    public Units bottomMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public Real bottomMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeLabelCase\n\n    public int changeLabelCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method controlType\n\n    public ReportFieldType controlType()\n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\n    public int delete()\n\n#### Return Value\n\n### Method effectiveFont\n\n    public str effectiveFont()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontInfoPrinter\n\n    public str fontInfoPrinter()\n\n#### Return Value\n\n### Method fontInfoPrinterAscent\n\n    public int fontInfoPrinterAscent()\n\n#### Return Value\n\n### Method fontInfoPrinterDescent\n\n    public int fontInfoPrinterDescent()\n\n#### Return Value\n\n### Method fontInfoPrinterExtLead\n\n    public int fontInfoPrinterExtLead()\n\n#### Return Value\n\n### Method fontInfoPrinterHeight\n\n    public int fontInfoPrinterHeight()\n\n#### Return Value\n\n### Method fontInfoPrinterIntLead\n\n    public int fontInfoPrinterIntLead()\n\n#### Return Value\n\n### Method fontInfoScreen\n\n    public str fontInfoScreen()\n\n#### Return Value\n\n### Method fontInfoScreenAscent\n\n    public int fontInfoScreenAscent()\n\n#### Return Value\n\n### Method fontInfoScreenDescent\n\n    public int fontInfoScreenDescent()\n\n#### Return Value\n\n### Method fontInfoScreenExtLead\n\n    public int fontInfoScreenExtLead()\n\n#### Return Value\n\n### Method fontInfoScreenHeight\n\n    public int fontInfoScreenHeight()\n\n#### Return Value\n\n### Method fontInfoScreenIntLead\n\n    public int fontInfoScreenIntLead()\n\n#### Return Value\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height100mm\n\n    public int height100mm([int heightExclBorder])\n\n#### Parameters\n\nheightExclBorder  \n\n#### Return Value\n\n### Method height100mmInclBorder\n\n    public int height100mmInclBorder([int heightInclBorder])\n\n#### Parameters\n\nheightInclBorder  \n\n#### Return Value\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightOfWordWrappedString100mm\n\n    public int heightOfWordWrappedString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method heightStr\n\n    public str heightStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightUnit\n\n    public Units heightUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public Real heightValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCssClass\n\n    public str labelCssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineBelow\n\n    public LineType labelLineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelLineThickness\n\n    public LineThickness labelLineThickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelTabLeader\n\n    public int labelTabLeader([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthStr\n\n    public str labelWidthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthUnit\n\n    public Units labelWidthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public Real labelWidthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left100mm\n\n    public int left100mm([int leftExclBorder])\n\n#### Parameters\n\nleftExclBorder  \n\n#### Return Value\n\n### Method left100mmInclBorder\n\n    public int left100mmInclBorder([int leftInclBorder])\n\n#### Parameters\n\nleftInclBorder  \n\n#### Return Value\n\n### Method leftMarginAnFrame\n\n    public int leftMarginAnFrame()\n\n#### Return Value\n\n### Method leftMarginMode\n\n    public int leftMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginStr\n\n    public str leftMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginUnit\n\n    public Units leftMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public Real leftMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftStr\n\n    public str leftStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftUnit\n\n    public Units leftUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public Real leftValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineAbove\n\n    public LineType lineAbove([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineBelow\n\n    public LineType lineBelow([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineLeft\n\nGets or sets the type of line that is used as the left border of a section.\n\n    public LineType lineLeft([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe type of line that is used as the left border.\n\n### Method lineRight\n\n    public LineType lineRight([LineType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemLabel\n\n    public str menuItemLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modelFieldName\n\n    public str modelFieldName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method numberOfLines\n\n    public int numberOfLines(int height100mm)\n\n#### Parameters\n\nheight100mm  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewInfo\n\n    public str previewInfo(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method previewXCompensation100mm\n\n    public int previewXCompensation100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method right100mm\n\n    public int right100mm()\n\n#### Return Value\n\n### Method right100mmInclBorder\n\n    public int right100mmInclBorder()\n\n#### Return Value\n\n### Method rightMarginAndFrame\n\n    public int rightMarginAndFrame()\n\n#### Return Value\n\n### Method rightMarginMode\n\n    public int rightMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginStr\n\n    public str rightMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginUnit\n\n    public Units rightMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public Real rightMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setHeightGetText\n\n    public str setHeightGetText(int lines, str string)\n\n#### Parameters\n\nlines  \n\n<!-- -->\n\nstring  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method thickness\n\n    public LineThickness thickness([LineThickness value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeFormat\n\n    public int timeFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeHours\n\n    public int timeHours([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeMinute\n\n    public int timeMinute([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeconds\n\n    public int timeSeconds([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeparator\n\n    public int timeSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top100mm\n\n    public int top100mm([int topExclBorder])\n\n#### Parameters\n\ntopExclBorder  \n\n#### Return Value\n\n### Method top100mmInclBorder\n\n    public int top100mmInclBorder([int topInclBorder])\n\n#### Parameters\n\ntopInclBorder  \n\n#### Return Value\n\n### Method topMarginAndFrame\n\n    public int topMarginAndFrame()\n\n#### Return Value\n\n### Method topMarginMode\n\n    public int topMarginMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginStr\n\n    public str topMarginStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginUnit\n\n    public Units topMarginUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public Real topMarginValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topStr\n\n    public str topStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topUnit\n\n    public Units topUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public Real topValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemType\n\n    public WebMenuItemType webMenuItemType([WebMenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width100mm\n\n    public int width100mm([int widthExclBorder])\n\n#### Parameters\n\nwidthExclBorder  \n\n#### Return Value\n\n### Method width100mmInclBorder\n\n    public int width100mmInclBorder([int widthInclBorder])\n\n#### Parameters\n\nwidthInclBorder  \n\n#### Return Value\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthOfString100mm\n\n    public int widthOfString100mm(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method widthStr\n\n    public str widthStr([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthUnit\n\n    public Units widthUnit([Units value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public Real widthValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method leftMargin\n\n    public void leftMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method rightMargin\n\n    public void rightMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method bottomMargin\n\n    public void bottomMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method width\n\nGets or sets the width of the control.\n\n    public void width(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method top\n\n    public void top(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method height\n\nGets or sets the height of the control.\n\n    public void height(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method labelWidth\n\n    public void labelWidth(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method topMargin\n\n    public void topMargin(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method left\n\n    public void left(Real value, Units unit)\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nunit  \n\n### Method hide\n\n    public void hide()\n\n### Method show\n\n    public void show()\n\n## Class ReportViewer\n    class ReportViewer extends ReportOutput\n\nThe ReportViewer class lets the user preview a report.\n\n### Remarks\n\nReportViewer objects can exist only on the client, because a report preview can occur only on a client.\n\n### Examples\n\nThe following code will print the job descriptions and the page numbers of jobs that are inserted in the printArchive on the current date, and it will show page 1 in the report viewer.\n\n    static void aaaReportOutputExample(args a) \n    { \n        PrintJobHeader printJobHeader; \n        PrintJobPages printJobPages; \n        int myrecId; \n        reportViewer reportViewer; \n        while select printJobHeader where printJobHeader.CreatedDate >= \n                str2datetime(\"01/01/2011 12:00:00 am\",123)\n        { \n            myrecId = printJobHeader.recId; \n            print printJobHeader.jobDescription; \n            while select printJobPages  \n                where printJobPages.pagesHeaderRecId == myRecId \n                    print printJobPages.PageNo; \n            reportViewer = new reportViewer(printJobHeader); \n            reportViewer.showPage(1); \n        } \n    }\n\n### Methods\n\n| Method                                                                                                          | Description                                     |\n|-----------------------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| public boolean setNumberOfPages(int pageNo, \\[boolean updataProgressForm\\])                                     |                                                 |\n| public void nextPage()                                                                                          |                                                 |\n| public void lastPage()                                                                                          |                                                 |\n| public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\], \\[container packedPrintJobSettings\\]) | Initializes a new instance of the Object class. |\n| public void gotoPage(int pageNo)                                                                                |                                                 |\n| public void pause()                                                                                             |                                                 |\n| public void showPage(int pageNo)                                                                                |                                                 |\n| public void firstPage()                                                                                         |                                                 |\n| public void setAborted()                                                                                        |                                                 |\n| public void close()                                                                                             |                                                 |\n| public void prevPage()                                                                                          |                                                 |\n| public void setCompleted()                                                                                      |                                                 |\n\n### Method setNumberOfPages\n\n    public boolean setNumberOfPages(int pageNo, [boolean updataProgressForm])\n\n#### Parameters\n\npageNo  \n\n<!-- -->\n\nupdataProgressForm  \n\n#### Return Value\n\n### Method nextPage\n\n    public void nextPage()\n\n### Method lastPage\n\n    public void lastPage()\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(PrintJobHeader jobsCursor, [PrintJobPages pagesCursor], [container packedPrintJobSettings])\n\n#### Parameters\n\njobsCursor  \n\n<!-- -->\n\npagesCursor  \n\n<!-- -->\n\npackedPrintJobSettings  \n\n### Method gotoPage\n\n    public void gotoPage(int pageNo)\n\n#### Parameters\n\npageNo  \n\n### Method pause\n\n    public void pause()\n\n### Method showPage\n\n    public void showPage(int pageNo)\n\n#### Parameters\n\npageNo  \n\n### Method firstPage\n\n    public void firstPage()\n\n### Method setAborted\n\n    public void setAborted()\n\n### Method close\n\n    public void close()\n\n### Method prevPage\n\n    public void prevPage()\n\n### Method setCompleted\n\n    public void setCompleted()\n\n## Class ResultSet\n    class ResultSet extends Object\n\nThe ResultSet class provides access to a table of data generated by executing a Statement.\n\n### Remarks\n\nFor maximum portability, ResultSet columns within each row should be read in left-to-right order and each column should be read only once. A ResultSet provides access to a table of data generated by executing a instance. The table rows are retrieved in sequence. Within a row its column values can be accessed in any order. A ResultSet maintains a cursor that points to its current row of data. Initially the cursor is positioned before the first row. The 'next' method moves the cursor to the next row. For the getXX methods, Finance and Operations attempts to convert the underlying data to the specified type and returns a suitable value. The getXX methods retrieve column values for the current row. You retrieve values using the index number of the column. Columns are numbered from 1. A ResultSet is automatically closed by the statement that generated it when that Statement is closed, re-executed, or is used to retrieve the next result from a sequence of multiple results.\n\n### Examples\n\n    static void example() \n    { \n        Connection Con; \n        Statement Stmt; \n        ResultSet R; \n        SqlStatementExecutePermission perm; \n        str sql = 'SELECT VALUE FROM SQLSYSTEMVARIABLES'; \n        Con = new Connection(); \n        Stmt = Con.createStatement(); \n        perm = new SqlStatementExecutePermission(sql); \n        perm.assert(); \n        R = Stmt.executeQuery(sql); \n        while ( R.next() ) \n        { \n            print R.getString(1); \n        } \n    }\n\n### Methods\n\n| Method                                    | Description                                                                               |\n|-------------------------------------------|-------------------------------------------------------------------------------------------|\n| public boolean getBoolean(int ColumnID)   | Retrieves the Boolean value of a column in the current row.                               |\n| public int getByte(int ColumnID)          |                                                                                           |\n| public Date getDate(int ColumnID)         | Retrieves the value of a column in the current row as an Finance and Operationsdate value. |\n| public DateTime getDateTime(int ColumnID) |                                                                                           |\n| public Guid getGuid(int ColumnID)         |                                                                                           |\n| public int getInt(int ColumnID)           | Retrieves the value of a column in the current row as an integer.                         |\n| public Int64 getInt64(int ColumnID)       |                                                                                           |\n| public ResultSetMetaData getMetaData()    |                                                                                           |\n| public Real getReal(int ColumnID)         | Retrieves the value of a column in the current row as a value of the type real.           |\n| public str getString(int ColumnID)        | Gets the string value of a column in the current row.                                     |\n| public boolean next()                     | Selects the first or subsequent row.                                                      |\n| public boolean wasNull(int ColumnID)      | Reports whether the last column read has the value SQL NULL.                              |\n| public void close()                       | Releases the object's database resources immediately.                                     |\n\n### Method getBoolean\n\nRetrieves the Boolean value of a column in the current row.\n\n    public boolean getBoolean(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe column ID.\n\n#### Return Value\n\nThe value of a column in the current row.\n\n### Method getByte\n\n    public int getByte(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getDate\n\nRetrieves the value of a column in the current row as an Finance and Operationsdate value.\n\n    public Date getDate(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe ID of the column.\n\n#### Return Value\n\nThe date.\n\n### Method getDateTime\n\n    public DateTime getDateTime(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getGuid\n\n    public Guid getGuid(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getInt\n\nRetrieves the value of a column in the current row as an integer.\n\n    public int getInt(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe column ID.\n\n#### Return Value\n\nThe integer value of the column.\n\n### Method getInt64\n\n    public Int64 getInt64(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getMetaData\n\n    public ResultSetMetaData getMetaData()\n\n#### Return Value\n\n### Method getReal\n\nRetrieves the value of a column in the current row as a value of the type real.\n\n    public Real getReal(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe ID of the column. The first column is 1, the second is 2, and so on.\n\n#### Return Value\n\n#### Examples\n\n    while ( R.next() ) \n    { \n        print R.getReal(3); \n    }\n\n### Method getString\n\nGets the string value of a column in the current row.\n\n    public str getString(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe column ID.\n\n#### Return Value\n\nThe string value of the column.\n\n### Method next\n\nSelects the first or subsequent row.\n\n    public boolean next()\n\n#### Return Value\n\ntrue if the new current row is valid; otherwise false.\n\n#### Remarks\n\nA ResultSet is initially positioned before its first row. The first call to the next method makes the first row the current row. The second call makes the second row the current row, and so on.\n\n### Method wasNull\n\nReports whether the last column read has the value SQL NULL.\n\n    public boolean wasNull(int ColumnID)\n\n#### Parameters\n\nColumnID  \nThe column ID.\n\n#### Return Value\n\ntrue if the last column read has the value SQL nullNothingnullptrunita null reference (Nothing in Visual Basic); otherwise false.\n\n#### Remarks\n\nYou must first call a get method, like the ResultSet.getInt method, on a column to try to read its value; then call the wasNull method to find whether the value was the SQL NULL.\n\n### Method close\n\nReleases the object's database resources immediately.\n\n    public void close()\n\n## Class ResultSetMetaData\n    class ResultSetMetaData extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                        | Description |\n|-----------------------------------------------|-------------|\n| public int getColumnCount()                   |             |\n| public int getColumnDisplaySize(int ColumnID) |             |\n| public str getColumnName(int ColumnID)        |             |\n| public int getColumnType(int ColumnID)        |             |\n| public int getPrecision(int ColumnID)         |             |\n| public int getScale(int ColumnID)             |             |\n| public int isNullable(int ColumnID)           |             |\n\n### Method getColumnCount\n\n    public int getColumnCount()\n\n#### Return Value\n\n### Method getColumnDisplaySize\n\n    public int getColumnDisplaySize(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getColumnName\n\n    public str getColumnName(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getColumnType\n\n    public int getColumnType(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getPrecision\n\n    public int getPrecision(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method getScale\n\n    public int getScale(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n### Method isNullable\n\n    public int isNullable(int ColumnID)\n\n#### Parameters\n\nColumnID  \n\n#### Return Value\n\n## Class RunAsPermission\n    class RunAsPermission extends CodeAccessPermission\n\nThe RunAsPermssion class controls the execution of code in the security context of another user.\n\n### Remarks\n\nYou must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission.demand method is called on before the protected API is executed. Call a method on the server tier from one of the following: The RunAsPermission class is designed to check permissions for the runAs function. For a list of all APIs protected by permissions, see Secured APIs.\n\n-   A server static method –or–\n-   A class instance method that is set to run on the server by using the RunOn class property\n\n### Examples\n\nThe following code example shows a new instance of the RunAsPermission class. The assert method is called to declare that the code can then call the runAs function to run the EventJobDueDate.:runDueDateEventsForUser method in the security context of another user.\n\n    server static void main(Args args) \n    { \n        RunAsPermission _perm; \n        UserId          _runAsUser; \n        SysUserInfo     _userInfo; \n        _userInfo = SysUserInfo::find(); \n        _runAsUser = _userInfo.Id; \n        _perm = new RunAsPermission(_runAsUser); \n        _perm.assert(); \n        // Invoke the protected API. \n        RunAs(_runAsUser, classnum(EventJobDueDate), \"runDueDateEventsForUser\"); \n        // Optionally, call revertAssert() to limit the scope of assert. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Methods\n\n| Method                                                 | Description                                                                                                         |\n|--------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of a permission class object.                                                            |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission when overridden by a derived class. |\n| public void new(UserId userId)                         | Initializes a new instance of the CodeAccessPermission class.                                                       |\n\n### Method copy\n\nCreates and returns a copy of a permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the derived class object.\n\n#### Remarks\n\nYou can override this method as part of the process of making an API more secure.\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission when overridden by a derived class.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise, false.\n\n#### Remarks\n\nYou can override the method as part of the process of making an API more secure.\n\n### Method new\n\nInitializes a new instance of the CodeAccessPermission class.\n\n    public void new(UserId userId)\n\n#### Parameters\n\nuserId  \nA userId system data type that specifies an Finance and Operations user.\n\n#### Examples\n\nThe following example shows a new instance of the RunAsPermission class. The SysUserInfo table is used to initialize the userId parameter.\n\n    server static void main(Args args) \n    { \n        RunAsPermission _perm; \n        UserId          _userId; \n        SysUserInfo     _userInfo; \n        _userInfo = SysUserInfo::find(); \n        _userId = _userInfo.Id; \n        _perm = new RunAsPermission(_userId); \n    }\n\n\n\n","nodes":[{"pos":[4,611],"embed":true,"restype":"x-metadata","content":"# required metadata\n\ntitle: R Classes\ndescription: System API classes that start with the letter R.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 51721\nms.assetid: c41fab91-b526-4a6a-b0ed-574fdc037848\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"R Classes","nodes":[{"pos":[0,9],"content":"R Classes","nodes":[{"content":"R Classes","pos":[0,9]}]}],"path":["title"],"extradata":"MT"},{"content":"System API classes that start with the letter R.","nodes":[{"pos":[0,48],"content":"System API classes that start with the letter R.","nodes":[{"content":"System API classes that start with the letter R.","pos":[0,48]}]}],"path":["description"],"extradata":"MT"}],"header":"# required metadata\n","yml":true},{"pos":[619,628],"content":"R Classes","linkify":"R Classes","nodes":[{"content":"R Classes","pos":[0,9]}]},{"pos":[676,688],"content":"Class Random","linkify":"Class Random","nodes":[{"content":"Class Random","pos":[0,12]}]},{"content":"The Random class generates random numbers.","pos":[736,778]},{"pos":[784,791],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because this class operates on a global random generator, the individual random objects will interfere with each other.","pos":[793,912]},{"content":"Therefore, it is not possible to predict the sequence of numbers for a specific random object.","pos":[913,1007]},{"pos":[1013,1021],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints 100 random numbers.","pos":[1023,1071]},{"pos":[1260,1267],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1271,1277]},{"content":"Description","pos":[1294,1305]},{"content":"public int nextInt()","pos":[1441,1461]},{"content":"Returns the next random number from the random generator.","pos":[1464,1521]},{"content":"public void new()","pos":[1526,1543]},{"content":"Initializes a new instance of the Random class.","pos":[1549,1596]},{"pos":[1614,1628],"content":"Method nextInt","linkify":"Method nextInt","nodes":[{"content":"Method nextInt","pos":[0,14]}]},{"content":"Returns the next random number from the random generator.","pos":[1630,1687]},{"pos":[1720,1732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next random integer number from the random generator.","pos":[1734,1791]},{"pos":[1798,1805],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value will be in the range from 0 to 32767 (0x7FFF).","pos":[1807,1863]},{"pos":[1869,1879],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Random class.","pos":[1881,1928]},{"pos":[1956,1978],"content":"Class RecordInsertList","linkify":"Class RecordInsertList","nodes":[{"content":"Class RecordInsertList","pos":[0,22]}]},{"content":"The RecordInsertList class provides array insertion capabilities in the kernel.","pos":[2022,2101]},{"pos":[2107,2114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class lets you insert more than one record into the database at a time, which reduces communication between the application and the database.","pos":[2116,2262]},{"content":"Records are inserted only when the kernel finds the time appropriate, but they are inserted no later than the call to the insertDatabase, add, and insertDatabase methods.","pos":[2263,2433]},{"content":"The RecordInsertList.add and RecordInsertList.insertDatabase methods return the accumulated number of records that are currently inserted, so that you can keep track of when the records are actually inserted.","pos":[2434,2642]},{"content":"The array insert operation automatically falls back to classic record-by-record inserts when non-SQL based tables are used (for example, temporary tables) or when the insert method on the table is overridden (unless it is explicitly discarded).","pos":[2643,2887]},{"content":"The RecordInsertList class resembles the RecordSortedList class, but it has built-in client/server support (it automatically packs data from one tier to another when this is required) and lacks the sort order features that are available in the RecordSortedList class.","pos":[2888,3155]},{"pos":[3161,3169],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the RecordInsertList class to copy a bill of materials (BOM) from one BOM to another.","pos":[3171,3283]},{"pos":[3689,3696],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[3700,3706]},{"content":"Description","pos":[3898,3909]},{"content":"public int add(Common record)","pos":[4300,4329]},{"content":"Adds a record to a RecordInsertList object for subsequent insertion into the database.","pos":[4498,4584]},{"content":"public int insertDatabase()","pos":[4600,4627]},{"content":"Inserts all records that have not already been inserted into the current RecordInsertList object.","pos":[4798,4895]},{"content":"public void new(TableId tableId, <ph id=\"ph1\">\\[</ph>boolean skipInsertMethod<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean skipDatabaseLog<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean skipEvents<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean skipAosValidation<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>boolean skipRLSValidation<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>Common table<ph id=\"ph12\">\\]</ph>)","pos":[4900,5095],"source":"public void new(TableId tableId, \\[boolean skipInsertMethod\\], \\[boolean skipDatabaseLog\\], \\[boolean skipEvents\\], \\[boolean skipAosValidation\\], \\[boolean skipRLSValidation\\], \\[Common table\\])"},{"content":"Creates a new object to hold records for insertion into the database.","pos":[5098,5167]},{"pos":[5203,5213],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"content":"Adds a record to a RecordInsertList object for subsequent insertion into the database.","pos":[5215,5301]},{"pos":[5343,5353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[5355,5361]},{"content":"A database buffer of the same type that is used to instantiate the class.","pos":[5364,5437]},{"pos":[5444,5456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates whether the record has been successfully added to the list.","pos":[5458,5543]},{"pos":[5550,5557],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The add method can flush records to the database whenever this will speed up performance.","pos":[5559,5648]},{"content":"However, to guarantee that all records in the list are inserted, use the RecordInsertList.insertDatabase method.","pos":[5649,5761]},{"pos":[5768,5776],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the RecordInsertList class to copy a BOM from one BOM to another.","pos":[5778,5870]},{"content":"The add method is used to add all the records in the BOM to the RecordInsertList object before a final call is made to the insertDatabase method to insert all remaining records.","pos":[5871,6048]},{"pos":[6454,6475],"content":"Method insertDatabase","linkify":"Method insertDatabase","nodes":[{"content":"Method insertDatabase","pos":[0,21]}]},{"content":"Inserts all records that have not already been inserted into the current RecordInsertList object.","pos":[6477,6574]},{"pos":[6614,6626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the total number of records that were inserted.","pos":[6628,6702]},{"pos":[6709,6716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The RecordInsertList.add method flushes records to the database whenever this will speed up performance.","pos":[6718,6822]},{"pos":[6829,6837],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the RecordInsertList class to copy a BOM from one BOM to another.","pos":[6839,6931]},{"content":"The RecordInsertList.add method is used to add all the records in the BOM to the RecordInsertList class before a final call is made to the insertDatabase method to insert all remaining records.","pos":[6932,7125]},{"pos":[7531,7541],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new object to hold records for insertion into the database.","pos":[7543,7612]},{"pos":[7808,7818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[7820,7827]},{"content":"skipInsertMethod","pos":[7841,7857]},{"content":"skipDatabaseLog","pos":[7871,7886]},{"content":"skipEvents","pos":[7900,7910]},{"content":"skipAosValidation","pos":[7924,7941]},{"content":"skipRLSValidation","pos":[7955,7972]},{"content":"table","pos":[7986,7991]},{"pos":[8000,8008],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new RecordInsertList class for the EventRuleField table.","pos":[8010,8098]},{"content":"The insert method for the table is run when these records are inserted, and the insertion is recorded in the database log.","pos":[8099,8221]},{"content":"However, CUD events are not generated for the insertion.","pos":[8222,8278]},{"pos":[8412,8432],"content":"Class RecordLinkList","linkify":"Class RecordLinkList","nodes":[{"content":"Class RecordLinkList","pos":[0,20]}]},{"content":"The RecordLinkList class dynamically creates a cache of record buffers that can hold records of different types, and that is not keyed or sorted.","pos":[8474,8619]},{"pos":[8625,8632],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A recordLinkList object is a double-linked list that can hold records of different types at the same time.","pos":[8634,8740]},{"content":"It is not keyed or sorted.","pos":[8741,8767]},{"content":"The recordLinkList object is especially useful for passing records from different tables as a parameter instead of retrieving the same records again.","pos":[8768,8917]},{"content":"There is no limit to the size of a recordSortedList object.","pos":[8918,8977]},{"content":"It is the responsibility of the programmer to control its size and therefore its memory consumption.","pos":[8978,9078]},{"pos":[9084,9092],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[9098,9105],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[9109,9115]},{"content":"Description","pos":[9160,9171]},{"content":"public int del()","pos":[9497,9513]},{"content":"Deletes the record at the current position in the list.","pos":[9548,9603]},{"content":"public TableId fileId()","pos":[9691,9714]},{"content":"Retrieves the table ID of the record at the current position in the list.","pos":[9742,9815]},{"content":"public boolean first(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[9885,9924],"source":"public boolean first(\\[Common record\\])"},{"content":"Puts the pointer on the first record in the list and, if it is present, copies the record into the buffer that is provided.","pos":[9936,10059]},{"content":"public boolean get(Common record, <ph id=\"ph1\">\\[</ph>int index<ph id=\"ph2\">\\]</ph>)","pos":[10079,10127],"source":"public boolean get(Common record, \\[int index\\])"},{"content":"Copies the record at the current position or the specified position to the provided record buffer, without affecting the pointer position.","pos":[10130,10268]},{"content":"public int ins(Common record)","pos":[10273,10302]},{"content":"Inserts a record at the end of a list.","pos":[10324,10362]},{"content":"public boolean last(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[10467,10505],"source":"public boolean last(\\[Common record\\])"},{"content":"Puts the list at the last record and copies the record to the specified record buffer.","pos":[10518,10604]},{"content":"public int len()","pos":[10661,10677]},{"content":"Returns the current number of records in the list.","pos":[10712,10762]},{"content":"public boolean next(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[10855,10893],"source":"public boolean next(\\[Common record\\])"},{"content":"Puts the pointer on the next record and copies it to the provided buffer.","pos":[10906,10979]},{"content":"public Common peek()","pos":[11049,11069]},{"content":"Retrieves the record at the current position in the list.","pos":[11100,11157]},{"content":"public boolean prev(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[11243,11281],"source":"public boolean prev(\\[Common record\\])"},{"content":"Puts the pointer on the previous record in the list and copies the record to the specified buffer.","pos":[11294,11392]},{"content":"public void new()","pos":[11437,11454]},{"content":"Initializes a new instance of the RecordLinkList class.","pos":[11488,11543]},{"pos":[11634,11644],"content":"Method del","linkify":"Method del","nodes":[{"content":"Method del","pos":[0,10]}]},{"content":"Deletes the record at the current position in the list.","pos":[11646,11701]},{"pos":[11730,11742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of records that remain in the list.","pos":[11744,11790]},{"pos":[11796,11809],"content":"Method fileId","linkify":"Method fileId","nodes":[{"content":"Method fileId","pos":[0,13]}]},{"content":"Retrieves the table ID of the record at the current position in the list.","pos":[11811,11884]},{"pos":[11920,11932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table ID.","pos":[11934,11947]},{"pos":[11953,11965],"content":"Method first","linkify":"Method first","nodes":[{"content":"Method first","pos":[0,12]}]},{"content":"Puts the pointer on the first record in the list and, if it is present, copies the record into the buffer that is provided.","pos":[11967,12090]},{"pos":[12140,12150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[12152,12158]},{"content":"The record buffer that will contain the result; optional.","pos":[12161,12218]},{"pos":[12225,12237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds; false if no records exist.","pos":[12239,12294]},{"pos":[12300,12310],"content":"Method get","linkify":"Method get","nodes":[{"content":"Method get","pos":[0,10]}]},{"content":"Copies the record at the current position or the specified position to the provided record buffer, without affecting the pointer position.","pos":[12312,12450]},{"pos":[12509,12519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[12521,12527]},{"content":"The number of the record in the list to retrieve if the current record is not being retrieved; optional.","pos":[12530,12634]},{"content":"index","pos":[12646,12651]},{"content":"The number of the record in the list to retrieve if the current record is not being retrieved; optional.","pos":[12654,12758]},{"pos":[12765,12777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a record could be retrieved; otherwise, false.","pos":[12779,12833]},{"pos":[12839,12849],"content":"Method ins","linkify":"Method ins","nodes":[{"content":"Method ins","pos":[0,10]}]},{"content":"Inserts a record at the end of a list.","pos":[12851,12889]},{"pos":[12931,12941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[12943,12949]},{"content":"The record buffer that is used to hold the record to insert.","pos":[12952,13012]},{"pos":[13019,13031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of elements in the list.","pos":[13033,13068]},{"pos":[13074,13085],"content":"Method last","linkify":"Method last","nodes":[{"content":"Method last","pos":[0,11]}]},{"content":"Puts the list at the last record and copies the record to the specified record buffer.","pos":[13087,13173]},{"pos":[13222,13232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[13234,13240]},{"content":"A record buffer that is used to hold the record that is retrieved; optional.","pos":[13243,13319]},{"pos":[13326,13338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds; false if there are no records in the list.","pos":[13340,13411]},{"pos":[13417,13427],"content":"Method len","linkify":"Method len","nodes":[{"content":"Method len","pos":[0,10]}]},{"content":"Returns the current number of records in the list.","pos":[13429,13479]},{"pos":[13508,13520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of records in the list.","pos":[13522,13556]},{"pos":[13562,13573],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Puts the pointer on the next record and copies it to the provided buffer.","pos":[13575,13648]},{"pos":[13697,13707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[13709,13715]},{"content":"The record buffer of same type as the record at the position; optional.","pos":[13718,13789]},{"pos":[13796,13808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds; false if there are no more records.","pos":[13810,13874]},{"pos":[13880,13891],"content":"Method peek","linkify":"Method peek","nodes":[{"content":"Method peek","pos":[0,11]}]},{"content":"Retrieves the record at the current position in the list.","pos":[13893,13950]},{"pos":[13983,13995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A record buffer if the record is found.","pos":[13997,14036]},{"pos":[14042,14053],"content":"Method prev","linkify":"Method prev","nodes":[{"content":"Method prev","pos":[0,11]}]},{"content":"Puts the pointer on the previous record in the list and copies the record to the specified buffer.","pos":[14055,14153]},{"pos":[14202,14212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[14214,14220]},{"content":"The record buffer of the same type as the record to copy; optional.","pos":[14223,14290]},{"pos":[14297,14309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the pointer is not at the first record; otherwise, false.","pos":[14311,14376]},{"pos":[14382,14392],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the RecordLinkList class.","pos":[14394,14449]},{"pos":[14477,14499],"content":"Class RecordSortedList","linkify":"Class RecordSortedList","nodes":[{"content":"Class RecordSortedList","pos":[0,22]}]},{"content":"The RecordSortedList class inserts multiple records in a single database trip.","pos":[14543,14621]},{"pos":[14627,14634],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use RecordSortedList when you want a subset of data from a particular table, and you want it sorted in an order that does not currently exist as an index.","pos":[14636,14790]},{"content":"A RecordSortedList object holds records from a single table.","pos":[14791,14851]},{"content":"The list has a unique key that is defined by the fields listed by using the sortOrder method.","pos":[14852,14945]},{"content":"Records are automatically sorted as they are inserted, they do not have to be inserted in sort sequence.","pos":[14946,15050]},{"content":"RecordSortedList objects are particularly useful for passing a result-set as a parameter There is no limit to the size of a RecordSortedList object, but they are completely memory-based, so there are potential memory consumption problems.","pos":[15051,15289]},{"content":"RecordSortedList objects must be server-located before the insertDatabase method can be called.","pos":[15290,15385]},{"content":"Otherwise, an exception is thrown.","pos":[15386,15420]},{"content":"Record level security (RLS) cannot be applied by the RecordSortedList class.","pos":[15421,15497]},{"content":"RLS is applied by the RecordInsertList class).","pos":[15498,15544]},{"content":"Use a RecordSortedList in preference to a temporary table in the following situations:","pos":[15545,15631]},{"content":"Only one sort order is needed.","pos":[15637,15667]},{"content":"The number of records is not too high (to avoid memory problems).","pos":[15672,15737]},{"content":"Compared to temporary tables, RecordSortedList objects:","pos":[15739,15794]},{"content":"Are faster.","pos":[15800,15811]},{"content":"Are not disk-based.","pos":[15816,15835]},{"content":"Only have one index.","pos":[15840,15860]},{"content":"Cannot be used in forms.","pos":[15865,15889]},{"content":"Require a call between the client and server per (grouped) read.","pos":[15894,15958]},{"pos":[15964,15972],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[15978,15985],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[15989,15995]},{"content":"Description","pos":[16053,16064]},{"content":"public boolean del(Common record)","pos":[16455,16488]},{"content":"Removes a record that has a key that matches the key fields in the recordBuffer from the recordSortedList.","pos":[16519,16625]},{"content":"public boolean find(Common record)","pos":[16688,16722]},{"content":"Sets the record buffer to the contents of the record that has a key that matches the key fields in the record buffer, and positions the list to the record returned.","pos":[16752,16916]},{"content":"public boolean first(Common record)","pos":[16921,16956]},{"content":"Positions the list to the first record in the list, and copies its contents to the record buffer.","pos":[16985,17082]},{"content":"public boolean ins(Common record, <ph id=\"ph1\">\\[</ph>boolean updateIfExists<ph id=\"ph2\">\\]</ph>)","pos":[17154,17215],"source":"public boolean ins(Common record, \\[boolean updateIfExists\\])"},{"content":"Inserts a new record in a RecordSortedList, unless it is a duplicate.","pos":[17218,17287]},{"content":"public int len()","pos":[17387,17403]},{"content":"Returns the current number of records in a RecordSortedList object.","pos":[17451,17518]},{"content":"public boolean next(Common record)","pos":[17620,17654]},{"content":"Sets the record buffer to the contents of the next record in the recordSortedList and positions the list to the record returned.","pos":[17684,17812]},{"content":"public void new(TableId tableId, <ph id=\"ph1\">\\[</ph>Common table<ph id=\"ph2\">\\]</ph>)","pos":[17853,17903],"source":"public void new(TableId tableId, \\[Common table\\])"},{"content":"Initializes a new instance of the Object class.","pos":[17917,17964]},{"content":"public void sortOrder(FieldId fieldId, VarArg )","pos":[18086,18133]},{"content":"Defines the fields on which the records are sorted.","pos":[18150,18201]},{"content":"public void sortOrderFromContainer(container container)","pos":[18319,18374]},{"content":"Defines the fields on which the records are sorted.","pos":[18383,18434]},{"content":"public void insertDatabase(<ph id=\"ph1\">\\[</ph>Connection connection<ph id=\"ph2\">\\]</ph>)","pos":[18552,18605],"source":"public void insertDatabase(\\[Connection connection\\])"},{"content":"Inserts multiple records on a single trip to the database.","pos":[18616,18674]},{"pos":[18788,18798],"content":"Method del","linkify":"Method del","nodes":[{"content":"Method del","pos":[0,10]}]},{"content":"Removes a record that has a key that matches the key fields in the recordBuffer from the recordSortedList.","pos":[18800,18906]},{"pos":[18952,18962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[18964,18970]},{"content":"A record buffer that contains the key values of the record to be deleted.","pos":[18973,19046]},{"pos":[19053,19065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a record was removed; otherwise false.","pos":[19067,19113]},{"pos":[19119,19130],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"content":"Sets the record buffer to the contents of the record that has a key that matches the key fields in the record buffer, and positions the list to the record returned.","pos":[19132,19296]},{"pos":[19343,19353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[19355,19361]},{"content":"A record buffer that contains the key values to be searched for.","pos":[19364,19428]},{"content":"The record found will replace the contents of the record buffer.","pos":[19429,19493]},{"pos":[19500,19512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a record is found; otherwise false.","pos":[19514,19557]},{"pos":[19563,19575],"content":"Method first","linkify":"Method first","nodes":[{"content":"Method first","pos":[0,12]}]},{"content":"Positions the list to the first record in the list, and copies its contents to the record buffer.","pos":[19577,19674]},{"pos":[19722,19732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[19734,19740]},{"content":"A record buffer to contain first record in list.","pos":[19743,19791]},{"pos":[19798,19810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method is successful; otherwise false.","pos":[19812,19862]},{"pos":[19868,19878],"content":"Method ins","linkify":"Method ins","nodes":[{"content":"Method ins","pos":[0,10]}]},{"content":"Inserts a new record in a RecordSortedList, unless it is a duplicate.","pos":[19880,19949]},{"pos":[20021,20031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[20033,20039]},{"content":"Whether to discard or replace duplicate records; optional.","pos":[20042,20100]},{"content":"If false, the new record will be discarded if it is a duplicate.","pos":[20101,20165]},{"content":"If true, the new record will replace an existing record if it is a duplicate.","pos":[20166,20243]},{"content":"updateIfExists","pos":[20255,20269]},{"content":"Whether to discard or replace duplicate records; optional.","pos":[20272,20330]},{"content":"If false, the new record will be discarded if it is a duplicate.","pos":[20331,20395]},{"content":"If true, the new record will replace an existing record if it is a duplicate.","pos":[20396,20473]},{"pos":[20480,20492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record was added or replaced; otherwise false.","pos":[20494,20552]},{"pos":[20558,20568],"content":"Method len","linkify":"Method len","nodes":[{"content":"Method len","pos":[0,10]}]},{"content":"Returns the current number of records in a RecordSortedList object.","pos":[20570,20637]},{"pos":[20666,20678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current number of records in the list.","pos":[20680,20722]},{"pos":[20728,20739],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Sets the record buffer to the contents of the next record in the recordSortedList and positions the list to the record returned.","pos":[20741,20869]},{"pos":[20916,20926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[20928,20934]},{"content":"A record buffer to receive the result.","pos":[20937,20975]},{"pos":[20982,20994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation was successful; otherwise false.","pos":[20996,21050]},{"pos":[21056,21066],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[21068,21115]},{"pos":[21176,21186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[21188,21195]},{"content":"table","pos":[21209,21214]},{"pos":[21223,21230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list can contain records of the type that is specified by the tableId parameter.","pos":[21232,21316]},{"pos":[21323,21331],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses a RecordInsertList object to insert three records in a single database operation.","pos":[21333,21441]},{"pos":[22330,22346],"content":"Method sortOrder","linkify":"Method sortOrder","nodes":[{"content":"Method sortOrder","pos":[0,16]}]},{"content":"Defines the fields on which the records are sorted.","pos":[22348,22399]},{"pos":[22459,22469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[22471,22478]},{"pos":[22501,22508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can specify one or more fields to sort on.","pos":[22510,22556]},{"content":"This method can only be called one time on the same instance of the RecordSortedList class.","pos":[22557,22648]},{"content":"You cannot change the sorting order after it has been set.","pos":[22649,22707]},{"pos":[22714,22722],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a list of DimensionSetRuleTable table records, and then sorts them by the SetId field, and then by the HierarchyId field.","pos":[22724,22875]},{"pos":[23204,23233],"content":"Method sortOrderFromContainer","linkify":"Method sortOrderFromContainer","nodes":[{"content":"Method sortOrderFromContainer","pos":[0,29]}]},{"content":"Defines the fields on which the records are sorted.","pos":[23235,23286]},{"pos":[23354,23364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[23366,23375]},{"content":"The fields on which the list should be sorted.","pos":[23378,23424]},{"content":"Each field is specified by a field ID; for example, by using the FieldNum function.","pos":[23425,23508]},{"pos":[23515,23522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you do not have to supply the field list in a container, use RecordSortedList.sortOrder.","pos":[23524,23615]},{"pos":[23621,23642],"content":"Method insertDatabase","linkify":"Method insertDatabase","nodes":[{"content":"Method insertDatabase","pos":[0,21]}]},{"content":"Inserts multiple records on a single trip to the database.","pos":[23644,23702]},{"pos":[23766,23776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"connection","pos":[23778,23788]},{"pos":[23797,23804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After the call, the list entries remain in the RecordSortedList object.","pos":[23806,23877]},{"content":"The RecordSortedList class must be located on the server before the insertDatabase method is called; otherwise, an exception is thrown.","pos":[23878,24013]},{"content":"RecIds and other system-maintained fields are not assigned values until the insertDatabase method call is made.","pos":[24014,24125]},{"content":"The method reverts to a record by record insert if any of the following conditions are met:","pos":[24126,24217]},{"content":"The table is not SQL-stored.","pos":[24223,24251]},{"content":"The insert method for the table is overloaded.","pos":[24256,24302]},{"content":"The table includes memo or container fields.","pos":[24307,24351]},{"pos":[24358,24366],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to insert three records in a single database operation.","pos":[24368,24455]},{"pos":[25347,25368],"content":"Class RecordViewCache","linkify":"Class RecordViewCache","nodes":[{"content":"Class RecordViewCache","pos":[0,21]}]},{"pos":[25415,25422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25428,25436],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[25442,25449],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[25453,25459]},{"content":"Description","pos":[25484,25495]},{"content":"public void new(Common view)","pos":[25619,25647]},{"content":"Initializes a new instance of the Object class.","pos":[25650,25697]},{"pos":[25705,25715],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[25717,25764]},{"pos":[25805,25815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"view","pos":[25817,25821]},{"pos":[25828,25847],"content":"Class ReferenceNode","linkify":"Class ReferenceNode","nodes":[{"content":"Class ReferenceNode","pos":[0,19]}]},{"content":"The ReferenceNode class represents a reference AOT node, exposing the kernel class to X++.","pos":[25890,25980]},{"pos":[25986,25993],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class represents a node under the AOT References node.","pos":[25995,26054]},{"content":"This class describes a managed assembly that is referenced from X++ code.","pos":[26055,26128]},{"pos":[26134,26142],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[26148,26155],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[26159,26165]},{"content":"Description","pos":[26168,26179]},{"pos":[26211,26229],"content":"Class RelationPath","linkify":"Class RelationPath","nodes":[{"content":"Class RelationPath","pos":[0,18]}]},{"pos":[26273,26280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26286,26294],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[26300,26307],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[26311,26317]},{"content":"Description","pos":[26407,26418]},{"content":"public boolean isEqualTo(RelationPath otherRelationPath)","pos":[26619,26675]},{"content":"public boolean isPathCyclical(boolean excludePathRootTable)","pos":[26773,26832]},{"content":"public boolean isPathValid()","pos":[26927,26955]},{"content":"public List pathAsList()","pos":[27081,27105]},{"content":"public str pathAsString(<ph id=\"ph1\">\\[</ph>str delimiter<ph id=\"ph2\">\\]</ph>)","pos":[27235,27277],"source":"public str pathAsString(\\[str delimiter\\])"},{"content":"public str pathRelativeTable()","pos":[27389,27419]},{"content":"public str pathRootTable()","pos":[27543,27569]},{"content":"::public static RelationPath construct(RelationPath sourceRelationPath)","pos":[27697,27768]},{"content":"::public static RelationPath constructFromPathList(str pathRootTableName, List relationPath)","pos":[27851,27943]},{"content":"::public static RelationPath constructFromPathString(str pathRootTableName, str relationPath)","pos":[28005,28098]},{"content":"private void new()","pos":[28159,28177]},{"content":"Initializes a new instance of the RelationPath class.","pos":[28255,28308]},{"content":"public void trimPathAtFront()","pos":[28313,28342]},{"content":"public void trimPathAtEnd()","pos":[28467,28494]},{"pos":[28624,28640],"content":"Method isEqualTo","linkify":"Method isEqualTo","nodes":[{"content":"Method isEqualTo","pos":[0,16]}]},{"pos":[28709,28719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"otherRelationPath","pos":[28721,28738]},{"pos":[28747,28759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28765,28786],"content":"Method isPathCyclical","linkify":"Method isPathCyclical","nodes":[{"content":"Method isPathCyclical","pos":[0,21]}]},{"pos":[28858,28868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"excludePathRootTable","pos":[28870,28890]},{"pos":[28899,28911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28917,28935],"content":"Method isPathValid","linkify":"Method isPathValid","nodes":[{"content":"Method isPathValid","pos":[0,18]}]},{"pos":[28976,28988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28994,29011],"content":"Method pathAsList","linkify":"Method pathAsList","nodes":[{"content":"Method pathAsList","pos":[0,17]}]},{"pos":[29048,29060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29066,29085],"content":"Method pathAsString","linkify":"Method pathAsString","nodes":[{"content":"Method pathAsString","pos":[0,19]}]},{"pos":[29138,29148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"delimiter","pos":[29150,29159]},{"pos":[29168,29180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29186,29210],"content":"Method pathRelativeTable","linkify":"Method pathRelativeTable","nodes":[{"content":"Method pathRelativeTable","pos":[0,24]}]},{"pos":[29253,29265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29271,29291],"content":"Method pathRootTable","linkify":"Method pathRootTable","nodes":[{"content":"Method pathRootTable","pos":[0,20]}]},{"pos":[29330,29342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29348,29364],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"pos":[29446,29456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sourceRelationPath","pos":[29458,29476]},{"pos":[29485,29497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29503,29531],"content":"Method constructFromPathList","linkify":"Method constructFromPathList","nodes":[{"content":"Method constructFromPathList","pos":[0,28]}]},{"pos":[29634,29644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pathRootTableName","pos":[29646,29663]},{"content":"relationPath","pos":[29677,29689]},{"pos":[29698,29710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29716,29746],"content":"Method constructFromPathString","linkify":"Method constructFromPathString","nodes":[{"content":"Method constructFromPathString","pos":[0,30]}]},{"pos":[29850,29860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pathRootTableName","pos":[29862,29879]},{"content":"relationPath","pos":[29893,29905]},{"pos":[29914,29926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29932,29942],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the RelationPath class.","pos":[29944,29997]},{"pos":[30027,30049],"content":"Method trimPathAtFront","linkify":"Method trimPathAtFront","nodes":[{"content":"Method trimPathAtFront","pos":[0,22]}]},{"pos":[30090,30110],"content":"Method trimPathAtEnd","linkify":"Method trimPathAtEnd","nodes":[{"content":"Method trimPathAtEnd","pos":[0,20]}]},{"pos":[30148,30174],"content":"Class RelativeFieldBinding","linkify":"Class RelativeFieldBinding","nodes":[{"content":"Class RelativeFieldBinding","pos":[0,26]}]},{"pos":[30232,30239],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30245,30253],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[30259,30266],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[30270,30276]},{"content":"Description","pos":[30361,30372]},{"content":"public RelationPath relationPath()","pos":[30584,30618]},{"content":"::public static RelativeFieldBinding construct(str fieldName, RelationPath relationPath)","pos":[30741,30829]},{"content":"::public static RelativeFieldBinding create(container packedRelativeFieldBinding)","pos":[30898,30979]},{"content":"private void new()","pos":[31055,31073]},{"content":"Initializes a new instance of the RelativeFieldBinding class.","pos":[31146,31207]},{"pos":[31215,31234],"content":"Method relationPath","linkify":"Method relationPath","nodes":[{"content":"Method relationPath","pos":[0,19]}]},{"pos":[31281,31293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31299,31315],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"pos":[31414,31424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[31426,31435]},{"content":"relationPath","pos":[31449,31461]},{"pos":[31470,31482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31488,31501],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"pos":[31593,31603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedRelativeFieldBinding","pos":[31605,31631]},{"pos":[31640,31652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31658,31668],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the RelativeFieldBinding class.","pos":[31670,31731]},{"pos":[31760,31772],"content":"Class Report","linkify":"Class Report","nodes":[{"content":"Class Report","pos":[0,12]}]},{"content":"The Report class lets users use reports that are present in the Finance and Operations Application Object Tree (AOT) and report creation by using code instead of the AOT.","pos":[31808,31978]},{"pos":[31984,31991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A Report object contains a query and zero or more designs.","pos":[31993,32051]},{"content":"Each design is a definition of the layout of a report that can be displayed on screen or printed.","pos":[32052,32149]},{"content":"A Report object also has ReportRun methods that can be overridden.","pos":[32150,32216]},{"content":"This class enables you to create, read, update, and delete X++ code and metadata.","pos":[32217,32298]},{"pos":[32304,32312],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example creates and runs a report that is not present in the AOT.","pos":[32314,32398]},{"pos":[33200,33207],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[33211,33217]},{"content":"Description","pos":[33281,33292]},{"content":"public ReportDesign addDesign(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>container buffer<ph id=\"ph4\">\\]</ph>)","pos":[33635,33700],"source":"public ReportDesign addDesign(\\[str name\\], \\[container buffer\\])"},{"content":"Creates a reportDesign that belongs to a report.","pos":[33705,33753]},{"content":"public boolean allowCheck(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33847,33891],"source":"public boolean allowCheck(\\[boolean value\\])"},{"content":"public boolean autoJoin(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[34059,34101],"source":"public boolean autoJoin(\\[boolean value\\])"},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[34271,34306],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[34341,34415]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[34483,34522],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[34553,34614]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[34695,34732],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[34765,34826]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[34907,34942],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[34977,35046]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[35119,35159],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[35189,35245]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[35331,35369],"source":"public str creationTime(\\[str value\\])"},{"content":"public ReportDesign design(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[35543,35583],"source":"public ReportDesign design(\\[str name\\])"},{"content":"Retrieves an existing design.","pos":[35613,35642]},{"content":"public int designCount()","pos":[35755,35779]},{"content":"Retrieves the number of designs in a given report.","pos":[35825,35875]},{"content":"public ReportDesign designNumber(<ph id=\"ph1\">\\[</ph>int number<ph id=\"ph2\">\\]</ph>)","pos":[35967,36015],"source":"public ReportDesign designNumber(\\[int number\\])"},{"content":"Gets an existing design.","pos":[36037,36061]},{"content":"public boolean interactive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[36179,36224],"source":"public boolean interactive(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[36391,36421],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[36461,36599]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[36604,36638],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public container pack()","pos":[36816,36839]},{"content":"Serializes the current instance of the Report class.","pos":[36886,36938]},{"content":"public Query query(<ph id=\"ph1\">\\[</ph>Query query<ph id=\"ph2\">\\]</ph>)","pos":[37028,37063],"source":"public Query query(\\[Query query\\])"},{"content":"public boolean saved()","pos":[37240,37262]},{"content":"Indicates whether the report has been saved to disk.","pos":[37310,37362]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>AnyType nameOrContainer<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AnyType container<ph id=\"ph4\">\\]</ph>)","pos":[37452,37519],"source":"public void new(\\[AnyType nameOrContainer\\], \\[AnyType container\\])"},{"content":"Initializes a new instance of the TreeNode class.","pos":[37522,37571]},{"content":"public void dump()","pos":[37664,37682]},{"content":"Writes an overview of the report's contents to the Infolog.","pos":[37734,37793]},{"pos":[37879,37895],"content":"Method addDesign","linkify":"Method addDesign","nodes":[{"content":"Method addDesign","pos":[0,16]}]},{"content":"Creates a reportDesign that belongs to a report.","pos":[37897,37945]},{"pos":[38019,38029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[38031,38035]},{"content":"Lets the design have the contents given by buffer.","pos":[38038,38088]},{"content":"buffer","pos":[38100,38106]},{"content":"Lets the design have the contents given by buffer.","pos":[38109,38159]},{"pos":[38166,38178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The created reportDesign.","pos":[38180,38205]},{"pos":[38212,38219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The buffer argument can be a container created by the pack method.","pos":[38221,38287]},{"pos":[38294,38302],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This job demonstrates how addDesign can be used to generate a design that is a copy of another design.","pos":[38304,38406]},{"pos":[39342,39359],"content":"Method allowCheck","linkify":"Method allowCheck","nodes":[{"content":"Method allowCheck","pos":[0,17]}]},{"pos":[39414,39424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39426,39431]},{"pos":[39440,39452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39458,39473],"content":"Method autoJoin","linkify":"Method autoJoin","nodes":[{"content":"Method autoJoin","pos":[0,15]}]},{"pos":[39526,39536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39538,39543]},{"pos":[39552,39564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39570,39586],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[39588,39662]},{"pos":[39708,39718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39720,39725]},{"pos":[39734,39746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[39748,39769]},{"pos":[39775,39793],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[39795,39856]},{"pos":[39906,39916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39918,39923]},{"pos":[39932,39944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[39946,39994]},{"pos":[40000,40018],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[40020,40081]},{"pos":[40129,40139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40141,40146]},{"pos":[40155,40167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[40169,40217]},{"pos":[40223,40239],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[40241,40310]},{"pos":[40356,40366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40368,40373]},{"pos":[40382,40394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[40396,40417]},{"pos":[40423,40442],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[40444,40500]},{"pos":[40551,40561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40563,40568]},{"pos":[40577,40589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[40591,40634]},{"pos":[40640,40659],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[40708,40718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40720,40725]},{"pos":[40734,40746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40752,40765],"content":"Method design","linkify":"Method design","nodes":[{"content":"Method design","pos":[0,13]}]},{"content":"Retrieves an existing design.","pos":[40767,40796]},{"pos":[40847,40857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[40859,40863]},{"content":"The name of the report to be returned; optional.","pos":[40866,40914]},{"pos":[40921,40933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The design that has the specified name, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if it was not found.","pos":[40935,41063]},{"pos":[41070,41077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If no argument is supplied and the report only contains one design, the method returns the one design.","pos":[41079,41181]},{"pos":[41188,41196],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[41656,41674],"content":"Method designCount","linkify":"Method designCount","nodes":[{"content":"Method designCount","pos":[0,18]}]},{"content":"Retrieves the number of designs in a given report.","pos":[41676,41726]},{"pos":[41763,41775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of designs.","pos":[41777,41799]},{"pos":[41806,41814],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[41995,42014],"content":"Method designNumber","linkify":"Method designNumber","nodes":[{"content":"Method designNumber","pos":[0,19]}]},{"content":"Gets an existing design.","pos":[42016,42040]},{"pos":[42099,42109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[42111,42117]},{"content":"An integer that specifies the desired design; optional.","pos":[42120,42175]},{"pos":[42182,42194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The specified reportDesign, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if the design did not exist.","pos":[42196,42320]},{"pos":[42327,42334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If number is <ph id=\"ph1\">&amp;lt;</ph> 1, design 1 is returned.","pos":[42336,42378],"source":"If number is &lt; 1, design 1 is returned."},{"pos":[42385,42393],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[42832,42850],"content":"Method interactive","linkify":"Method interactive","nodes":[{"content":"Method interactive","pos":[0,18]}]},{"pos":[42906,42916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[42918,42923]},{"pos":[42932,42944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42950,42961],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[42963,43101]},{"pos":[43142,43152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43154,43159]},{"pos":[43168,43180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[43182,43246]},{"pos":[43253,43260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[43262,43356]},{"content":"Begins with a letter.","pos":[43362,43383]},{"content":"Doesn't exceed 250 characters.","pos":[43388,43418]},{"content":"Can include numbers and underscore characters.","pos":[43423,43469]},{"content":"Cannot include punctuation or spaces.","pos":[43474,43511]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[43516,43634]},{"pos":[43640,43653],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[43698,43708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43710,43715]},{"pos":[43724,43736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43742,43753],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the Report class.","pos":[43755,43807]},{"pos":[43843,43855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the Report class.","pos":[43857,43924]},{"pos":[43931,43938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned container can be used as first argument to the report constructor.","pos":[43940,44019]},{"pos":[44026,44034],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example stores a report named \"cust\" in a container and runs the report in the container (not the container in the AOT).","pos":[44036,44170]},{"pos":[44454,44466],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[44512,44522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[44524,44529]},{"pos":[44538,44550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44556,44568],"content":"Method saved","linkify":"Method saved","nodes":[{"content":"Method saved","pos":[0,12]}]},{"content":"Indicates whether the report has been saved to disk.","pos":[44570,44622]},{"pos":[44657,44669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the report has been saved to disc; otherwise false.","pos":[44671,44730]},{"pos":[44737,44744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A report in the AOT can only be run if it has been saved to disk.","pos":[44746,44811]},{"pos":[44818,44826],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[45166,45176],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[45178,45227]},{"pos":[45303,45313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nameOrContainer","pos":[45315,45330]},{"content":"container","pos":[45344,45353]},{"pos":[45362,45369],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameter format is as follows:","pos":[45371,45406]},{"content":"() – Creates a report object that is not present in the AOT.","pos":[45412,45472]},{"content":"(c) – Creates a report object that is not present in the AOT, the contents of which are given by the container c.","pos":[45477,45590]},{"content":"(\"existingReportName\") – Retrieves a report object that is found in the AOT.","pos":[45595,45671]},{"content":"(\"nonExistingReportName\") – Creates a report object in the AOT.","pos":[45676,45739]},{"content":"(\"nonExistingReportName\", c) – Creates a report object in the AOT, the contents of which are given by the container c.","pos":[45744,45862]},{"content":"The container c should be created by the pack method.","pos":[45864,45917]},{"pos":[45923,45934],"content":"Method dump","linkify":"Method dump","nodes":[{"content":"Method dump","pos":[0,11]}]},{"content":"Writes an overview of the report's contents to the Infolog.","pos":[45936,45995]},{"pos":[46026,46033],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The lines written to the Infolog are identical to the information shown when you expand the report in the AOT.","pos":[46035,46145]},{"pos":[46152,46160],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[46278,46305],"content":"Class ReportAutoDesignSpecs","linkify":"Class ReportAutoDesignSpecs","nodes":[{"content":"Class ReportAutoDesignSpecs","pos":[0,27]}]},{"content":"The ReportAutoDesignSpecs class lets you create, read, update, and delete X++ code and metadata.","pos":[46356,46452]},{"pos":[46458,46465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[46467,46577]},{"pos":[46583,46591],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[46597,46604],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[46608,46614]},{"content":"Description","pos":[46692,46703]},{"content":"public ReportSection addProgrammableSection(int number)","pos":[46918,46973]},{"content":"public ReportSection addSection(ReportBlockType sectionType, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[47073,47154],"source":"public ReportSection addSection(ReportBlockType sectionType, \\[TableId tableId\\])"},{"content":"public boolean autoHeader(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[47228,47272],"source":"public boolean autoHeader(\\[boolean value\\])"},{"content":"public str footerText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47383,47419],"source":"public str footerText(\\[str value\\])"},{"content":"public boolean grandHeader(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[47538,47583],"source":"public boolean grandHeader(\\[boolean value\\])"},{"content":"public boolean grandTotal(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[47693,47737],"source":"public boolean grandTotal(\\[boolean value\\])"},{"content":"Determines whether the FooterText property value can be displayed.","pos":[47777,47843]},{"content":"public str headerText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47848,47884],"source":"public str headerText(\\[str value\\])"},{"content":"public boolean view()","pos":[48003,48024]},{"pos":[48161,48190],"content":"Method addProgrammableSection","linkify":"Method addProgrammableSection","nodes":[{"content":"Method addProgrammableSection","pos":[0,29]}]},{"pos":[48258,48268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[48270,48276]},{"pos":[48285,48297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48303,48320],"content":"Method addSection","linkify":"Method addSection","nodes":[{"content":"Method addSection","pos":[0,17]}]},{"pos":[48412,48422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sectionType","pos":[48424,48435]},{"content":"tableId","pos":[48449,48456]},{"pos":[48465,48477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48483,48500],"content":"Method autoHeader","linkify":"Method autoHeader","nodes":[{"content":"Method autoHeader","pos":[0,17]}]},{"pos":[48555,48565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48567,48572]},{"pos":[48581,48593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48599,48616],"content":"Method footerText","linkify":"Method footerText","nodes":[{"content":"Method footerText","pos":[0,17]}]},{"pos":[48663,48673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48675,48680]},{"pos":[48689,48701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48707,48725],"content":"Method grandHeader","linkify":"Method grandHeader","nodes":[{"content":"Method grandHeader","pos":[0,18]}]},{"pos":[48781,48791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48793,48798]},{"pos":[48807,48819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48825,48842],"content":"Method grandTotal","linkify":"Method grandTotal","nodes":[{"content":"Method grandTotal","pos":[0,17]}]},{"content":"Determines whether the FooterText property value can be displayed.","pos":[48844,48910]},{"pos":[48965,48975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48977,48982]},{"pos":[48991,49003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the FooterText property value is displayed; otherwise, false.","pos":[49005,49074]},{"pos":[49081,49088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The grandTotal property is available only when a report has untested, multiple data sources.","pos":[49090,49182]},{"pos":[49188,49205],"content":"Method headerText","linkify":"Method headerText","nodes":[{"content":"Method headerText","pos":[0,17]}]},{"pos":[49252,49262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49264,49269]},{"pos":[49278,49290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49296,49307],"content":"Method view","linkify":"Method view","nodes":[{"content":"Method view","pos":[0,11]}]},{"pos":[49341,49353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49358,49383],"content":"Class ReportBitmapControl","linkify":"Class ReportBitmapControl","nodes":[{"content":"Class ReportBitmapControl","pos":[0,25]}]},{"content":"The ReportBitmapControl class creates, reads, updates, and deletes X++ code and metadata.","pos":[49437,49526]},{"pos":[49532,49539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must have access to the development security key (SysDevelopment) before this API is called.","pos":[49541,49637]},{"pos":[49643,49651],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[49657,49664],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[49668,49674]},{"content":"Description","pos":[49743,49754]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50102,50137],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50319,50355],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[50536,50585],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[50611,50709]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50753,50788],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[50828,50890]},{"content":"public int bottomMarginAndFrame()","pos":[50970,51003]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51187,51229],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[51404,51445],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[51621,51667],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[51838,51883],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52055,52096],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52272,52309],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[52347,52392]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[52489,52561],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[52564,52631]},{"content":"public ReportFieldType controlType()","pos":[52706,52742]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[52923,52957],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[53140,53183],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[53357,53393],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[53574,53593]},{"content":"public str effectiveFont()","pos":[53791,53817]},{"content":"public str fontInfoPrinter()","pos":[54008,54036]},{"content":"public int fontInfoPrinterAscent()","pos":[54225,54259]},{"content":"public int fontInfoPrinterDescent()","pos":[54442,54477]},{"content":"public int fontInfoPrinterExtLead()","pos":[54659,54694]},{"content":"public int fontInfoPrinterHeight()","pos":[54876,54910]},{"content":"public int fontInfoPrinterIntLead()","pos":[55093,55128]},{"content":"public str fontInfoScreen()","pos":[55310,55337]},{"content":"public int fontInfoScreenAscent()","pos":[55527,55560]},{"content":"public int fontInfoScreenDescent()","pos":[55744,55778]},{"content":"public int fontInfoScreenExtLead()","pos":[55961,55995]},{"content":"public int fontInfoScreenHeight()","pos":[56178,56211]},{"content":"public int fontInfoScreenIntLead()","pos":[56395,56429]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56612,56653],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[56687,56738]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[56829,56877],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[57046,57104],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57263,57299],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[57338,57400]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[57480,57533]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[57697,57732],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[57914,57954],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[58131,58170],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[58206,58245]},{"content":"public str imageName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[58348,58383],"source":"public str imageName(\\[str value\\])"},{"content":"public int imageResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58565,58604],"source":"public int imageResource(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[58782,58813],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[58857,58894]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58999,59034],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59216,59259],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[59433,59472],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[59650,59685],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59867,59906],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60084,60129],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[60301,60351],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[60518,60582],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60735,60774],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60952,60992],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[61169,61217],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61386,61426],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[61603,61642],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[61820,61864],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[62037,62080],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[62254,62298],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[62471,62525],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[62688,62718]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62905,62945],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[63122,63161],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[63339,63383],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[63556,63599],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63773,63807],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[63990,64023],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[64207,64245],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[64424,64461],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[64641,64686],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[64858,64903],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[65075,65119],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[65150,65225]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[65292,65337],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[65509,65548],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[65726,65764],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[65943,65999],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[66160,66200],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[66377,66407],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[66452,66590]},{"content":"public int numberOfLines(int height100mm)","pos":[66595,66636]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66812,66846],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[67029,67063]},{"content":"public int previewXCompensation100mm(str string)","pos":[67246,67294]},{"content":"public boolean resizeBitmap(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[67463,67509],"source":"public boolean resizeBitmap(\\[boolean value\\])"},{"content":"public int right100mm()","pos":[67680,67703]},{"content":"public int right100mmInclBorder()","pos":[67897,67930]},{"content":"public int rightMarginAndFrame()","pos":[68114,68146]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[68331,68372],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[68548,68588],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[68765,68810],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[68982,69026],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[69199,69256],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[69416,69466]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[69633,69676],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean showPicAsText(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[69850,69897],"source":"public boolean showPicAsText(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[70067,70106],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[70142,70195]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[70284,70339],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[70501,70543],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[70718,70770],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[70935,70965]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[71152,71191],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[71369,71407],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[71586,71629],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[71803,71845],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[72020,72053],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[72237,72269],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[72454,72491],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[72671,72707],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[72888,72929],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public boolean warnIfMissing(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[73105,73152],"source":"public boolean warnIfMissing(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[73322,73363],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[73539,73604],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[73756,73791],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[73973,74019],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[74190,74246],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[74407,74442],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[74482,74544]},{"content":"public int widthOfString100mm(str string)","pos":[74624,74665]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[74841,74875],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[75058,75097],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[75275,75313],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[75350,75388]},{"content":"public void labelWidth(Real value, Units unit)","pos":[75492,75538]},{"content":"public void top(Real value, Units unit)","pos":[75709,75748]},{"content":"public void show()","pos":[75926,75944]},{"content":"public void rightMargin(Real value, Units unit)","pos":[76143,76190]},{"content":"public void left(Real value, Units unit)","pos":[76360,76400]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[76577,76625]},{"content":"public void height(Real value, Units unit)","pos":[76794,76836]},{"content":"Gets or sets the height of the control.","pos":[76869,76908]},{"content":"public void hide()","pos":[77011,77029]},{"content":"public void topMargin(Real value, Units unit)","pos":[77228,77273]},{"content":"public void leftMargin(Real value, Units unit)","pos":[77445,77491]},{"content":"public void width(Real value, Units unit)","pos":[77662,77703]},{"content":"Gets or sets the width of the control.","pos":[77737,77775]},{"pos":[77882,77898],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[77944,77954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77956,77961]},{"pos":[77970,77982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77988,78005],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[78052,78062],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78064,78069]},{"pos":[78078,78090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78096,78118],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[78120,78218]},{"pos":[78278,78288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78290,78295]},{"pos":[78304,78316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[78318,78397]},{"pos":[78404,78411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[78413,78450]},{"pos":[78456,78472],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[78474,78536]},{"pos":[78582,78592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78594,78599]},{"pos":[78608,78620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[78622,78683]},{"pos":[78689,78716],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[78762,78774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78780,78803],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[78856,78866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78868,78873]},{"pos":[78882,78894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78900,78922],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[78974,78984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78986,78991]},{"pos":[79000,79012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79018,79041],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[79098,79108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79110,79115]},{"pos":[79124,79136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79142,79166],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[79222,79232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79234,79239]},{"pos":[79248,79260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79266,79288],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[79340,79350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79352,79357]},{"pos":[79366,79378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79384,79402],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[79404,79449]},{"pos":[79497,79507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79509,79514]},{"pos":[79523,79535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[79537,79580]},{"pos":[79587,79594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[79596,79657]},{"content":"Value.","pos":[79661,79667]},{"content":"Style.","pos":[79670,79676]},{"content":"0","pos":[79747,79748]},{"content":"Default.","pos":[79756,79764]},{"content":"1","pos":[79790,79791]},{"content":"The MicrosoftWindows palette.","pos":[79799,79828]},{"content":"2","pos":[79833,79834]},{"content":"The true-color scheme.","pos":[79842,79864]},{"pos":[79879,79902],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[79904,79971]},{"pos":[80054,80064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80066,80071]},{"pos":[80080,80092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[80094,80166]},{"pos":[80173,80180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[80182,80263]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[80264,80357]},{"pos":[80363,80381],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[80430,80442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80448,80463],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[80508,80518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80520,80525]},{"pos":[80534,80546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80552,80568],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[80622,80632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80634,80639]},{"pos":[80648,80660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80666,80683],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[80730,80740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80742,80747]},{"pos":[80756,80768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80774,80787],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[80819,80831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80837,80857],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[80896,80908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80914,80936],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[80977,80989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80995,81023],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[81070,81082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81088,81117],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[81165,81177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81183,81212],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[81260,81272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81278,81306],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[81353,81365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81371,81400],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[81448,81460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81466,81487],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[81527,81539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81545,81572],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[81618,81630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81636,81664],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[81711,81723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81729,81757],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[81804,81816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81822,81849],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[81895,81907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81913,81941],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[81988,82000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82006,82028],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[82030,82081]},{"pos":[82133,82143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82145,82150]},{"pos":[82159,82171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[82173,82217]},{"pos":[82224,82231],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[82233,82301]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[82307,82377]},{"content":"The second byte contains a value for green.","pos":[82382,82425]},{"content":"The third byte contains a value for blue.","pos":[82430,82471]},{"content":"The high-order byte must be zero.","pos":[82476,82509]},{"content":"The maximum value for a single byte is 255.","pos":[82514,82557]},{"pos":[82563,82581],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[82640,82650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[82652,82668]},{"pos":[82677,82689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82695,82723],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[82792,82802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[82804,82820]},{"pos":[82829,82841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82847,82864],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[82866,82928]},{"pos":[82975,82985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82987,82992]},{"pos":[83001,83013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[83015,83036]},{"pos":[83043,83050],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[83052,83106]},{"content":"Mode.","pos":[83110,83115]},{"content":"Height Calculation.","pos":[83127,83146]},{"content":"Exact.","pos":[83332,83338]},{"content":"The exact height in pixels of the controls is used.","pos":[83349,83400]},{"content":"Auto.","pos":[83443,83448]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[83460,83549]},{"content":"Column height.","pos":[83554,83568]},{"content":"The layout of the form determines the height of the control.","pos":[83571,83631]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[83664,83749]},{"pos":[83755,83792],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[83858,83868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[83870,83876]},{"pos":[83885,83897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83903,83919],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[83965,83975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83977,83982]},{"pos":[83991,84003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84009,84026],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[84077,84087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84089,84094]},{"pos":[84103,84115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84121,84139],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[84141,84180]},{"pos":[84230,84240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84242,84247]},{"pos":[84256,84268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[84270,84291]},{"pos":[84298,84305],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[84307,84397]},{"pos":[84403,84419],"content":"Method imageName","linkify":"Method imageName","nodes":[{"content":"Method imageName","pos":[0,16]}]},{"pos":[84465,84475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84477,84482]},{"pos":[84491,84503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84509,84529],"content":"Method imageResource","linkify":"Method imageResource","nodes":[{"content":"Method imageResource","pos":[0,20]}]},{"pos":[84579,84589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84591,84596]},{"pos":[84605,84617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84623,84635],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[84637,84674]},{"pos":[84716,84726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84728,84733]},{"pos":[84742,84754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[84756,84794]},{"pos":[84801,84808],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[84810,84942]},{"pos":[84948,84964],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[85010,85020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85022,85027]},{"pos":[85036,85048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85054,85078],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[85132,85142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85144,85149]},{"pos":[85158,85170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85176,85196],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[85246,85256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85258,85263]},{"pos":[85272,85284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85290,85306],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[85352,85362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85364,85369]},{"pos":[85378,85390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85396,85416],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[85466,85476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85478,85483]},{"pos":[85492,85504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85510,85528],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[85584,85594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85596,85601]},{"pos":[85610,85622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85628,85649],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[85710,85720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85722,85727]},{"pos":[85736,85748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85754,85779],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[85854,85864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85866,85871]},{"pos":[85880,85892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85898,85918],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[85968,85978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85980,85985]},{"pos":[85994,86006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86012,86033],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[86084,86094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86096,86101]},{"pos":[86110,86122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86128,86149],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[86208,86218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86220,86225]},{"pos":[86234,86246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86252,86273],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[86324,86334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86336,86341]},{"pos":[86350,86362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86368,86388],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[86438,86448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86450,86455]},{"pos":[86464,86476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86482,86503],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[86558,86568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86570,86575]},{"pos":[86584,86596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86602,86624],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[86678,86688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86690,86695]},{"pos":[86704,86716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86722,86738],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[86793,86803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[86805,86819]},{"pos":[86828,86840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86846,86872],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[86937,86947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[86949,86963]},{"pos":[86972,86984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86990,87014],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[87057,87069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87075,87096],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[87147,87157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87159,87164]},{"pos":[87173,87185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87191,87211],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[87261,87271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87273,87278]},{"pos":[87287,87299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87305,87326],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[87381,87391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87393,87398]},{"pos":[87407,87419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87425,87447],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[87501,87511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87513,87518]},{"pos":[87527,87539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87545,87560],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[87605,87615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87617,87622]},{"pos":[87631,87643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87649,87663],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[87707,87717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87719,87724]},{"pos":[87733,87745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87751,87766],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[87815,87825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87827,87832]},{"pos":[87841,87853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87859,87875],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[87923,87933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87935,87940]},{"pos":[87949,87961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87967,87983],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[88039,88049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88051,88056]},{"pos":[88065,88077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88083,88099],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[88155,88165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88167,88172]},{"pos":[88181,88193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88199,88214],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[88216,88291]},{"pos":[88346,88356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88358,88363]},{"pos":[88372,88384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[88386,88435]},{"pos":[88441,88457],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[88513,88523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88525,88530]},{"pos":[88539,88551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88557,88577],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[88627,88637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88639,88644]},{"pos":[88653,88665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88671,88690],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[88739,88749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88751,88756]},{"pos":[88765,88777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88783,88802],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[88869,88879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88881,88886]},{"pos":[88895,88907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88913,88934],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[88985,88995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88997,89002]},{"pos":[89011,89023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89029,89040],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[89042,89180]},{"pos":[89221,89231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89233,89238]},{"pos":[89247,89259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[89261,89325]},{"pos":[89332,89339],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[89341,89435]},{"content":"Begins with a letter.","pos":[89441,89462]},{"content":"Doesn't exceed 250 characters.","pos":[89467,89497]},{"content":"Can include numbers and underscore characters.","pos":[89502,89548]},{"content":"Cannot include punctuation or spaces.","pos":[89553,89590]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[89595,89713]},{"pos":[89719,89739],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[89793,89803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[89805,89816]},{"pos":[89825,89837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89843,89858],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[89903,89913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89915,89920]},{"pos":[89929,89941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89947,89965],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[90012,90022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[90024,90030]},{"pos":[90039,90051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90057,90089],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[90150,90160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[90162,90168]},{"pos":[90177,90189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90195,90214],"content":"Method resizeBitmap","linkify":"Method resizeBitmap","nodes":[{"content":"Method resizeBitmap","pos":[0,19]}]},{"pos":[90271,90281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90283,90288]},{"pos":[90297,90309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90315,90332],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[90368,90380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90386,90413],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[90459,90471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90477,90503],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[90548,90560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90566,90588],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[90640,90650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90652,90657]},{"pos":[90666,90678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90684,90705],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[90756,90766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90768,90773]},{"pos":[90782,90794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90800,90822],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[90878,90888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90890,90895]},{"pos":[90904,90916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90922,90945],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[91000,91010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91012,91017]},{"pos":[91026,91038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91044,91062],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[91130,91140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91142,91147]},{"pos":[91156,91168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91174,91197],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[91260,91270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[91272,91277]},{"content":"string","pos":[91291,91297]},{"pos":[91306,91318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91324,91340],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[91394,91404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91406,91411]},{"pos":[91420,91432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91438,91458],"content":"Method showPicAsText","linkify":"Method showPicAsText","nodes":[{"content":"Method showPicAsText","pos":[0,20]}]},{"pos":[91516,91526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91528,91533]},{"pos":[91542,91554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91560,91572],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[91574,91627]},{"pos":[91677,91687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91689,91694]},{"pos":[91703,91715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[91717,91778]},{"pos":[91784,91800],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[91866,91876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91878,91883]},{"pos":[91892,91904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91910,91925],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[91978,91988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[91990,92003]},{"pos":[92012,92024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92030,92055],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[92118,92128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[92130,92143]},{"pos":[92152,92164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92170,92194],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[92237,92249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92255,92275],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[92325,92335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92337,92342]},{"pos":[92351,92363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92369,92388],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[92437,92447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92449,92454]},{"pos":[92463,92475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92481,92501],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[92555,92565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92567,92572]},{"pos":[92581,92593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92599,92620],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[92673,92683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92685,92690]},{"pos":[92699,92711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92717,92731],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[92775,92785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92787,92792]},{"pos":[92801,92813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92819,92832],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[92875,92885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92887,92892]},{"pos":[92901,92913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92919,92933],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[92981,92991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92993,92998]},{"pos":[93007,93019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93025,93040],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[93087,93097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93099,93104]},{"pos":[93113,93125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93131,93145],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[93197,93207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93209,93214]},{"pos":[93223,93235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93241,93261],"content":"Method warnIfMissing","linkify":"Method warnIfMissing","nodes":[{"content":"Method warnIfMissing","pos":[0,20]}]},{"pos":[93319,93329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93331,93336]},{"pos":[93345,93357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93363,93385],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[93437,93447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93449,93454]},{"pos":[93463,93475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93481,93503],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[93579,93589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93591,93596]},{"pos":[93605,93617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93623,93639],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[93685,93695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93697,93702]},{"pos":[93711,93723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93729,93746],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[93803,93813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[93815,93830]},{"pos":[93839,93851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93857,93884],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[93951,93961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[93963,93978]},{"pos":[93987,93999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[94005,94021],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[94023,94085]},{"pos":[94131,94141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94143,94148]},{"pos":[94157,94169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[94171,94232]},{"pos":[94239,94246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[94248,94301]},{"content":"Mode.","pos":[94305,94310]},{"content":"Width Calculation.","pos":[94321,94339]},{"content":"Exact.","pos":[94523,94529]},{"content":"The exact width in pixels of the controls is used.","pos":[94539,94589]},{"content":"Auto.","pos":[94632,94637]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[94648,94736]},{"content":"Column width.","pos":[94741,94754]},{"content":"The layout of the form determines the width of the control.","pos":[94757,94816]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[94849,94932]},{"pos":[94938,94963],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[95017,95027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[95029,95035]},{"pos":[95044,95056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95062,95077],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[95122,95132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95134,95139]},{"pos":[95148,95160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95166,95182],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[95232,95242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95244,95249]},{"pos":[95258,95270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95276,95293],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[95295,95333]},{"pos":[95382,95392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95394,95399]},{"pos":[95408,95420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[95422,95457]},{"pos":[95464,95471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[95473,95546]},{"pos":[95552,95569],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[95628,95638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95640,95645]},{"content":"unit","pos":[95659,95663]},{"pos":[95671,95681],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[95733,95743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95745,95750]},{"content":"unit","pos":[95764,95768]},{"pos":[95776,95787],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[95817,95835],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[95895,95905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95907,95912]},{"content":"unit","pos":[95926,95930]},{"pos":[95938,95949],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[96002,96012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96014,96019]},{"content":"unit","pos":[96033,96037]},{"pos":[96045,96064],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[96125,96135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96137,96142]},{"content":"unit","pos":[96156,96160]},{"pos":[96168,96181],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[96183,96222]},{"pos":[96277,96287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96289,96294]},{"content":"unit","pos":[96308,96312]},{"pos":[96321,96328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[96330,96437]},{"content":"Mode.","pos":[96441,96446]},{"content":"Height calculation.","pos":[96460,96479]},{"content":"-1 Exact.","pos":[96667,96676]},{"content":"The exact height in pixels of the controls is used.","pos":[96686,96737]},{"content":"0 Auto.","pos":[96780,96787]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[96799,96888]},{"content":"1 Column height.","pos":[96893,96909]},{"content":"The layout of the form determines the height of the control.","pos":[96912,96972]},{"content":"The height and height calculation mode can be set separately.","pos":[97005,97066]},{"pos":[97072,97083],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[97113,97129],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[97187,97197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97199,97204]},{"content":"unit","pos":[97218,97222]},{"pos":[97230,97247],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[97306,97316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97318,97323]},{"content":"unit","pos":[97337,97341]},{"pos":[97349,97361],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[97363,97401]},{"pos":[97455,97465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97467,97472]},{"content":"unit","pos":[97486,97490]},{"pos":[97499,97506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[97508,97614]},{"content":"Mode.","pos":[97618,97623]},{"content":"Width calculation.","pos":[97636,97654]},{"content":"-1 Exact.","pos":[97840,97849]},{"content":"The exact width in pixels of the controls is used.","pos":[97858,97908]},{"content":"0 Auto.","pos":[97951,97958]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[97969,98057]},{"content":"1 Column width.","pos":[98062,98077]},{"content":"The layout of the form determines the width of the control.","pos":[98080,98139]},{"content":"The width and width calculation mode can be set separately.","pos":[98172,98231]},{"pos":[98236,98255],"content":"Class ReportControl","linkify":"Class ReportControl","nodes":[{"content":"Class ReportControl","pos":[0,19]}]},{"content":"The ReportControl class lets you create, read, update, and delete X++ code and metadata.","pos":[98298,98386]},{"pos":[98392,98399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[98401,98511]},{"pos":[98517,98525],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[98531,98538],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[98542,98548]},{"content":"Description","pos":[98603,98614]},{"content":"public int bottomMarginAndFrame()","pos":[98696,98729]},{"content":"public ReportFieldType controlType()","pos":[98773,98809]},{"content":"public int delete()","pos":[98850,98869]},{"content":"public str effectiveFont()","pos":[98927,98953]},{"content":"public str fontInfoPrinter()","pos":[99004,99032]},{"content":"public int fontInfoPrinterAscent()","pos":[99081,99115]},{"content":"public int fontInfoPrinterDescent()","pos":[99158,99193]},{"content":"public int fontInfoPrinterExtLead()","pos":[99235,99270]},{"content":"public int fontInfoPrinterHeight()","pos":[99312,99346]},{"content":"public int fontInfoPrinterIntLead()","pos":[99389,99424]},{"content":"public str fontInfoScreen()","pos":[99466,99493]},{"content":"public int fontInfoScreenAscent()","pos":[99543,99576]},{"content":"public int fontInfoScreenDescent()","pos":[99620,99654]},{"content":"public int fontInfoScreenExtLead()","pos":[99697,99731]},{"content":"public int fontInfoScreenHeight()","pos":[99774,99807]},{"content":"public int fontInfoScreenIntLead()","pos":[99851,99885]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[99928,99976],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[100005,100063],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[100082,100135]},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[100159,100203],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[100236,100290],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[100313,100343]},{"content":"public int numberOfLines(int height100mm)","pos":[100390,100431]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[100467,100501],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[100544,100578]},{"content":"public int previewXCompensation100mm(str string)","pos":[100621,100669]},{"content":"public int right100mm()","pos":[100698,100721]},{"content":"public int right100mmInclBorder()","pos":[100775,100808]},{"content":"public int rightMarginAndFrame()","pos":[100852,100884]},{"content":"public str setHeightGetText(int lines, str string)","pos":[100929,100979]},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[101006,101048],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[101083,101135],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[101160,101190]},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[101237,101283],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[101314,101370],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthOfString100mm(str string)","pos":[101391,101432]},{"content":"public void show()","pos":[101468,101486]},{"content":"public void hide()","pos":[101545,101563]},{"pos":[101625,101652],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[101698,101710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101716,101734],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[101783,101795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101801,101814],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[101846,101858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101864,101884],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[101923,101935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101941,101963],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[102004,102016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102022,102050],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[102097,102109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102115,102144],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[102192,102204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102210,102239],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[102287,102299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102305,102333],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[102380,102392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102398,102427],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[102475,102487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102493,102514],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[102554,102566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102572,102599],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[102645,102657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102663,102691],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[102738,102750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102756,102784],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[102831,102843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102849,102876],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[102922,102934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102940,102968],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[103015,103027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103033,103051],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[103110,103120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[103122,103138]},{"pos":[103147,103159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103165,103193],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[103262,103272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[103274,103290]},{"pos":[103299,103311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103317,103354],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[103420,103430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[103432,103438]},{"pos":[103447,103459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103465,103481],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[103536,103546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[103548,103562]},{"pos":[103571,103583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103589,103615],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[103680,103690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[103692,103706]},{"pos":[103715,103727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103733,103757],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[103800,103812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103818,103838],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[103892,103902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[103904,103915]},{"pos":[103924,103936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103942,103957],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[104002,104012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104014,104019]},{"pos":[104028,104040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104046,104064],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[104111,104121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[104123,104129]},{"pos":[104138,104150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104156,104188],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[104249,104259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[104261,104267]},{"pos":[104276,104288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104294,104311],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[104347,104359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104365,104392],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[104438,104450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104456,104482],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[104527,104539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104545,104568],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[104631,104641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[104643,104648]},{"content":"string","pos":[104662,104668]},{"pos":[104677,104689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104695,104710],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[104763,104773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[104775,104788]},{"pos":[104797,104809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104815,104840],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[104903,104913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[104915,104928]},{"pos":[104937,104949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104955,104979],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[105022,105034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105040,105057],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[105114,105124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[105126,105141]},{"pos":[105150,105162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105168,105195],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[105262,105272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[105274,105289]},{"pos":[105298,105310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105316,105341],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[105395,105405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[105407,105413]},{"pos":[105422,105434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105440,105451],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[105481,105492],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[105521,105544],"content":"Class ReportDateControl","linkify":"Class ReportDateControl","nodes":[{"content":"Class ReportDateControl","pos":[0,23]}]},{"content":"The ReportDateControl class lets you create, read, update, and delete X++ code and metadata.","pos":[105596,105688]},{"pos":[105694,105701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[105703,105813]},{"pos":[105819,105827],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[105833,105840],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[105844,105850]},{"content":"Description","pos":[105919,105930]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106278,106313],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106495,106531],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[106712,106761],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[106787,106885]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106929,106970],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[107004,107053]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107146,107181],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[107221,107283]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107363,107393],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[107438,107513]},{"content":"public int bottomMarginAndFrame()","pos":[107580,107613]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107797,107839],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[108014,108055],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[108231,108277],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[108448,108493],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108665,108706],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108882,108920],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[108957,109000]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[109099,109136],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[109174,109219]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[109316,109388],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[109391,109458]},{"content":"public ReportFieldType controlType()","pos":[109533,109569]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[109750,109784],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[109967,110010],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[110184,110220],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110401,110434],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110618,110654],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110835,110870],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111052,111091],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111269,111303],"source":"public int dateYear(\\[int value\\])"},{"content":"public int delete()","pos":[111486,111505]},{"content":"public str effectiveFont()","pos":[111703,111729]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[111920,111984],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[112137,112167],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[112212,112269]},{"content":"public str fontInfoPrinter()","pos":[112354,112382]},{"content":"public int fontInfoPrinterAscent()","pos":[112571,112605]},{"content":"public int fontInfoPrinterDescent()","pos":[112788,112823]},{"content":"public int fontInfoPrinterExtLead()","pos":[113005,113040]},{"content":"public int fontInfoPrinterHeight()","pos":[113222,113256]},{"content":"public int fontInfoPrinterIntLead()","pos":[113439,113474]},{"content":"public str fontInfoScreen()","pos":[113656,113683]},{"content":"public int fontInfoScreenAscent()","pos":[113873,113906]},{"content":"public int fontInfoScreenDescent()","pos":[114090,114124]},{"content":"public int fontInfoScreenExtLead()","pos":[114307,114341]},{"content":"public int fontInfoScreenHeight()","pos":[114524,114557]},{"content":"public int fontInfoScreenIntLead()","pos":[114741,114775]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114958,114992],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[115033,115090]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115175,115216],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[115250,115301]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[115392,115440],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[115609,115667],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115826,115862],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[115901,115963]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[116043,116096]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[116260,116295],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[116477,116517],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[116694,116733],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[116769,116808]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[116911,116951],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117128,117159],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[117203,117240]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117345,117380],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117562,117605],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117779,117818],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117996,118031],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118213,118252],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[118430,118475],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[118647,118697],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[118864,118928],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119081,119120],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119298,119338],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[119515,119563],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119732,119772],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[119949,119988],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[120166,120210],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[120383,120426],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[120600,120644],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[120817,120871],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[121034,121064]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121251,121291],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[121468,121507],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[121685,121729],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[121902,121945],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122119,122153],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[122336,122369],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[122553,122591],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[122770,122807],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[122987,123032],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[123204,123249],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[123421,123465],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[123496,123571]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[123638,123683],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[123855,123894],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[124072,124110],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[124289,124345],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[124506,124546],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[124723,124753],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[124798,124936]},{"content":"public int numberOfLines(int height100mm)","pos":[124941,124982]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[125158,125192],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[125375,125409]},{"content":"public int previewXCompensation100mm(str string)","pos":[125592,125640]},{"content":"public int right100mm()","pos":[125809,125832]},{"content":"public int right100mmInclBorder()","pos":[126026,126059]},{"content":"public int rightMarginAndFrame()","pos":[126243,126275]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[126460,126501],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[126677,126717],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[126894,126939],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[127111,127155],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[127328,127385],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[127545,127595]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[127762,127805],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[127979,128018],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[128054,128107]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[128196,128251],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[128413,128455],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[128630,128682],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[128847,128877]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129064,129103],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[129281,129319],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[129498,129541],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[129715,129757],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129932,129965],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[130149,130181],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[130366,130403],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[130583,130619],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[130800,130843],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[131017,131058],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[131234,131275],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[131451,131516],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[131668,131703],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[131885,131931],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[132102,132158],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132319,132354],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[132394,132456]},{"content":"public int widthOfString100mm(str string)","pos":[132536,132577]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[132753,132787],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[132970,133009],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[133187,133225],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[133262,133300]},{"content":"public void left(Real value, Units unit)","pos":[133404,133444]},{"content":"public void top(Real value, Units unit)","pos":[133621,133660]},{"content":"public void topMargin(Real value, Units unit)","pos":[133838,133883]},{"content":"public void leftMargin(Real value, Units unit)","pos":[134055,134101]},{"content":"public void labelWidth(Real value, Units unit)","pos":[134272,134318]},{"content":"public void width(Real value, Units unit)","pos":[134489,134530]},{"content":"Gets or sets the width of the control.","pos":[134564,134602]},{"content":"public void hide()","pos":[134706,134724]},{"content":"public void height(Real value, Units unit)","pos":[134923,134965]},{"content":"Gets or sets the height of the control.","pos":[134998,135037]},{"content":"public void show()","pos":[135140,135158]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[135357,135405]},{"content":"public void rightMargin(Real value, Units unit)","pos":[135574,135621]},{"pos":[135794,135810],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[135856,135866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135868,135873]},{"pos":[135882,135894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135900,135917],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[135964,135974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135976,135981]},{"pos":[135990,136002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[136008,136030],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[136032,136130]},{"pos":[136190,136200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136202,136207]},{"pos":[136216,136228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[136230,136309]},{"pos":[136316,136323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[136325,136362]},{"pos":[136368,136390],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[136392,136441]},{"pos":[136493,136503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136505,136510]},{"pos":[136519,136531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[136533,136577]},{"pos":[136584,136591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[136593,136661]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[136667,136737]},{"content":"The second byte contains a value for green.","pos":[136742,136785]},{"content":"The third byte contains a value for blue.","pos":[136790,136831]},{"content":"The high-order byte must be zero.","pos":[136836,136869]},{"content":"The maximum value for a single byte is 255.","pos":[136874,136917]},{"pos":[136923,136939],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[136941,137003]},{"pos":[137049,137059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137061,137066]},{"pos":[137075,137087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[137089,137150]},{"pos":[137156,137167],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[137169,137244]},{"pos":[137285,137295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137297,137302]},{"pos":[137311,137323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[137325,137375]},{"pos":[137382,137389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[137391,137463]},{"content":"0 Use the default font weight.","pos":[137469,137499]},{"content":"1 Thin.","pos":[137504,137511]},{"content":"2 Extra-light.","pos":[137516,137530]},{"content":"3 Light.","pos":[137535,137543]},{"content":"4 Normal.","pos":[137548,137557]},{"content":"5 Medium.","pos":[137562,137571]},{"content":"6 Semibold.","pos":[137576,137587]},{"content":"7 Bold.","pos":[137592,137599]},{"content":"8 Extra-bold.","pos":[137604,137617]},{"content":"9 Heavy.","pos":[137622,137630]},{"pos":[137636,137663],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[137709,137721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137727,137750],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[137803,137813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137815,137820]},{"pos":[137829,137841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137847,137869],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[137921,137931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137933,137938]},{"pos":[137947,137959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137965,137988],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[138045,138055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138057,138062]},{"pos":[138071,138083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138089,138113],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[138169,138179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138181,138186]},{"pos":[138195,138207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138213,138235],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[138287,138297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138299,138304]},{"pos":[138313,138325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138331,138350],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[138352,138395]},{"pos":[138444,138454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138456,138461]},{"pos":[138470,138482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[138484,138546]},{"pos":[138553,138560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[138562,138666]},{"content":"Value.","pos":[138670,138676]},{"content":"Description.","pos":[138679,138691]},{"content":"0","pos":[138738,138739]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138747,138760],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[138772,138773]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138781,138797],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[138806,138807]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138815,138830],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[138840,138842]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138849,138861],"source":"MAC\\_CHARSET"},{"content":"128","pos":[138874,138877]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138883,138900],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[138908,138911]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138917,138932],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[138942,138945]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138951,138966],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[138976,138979]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[138985,139005],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[139010,139013]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139019,139033],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[139044,139047]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139053,139069],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[139078,139081]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139087,139106],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[139112,139115]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139121,139136],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[139146,139149]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139155,139171],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[139180,139183]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139189,139208],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[139214,139217]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139223,139235],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[139247,139335]},{"content":"Value.","pos":[139339,139345]},{"content":"Description.","pos":[139348,139360]},{"content":"130","pos":[139395,139398]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139404,139418],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[139422,139508]},{"content":"Value.","pos":[139512,139518]},{"content":"Description.","pos":[139521,139533]},{"content":"177","pos":[139570,139573]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139579,139594],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[139599,139602]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139608,139623],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[139627,139704]},{"content":"Value.","pos":[139708,139714]},{"content":"Description.","pos":[139717,139729]},{"content":"222","pos":[139762,139765]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[139771,139784],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[139788,139872]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[139873,140079],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[140085,140103],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[140105,140150]},{"pos":[140198,140208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[140210,140215]},{"pos":[140224,140236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[140238,140281]},{"pos":[140288,140295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[140297,140358]},{"content":"Value.","pos":[140362,140368]},{"content":"Style.","pos":[140371,140377]},{"content":"0","pos":[140434,140435]},{"content":"Default.","pos":[140443,140451]},{"content":"1","pos":[140470,140471]},{"content":"The Windows palette.","pos":[140479,140499]},{"content":"2","pos":[140506,140507]},{"content":"The true-color scheme.","pos":[140515,140537]},{"pos":[140545,140568],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[140570,140637]},{"pos":[140720,140730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[140732,140737]},{"pos":[140746,140758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[140760,140832]},{"pos":[140839,140846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[140848,140929]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[140930,141023]},{"pos":[141029,141047],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[141096,141108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141114,141129],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[141174,141184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141186,141191]},{"pos":[141200,141212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141218,141234],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[141288,141298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141300,141305]},{"pos":[141314,141326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141332,141349],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[141396,141406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141408,141413]},{"pos":[141422,141434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141440,141454],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[141498,141508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141510,141515]},{"pos":[141524,141536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141542,141559],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[141606,141616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141618,141623]},{"pos":[141632,141644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141650,141666],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[141712,141722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141724,141729]},{"pos":[141738,141750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141756,141776],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[141826,141836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141838,141843]},{"pos":[141852,141864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141870,141885],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[141930,141940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141942,141947]},{"pos":[141956,141968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141974,141987],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[142019,142031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142037,142057],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[142096,142108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142114,142137],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[142212,142222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142224,142229]},{"pos":[142238,142250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142256,142267],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[142269,142326]},{"pos":[142367,142377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142379,142384]},{"pos":[142393,142405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[142407,142462]},{"pos":[142468,142490],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[142531,142543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142549,142577],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[142624,142636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142642,142671],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[142719,142731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142737,142766],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[142814,142826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142832,142860],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[142907,142919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142925,142954],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[143002,143014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143020,143041],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[143081,143093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143099,143126],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[143172,143184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143190,143218],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[143265,143277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143283,143311],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[143358,143370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143376,143403],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[143449,143461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143467,143495],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[143542,143554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143560,143575],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[143577,143634]},{"pos":[143679,143689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143691,143696]},{"pos":[143705,143717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[143719,143752]},{"pos":[143758,143780],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[143782,143833]},{"pos":[143885,143895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143897,143902]},{"pos":[143911,143923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[143925,143969]},{"pos":[143976,143983],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[143985,144053]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[144059,144129]},{"content":"The second byte contains a value for green.","pos":[144134,144177]},{"content":"The third byte contains a value for blue.","pos":[144182,144223]},{"content":"The high-order byte must be zero.","pos":[144228,144261]},{"content":"The maximum value for a single byte is 255.","pos":[144266,144309]},{"pos":[144315,144333],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[144392,144402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[144404,144420]},{"pos":[144429,144441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144447,144475],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[144544,144554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[144556,144572]},{"pos":[144581,144593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144599,144616],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[144618,144680]},{"pos":[144727,144737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144739,144744]},{"pos":[144753,144765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[144767,144788]},{"pos":[144795,144802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[144804,144858]},{"content":"Mode.","pos":[144862,144867]},{"content":"Height Calculation.","pos":[144879,144898]},{"content":"Exact.","pos":[145084,145090]},{"content":"The exact height in pixels of the controls is used.","pos":[145101,145152]},{"content":"Auto.","pos":[145195,145200]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[145212,145301]},{"content":"Column height.","pos":[145306,145320]},{"content":"The layout of the form determines the height of the control.","pos":[145323,145383]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[145416,145501]},{"pos":[145507,145544],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[145610,145620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[145622,145628]},{"pos":[145637,145649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145655,145671],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[145717,145727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145729,145734]},{"pos":[145743,145755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145761,145778],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[145829,145839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145841,145846]},{"pos":[145855,145867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145873,145891],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[145893,145932]},{"pos":[145982,145992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145994,145999]},{"pos":[146008,146020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[146022,146043]},{"pos":[146050,146057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[146059,146149]},{"pos":[146155,146168],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[146219,146229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146231,146236]},{"pos":[146245,146257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146263,146275],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[146277,146314]},{"pos":[146356,146366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146368,146373]},{"pos":[146382,146394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[146396,146434]},{"pos":[146441,146448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[146450,146582]},{"pos":[146588,146604],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[146650,146660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146662,146667]},{"pos":[146676,146688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146694,146718],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[146772,146782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146784,146789]},{"pos":[146798,146810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146816,146836],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[146886,146896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146898,146903]},{"pos":[146912,146924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146930,146946],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[146992,147002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147004,147009]},{"pos":[147018,147030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147036,147056],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[147106,147116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147118,147123]},{"pos":[147132,147144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147150,147168],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[147224,147234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147236,147241]},{"pos":[147250,147262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147268,147289],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[147350,147360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147362,147367]},{"pos":[147376,147388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147394,147419],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[147494,147504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147506,147511]},{"pos":[147520,147532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147538,147558],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[147608,147618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147620,147625]},{"pos":[147634,147646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147652,147673],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[147724,147734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147736,147741]},{"pos":[147750,147762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147768,147789],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[147848,147858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147860,147865]},{"pos":[147874,147886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147892,147913],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[147964,147974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147976,147981]},{"pos":[147990,148002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148008,148028],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[148078,148088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148090,148095]},{"pos":[148104,148116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148122,148143],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[148198,148208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148210,148215]},{"pos":[148224,148236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148242,148264],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[148318,148328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148330,148335]},{"pos":[148344,148356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148362,148378],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[148433,148443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[148445,148459]},{"pos":[148468,148480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148486,148512],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[148577,148587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[148589,148603]},{"pos":[148612,148624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148630,148654],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[148697,148709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148715,148736],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[148787,148797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148799,148804]},{"pos":[148813,148825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148831,148851],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[148901,148911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148913,148918]},{"pos":[148927,148939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148945,148966],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[149021,149031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149033,149038]},{"pos":[149047,149059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149065,149087],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[149141,149151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149153,149158]},{"pos":[149167,149179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149185,149200],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[149245,149255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149257,149262]},{"pos":[149271,149283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149289,149303],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[149347,149357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149359,149364]},{"pos":[149373,149385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149391,149406],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[149455,149465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149467,149472]},{"pos":[149481,149493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149499,149515],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[149563,149573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149575,149580]},{"pos":[149589,149601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149607,149623],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[149679,149689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149691,149696]},{"pos":[149705,149717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149723,149739],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[149795,149805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149807,149812]},{"pos":[149821,149833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149839,149854],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[149856,149931]},{"pos":[149986,149996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149998,150003]},{"pos":[150012,150024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[150026,150075]},{"pos":[150081,150097],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[150153,150163],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150165,150170]},{"pos":[150179,150191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150197,150217],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[150267,150277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150279,150284]},{"pos":[150293,150305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150311,150330],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[150379,150389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150391,150396]},{"pos":[150405,150417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150423,150442],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[150509,150519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150521,150526]},{"pos":[150535,150547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150553,150574],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[150625,150635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150637,150642]},{"pos":[150651,150663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150669,150680],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[150682,150820]},{"pos":[150861,150871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150873,150878]},{"pos":[150887,150899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[150901,150965]},{"pos":[150972,150979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[150981,151075]},{"content":"Begins with a letter.","pos":[151081,151102]},{"content":"Doesn't exceed 250 characters.","pos":[151107,151137]},{"content":"Can include numbers and underscore characters.","pos":[151142,151188]},{"content":"Cannot include punctuation or spaces.","pos":[151193,151230]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[151235,151353]},{"pos":[151359,151379],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[151433,151443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[151445,151456]},{"pos":[151465,151477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151483,151498],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[151543,151553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[151555,151560]},{"pos":[151569,151581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151587,151605],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[151652,151662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[151664,151670]},{"pos":[151679,151691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151697,151729],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[151790,151800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[151802,151808]},{"pos":[151817,151829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151835,151852],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[151888,151900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151906,151933],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[151979,151991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151997,152023],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[152068,152080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152086,152108],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[152160,152170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152172,152177]},{"pos":[152186,152198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152204,152225],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[152276,152286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152288,152293]},{"pos":[152302,152314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152320,152342],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[152398,152408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152410,152415]},{"pos":[152424,152436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152442,152465],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[152520,152530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152532,152537]},{"pos":[152546,152558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152564,152582],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[152650,152660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152662,152667]},{"pos":[152676,152688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152694,152717],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[152780,152790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[152792,152797]},{"content":"string","pos":[152811,152817]},{"pos":[152826,152838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152844,152860],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[152914,152924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152926,152931]},{"pos":[152940,152952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152958,152970],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[152972,153025]},{"pos":[153075,153085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153087,153092]},{"pos":[153101,153113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[153115,153176]},{"pos":[153182,153198],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[153264,153274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153276,153281]},{"pos":[153290,153302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153308,153323],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[153376,153386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[153388,153401]},{"pos":[153410,153422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153428,153453],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[153516,153526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[153528,153541]},{"pos":[153550,153562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153568,153592],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[153635,153647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153653,153673],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[153723,153733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153735,153740]},{"pos":[153749,153761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153767,153786],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[153835,153845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153847,153852]},{"pos":[153861,153873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153879,153899],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[153953,153963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153965,153970]},{"pos":[153979,153991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153997,154018],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[154071,154081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154083,154088]},{"pos":[154097,154109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154115,154129],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[154173,154183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154185,154190]},{"pos":[154199,154211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154217,154230],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[154273,154283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154285,154290]},{"pos":[154299,154311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154317,154331],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[154379,154389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154391,154396]},{"pos":[154405,154417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154423,154438],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[154485,154495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154497,154502]},{"pos":[154511,154523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154529,154545],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[154599,154609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154611,154616]},{"pos":[154625,154637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154643,154657],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[154709,154719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154721,154726]},{"pos":[154735,154747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154753,154775],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[154827,154837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154839,154844]},{"pos":[154853,154865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154871,154893],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[154969,154979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154981,154986]},{"pos":[154995,155007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155013,155029],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[155075,155085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155087,155092]},{"pos":[155101,155113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155119,155136],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[155193,155203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[155205,155220]},{"pos":[155229,155241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155247,155274],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[155341,155351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[155353,155368]},{"pos":[155377,155389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155395,155411],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[155413,155475]},{"pos":[155521,155531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155533,155538]},{"pos":[155547,155559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[155561,155622]},{"pos":[155629,155636],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[155638,155691]},{"content":"Mode.","pos":[155695,155700]},{"content":"Width Calculation.","pos":[155711,155729]},{"content":"Exact.","pos":[155913,155919]},{"content":"The exact width in pixels of the controls is used.","pos":[155929,155979]},{"content":"Auto.","pos":[156022,156027]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[156038,156126]},{"content":"Column width.","pos":[156131,156144]},{"content":"The layout of the form determines the width of the control.","pos":[156147,156206]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[156239,156322]},{"pos":[156328,156353],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[156407,156417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[156419,156425]},{"pos":[156434,156446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156452,156467],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[156512,156522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156524,156529]},{"pos":[156538,156550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156556,156572],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[156622,156632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156634,156639]},{"pos":[156648,156660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156666,156683],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[156685,156723]},{"pos":[156772,156782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156784,156789]},{"pos":[156798,156810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[156812,156847]},{"pos":[156854,156861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[156863,156936]},{"pos":[156942,156953],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[157006,157016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157018,157023]},{"content":"unit","pos":[157037,157041]},{"pos":[157049,157059],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[157111,157121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157123,157128]},{"content":"unit","pos":[157142,157146]},{"pos":[157154,157170],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[157228,157238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157240,157245]},{"content":"unit","pos":[157259,157263]},{"pos":[157271,157288],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[157347,157357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157359,157364]},{"content":"unit","pos":[157378,157382]},{"pos":[157390,157407],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[157466,157476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157478,157483]},{"content":"unit","pos":[157497,157501]},{"pos":[157509,157521],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[157523,157561]},{"pos":[157615,157625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157627,157632]},{"content":"unit","pos":[157646,157650]},{"pos":[157659,157666],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[157668,157774]},{"content":"Mode.","pos":[157778,157783]},{"content":"Width calculation.","pos":[157796,157814]},{"content":"-1 Exact.","pos":[158000,158009]},{"content":"The exact width in pixels of the controls is used.","pos":[158018,158068]},{"content":"0 Auto.","pos":[158111,158118]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[158129,158217]},{"content":"1 Column width.","pos":[158222,158237]},{"content":"The layout of the form determines the width of the control.","pos":[158240,158299]},{"content":"The width and width calculation mode can be set separately.","pos":[158332,158391]},{"pos":[158397,158408],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[158438,158451],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[158453,158492]},{"pos":[158547,158557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158559,158564]},{"content":"unit","pos":[158578,158582]},{"pos":[158591,158598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[158600,158707]},{"content":"Mode.","pos":[158711,158716]},{"content":"Height calculation.","pos":[158730,158749]},{"content":"-1 Exact.","pos":[158937,158946]},{"content":"The exact height in pixels of the controls is used.","pos":[158956,159007]},{"content":"0 Auto.","pos":[159050,159057]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[159069,159158]},{"content":"1 Column height.","pos":[159163,159179]},{"content":"The layout of the form determines the height of the control.","pos":[159182,159242]},{"content":"The height and height calculation mode can be set separately.","pos":[159275,159336]},{"pos":[159342,159353],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[159383,159402],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[159463,159473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159475,159480]},{"content":"unit","pos":[159494,159498]},{"pos":[159506,159524],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[159584,159594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159596,159601]},{"content":"unit","pos":[159615,159619]},{"pos":[159626,159653],"content":"Class ReportDateTimeControl","linkify":"Class ReportDateTimeControl","nodes":[{"content":"Class ReportDateTimeControl","pos":[0,27]}]},{"pos":[159713,159720],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[159726,159734],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[159740,159747],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[159751,159757]},{"content":"Description","pos":[159826,159837]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160187,160222],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160405,160441],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[160623,160672],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[160698,160796]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160841,160882],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[160916,160965]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161059,161094],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[161134,161196]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161277,161307],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[161352,161427]},{"content":"public int bottomMarginAndFrame()","pos":[161495,161528]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161713,161755],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[161931,161972],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[162149,162195],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[162367,162412],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162585,162626],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162803,162841],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[162878,162921]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163021,163058],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[163096,163141]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[163239,163311],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[163314,163381]},{"content":"public ReportFieldType controlType()","pos":[163457,163493]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[163675,163709],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[163893,163936],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[164111,164147],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164329,164362],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164547,164583],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164765,164800],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164983,165022],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[165201,165235],"source":"public int dateYear(\\[int value\\])"},{"content":"public int delete()","pos":[165419,165438]},{"content":"public str effectiveFont()","pos":[165637,165663]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[165855,165919],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[166073,166103],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[166148,166205]},{"content":"public str fontInfoPrinter()","pos":[166291,166319]},{"content":"public int fontInfoPrinterAscent()","pos":[166509,166543]},{"content":"public int fontInfoPrinterDescent()","pos":[166727,166762]},{"content":"public int fontInfoPrinterExtLead()","pos":[166945,166980]},{"content":"public int fontInfoPrinterHeight()","pos":[167163,167197]},{"content":"public int fontInfoPrinterIntLead()","pos":[167381,167416]},{"content":"public str fontInfoScreen()","pos":[167599,167626]},{"content":"public int fontInfoScreenAscent()","pos":[167817,167850]},{"content":"public int fontInfoScreenDescent()","pos":[168035,168069]},{"content":"public int fontInfoScreenExtLead()","pos":[168253,168287]},{"content":"public int fontInfoScreenHeight()","pos":[168471,168504]},{"content":"public int fontInfoScreenIntLead()","pos":[168689,168723]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168907,168941],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[168982,169039]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169125,169166],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[169200,169251]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[169343,169391],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[169561,169619],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169779,169815],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[169854,169916]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[169997,170050]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[170215,170250],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[170433,170473],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[170651,170690],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[170726,170765]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[170869,170909],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[171087,171118],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[171162,171199]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171305,171340],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171523,171566],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[171741,171780],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[171959,171994],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172177,172216],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[172395,172440],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[172613,172663],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[172831,172895],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173049,173088],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173267,173307],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[173485,173533],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173703,173743],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[173921,173960],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[174139,174183],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[174357,174400],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[174575,174619],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[174793,174847],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[175011,175041]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175229,175269],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[175447,175486],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[175665,175709],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[175883,175926],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176101,176135],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[176319,176352],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[176537,176575],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[176755,176792],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[176973,177018],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[177191,177236],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[177409,177453],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[177484,177559]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[177627,177672],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[177845,177884],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178063,178101],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[178281,178337],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178499,178539],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178717,178747],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[178792,178931]},{"content":"public int numberOfLines(int height100mm)","pos":[178936,178977]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[179154,179188],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[179372,179406]},{"content":"public int previewXCompensation100mm(str string)","pos":[179590,179638]},{"content":"public int right100mm()","pos":[179808,179831]},{"content":"public int right100mmInclBorder()","pos":[180026,180059]},{"content":"public int rightMarginAndFrame()","pos":[180244,180276]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180462,180503],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[180680,180720],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[180898,180943],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[181116,181160],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[181334,181391],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[181552,181602]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[181770,181813],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[181988,182027],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[182063,182116]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[182206,182261],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[182424,182466],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[182642,182694],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[182860,182890]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183078,183117],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[183296,183334],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[183514,183557],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[183732,183774],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183950,183983],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[184168,184200],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[184386,184423],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[184604,184640],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[184822,184865],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[185040,185081],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[185258,185299],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[185476,185541],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[185694,185729],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[185912,185958],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[186130,186186],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186348,186383],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[186423,186485]},{"content":"public int widthOfString100mm(str string)","pos":[186566,186607]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186784,186818],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[187002,187041],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[187220,187258],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[187295,187333]},{"content":"public void height(Real value, Units unit)","pos":[187438,187480]},{"content":"Gets or sets the height of the control.","pos":[187513,187552]},{"content":"public void left(Real value, Units unit)","pos":[187656,187696]},{"content":"public void topMargin(Real value, Units unit)","pos":[187874,187919]},{"content":"public void hide()","pos":[188092,188110]},{"content":"public void top(Real value, Units unit)","pos":[188310,188349]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[188528,188576]},{"content":"public void labelWidth(Real value, Units unit)","pos":[188746,188792]},{"content":"public void show()","pos":[188964,188982]},{"content":"public void rightMargin(Real value, Units unit)","pos":[189182,189229]},{"content":"public void width(Real value, Units unit)","pos":[189400,189441]},{"content":"Gets or sets the width of the control.","pos":[189475,189513]},{"content":"public void leftMargin(Real value, Units unit)","pos":[189618,189664]},{"pos":[189839,189855],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[189901,189911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189913,189918]},{"pos":[189927,189939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189945,189962],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[190009,190019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190021,190026]},{"pos":[190035,190047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190053,190075],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[190077,190175]},{"pos":[190235,190245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190247,190252]},{"pos":[190261,190273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[190275,190354]},{"pos":[190361,190368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[190370,190407]},{"pos":[190413,190435],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[190437,190486]},{"pos":[190538,190548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190550,190555]},{"pos":[190564,190576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[190578,190622]},{"pos":[190629,190636],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[190638,190706]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[190712,190782]},{"content":"The second byte contains a value for green.","pos":[190787,190830]},{"content":"The third byte contains a value for blue.","pos":[190835,190876]},{"content":"The high-order byte must be zero.","pos":[190881,190914]},{"content":"The maximum value for a single byte is 255.","pos":[190919,190962]},{"pos":[190968,190984],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[190986,191048]},{"pos":[191094,191104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191106,191111]},{"pos":[191120,191132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[191134,191195]},{"pos":[191201,191212],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[191214,191289]},{"pos":[191330,191340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191342,191347]},{"pos":[191356,191368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[191370,191420]},{"pos":[191427,191434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[191436,191508]},{"content":"0 Use the default font weight.","pos":[191514,191544]},{"content":"1 Thin.","pos":[191549,191556]},{"content":"2 Extra-light.","pos":[191561,191575]},{"content":"3 Light.","pos":[191580,191588]},{"content":"4 Normal.","pos":[191593,191602]},{"content":"5 Medium.","pos":[191607,191616]},{"content":"6 Semibold.","pos":[191621,191632]},{"content":"7 Bold.","pos":[191637,191644]},{"content":"8 Extra-bold.","pos":[191649,191662]},{"content":"9 Heavy.","pos":[191667,191675]},{"pos":[191681,191708],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[191754,191766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191772,191795],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[191848,191858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191860,191865]},{"pos":[191874,191886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191892,191914],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[191966,191976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191978,191983]},{"pos":[191992,192004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192010,192033],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[192090,192100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192102,192107]},{"pos":[192116,192128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192134,192158],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[192214,192224],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192226,192231]},{"pos":[192240,192252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192258,192280],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[192332,192342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192344,192349]},{"pos":[192358,192370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192376,192395],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[192397,192440]},{"pos":[192489,192499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192501,192506]},{"pos":[192515,192527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[192529,192591]},{"pos":[192598,192605],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[192607,192711]},{"content":"Value.","pos":[192715,192721]},{"content":"Description.","pos":[192724,192736]},{"content":"0","pos":[192783,192784]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192792,192805],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[192817,192818]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192826,192842],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[192851,192852]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192860,192875],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[192885,192887]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192894,192906],"source":"MAC\\_CHARSET"},{"content":"128","pos":[192919,192922]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192928,192945],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[192953,192956]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192962,192977],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[192987,192990]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192996,193011],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[193021,193024]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193030,193050],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[193055,193058]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193064,193078],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[193089,193092]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193098,193114],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[193123,193126]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193132,193151],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[193157,193160]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193166,193181],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[193191,193194]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193200,193216],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[193225,193228]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193234,193253],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[193259,193262]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193268,193280],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[193292,193380]},{"content":"Value.","pos":[193384,193390]},{"content":"Description.","pos":[193393,193405]},{"content":"130","pos":[193440,193443]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193449,193463],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[193467,193562]},{"content":"Value.","pos":[193566,193572]},{"content":"Description.","pos":[193575,193587]},{"content":"177","pos":[193624,193627]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193633,193648],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[193653,193656]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193662,193677],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[193681,193767]},{"content":"Value.","pos":[193771,193777]},{"content":"Description.","pos":[193780,193792]},{"content":"222","pos":[193825,193828]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193834,193847],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[193851,193935]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[193936,194142],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[194148,194166],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[194168,194213]},{"pos":[194261,194271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194273,194278]},{"pos":[194287,194299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[194301,194344]},{"pos":[194351,194358],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[194360,194421]},{"content":"Value.","pos":[194425,194431]},{"content":"Style.","pos":[194434,194440]},{"content":"0","pos":[194511,194512]},{"content":"Default.","pos":[194520,194528]},{"content":"1","pos":[194554,194555]},{"content":"The MicrosoftWindows palette.","pos":[194563,194592]},{"content":"2","pos":[194597,194598]},{"content":"The true-color scheme.","pos":[194606,194628]},{"pos":[194643,194666],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[194668,194735]},{"pos":[194818,194828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194830,194835]},{"pos":[194844,194856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[194858,194930]},{"pos":[194937,194944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[194946,195027]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[195028,195121]},{"pos":[195127,195145],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[195194,195206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195212,195227],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[195272,195282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195284,195289]},{"pos":[195298,195310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195316,195332],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[195386,195396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195398,195403]},{"pos":[195412,195424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195430,195447],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[195494,195504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195506,195511]},{"pos":[195520,195532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195538,195552],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[195596,195606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195608,195613]},{"pos":[195622,195634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195640,195657],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[195704,195714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195716,195721]},{"pos":[195730,195742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195748,195764],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[195810,195820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195822,195827]},{"pos":[195836,195848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195854,195874],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[195924,195934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195936,195941]},{"pos":[195950,195962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195968,195983],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[196028,196038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196040,196045]},{"pos":[196054,196066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196072,196085],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[196117,196129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196135,196155],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[196194,196206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196212,196235],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[196310,196320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196322,196327]},{"pos":[196336,196348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196354,196365],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[196367,196424]},{"pos":[196465,196475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196477,196482]},{"pos":[196491,196503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[196505,196560]},{"pos":[196566,196588],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[196629,196641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196647,196675],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[196722,196734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196740,196769],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[196817,196829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196835,196864],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[196912,196924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196930,196958],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[197005,197017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197023,197052],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[197100,197112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197118,197139],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[197179,197191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197197,197224],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[197270,197282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197288,197316],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[197363,197375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197381,197409],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[197456,197468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197474,197501],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[197547,197559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197565,197593],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[197640,197652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197658,197673],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[197675,197732]},{"pos":[197777,197787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197789,197794]},{"pos":[197803,197815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[197817,197850]},{"pos":[197856,197878],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[197880,197931]},{"pos":[197983,197993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197995,198000]},{"pos":[198009,198021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[198023,198067]},{"pos":[198074,198081],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[198083,198151]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[198157,198227]},{"content":"The second byte contains a value for green.","pos":[198232,198275]},{"content":"The third byte contains a value for blue.","pos":[198280,198321]},{"content":"The high-order byte must be zero.","pos":[198326,198359]},{"content":"The maximum value for a single byte is 255.","pos":[198364,198407]},{"pos":[198413,198431],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[198490,198500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[198502,198518]},{"pos":[198527,198539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198545,198573],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[198642,198652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[198654,198670]},{"pos":[198679,198691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198697,198714],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[198716,198778]},{"pos":[198825,198835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198837,198842]},{"pos":[198851,198863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[198865,198886]},{"pos":[198893,198900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[198902,198956]},{"content":"Mode.","pos":[198960,198965]},{"content":"Height Calculation.","pos":[198977,198996]},{"content":"Exact.","pos":[199182,199188]},{"content":"The exact height in pixels of the controls is used.","pos":[199199,199250]},{"content":"Auto.","pos":[199293,199298]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[199310,199399]},{"content":"Column height.","pos":[199404,199418]},{"content":"The layout of the form determines the height of the control.","pos":[199421,199481]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[199514,199599]},{"pos":[199605,199642],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[199708,199718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[199720,199726]},{"pos":[199735,199747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199753,199769],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[199815,199825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199827,199832]},{"pos":[199841,199853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199859,199876],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[199927,199937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199939,199944]},{"pos":[199953,199965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199971,199989],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[199991,200030]},{"pos":[200080,200090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200092,200097]},{"pos":[200106,200118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[200120,200141]},{"pos":[200148,200155],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[200157,200247]},{"pos":[200253,200266],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[200317,200327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200329,200334]},{"pos":[200343,200355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200361,200373],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[200375,200412]},{"pos":[200454,200464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200466,200471]},{"pos":[200480,200492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[200494,200532]},{"pos":[200539,200546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[200548,200680]},{"pos":[200686,200702],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[200748,200758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200760,200765]},{"pos":[200774,200786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200792,200816],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[200870,200880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200882,200887]},{"pos":[200896,200908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200914,200934],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[200984,200994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200996,201001]},{"pos":[201010,201022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201028,201044],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[201090,201100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201102,201107]},{"pos":[201116,201128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201134,201154],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[201204,201214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201216,201221]},{"pos":[201230,201242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201248,201266],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[201322,201332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201334,201339]},{"pos":[201348,201360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201366,201387],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[201448,201458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201460,201465]},{"pos":[201474,201486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201492,201517],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[201592,201602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201604,201609]},{"pos":[201618,201630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201636,201656],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[201706,201716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201718,201723]},{"pos":[201732,201744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201750,201771],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[201822,201832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201834,201839]},{"pos":[201848,201860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201866,201887],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[201946,201956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201958,201963]},{"pos":[201972,201984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201990,202011],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[202062,202072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202074,202079]},{"pos":[202088,202100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202106,202126],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[202176,202186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202188,202193]},{"pos":[202202,202214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202220,202241],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[202296,202306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202308,202313]},{"pos":[202322,202334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202340,202362],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[202416,202426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202428,202433]},{"pos":[202442,202454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202460,202476],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[202531,202541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[202543,202557]},{"pos":[202566,202578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202584,202610],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[202675,202685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[202687,202701]},{"pos":[202710,202722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202728,202752],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[202795,202807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202813,202834],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[202885,202895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202897,202902]},{"pos":[202911,202923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202929,202949],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[202999,203009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203011,203016]},{"pos":[203025,203037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203043,203064],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[203119,203129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203131,203136]},{"pos":[203145,203157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203163,203185],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[203239,203249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203251,203256]},{"pos":[203265,203277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203283,203298],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[203343,203353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203355,203360]},{"pos":[203369,203381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203387,203401],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[203445,203455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203457,203462]},{"pos":[203471,203483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203489,203504],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[203553,203563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203565,203570]},{"pos":[203579,203591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203597,203613],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[203661,203671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203673,203678]},{"pos":[203687,203699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203705,203721],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[203777,203787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203789,203794]},{"pos":[203803,203815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203821,203837],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[203893,203903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203905,203910]},{"pos":[203919,203931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203937,203952],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[203954,204029]},{"pos":[204084,204094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204096,204101]},{"pos":[204110,204122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[204124,204173]},{"pos":[204179,204195],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[204251,204261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204263,204268]},{"pos":[204277,204289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204295,204315],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[204365,204375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204377,204382]},{"pos":[204391,204403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204409,204428],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[204477,204487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204489,204494]},{"pos":[204503,204515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204521,204540],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[204607,204617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204619,204624]},{"pos":[204633,204645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204651,204672],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[204723,204733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204735,204740]},{"pos":[204749,204761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204767,204778],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[204780,204919]},{"pos":[204960,204970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204972,204977]},{"pos":[204986,204998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[205000,205068]},{"pos":[205075,205082],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[205084,205178]},{"content":"Begins with a letter.","pos":[205184,205205]},{"content":"Doesn't exceed 250 characters.","pos":[205210,205240]},{"content":"Can include numbers and underscore characters.","pos":[205245,205291]},{"content":"Cannot include punctuation or spaces.","pos":[205296,205333]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[205338,205456]},{"pos":[205462,205482],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[205536,205546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[205548,205559]},{"pos":[205568,205580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205586,205601],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[205646,205656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205658,205663]},{"pos":[205672,205684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205690,205708],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[205755,205765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[205767,205773]},{"pos":[205782,205794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205800,205832],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[205893,205903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[205905,205911]},{"pos":[205920,205932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205938,205955],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[205991,206003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206009,206036],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[206082,206094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206100,206126],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[206171,206183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206189,206211],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[206263,206273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206275,206280]},{"pos":[206289,206301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206307,206328],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[206379,206389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206391,206396]},{"pos":[206405,206417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206423,206445],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[206501,206511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206513,206518]},{"pos":[206527,206539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206545,206568],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[206623,206633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206635,206640]},{"pos":[206649,206661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206667,206685],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[206753,206763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206765,206770]},{"pos":[206779,206791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206797,206820],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[206883,206893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[206895,206900]},{"content":"string","pos":[206914,206920]},{"pos":[206929,206941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206947,206963],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[207017,207027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207029,207034]},{"pos":[207043,207055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207061,207073],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[207075,207128]},{"pos":[207178,207188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207190,207195]},{"pos":[207204,207216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[207218,207279]},{"pos":[207285,207301],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[207367,207377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207379,207384]},{"pos":[207393,207405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207411,207426],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[207479,207489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[207491,207504]},{"pos":[207513,207525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207531,207556],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[207619,207629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[207631,207644]},{"pos":[207653,207665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207671,207695],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[207738,207750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207756,207776],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[207826,207836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207838,207843]},{"pos":[207852,207864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207870,207889],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[207938,207948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207950,207955]},{"pos":[207964,207976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207982,208002],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[208056,208066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208068,208073]},{"pos":[208082,208094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208100,208121],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[208174,208184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208186,208191]},{"pos":[208200,208212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208218,208232],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[208276,208286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208288,208293]},{"pos":[208302,208314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208320,208333],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[208376,208386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208388,208393]},{"pos":[208402,208414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208420,208434],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[208482,208492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208494,208499]},{"pos":[208508,208520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208526,208541],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[208588,208598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208600,208605]},{"pos":[208614,208626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208632,208648],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[208702,208712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208714,208719]},{"pos":[208728,208740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208746,208760],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[208812,208822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208824,208829]},{"pos":[208838,208850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208856,208878],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[208930,208940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208942,208947]},{"pos":[208956,208968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208974,208996],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[209072,209082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209084,209089]},{"pos":[209098,209110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209116,209132],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[209178,209188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209190,209195]},{"pos":[209204,209216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209222,209239],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[209296,209306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[209308,209323]},{"pos":[209332,209344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209350,209377],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[209444,209454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[209456,209471]},{"pos":[209480,209492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209498,209514],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[209516,209578]},{"pos":[209624,209634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209636,209641]},{"pos":[209650,209662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[209664,209725]},{"pos":[209732,209739],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[209741,209794]},{"content":"Mode.","pos":[209798,209803]},{"content":"Width Calculation.","pos":[209814,209832]},{"content":"Exact.","pos":[210016,210022]},{"content":"The exact width in pixels of the controls is used.","pos":[210032,210082]},{"content":"Auto.","pos":[210125,210130]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[210141,210229]},{"content":"Column width.","pos":[210234,210247]},{"content":"The layout of the form determines the width of the control.","pos":[210250,210309]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[210342,210425]},{"pos":[210431,210456],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[210510,210520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[210522,210528]},{"pos":[210537,210549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210555,210570],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[210615,210625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210627,210632]},{"pos":[210641,210653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210659,210675],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[210725,210735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210737,210742]},{"pos":[210751,210763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210769,210786],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[210788,210826]},{"pos":[210875,210885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210887,210892]},{"pos":[210901,210913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[210915,210950]},{"pos":[210957,210964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[210966,211039]},{"pos":[211045,211058],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[211060,211099]},{"pos":[211154,211164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211166,211171]},{"content":"unit","pos":[211185,211189]},{"pos":[211198,211205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[211207,211314]},{"content":"Mode.","pos":[211318,211323]},{"content":"Height calculation.","pos":[211337,211356]},{"content":"-1 Exact.","pos":[211544,211553]},{"content":"The exact height in pixels of the controls is used.","pos":[211563,211614]},{"content":"0 Auto.","pos":[211657,211664]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[211676,211765]},{"content":"1 Column height.","pos":[211770,211786]},{"content":"The layout of the form determines the height of the control.","pos":[211789,211849]},{"content":"The height and height calculation mode can be set separately.","pos":[211882,211943]},{"pos":[211949,211960],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[212013,212023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212025,212030]},{"content":"unit","pos":[212044,212048]},{"pos":[212056,212072],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[212130,212140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212142,212147]},{"content":"unit","pos":[212161,212165]},{"pos":[212173,212184],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[212214,212224],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[212276,212286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212288,212293]},{"content":"unit","pos":[212307,212311]},{"pos":[212319,212338],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[212399,212409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212411,212416]},{"content":"unit","pos":[212430,212434]},{"pos":[212442,212459],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[212518,212528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212530,212535]},{"content":"unit","pos":[212549,212553]},{"pos":[212561,212572],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[212602,212620],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[212680,212690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212692,212697]},{"content":"unit","pos":[212711,212715]},{"pos":[212723,212735],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[212737,212775]},{"pos":[212829,212839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212841,212846]},{"content":"unit","pos":[212860,212864]},{"pos":[212873,212880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[212882,212988]},{"content":"Mode.","pos":[212992,212997]},{"content":"Width calculation.","pos":[213010,213028]},{"content":"-1 Exact.","pos":[213214,213223]},{"content":"The exact width in pixels of the controls is used.","pos":[213232,213282]},{"content":"0 Auto.","pos":[213325,213332]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[213343,213431]},{"content":"1 Column width.","pos":[213436,213451]},{"content":"The layout of the form determines the width of the control.","pos":[213454,213513]},{"content":"The width and width calculation mode can be set separately.","pos":[213546,213605]},{"pos":[213611,213628],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[213687,213697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213699,213704]},{"content":"unit","pos":[213718,213722]},{"pos":[213729,213747],"content":"Class ReportDesign","linkify":"Class ReportDesign","nodes":[{"content":"Class ReportDesign","pos":[0,18]}]},{"content":"The ReportDesign class determines the contents of a report.","pos":[213789,213848]},{"pos":[213854,213861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A ReportDesign object is a collection of ReportSection objects or SectionTemplate objects that determines the contents of a report.","pos":[213863,213994]},{"content":"Each report contains a ReportDesign node in the Finance and Operations Application Object Tree (AOT), below the Designs node.","pos":[213995,214120]},{"content":"The ReportDesign node always contains a node that is named AutoDesignSpecs, and it can contain a node that is named Design, which is referred to as the generated design.","pos":[214121,214290]},{"content":"A ReportDesign node should contain either one or more SectionTemplate nodes (below the AutoDesignSpecs node) or a generated design.","pos":[214291,214422]},{"content":"If it contains both, only the generated design is used.","pos":[214423,214478]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[214479,214554]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[214555,214665]},{"content":"A report that does not have a generated design offers more flexibility to the end user than a report that has a generated design.","pos":[214666,214795]},{"content":"For example, a user who is running a report that does not have a generated design can decide in the query which sums to include in the report.","pos":[214796,214938]},{"content":"A generated design is then created during the execution of the report, and it will contain footer sections that correspond to the user's choice.","pos":[214939,215083]},{"content":"If a report has a generated design, the existence of footer sections in the generated design controls which sums are printed in the report.","pos":[215084,215223]},{"pos":[215229,215237],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a simple report that is not present in the AOT.","pos":[215239,215316]},{"pos":[215996,216003],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[216007,216013]},{"content":"Description","pos":[216112,216123]},{"content":"public ReportSection addProgrammableSection(int number)","pos":[216501,216556]},{"content":"public ReportSection addSection(ReportBlockType sectionType, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FieldId fieldId<ph id=\"ph4\">\\]</ph>)","pos":[216748,216850],"source":"public ReportSection addSection(ReportBlockType sectionType, \\[TableId tableId\\], \\[FieldId fieldId\\])"},{"content":"Adds a report section to a design.","pos":[216853,216887]},{"content":"public ReportSectionGroup addSectionGroup(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[216995,217074],"source":"public ReportSectionGroup addSectionGroup(TableId tableId, \\[FieldId fieldId\\])"},{"content":"Adds a section group to a design.","pos":[217100,217133]},{"content":"public int arrange()","pos":[217242,217262]},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217489,217526],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[217736,217785],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[217841,217939]},{"content":"public ReportAutoDesignSpecs autoDesignSpecs()","pos":[217983,218029]},{"content":"public ReportSection autoSection(TableId tableId, <ph id=\"ph1\">\\[</ph>int number<ph id=\"ph2\">\\]</ph>)","pos":[218230,218295],"source":"public ReportSection autoSection(TableId tableId, \\[int number\\])"},{"content":"public int autoSectionControlCount()","pos":[218477,218513]},{"content":"public ReportControl autoSectionControlNumber(int number)","pos":[218724,218781]},{"content":"public int autoSectionCount()","pos":[218971,219000]},{"content":"public ReportSection autoSectionNumber(int number)","pos":[219218,219268]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219465,219495],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[219570,219645]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219712,219754],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[219959,220000],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[220206,220252],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[220453,220498],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[220700,220733],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[220805,220844]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220947,220985],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[221052,221095]},{"content":"public boolean collate(<ph id=\"ph1\">\\[</ph>boolean collate<ph id=\"ph2\">\\]</ph>)","pos":[221194,221237],"source":"public boolean collate(\\[boolean collate\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221441,221478],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[221546,221591]},{"content":"public ReportControl control(TableId tableId, FieldId fieldId)","pos":[221688,221750]},{"content":"Finds a control in the generated design, based on the control's table and dataField properties.","pos":[221793,221888]},{"content":"public int controlCount()","pos":[221935,221960]},{"content":"public ReportControl controlName(str name)","pos":[222182,222224]},{"content":"Finds a control in the generated design, based on the control's Name property.","pos":[222287,222365]},{"content":"public ReportControl controlNumber(int number)","pos":[222429,222475]},{"content":"public int copies(<ph id=\"ph1\">\\[</ph>int numberOfCopies<ph id=\"ph2\">\\]</ph>)","pos":[222676,222717],"source":"public int copies(\\[int numberOfCopies\\])"},{"content":"public int delete()","pos":[222923,222942]},{"content":"Deletes the node from the AOT.","pos":[223028,223058]},{"content":"public str description(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[223170,223207],"source":"public str description(\\[str value\\])"},{"content":"public str deviceName(<ph id=\"ph1\">\\[</ph>str device<ph id=\"ph2\">\\]</ph>)","pos":[223417,223454],"source":"public str deviceName(\\[str device\\])"},{"content":"public str driverName()","pos":[223664,223687]},{"content":"public boolean edit()","pos":[223911,223932]},{"content":"public str emptyReportPrompt(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224158,224201],"source":"public str emptyReportPrompt(\\[str value\\])"},{"content":"public int fitToPage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224405,224440],"source":"public int fitToPage(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224652,224682],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[224757,224814]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224899,224933],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[225004,225061]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225146,225187],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[225251,225302]},{"content":"public int from(<ph id=\"ph1\">\\[</ph>int fromPage<ph id=\"ph2\">\\]</ph>)","pos":[225393,225426],"source":"public int from(\\[int fromPage\\])"},{"content":"public int generateDesign()","pos":[225640,225667]},{"content":"public int getNumberOfPrinters()","pos":[225887,225919]},{"content":"public str getPrinter(int number)","pos":[226134,226167]},{"content":"public PrintMedium getTarget()","pos":[226381,226411]},{"content":"Returns the print medium target for the report.","pos":[226486,226533]},{"content":"public boolean hideBorder(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[226628,226672],"source":"public boolean hideBorder(\\[boolean value\\])"},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[226875,226915],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str jobType(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[227122,227155],"source":"public str jobType(\\[str value\\])"},{"content":"public int language(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227369,227403],"source":"public int language(\\[int value\\])"},{"content":"public str languageID(<ph id=\"ph1\">\\[</ph>str lan<ph id=\"ph2\">\\]</ph>)","pos":[227616,227650],"source":"public str languageID(\\[str lan\\])"},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227863,227903],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[228110,228149],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[228357,228401],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[228604,228647],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public container loadDiskSettings()","pos":[228851,228886]},{"content":"public str localWebMenu(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[229098,229136],"source":"public str localWebMenu(\\[str value\\])"},{"content":"public str lookupCaption(<ph id=\"ph1\">\\[</ph>str lan<ph id=\"ph2\">\\]</ph>)","pos":[229345,229382],"source":"public str lookupCaption(\\[str lan\\])"},{"content":"public str lookupLabel(str label, <ph id=\"ph1\">\\[</ph>str lan<ph id=\"ph2\">\\]</ph>)","pos":[229592,229638],"source":"public str lookupLabel(str label, \\[str lan\\])"},{"content":"public int makeAutoSection(<ph id=\"ph1\">\\[</ph>Query query<ph id=\"ph2\">\\]</ph>)","pos":[229839,229882],"source":"public int makeAutoSection(\\[Query query\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[230086,230116],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[230191,230329]},{"content":"public int orientation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230334,230371],"source":"public int orientation(\\[int value\\])"},{"content":"public container pack()","pos":[230581,230604]},{"content":"Serializes the current instance of the ReportDesign class.","pos":[230686,230744]},{"content":"public container packPageSettings()","pos":[230828,230863]},{"content":"public container packPrinterSettings()","pos":[231075,231113]},{"content":"public container packPrintJobSettings()","pos":[231322,231361]},{"content":"public boolean pageFormatting()","pos":[231569,231600]},{"content":"public PrinterOrientation paperOrientation(<ph id=\"ph1\">\\[</ph>PrinterOrientation orientation<ph id=\"ph2\">\\]</ph>)","pos":[231816,231894],"source":"public PrinterOrientation paperOrientation(\\[PrinterOrientation orientation\\])"},{"content":"public int paperTray(<ph id=\"ph1\">\\[</ph>int tray<ph id=\"ph2\">\\]</ph>)","pos":[232063,232097],"source":"public int paperTray(\\[int tray\\])"},{"content":"public int printerAttributes()","pos":[232310,232340]},{"content":"public int printerAveragePPM()","pos":[232557,232587]},{"content":"public str printerComment()","pos":[232804,232831]},{"content":"public str printerDatatype()","pos":[233051,233079]},{"content":"public int printerDefaultPriority()","pos":[233298,233333]},{"content":"public str printerDriverName()","pos":[233545,233575]},{"content":"public str printerLocation()","pos":[233792,233820]},{"content":"public int printerPageHeight()","pos":[234039,234069]},{"content":"public int printerPageWidth()","pos":[234286,234315]},{"content":"public int printerPaper()","pos":[234533,234558]},{"content":"public str printerParameters()","pos":[234780,234810]},{"content":"public str printerPortName()","pos":[235027,235055]},{"content":"public str printerPrinterName()","pos":[235274,235305]},{"content":"public str printerPrintProcessor()","pos":[235521,235555]},{"content":"public int printerPriority()","pos":[235768,235796]},{"content":"public int printerQueuedJobs()","pos":[236015,236045]},{"content":"public str printerSepFile()","pos":[236262,236289]},{"content":"public str printerServerName()","pos":[236509,236539]},{"content":"public boolean printerSettings(<ph id=\"ph1\">\\[</ph>ReportRun reportRun<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int showWhat<ph id=\"ph4\">\\]</ph>)","pos":[236756,236829],"source":"public boolean printerSettings(\\[ReportRun reportRun\\], \\[int showWhat\\])"},{"content":"public str printerShareName()","pos":[237003,237032]},{"content":"public int printerStartTime()","pos":[237250,237279]},{"content":"public int printerStatus()","pos":[237497,237523]},{"content":"public int printerUntilTime()","pos":[237744,237773]},{"content":"public str printFormName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[237991,238030],"source":"public str printFormName(\\[str value\\])"},{"content":"public PrintJobSettings printJobSettings()","pos":[238238,238280]},{"content":"public boolean removeRedundantFooters(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[238485,238541],"source":"public boolean removeRedundantFooters(\\[boolean value\\])"},{"content":"public boolean removeRepeatedFooters(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[238732,238787],"source":"public boolean removeRepeatedFooters(\\[boolean value\\])"},{"content":"public boolean removeRepeatedHeaders(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[238979,239034],"source":"public boolean removeRepeatedHeaders(\\[boolean value\\])"},{"content":"public str reportTemplate(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[239226,239266],"source":"public str reportTemplate(\\[str value\\])"},{"content":"public str resolutionX(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[239473,239510],"source":"public str resolutionX(\\[str value\\])"},{"content":"public int resolutionXStr(str value)","pos":[239720,239756]},{"content":"public Units resolutionXUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[239967,240012],"source":"public Units resolutionXUnit(\\[Units value\\])"},{"content":"public str resolutionY(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[240214,240251],"source":"public str resolutionY(\\[str value\\])"},{"content":"public int resolutionYStr(str value)","pos":[240461,240497]},{"content":"public Units resolutionYUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[240708,240753],"source":"public Units resolutionYUnit(\\[Units value\\])"},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240955,240996],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[241202,241242],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[241449,241494],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[241696,241740],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public int ruler(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241943,241974],"source":"public int ruler(\\[int value\\])"},{"content":"public boolean saveDiskSettings(container buffer)","pos":[242190,242239]},{"content":"public ReportSection section(int number)","pos":[242437,242477]},{"content":"Finds a section below the generated design node.","pos":[242542,242590]},{"content":"public int sectionCount()","pos":[242684,242709]},{"content":"public ReportSectionGroup sectionGroup(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[242931,243007],"source":"public ReportSectionGroup sectionGroup(TableId tableId, \\[FieldId fieldId\\])"},{"content":"Finds a reportSectionGroup object below a reportDesign object.","pos":[243036,243098]},{"content":"public ReportSection sectionName(str name)","pos":[243178,243220]},{"content":"public ReportSection sectionNumber(int number)","pos":[243425,243471]},{"content":"public PrintMedium setTarget(PrintMedium target)","pos":[243672,243720]},{"content":"Sets the print medium target for the report.","pos":[243777,243821]},{"content":"public int to(<ph id=\"ph1\">\\[</ph>int toPage<ph id=\"ph2\">\\]</ph>)","pos":[243919,243948],"source":"public int to(\\[int toPage\\])"},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[244166,244205],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[244413,244451],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[244660,244703],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[244907,244949],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public str toString()","pos":[245154,245175]},{"content":"Returns a string that contains the class handle and name.","pos":[245259,245316]},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[245401,245444],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean unpackPageSettings(container packedPageSetup)","pos":[245648,245708]},{"content":"public boolean unpackPrinterSettings(container packedPrintSetup)","pos":[245895,245959]},{"content":"public boolean unpackPrintJobSettings(container packedPrintJobSettings)","pos":[246142,246213]},{"content":"public void leftMargin(Real value, Units unit)","pos":[246389,246435]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[246636,246684]},{"content":"public void rightMargin(Real value, Units unit)","pos":[246883,246930]},{"content":"public void topMargin(Real value, Units unit)","pos":[247130,247175]},{"content":"public void deleteDiskSettings(<ph id=\"ph1\">\\[</ph>boolean allUsers<ph id=\"ph2\">\\]</ph>)","pos":[247377,247429],"source":"public void deleteDiskSettings(\\[boolean allUsers\\])"},{"pos":[247627,247656],"content":"Method addProgrammableSection","linkify":"Method addProgrammableSection","nodes":[{"content":"Method addProgrammableSection","pos":[0,29]}]},{"pos":[247724,247734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[247736,247742]},{"pos":[247751,247763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247769,247786],"content":"Method addSection","linkify":"Method addSection","nodes":[{"content":"Method addSection","pos":[0,17]}]},{"content":"Adds a report section to a design.","pos":[247788,247822]},{"pos":[247933,247943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sectionType","pos":[247945,247956]},{"content":"If the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.","pos":[247959,248105]},{"content":"tableId","pos":[248117,248124]},{"content":"If the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.","pos":[248127,248273]},{"content":"fieldId","pos":[248285,248292]},{"content":"If the sectionType parameter is set to Header, Body, or Footer, the dataField property of the section group that the section belongs to; optional.","pos":[248295,248441]},{"pos":[248448,248460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The section that is created.","pos":[248462,248490]},{"pos":[248497,248504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method creates a generated design if it does not already exist.","pos":[248506,248574]},{"content":"If the sectionType parameter is set to Header, Body, or Footer, this method creates a section group if it does not already exist.","pos":[248575,248704]},{"pos":[248710,248732],"content":"Method addSectionGroup","linkify":"Method addSectionGroup","nodes":[{"content":"Method addSectionGroup","pos":[0,22]}]},{"content":"Adds a section group to a design.","pos":[248734,248767]},{"pos":[248857,248867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[248869,248876]},{"content":"The dataField property of the section group; optional.","pos":[248879,248933]},{"content":"fieldId","pos":[248945,248952]},{"content":"The dataField property of the section group; optional.","pos":[248955,249009]},{"pos":[249016,249028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The section group that is created.","pos":[249030,249064]},{"pos":[249071,249078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method creates a generated design (if it does not already exist).","pos":[249080,249150]},{"pos":[249156,249170],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[249203,249215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249221,249239],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[249287,249297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249299,249304]},{"pos":[249313,249325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249331,249353],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[249355,249453]},{"pos":[249513,249523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249525,249530]},{"pos":[249539,249551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[249553,249632]},{"pos":[249639,249646],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[249648,249685]},{"pos":[249691,249713],"content":"Method autoDesignSpecs","linkify":"Method autoDesignSpecs","nodes":[{"content":"Method autoDesignSpecs","pos":[0,22]}]},{"pos":[249772,249784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249790,249808],"content":"Method autoSection","linkify":"Method autoSection","nodes":[{"content":"Method autoSection","pos":[0,18]}]},{"pos":[249884,249894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[249896,249903]},{"content":"number","pos":[249917,249923]},{"pos":[249932,249944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249950,249980],"content":"Method autoSectionControlCount","linkify":"Method autoSectionControlCount","nodes":[{"content":"Method autoSectionControlCount","pos":[0,30]}]},{"pos":[250029,250041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250047,250078],"content":"Method autoSectionControlNumber","linkify":"Method autoSectionControlNumber","nodes":[{"content":"Method autoSectionControlNumber","pos":[0,31]}]},{"pos":[250148,250158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[250160,250166]},{"pos":[250175,250187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250193,250216],"content":"Method autoSectionCount","linkify":"Method autoSectionCount","nodes":[{"content":"Method autoSectionCount","pos":[0,23]}]},{"pos":[250258,250270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250276,250300],"content":"Method autoSectionNumber","linkify":"Method autoSectionNumber","nodes":[{"content":"Method autoSectionNumber","pos":[0,24]}]},{"pos":[250363,250373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[250375,250381]},{"pos":[250390,250402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250408,250419],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[250421,250496]},{"pos":[250537,250547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250549,250554]},{"pos":[250563,250575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[250577,250627]},{"pos":[250634,250641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[250643,250715]},{"content":"0 Use the default font weight.","pos":[250721,250751]},{"content":"1 Thin.","pos":[250756,250763]},{"content":"2 Extra-light.","pos":[250768,250782]},{"content":"3 Light.","pos":[250787,250795]},{"content":"4 Normal.","pos":[250800,250809]},{"content":"5 Medium.","pos":[250814,250823]},{"content":"6 Semibold.","pos":[250828,250839]},{"content":"7 Bold.","pos":[250844,250851]},{"content":"8 Extra-bold.","pos":[250856,250869]},{"content":"9 Heavy.","pos":[250874,250882]},{"pos":[250888,250911],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[250964,250974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250976,250981]},{"pos":[250990,251002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251008,251030],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[251082,251092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251094,251099]},{"pos":[251108,251120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251126,251149],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[251206,251216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251218,251223]},{"pos":[251232,251244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251250,251274],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[251330,251340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251342,251347]},{"pos":[251356,251368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251374,251388],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[251390,251429]},{"pos":[251473,251483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251485,251490]},{"pos":[251499,251511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[251513,251567]},{"pos":[251573,251592],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[251594,251637]},{"pos":[251686,251696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251698,251703]},{"pos":[251712,251724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[251726,251788]},{"pos":[251795,251802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[251804,251908]},{"content":"Value.","pos":[251912,251918]},{"content":"Description.","pos":[251921,251933]},{"content":"0","pos":[251980,251981]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[251989,252002],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[252014,252015]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252023,252039],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[252048,252049]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252057,252072],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[252082,252084]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252091,252103],"source":"MAC\\_CHARSET"},{"content":"128","pos":[252116,252119]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252125,252142],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[252150,252153]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252159,252174],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[252184,252187]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252193,252208],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[252218,252221]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252227,252247],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[252252,252255]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252261,252275],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[252286,252289]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252295,252311],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[252320,252323]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252329,252348],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[252354,252357]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252363,252378],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[252388,252391]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252397,252413],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[252422,252425]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252431,252450],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[252456,252459]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252465,252477],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[252489,252577]},{"content":"Value.","pos":[252581,252587]},{"content":"Description.","pos":[252590,252602]},{"content":"130","pos":[252637,252640]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252646,252660],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[252664,252750]},{"content":"Value.","pos":[252754,252760]},{"content":"Description.","pos":[252763,252775]},{"content":"177","pos":[252812,252815]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252821,252836],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[252841,252844]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[252850,252865],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[252869,252946]},{"content":"Value.","pos":[252950,252956]},{"content":"Description.","pos":[252959,252971]},{"content":"222","pos":[253004,253007]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[253013,253026],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[253030,253114]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[253115,253321],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[253327,253341],"content":"Method collate","linkify":"Method collate","nodes":[{"content":"Method collate","pos":[0,14]}]},{"pos":[253395,253405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"collate","pos":[253407,253414]},{"pos":[253423,253435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[253441,253459],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[253461,253506]},{"pos":[253554,253564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253566,253571]},{"pos":[253580,253592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[253594,253637]},{"pos":[253644,253651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[253653,253714]},{"content":"Value.","pos":[253718,253724]},{"content":"Style.","pos":[253727,253733]},{"content":"0","pos":[253790,253791]},{"content":"Default.","pos":[253799,253807]},{"content":"1","pos":[253826,253827]},{"content":"The Windows palette.","pos":[253835,253855]},{"content":"2","pos":[253862,253863]},{"content":"The true-color scheme.","pos":[253871,253893]},{"pos":[253901,253915],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"content":"Finds a control in the generated design, based on the control's table and dataField properties.","pos":[253917,254012]},{"pos":[254087,254097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[254099,254106]},{"content":"The dataField property of the control.","pos":[254109,254147]},{"content":"fieldId","pos":[254159,254166]},{"content":"The dataField property of the control.","pos":[254169,254207]},{"pos":[254214,254226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The control that is found.","pos":[254228,254254]},{"pos":[254261,254269],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[254396,254415],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[254453,254465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254471,254489],"content":"Method controlName","linkify":"Method controlName","nodes":[{"content":"Method controlName","pos":[0,18]}]},{"content":"Finds a control in the generated design, based on the control's Name property.","pos":[254491,254569]},{"pos":[254624,254634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[254636,254640]},{"content":"The Name property of the control, expressed as a string.","pos":[254643,254699]},{"pos":[254706,254718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The control that is found.","pos":[254720,254746]},{"pos":[254752,254772],"content":"Method controlNumber","linkify":"Method controlNumber","nodes":[{"content":"Method controlNumber","pos":[0,20]}]},{"pos":[254831,254841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[254843,254849]},{"pos":[254858,254870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254876,254889],"content":"Method copies","linkify":"Method copies","nodes":[{"content":"Method copies","pos":[0,13]}]},{"pos":[254941,254951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"numberOfCopies","pos":[254953,254967]},{"pos":[254976,254988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254994,255007],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes the node from the AOT.","pos":[255009,255039]},{"pos":[255071,255083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer.","pos":[255085,255096]},{"pos":[255102,255120],"content":"Method description","linkify":"Method description","nodes":[{"content":"Method description","pos":[0,18]}]},{"pos":[255168,255178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255180,255185]},{"pos":[255194,255206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255212,255229],"content":"Method deviceName","linkify":"Method deviceName","nodes":[{"content":"Method deviceName","pos":[0,17]}]},{"pos":[255277,255287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"device","pos":[255289,255295]},{"pos":[255304,255316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255322,255339],"content":"Method driverName","linkify":"Method driverName","nodes":[{"content":"Method driverName","pos":[0,17]}]},{"pos":[255375,255387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255393,255404],"content":"Method edit","linkify":"Method edit","nodes":[{"content":"Method edit","pos":[0,11]}]},{"pos":[255438,255450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255456,255480],"content":"Method emptyReportPrompt","linkify":"Method emptyReportPrompt","nodes":[{"content":"Method emptyReportPrompt","pos":[0,24]}]},{"pos":[255534,255544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255546,255551]},{"pos":[255560,255572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255578,255594],"content":"Method fitToPage","linkify":"Method fitToPage","nodes":[{"content":"Method fitToPage","pos":[0,16]}]},{"pos":[255640,255650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255652,255657]},{"pos":[255666,255678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255684,255695],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[255697,255754]},{"pos":[255795,255805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255807,255812]},{"pos":[255821,255833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[255835,255890]},{"pos":[255896,255911],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[255913,255970]},{"pos":[256015,256025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[256027,256032]},{"pos":[256041,256053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[256055,256088]},{"pos":[256094,256116],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[256118,256169]},{"pos":[256221,256231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[256233,256238]},{"pos":[256247,256259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[256261,256305]},{"pos":[256312,256319],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[256321,256389]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[256395,256465]},{"content":"The second byte contains a value for green.","pos":[256470,256513]},{"content":"The third byte contains a value for blue.","pos":[256518,256559]},{"content":"The high-order byte must be zero.","pos":[256564,256597]},{"content":"The maximum value for a single byte is 255.","pos":[256602,256645]},{"pos":[256651,256662],"content":"Method from","linkify":"Method from","nodes":[{"content":"Method from","pos":[0,11]}]},{"pos":[256706,256716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fromPage","pos":[256718,256726]},{"pos":[256735,256747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[256753,256774],"content":"Method generateDesign","linkify":"Method generateDesign","nodes":[{"content":"Method generateDesign","pos":[0,21]}]},{"pos":[256814,256826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[256832,256858],"content":"Method getNumberOfPrinters","linkify":"Method getNumberOfPrinters","nodes":[{"content":"Method getNumberOfPrinters","pos":[0,26]}]},{"pos":[256903,256915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[256921,256938],"content":"Method getPrinter","linkify":"Method getPrinter","nodes":[{"content":"Method getPrinter","pos":[0,17]}]},{"pos":[256984,256994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[256996,257002]},{"pos":[257011,257023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257029,257045],"content":"Method getTarget","linkify":"Method getTarget","nodes":[{"content":"Method getTarget","pos":[0,16]}]},{"content":"Returns the print medium target for the report.","pos":[257047,257094]},{"pos":[257137,257149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The target for the report.","pos":[257151,257177]},{"pos":[257183,257200],"content":"Method hideBorder","linkify":"Method hideBorder","nodes":[{"content":"Method hideBorder","pos":[0,17]}]},{"pos":[257255,257265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257267,257272]},{"pos":[257281,257293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257299,257312],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[257363,257373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257375,257380]},{"pos":[257389,257401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257407,257421],"content":"Method jobType","linkify":"Method jobType","nodes":[{"content":"Method jobType","pos":[0,14]}]},{"pos":[257465,257475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257477,257482]},{"pos":[257491,257503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257509,257524],"content":"Method language","linkify":"Method language","nodes":[{"content":"Method language","pos":[0,15]}]},{"pos":[257569,257579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257581,257586]},{"pos":[257595,257607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257613,257630],"content":"Method languageID","linkify":"Method languageID","nodes":[{"content":"Method languageID","pos":[0,17]}]},{"pos":[257675,257685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lan","pos":[257687,257690]},{"pos":[257699,257711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257717,257738],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[257789,257799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257801,257806]},{"pos":[257815,257827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257833,257853],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[257903,257913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257915,257920]},{"pos":[257929,257941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257947,257968],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[258023,258033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258035,258040]},{"pos":[258049,258061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258067,258089],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[258143,258153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258155,258160]},{"pos":[258169,258181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258187,258210],"content":"Method loadDiskSettings","linkify":"Method loadDiskSettings","nodes":[{"content":"Method loadDiskSettings","pos":[0,23]}]},{"pos":[258258,258270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258276,258295],"content":"Method localWebMenu","linkify":"Method localWebMenu","nodes":[{"content":"Method localWebMenu","pos":[0,19]}]},{"pos":[258344,258354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258356,258361]},{"pos":[258370,258382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258388,258408],"content":"Method lookupCaption","linkify":"Method lookupCaption","nodes":[{"content":"Method lookupCaption","pos":[0,20]}]},{"pos":[258456,258466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lan","pos":[258468,258471]},{"pos":[258480,258492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258498,258516],"content":"Method lookupLabel","linkify":"Method lookupLabel","nodes":[{"content":"Method lookupLabel","pos":[0,18]}]},{"pos":[258573,258583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"label","pos":[258585,258590]},{"content":"lan","pos":[258604,258607]},{"pos":[258616,258628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258634,258656],"content":"Method makeAutoSection","linkify":"Method makeAutoSection","nodes":[{"content":"Method makeAutoSection","pos":[0,22]}]},{"pos":[258710,258720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[258722,258727]},{"pos":[258736,258748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258754,258765],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[258767,258905]},{"pos":[258946,258956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258958,258963]},{"pos":[258972,258984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[258986,259050]},{"pos":[259057,259064],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[259066,259160]},{"content":"Begins with a letter.","pos":[259166,259187]},{"content":"Doesn't exceed 250 characters.","pos":[259192,259222]},{"content":"Can include numbers and underscore characters.","pos":[259227,259273]},{"content":"Cannot include punctuation or spaces.","pos":[259278,259315]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[259320,259438]},{"pos":[259444,259462],"content":"Method orientation","linkify":"Method orientation","nodes":[{"content":"Method orientation","pos":[0,18]}]},{"pos":[259510,259520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[259522,259527]},{"pos":[259536,259548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259554,259565],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the ReportDesign class.","pos":[259567,259625]},{"pos":[259661,259673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the ReportDesign class.","pos":[259675,259748]},{"pos":[259754,259777],"content":"Method packPageSettings","linkify":"Method packPageSettings","nodes":[{"content":"Method packPageSettings","pos":[0,23]}]},{"pos":[259825,259837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259843,259869],"content":"Method packPrinterSettings","linkify":"Method packPrinterSettings","nodes":[{"content":"Method packPrinterSettings","pos":[0,26]}]},{"pos":[259920,259932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259938,259965],"content":"Method packPrintJobSettings","linkify":"Method packPrintJobSettings","nodes":[{"content":"Method packPrintJobSettings","pos":[0,27]}]},{"pos":[260017,260029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260035,260056],"content":"Method pageFormatting","linkify":"Method pageFormatting","nodes":[{"content":"Method pageFormatting","pos":[0,21]}]},{"pos":[260100,260112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260118,260141],"content":"Method paperOrientation","linkify":"Method paperOrientation","nodes":[{"content":"Method paperOrientation","pos":[0,23]}]},{"pos":[260230,260240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"orientation","pos":[260242,260253]},{"pos":[260262,260274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260280,260296],"content":"Method paperTray","linkify":"Method paperTray","nodes":[{"content":"Method paperTray","pos":[0,16]}]},{"pos":[260341,260351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tray","pos":[260353,260357]},{"pos":[260366,260378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260384,260408],"content":"Method printerAttributes","linkify":"Method printerAttributes","nodes":[{"content":"Method printerAttributes","pos":[0,24]}]},{"pos":[260451,260463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260469,260493],"content":"Method printerAveragePPM","linkify":"Method printerAveragePPM","nodes":[{"content":"Method printerAveragePPM","pos":[0,24]}]},{"pos":[260536,260548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260554,260575],"content":"Method printerComment","linkify":"Method printerComment","nodes":[{"content":"Method printerComment","pos":[0,21]}]},{"pos":[260615,260627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260633,260655],"content":"Method printerDatatype","linkify":"Method printerDatatype","nodes":[{"content":"Method printerDatatype","pos":[0,22]}]},{"pos":[260696,260708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260714,260743],"content":"Method printerDefaultPriority","linkify":"Method printerDefaultPriority","nodes":[{"content":"Method printerDefaultPriority","pos":[0,29]}]},{"pos":[260791,260803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260809,260833],"content":"Method printerDriverName","linkify":"Method printerDriverName","nodes":[{"content":"Method printerDriverName","pos":[0,24]}]},{"pos":[260876,260888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260894,260916],"content":"Method printerLocation","linkify":"Method printerLocation","nodes":[{"content":"Method printerLocation","pos":[0,22]}]},{"pos":[260957,260969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260975,260999],"content":"Method printerPageHeight","linkify":"Method printerPageHeight","nodes":[{"content":"Method printerPageHeight","pos":[0,24]}]},{"pos":[261042,261054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261060,261083],"content":"Method printerPageWidth","linkify":"Method printerPageWidth","nodes":[{"content":"Method printerPageWidth","pos":[0,23]}]},{"pos":[261125,261137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261143,261162],"content":"Method printerPaper","linkify":"Method printerPaper","nodes":[{"content":"Method printerPaper","pos":[0,19]}]},{"pos":[261200,261212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261218,261242],"content":"Method printerParameters","linkify":"Method printerParameters","nodes":[{"content":"Method printerParameters","pos":[0,24]}]},{"pos":[261285,261297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261303,261325],"content":"Method printerPortName","linkify":"Method printerPortName","nodes":[{"content":"Method printerPortName","pos":[0,22]}]},{"pos":[261366,261378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261384,261409],"content":"Method printerPrinterName","linkify":"Method printerPrinterName","nodes":[{"content":"Method printerPrinterName","pos":[0,25]}]},{"pos":[261453,261465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261471,261499],"content":"Method printerPrintProcessor","linkify":"Method printerPrintProcessor","nodes":[{"content":"Method printerPrintProcessor","pos":[0,28]}]},{"pos":[261546,261558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261564,261586],"content":"Method printerPriority","linkify":"Method printerPriority","nodes":[{"content":"Method printerPriority","pos":[0,22]}]},{"pos":[261627,261639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261645,261669],"content":"Method printerQueuedJobs","linkify":"Method printerQueuedJobs","nodes":[{"content":"Method printerQueuedJobs","pos":[0,24]}]},{"pos":[261712,261724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261730,261751],"content":"Method printerSepFile","linkify":"Method printerSepFile","nodes":[{"content":"Method printerSepFile","pos":[0,21]}]},{"pos":[261791,261803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261809,261833],"content":"Method printerServerName","linkify":"Method printerServerName","nodes":[{"content":"Method printerServerName","pos":[0,24]}]},{"pos":[261876,261888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261894,261916],"content":"Method printerSettings","linkify":"Method printerSettings","nodes":[{"content":"Method printerSettings","pos":[0,22]}]},{"pos":[261998,262008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reportRun","pos":[262010,262019]},{"content":"showWhat","pos":[262033,262041]},{"pos":[262050,262062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262068,262091],"content":"Method printerShareName","linkify":"Method printerShareName","nodes":[{"content":"Method printerShareName","pos":[0,23]}]},{"pos":[262133,262145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262151,262174],"content":"Method printerStartTime","linkify":"Method printerStartTime","nodes":[{"content":"Method printerStartTime","pos":[0,23]}]},{"pos":[262216,262228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262234,262254],"content":"Method printerStatus","linkify":"Method printerStatus","nodes":[{"content":"Method printerStatus","pos":[0,20]}]},{"pos":[262293,262305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262311,262334],"content":"Method printerUntilTime","linkify":"Method printerUntilTime","nodes":[{"content":"Method printerUntilTime","pos":[0,23]}]},{"pos":[262376,262388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262394,262414],"content":"Method printFormName","linkify":"Method printFormName","nodes":[{"content":"Method printFormName","pos":[0,20]}]},{"pos":[262464,262474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262476,262481]},{"pos":[262490,262502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262508,262531],"content":"Method printJobSettings","linkify":"Method printJobSettings","nodes":[{"content":"Method printJobSettings","pos":[0,23]}]},{"pos":[262586,262598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262604,262633],"content":"Method removeRedundantFooters","linkify":"Method removeRedundantFooters","nodes":[{"content":"Method removeRedundantFooters","pos":[0,29]}]},{"pos":[262700,262710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262712,262717]},{"pos":[262726,262738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262744,262772],"content":"Method removeRepeatedFooters","linkify":"Method removeRepeatedFooters","nodes":[{"content":"Method removeRepeatedFooters","pos":[0,28]}]},{"pos":[262838,262848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262850,262855]},{"pos":[262864,262876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262882,262910],"content":"Method removeRepeatedHeaders","linkify":"Method removeRepeatedHeaders","nodes":[{"content":"Method removeRepeatedHeaders","pos":[0,28]}]},{"pos":[262976,262986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262988,262993]},{"pos":[263002,263014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263020,263041],"content":"Method reportTemplate","linkify":"Method reportTemplate","nodes":[{"content":"Method reportTemplate","pos":[0,21]}]},{"pos":[263092,263102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263104,263109]},{"pos":[263118,263130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263136,263154],"content":"Method resolutionX","linkify":"Method resolutionX","nodes":[{"content":"Method resolutionX","pos":[0,18]}]},{"pos":[263202,263212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263214,263219]},{"pos":[263228,263240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263246,263267],"content":"Method resolutionXStr","linkify":"Method resolutionXStr","nodes":[{"content":"Method resolutionXStr","pos":[0,21]}]},{"pos":[263316,263326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263328,263333]},{"pos":[263342,263354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263360,263382],"content":"Method resolutionXUnit","linkify":"Method resolutionXUnit","nodes":[{"content":"Method resolutionXUnit","pos":[0,22]}]},{"pos":[263438,263448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263450,263455]},{"pos":[263464,263476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263482,263500],"content":"Method resolutionY","linkify":"Method resolutionY","nodes":[{"content":"Method resolutionY","pos":[0,18]}]},{"pos":[263548,263558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263560,263565]},{"pos":[263574,263586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263592,263613],"content":"Method resolutionYStr","linkify":"Method resolutionYStr","nodes":[{"content":"Method resolutionYStr","pos":[0,21]}]},{"pos":[263662,263672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263674,263679]},{"pos":[263688,263700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263706,263728],"content":"Method resolutionYUnit","linkify":"Method resolutionYUnit","nodes":[{"content":"Method resolutionYUnit","pos":[0,22]}]},{"pos":[263784,263794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263796,263801]},{"pos":[263810,263822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263828,263850],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[263902,263912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263914,263919]},{"pos":[263928,263940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263946,263967],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[264018,264028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264030,264035]},{"pos":[264044,264056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264062,264084],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[264140,264150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264152,264157]},{"pos":[264166,264178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264184,264207],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[264262,264272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264274,264279]},{"pos":[264288,264300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264306,264318],"content":"Method ruler","linkify":"Method ruler","nodes":[{"content":"Method ruler","pos":[0,12]}]},{"pos":[264360,264370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264372,264377]},{"pos":[264386,264398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264404,264427],"content":"Method saveDiskSettings","linkify":"Method saveDiskSettings","nodes":[{"content":"Method saveDiskSettings","pos":[0,23]}]},{"pos":[264489,264499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[264501,264507]},{"pos":[264516,264528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264534,264548],"content":"Method section","linkify":"Method section","nodes":[{"content":"Method section","pos":[0,14]}]},{"content":"Finds a section below the generated design node.","pos":[264550,264598]},{"pos":[264651,264661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[264663,264669]},{"content":"The section number.","pos":[264672,264691]},{"pos":[264698,264710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The report section that is found.","pos":[264712,264745]},{"pos":[264751,264770],"content":"Method sectionCount","linkify":"Method sectionCount","nodes":[{"content":"Method sectionCount","pos":[0,19]}]},{"pos":[264808,264820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264826,264845],"content":"Method sectionGroup","linkify":"Method sectionGroup","nodes":[{"content":"Method sectionGroup","pos":[0,19]}]},{"content":"Finds a reportSectionGroup object below a reportDesign object.","pos":[264847,264909]},{"pos":[264996,265006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[265008,265015]},{"content":"The field of the section group; optional.","pos":[265018,265059]},{"content":"fieldId","pos":[265071,265078]},{"content":"The field of the section group; optional.","pos":[265081,265122]},{"pos":[265129,265141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The section group that matches the arguments.","pos":[265143,265188]},{"pos":[265195,265203],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example finds the section group that is created by the addSection method:","pos":[265205,265292]},{"pos":[266374,266392],"content":"Method sectionName","linkify":"Method sectionName","nodes":[{"content":"Method sectionName","pos":[0,18]}]},{"pos":[266447,266457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[266459,266463]},{"pos":[266472,266484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[266490,266510],"content":"Method sectionNumber","linkify":"Method sectionNumber","nodes":[{"content":"Method sectionNumber","pos":[0,20]}]},{"pos":[266569,266579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[266581,266587]},{"pos":[266596,266608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[266614,266630],"content":"Method setTarget","linkify":"Method setTarget","nodes":[{"content":"Method setTarget","pos":[0,16]}]},{"content":"Sets the print medium target for the report.","pos":[266632,266676]},{"pos":[266737,266747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[266749,266755]},{"content":"The print medium for the report.","pos":[266758,266790]},{"pos":[266797,266809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The print medium for the report.","pos":[266811,266843]},{"pos":[266850,266857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To select a specific printer as the target for the report, call the PrintJobSettings.deviceName method on the object that is returned by the ReportDesign.printJobSettings method.","pos":[266859,267037]},{"pos":[267043,267052],"content":"Method to","linkify":"Method to","nodes":[{"content":"Method to","pos":[0,9]}]},{"pos":[267092,267102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"toPage","pos":[267104,267110]},{"pos":[267119,267131],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267137,267157],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[267207,267217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267219,267224]},{"pos":[267233,267245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267251,267270],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[267319,267329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267331,267336]},{"pos":[267345,267357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267363,267383],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[267437,267447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267449,267454]},{"pos":[267463,267475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267481,267502],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[267555,267565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267567,267572]},{"pos":[267581,267593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267599,267614],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name.","pos":[267616,267673]},{"pos":[267707,267719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A textual description of the class.","pos":[267721,267756]},{"pos":[267763,267770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In some classes, additional information is returned in the string.","pos":[267772,267838]},{"pos":[267844,267860],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[267914,267924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267926,267931]},{"pos":[267940,267952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267958,267983],"content":"Method unpackPageSettings","linkify":"Method unpackPageSettings","nodes":[{"content":"Method unpackPageSettings","pos":[0,25]}]},{"pos":[268056,268066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPageSetup","pos":[268068,268083]},{"pos":[268092,268104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[268110,268138],"content":"Method unpackPrinterSettings","linkify":"Method unpackPrinterSettings","nodes":[{"content":"Method unpackPrinterSettings","pos":[0,28]}]},{"pos":[268215,268225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPrintSetup","pos":[268227,268243]},{"pos":[268252,268264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[268270,268299],"content":"Method unpackPrintJobSettings","linkify":"Method unpackPrintJobSettings","nodes":[{"content":"Method unpackPrintJobSettings","pos":[0,29]}]},{"pos":[268383,268393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPrintJobSettings","pos":[268395,268417]},{"pos":[268426,268438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[268444,268461],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[268520,268530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268532,268537]},{"content":"unit","pos":[268551,268555]},{"pos":[268563,268582],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[268643,268653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268655,268660]},{"content":"unit","pos":[268674,268678]},{"pos":[268686,268704],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[268764,268774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268776,268781]},{"content":"unit","pos":[268795,268799]},{"pos":[268807,268823],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[268881,268891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268893,268898]},{"content":"unit","pos":[268912,268916]},{"pos":[268924,268949],"content":"Method deleteDiskSettings","linkify":"Method deleteDiskSettings","nodes":[{"content":"Method deleteDiskSettings","pos":[0,25]}]},{"pos":[269012,269022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"allUsers","pos":[269024,269032]},{"pos":[269039,269062],"content":"Class ReportEnumControl","linkify":"Class ReportEnumControl","nodes":[{"content":"Class ReportEnumControl","pos":[0,23]}]},{"content":"The ReportEnumControl class lets you to create, read, update, and delete X++ code and metadata.","pos":[269114,269209]},{"pos":[269215,269222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[269224,269334]},{"pos":[269340,269348],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[269354,269361],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[269365,269371]},{"content":"Description","pos":[269440,269451]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[269799,269834],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270016,270052],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[270233,270282],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[270308,270406]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270450,270491],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[270525,270574]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270667,270702],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[270742,270804]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270884,270914],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[270959,271034]},{"content":"public int bottomMarginAndFrame()","pos":[271101,271134]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271318,271360],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[271535,271576],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[271752,271798],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[271969,272014],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272186,272222],"source":"public int changeCase(\\[int value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272403,272444],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272620,272658],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[272695,272738]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272837,272874],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[272912,272957]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[273054,273126],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[273129,273196]},{"content":"public ReportFieldType controlType()","pos":[273271,273307]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[273488,273522],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[273705,273748],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[273922,273958],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[274139,274158]},{"content":"public str effectiveFont()","pos":[274356,274382]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[274573,274637],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[274790,274820],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[274865,274922]},{"content":"public str fontInfoPrinter()","pos":[275007,275035]},{"content":"public int fontInfoPrinterAscent()","pos":[275224,275258]},{"content":"public int fontInfoPrinterDescent()","pos":[275441,275476]},{"content":"public int fontInfoPrinterExtLead()","pos":[275658,275693]},{"content":"public int fontInfoPrinterHeight()","pos":[275875,275909]},{"content":"public int fontInfoPrinterIntLead()","pos":[276092,276127]},{"content":"public str fontInfoScreen()","pos":[276309,276336]},{"content":"public int fontInfoScreenAscent()","pos":[276526,276559]},{"content":"public int fontInfoScreenDescent()","pos":[276743,276777]},{"content":"public int fontInfoScreenExtLead()","pos":[276960,276994]},{"content":"public int fontInfoScreenHeight()","pos":[277177,277210]},{"content":"public int fontInfoScreenIntLead()","pos":[277394,277428]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[277611,277645],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[277686,277743]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[277828,277869],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[277903,277954]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[278045,278093],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[278262,278320],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[278479,278515],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[278554,278616]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[278696,278749]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[278913,278948],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[279130,279170],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[279347,279386],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[279422,279461]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[279564,279604],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[279781,279812],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[279856,279893]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[279998,280033],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[280215,280258],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[280432,280471],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[280649,280684],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[280866,280905],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[281083,281128],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[281300,281350],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[281517,281581],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[281734,281773],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[281951,281991],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[282168,282216],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[282385,282425],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[282602,282641],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[282819,282863],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[283036,283079],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[283253,283297],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[283470,283524],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[283687,283717]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283904,283944],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284121,284160],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[284338,284382],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[284555,284598],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284772,284806],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284989,285022],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[285206,285244],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[285423,285460],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[285640,285685],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[285857,285902],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[286074,286118],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[286149,286224]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[286291,286336],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[286508,286547],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[286725,286763],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[286942,286998],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[287159,287199],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[287376,287406],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[287451,287589]},{"content":"public int numberOfLines(int height100mm)","pos":[287594,287635]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287811,287845],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[288028,288062]},{"content":"public int previewXCompensation100mm(str string)","pos":[288245,288293]},{"content":"public int right100mm()","pos":[288462,288485]},{"content":"public int right100mmInclBorder()","pos":[288679,288712]},{"content":"public int rightMarginAndFrame()","pos":[288896,288928]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289113,289154],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[289330,289370],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[289547,289592],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[289764,289808],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[289981,290038],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[290198,290248]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[290415,290458],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[290632,290671],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[290707,290760]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[290849,290904],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[291066,291108],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[291283,291335],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[291500,291530]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[291717,291756],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[291934,291972],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[292151,292194],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[292368,292410],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[292585,292618],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292802,292834],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[293019,293056],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[293236,293272],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[293453,293496],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[293670,293711],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[293887,293928],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[294104,294169],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294321,294356],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[294538,294584],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[294755,294811],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294972,295007],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[295047,295109]},{"content":"public int widthOfString100mm(str string)","pos":[295189,295230]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[295406,295440],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[295623,295662],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[295840,295878],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[295915,295953]},{"content":"public void top(Real value, Units unit)","pos":[296057,296096]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[296274,296322]},{"content":"public void height(Real value, Units unit)","pos":[296491,296533]},{"content":"Gets or sets the height of the control.","pos":[296566,296605]},{"content":"public void show()","pos":[296708,296726]},{"content":"public void labelWidth(Real value, Units unit)","pos":[296925,296971]},{"content":"public void leftMargin(Real value, Units unit)","pos":[297142,297188]},{"content":"public void topMargin(Real value, Units unit)","pos":[297359,297404]},{"content":"public void width(Real value, Units unit)","pos":[297576,297617]},{"content":"Gets or sets the width of the control.","pos":[297651,297689]},{"content":"public void rightMargin(Real value, Units unit)","pos":[297793,297840]},{"content":"public void left(Real value, Units unit)","pos":[298010,298050]},{"content":"public void hide()","pos":[298227,298245]},{"pos":[298447,298463],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[298509,298519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298521,298526]},{"pos":[298535,298547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298553,298570],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[298617,298627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298629,298634]},{"pos":[298643,298655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298661,298683],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[298685,298783]},{"pos":[298843,298853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298855,298860]},{"pos":[298869,298881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[298883,298962]},{"pos":[298969,298976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[298978,299015]},{"pos":[299021,299043],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[299045,299094]},{"pos":[299146,299156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299158,299163]},{"pos":[299172,299184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[299186,299230]},{"pos":[299237,299244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[299246,299314]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[299320,299390]},{"content":"The second byte contains a value for green.","pos":[299395,299438]},{"content":"The third byte contains a value for blue.","pos":[299443,299484]},{"content":"The high-order byte must be zero.","pos":[299489,299522]},{"content":"The maximum value for a single byte is 255.","pos":[299527,299570]},{"pos":[299576,299592],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[299594,299656]},{"pos":[299702,299712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299714,299719]},{"pos":[299728,299740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[299742,299803]},{"pos":[299809,299820],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[299822,299897]},{"pos":[299938,299948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299950,299955]},{"pos":[299964,299976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[299978,300028]},{"pos":[300035,300042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[300044,300116]},{"content":"0 Use the default font weight.","pos":[300122,300152]},{"content":"1 Thin.","pos":[300157,300164]},{"content":"2 Extra-light.","pos":[300169,300183]},{"content":"3 Light.","pos":[300188,300196]},{"content":"4 Normal.","pos":[300201,300210]},{"content":"5 Medium.","pos":[300215,300224]},{"content":"6 Semibold.","pos":[300229,300240]},{"content":"7 Bold.","pos":[300245,300252]},{"content":"8 Extra-bold.","pos":[300257,300270]},{"content":"9 Heavy.","pos":[300275,300283]},{"pos":[300289,300316],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[300362,300374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300380,300403],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[300456,300466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300468,300473]},{"pos":[300482,300494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300500,300522],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[300574,300584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300586,300591]},{"pos":[300600,300612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300618,300641],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[300698,300708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300710,300715]},{"pos":[300724,300736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300742,300766],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[300822,300832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300834,300839]},{"pos":[300848,300860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300866,300883],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[300930,300940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300942,300947]},{"pos":[300956,300968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300974,300996],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[301048,301058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301060,301065]},{"pos":[301074,301086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301092,301111],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[301113,301156]},{"pos":[301205,301215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301217,301222]},{"pos":[301231,301243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[301245,301307]},{"pos":[301314,301321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[301323,301427]},{"content":"Value.","pos":[301431,301437]},{"content":"Description.","pos":[301440,301452]},{"content":"0","pos":[301499,301500]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301508,301521],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[301533,301534]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301542,301558],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[301567,301568]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301576,301591],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[301601,301603]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301610,301622],"source":"MAC\\_CHARSET"},{"content":"128","pos":[301635,301638]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301644,301661],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[301669,301672]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301678,301693],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[301703,301706]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301712,301727],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[301737,301740]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301746,301766],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[301771,301774]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301780,301794],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[301805,301808]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301814,301830],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[301839,301842]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301848,301867],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[301873,301876]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301882,301897],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[301907,301910]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301916,301932],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[301941,301944]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301950,301969],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[301975,301978]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[301984,301996],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[302008,302096]},{"content":"Value.","pos":[302100,302106]},{"content":"Description.","pos":[302109,302121]},{"content":"130","pos":[302156,302159]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[302165,302179],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[302183,302269]},{"content":"Value.","pos":[302273,302279]},{"content":"Description.","pos":[302282,302294]},{"content":"177","pos":[302331,302334]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[302340,302355],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[302360,302363]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[302369,302384],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[302388,302465]},{"content":"Value.","pos":[302469,302475]},{"content":"Description.","pos":[302478,302490]},{"content":"222","pos":[302523,302526]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[302532,302545],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[302549,302633]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[302634,302840],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[302846,302864],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[302866,302911]},{"pos":[302959,302969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302971,302976]},{"pos":[302985,302997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[302999,303042]},{"pos":[303049,303056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[303058,303119]},{"content":"Value.","pos":[303123,303129]},{"content":"Style.","pos":[303132,303138]},{"content":"0","pos":[303195,303196]},{"content":"Default.","pos":[303204,303212]},{"content":"1","pos":[303231,303232]},{"content":"The Windows palette.","pos":[303240,303260]},{"content":"2","pos":[303267,303268]},{"content":"The true-color scheme.","pos":[303276,303298]},{"pos":[303306,303329],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[303331,303398]},{"pos":[303481,303491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303493,303498]},{"pos":[303507,303519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[303521,303593]},{"pos":[303600,303607],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[303609,303690]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[303691,303784]},{"pos":[303790,303808],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[303857,303869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303875,303890],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[303935,303945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303947,303952]},{"pos":[303961,303973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303979,303995],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[304049,304059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304061,304066]},{"pos":[304075,304087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304093,304110],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[304157,304167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304169,304174]},{"pos":[304183,304195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304201,304214],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[304246,304258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304264,304284],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[304323,304335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304341,304364],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[304439,304449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304451,304456]},{"pos":[304465,304477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304483,304494],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[304496,304553]},{"pos":[304594,304604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304606,304611]},{"pos":[304620,304632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[304634,304689]},{"pos":[304695,304717],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[304758,304770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304776,304804],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[304851,304863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304869,304898],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[304946,304958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304964,304993],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[305041,305053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305059,305087],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[305134,305146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305152,305181],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[305229,305241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305247,305268],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[305308,305320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305326,305353],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[305399,305411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305417,305445],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[305492,305504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305510,305538],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[305585,305597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305603,305630],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[305676,305688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305694,305722],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[305769,305781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305787,305802],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[305804,305861]},{"pos":[305906,305916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305918,305923]},{"pos":[305932,305944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[305946,305979]},{"pos":[305985,306007],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[306009,306060]},{"pos":[306112,306122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306124,306129]},{"pos":[306138,306150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[306152,306196]},{"pos":[306203,306210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[306212,306280]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[306286,306356]},{"content":"The second byte contains a value for green.","pos":[306361,306404]},{"content":"The third byte contains a value for blue.","pos":[306409,306450]},{"content":"The high-order byte must be zero.","pos":[306455,306488]},{"content":"The maximum value for a single byte is 255.","pos":[306493,306536]},{"pos":[306542,306560],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[306619,306629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[306631,306647]},{"pos":[306656,306668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306674,306702],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[306771,306781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[306783,306799]},{"pos":[306808,306820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306826,306843],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[306845,306907]},{"pos":[306954,306964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306966,306971]},{"pos":[306980,306992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[306994,307015]},{"pos":[307022,307029],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[307031,307085]},{"content":"Mode.","pos":[307089,307094]},{"content":"Height Calculation.","pos":[307106,307125]},{"content":"Exact.","pos":[307311,307317]},{"content":"The exact height in pixels of the controls is used.","pos":[307328,307379]},{"content":"Auto.","pos":[307422,307427]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[307439,307528]},{"content":"Column height.","pos":[307533,307547]},{"content":"The layout of the form determines the height of the control.","pos":[307550,307610]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[307643,307728]},{"pos":[307734,307771],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[307837,307847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[307849,307855]},{"pos":[307864,307876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307882,307898],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[307944,307954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307956,307961]},{"pos":[307970,307982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307988,308005],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[308056,308066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308068,308073]},{"pos":[308082,308094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308100,308118],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[308120,308159]},{"pos":[308209,308219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308221,308226]},{"pos":[308235,308247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[308249,308270]},{"pos":[308277,308284],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[308286,308376]},{"pos":[308382,308395],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[308446,308456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308458,308463]},{"pos":[308472,308484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308490,308502],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[308504,308541]},{"pos":[308583,308593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308595,308600]},{"pos":[308609,308621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[308623,308661]},{"pos":[308668,308675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[308677,308809]},{"pos":[308815,308831],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[308877,308887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308889,308894]},{"pos":[308903,308915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308921,308945],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[308999,309009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309011,309016]},{"pos":[309025,309037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309043,309063],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[309113,309123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309125,309130]},{"pos":[309139,309151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309157,309173],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[309219,309229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309231,309236]},{"pos":[309245,309257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309263,309283],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[309333,309343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309345,309350]},{"pos":[309359,309371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309377,309395],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[309451,309461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309463,309468]},{"pos":[309477,309489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309495,309516],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[309577,309587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309589,309594]},{"pos":[309603,309615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309621,309646],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[309721,309731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309733,309738]},{"pos":[309747,309759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309765,309785],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[309835,309845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309847,309852]},{"pos":[309861,309873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309879,309900],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[309951,309961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309963,309968]},{"pos":[309977,309989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309995,310016],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[310075,310085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310087,310092]},{"pos":[310101,310113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310119,310140],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[310191,310201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310203,310208]},{"pos":[310217,310229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310235,310255],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[310305,310315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310317,310322]},{"pos":[310331,310343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310349,310370],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[310425,310435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310437,310442]},{"pos":[310451,310463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310469,310491],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[310545,310555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310557,310562]},{"pos":[310571,310583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310589,310605],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[310660,310670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[310672,310686]},{"pos":[310695,310707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310713,310739],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[310804,310814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[310816,310830]},{"pos":[310839,310851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310857,310881],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[310924,310936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310942,310963],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[311014,311024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311026,311031]},{"pos":[311040,311052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311058,311078],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[311128,311138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311140,311145]},{"pos":[311154,311166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311172,311193],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[311248,311258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311260,311265]},{"pos":[311274,311286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311292,311314],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[311368,311378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311380,311385]},{"pos":[311394,311406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311412,311427],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[311472,311482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311484,311489]},{"pos":[311498,311510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311516,311530],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[311574,311584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311586,311591]},{"pos":[311600,311612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311618,311633],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[311682,311692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311694,311699]},{"pos":[311708,311720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311726,311742],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[311790,311800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311802,311807]},{"pos":[311816,311828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311834,311850],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[311906,311916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311918,311923]},{"pos":[311932,311944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311950,311966],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[312022,312032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312034,312039]},{"pos":[312048,312060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312066,312081],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[312083,312158]},{"pos":[312213,312223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312225,312230]},{"pos":[312239,312251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[312253,312302]},{"pos":[312308,312324],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[312380,312390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312392,312397]},{"pos":[312406,312418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312424,312444],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[312494,312504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312506,312511]},{"pos":[312520,312532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312538,312557],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[312606,312616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312618,312623]},{"pos":[312632,312644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312650,312669],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[312736,312746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312748,312753]},{"pos":[312762,312774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312780,312801],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[312852,312862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312864,312869]},{"pos":[312878,312890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312896,312907],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[312909,313047]},{"pos":[313088,313098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313100,313105]},{"pos":[313114,313126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[313128,313192]},{"pos":[313199,313206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[313208,313302]},{"content":"Begins with a letter.","pos":[313308,313329]},{"content":"Doesn't exceed 250 characters.","pos":[313334,313364]},{"content":"Can include numbers and underscore characters.","pos":[313369,313415]},{"content":"Cannot include punctuation or spaces.","pos":[313420,313457]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[313462,313580]},{"pos":[313586,313606],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[313660,313670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[313672,313683]},{"pos":[313692,313704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313710,313725],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[313770,313780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313782,313787]},{"pos":[313796,313808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313814,313832],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[313879,313889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[313891,313897]},{"pos":[313906,313918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313924,313956],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[314017,314027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[314029,314035]},{"pos":[314044,314056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314062,314079],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[314115,314127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314133,314160],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[314206,314218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314224,314250],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[314295,314307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314313,314335],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[314387,314397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314399,314404]},{"pos":[314413,314425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314431,314452],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[314503,314513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314515,314520]},{"pos":[314529,314541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314547,314569],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[314625,314635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314637,314642]},{"pos":[314651,314663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314669,314692],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[314747,314757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314759,314764]},{"pos":[314773,314785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314791,314809],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[314877,314887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314889,314894]},{"pos":[314903,314915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314921,314944],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[315007,315017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[315019,315024]},{"content":"string","pos":[315038,315044]},{"pos":[315053,315065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315071,315087],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[315141,315151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315153,315158]},{"pos":[315167,315179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315185,315197],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[315199,315252]},{"pos":[315302,315312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315314,315319]},{"pos":[315328,315340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[315342,315403]},{"pos":[315409,315425],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[315491,315501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315503,315508]},{"pos":[315517,315529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315535,315550],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[315603,315613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[315615,315628]},{"pos":[315637,315649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315655,315680],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[315743,315753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[315755,315768]},{"pos":[315777,315789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315795,315819],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[315862,315874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315880,315900],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[315950,315960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315962,315967]},{"pos":[315976,315988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315994,316013],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[316062,316072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316074,316079]},{"pos":[316088,316100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316106,316126],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[316180,316190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316192,316197]},{"pos":[316206,316218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316224,316245],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[316298,316308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316310,316315]},{"pos":[316324,316336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316342,316356],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[316400,316410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316412,316417]},{"pos":[316426,316438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316444,316457],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[316500,316510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316512,316517]},{"pos":[316526,316538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316544,316558],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[316606,316616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316618,316623]},{"pos":[316632,316644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316650,316665],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[316712,316722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316724,316729]},{"pos":[316738,316750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316756,316772],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[316826,316836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316838,316843]},{"pos":[316852,316864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316870,316884],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[316936,316946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316948,316953]},{"pos":[316962,316974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316980,317002],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[317054,317064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317066,317071]},{"pos":[317080,317092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317098,317120],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[317196,317206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317208,317213]},{"pos":[317222,317234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317240,317256],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[317302,317312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317314,317319]},{"pos":[317328,317340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317346,317363],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[317420,317430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[317432,317447]},{"pos":[317456,317468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317474,317501],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[317568,317578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[317580,317595]},{"pos":[317604,317616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317622,317638],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[317640,317702]},{"pos":[317748,317758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317760,317765]},{"pos":[317774,317786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[317788,317849]},{"pos":[317856,317863],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[317865,317918]},{"content":"Mode.","pos":[317922,317927]},{"content":"Width Calculation.","pos":[317938,317956]},{"content":"Exact.","pos":[318140,318146]},{"content":"The exact width in pixels of the controls is used.","pos":[318156,318206]},{"content":"Auto.","pos":[318249,318254]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[318265,318353]},{"content":"Column width.","pos":[318358,318371]},{"content":"The layout of the form determines the width of the control.","pos":[318374,318433]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[318466,318549]},{"pos":[318555,318580],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[318634,318644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[318646,318652]},{"pos":[318661,318673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318679,318694],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[318739,318749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318751,318756]},{"pos":[318765,318777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318783,318799],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[318849,318859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318861,318866]},{"pos":[318875,318887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318893,318910],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[318912,318950]},{"pos":[318999,319009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319011,319016]},{"pos":[319025,319037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[319039,319074]},{"pos":[319081,319088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[319090,319163]},{"pos":[319169,319179],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[319231,319241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319243,319248]},{"content":"unit","pos":[319262,319266]},{"pos":[319274,319293],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[319354,319364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319366,319371]},{"content":"unit","pos":[319385,319389]},{"pos":[319397,319410],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[319412,319451]},{"pos":[319506,319516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319518,319523]},{"content":"unit","pos":[319537,319541]},{"pos":[319550,319557],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[319559,319666]},{"content":"Mode.","pos":[319670,319675]},{"content":"Height calculation.","pos":[319689,319708]},{"content":"-1 Exact.","pos":[319896,319905]},{"content":"The exact height in pixels of the controls is used.","pos":[319915,319966]},{"content":"0 Auto.","pos":[320009,320016]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[320028,320117]},{"content":"1 Column height.","pos":[320122,320138]},{"content":"The layout of the form determines the height of the control.","pos":[320141,320201]},{"content":"The height and height calculation mode can be set separately.","pos":[320234,320295]},{"pos":[320301,320312],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[320342,320359],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[320418,320428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320430,320435]},{"content":"unit","pos":[320449,320453]},{"pos":[320461,320478],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[320537,320547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320549,320554]},{"content":"unit","pos":[320568,320572]},{"pos":[320580,320596],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[320654,320664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320666,320671]},{"content":"unit","pos":[320685,320689]},{"pos":[320697,320709],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[320711,320749]},{"pos":[320803,320813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320815,320820]},{"content":"unit","pos":[320834,320838]},{"pos":[320847,320854],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[320856,320962]},{"content":"Mode.","pos":[320966,320971]},{"content":"Width calculation.","pos":[320984,321002]},{"content":"-1 Exact.","pos":[321188,321197]},{"content":"The exact width in pixels of the controls is used.","pos":[321206,321256]},{"content":"0 Auto.","pos":[321299,321306]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[321317,321405]},{"content":"1 Column width.","pos":[321410,321425]},{"content":"The layout of the form determines the width of the control.","pos":[321428,321487]},{"content":"The width and width calculation mode can be set separately.","pos":[321520,321579]},{"pos":[321585,321603],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[321663,321673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321675,321680]},{"content":"unit","pos":[321694,321698]},{"pos":[321706,321717],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[321770,321780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321782,321787]},{"content":"unit","pos":[321801,321805]},{"pos":[321813,321824],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[321853,321875],"content":"Class ReportFieldGroup","linkify":"Class ReportFieldGroup","nodes":[{"content":"Class ReportFieldGroup","pos":[0,22]}]},{"content":"The ReportFieldGroup class lets you create, read, update, and delete X++ code and metadata.","pos":[321921,322012]},{"pos":[322018,322025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[322027,322137]},{"pos":[322143,322151],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[322157,322164],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[322168,322174]},{"content":"Description","pos":[322216,322227]},{"content":"public int autoFieldGroupOrder(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322396,322441],"source":"public int autoFieldGroupOrder(\\[int value\\])"},{"content":"public str dataGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[322510,322545],"source":"public str dataGroup(\\[str value\\])"},{"content":"public int fieldCount()","pos":[322624,322647]},{"content":"public ReportControl fieldNumber(int number)","pos":[322738,322782]},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[322852,322891],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID that is associated with the object.","pos":[322900,322961]},{"pos":[322969,322995],"content":"Method autoFieldGroupOrder","linkify":"Method autoFieldGroupOrder","nodes":[{"content":"Method autoFieldGroupOrder","pos":[0,26]}]},{"pos":[323051,323061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323063,323068]},{"pos":[323077,323089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323095,323111],"content":"Method dataGroup","linkify":"Method dataGroup","nodes":[{"content":"Method dataGroup","pos":[0,16]}]},{"pos":[323157,323167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323169,323174]},{"pos":[323183,323195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323201,323218],"content":"Method fieldCount","linkify":"Method fieldCount","nodes":[{"content":"Method fieldCount","pos":[0,17]}]},{"pos":[323254,323266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323272,323290],"content":"Method fieldNumber","linkify":"Method fieldNumber","nodes":[{"content":"Method fieldNumber","pos":[0,18]}]},{"pos":[323347,323357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[323359,323365]},{"pos":[323374,323386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323392,323404],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID that is associated with the object.","pos":[323406,323467]},{"pos":[323517,323527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323529,323534]},{"pos":[323543,323555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID that is associated with the object.","pos":[323557,323626]},{"pos":[323631,323654],"content":"Class ReportGuidControl","linkify":"Class ReportGuidControl","nodes":[{"content":"Class ReportGuidControl","pos":[0,23]}]},{"content":"The ReportGuidControl class enables you to create, read, update, and delete X++ code and metadata.","pos":[323706,323804]},{"pos":[323810,323817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[323823,323831],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[323837,323844],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[323848,323854]},{"content":"Description","pos":[323923,323934]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324290,324325],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324511,324547],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[324732,324781],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[324807,324905]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324953,324994],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[325028,325077]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325174,325209],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[325249,325311]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325395,325425],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[325470,325545]},{"content":"public int bottomMarginAndFrame()","pos":[325616,325649]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325837,325879],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326058,326099],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[326279,326325],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[326500,326545],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326721,326762],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326942,326980],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[327017,327060]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327163,327200],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[327238,327283]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[327384,327456],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[327459,327526]},{"content":"public ReportFieldType controlType()","pos":[327605,327641]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[327826,327860],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[328047,328090],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[328268,328304],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[328489,328508]},{"content":"public str effectiveFont()","pos":[328710,328736]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[328931,328995],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[329152,329182],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[329227,329284]},{"content":"public str fontInfoPrinter()","pos":[329373,329401]},{"content":"public int fontInfoPrinterAscent()","pos":[329594,329628]},{"content":"public int fontInfoPrinterDescent()","pos":[329815,329850]},{"content":"public int fontInfoPrinterExtLead()","pos":[330036,330071]},{"content":"public int fontInfoPrinterHeight()","pos":[330257,330291]},{"content":"public int fontInfoPrinterIntLead()","pos":[330478,330513]},{"content":"public str fontInfoScreen()","pos":[330699,330726]},{"content":"public int fontInfoScreenAscent()","pos":[330920,330953]},{"content":"public int fontInfoScreenDescent()","pos":[331141,331175]},{"content":"public int fontInfoScreenExtLead()","pos":[331362,331396]},{"content":"public int fontInfoScreenHeight()","pos":[331583,331616]},{"content":"public int fontInfoScreenIntLead()","pos":[331804,331838]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332025,332059],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[332100,332157]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332246,332287],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[332321,332372]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[332467,332515],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[332688,332746],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332909,332945],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[332984,333046]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[333130,333183]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[333351,333386],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[333572,333612],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[333793,333832],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[333868,333907]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[334014,334054],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334235,334266],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[334310,334347]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334456,334491],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334677,334720],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334898,334937],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[335119,335154],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335340,335379],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[335561,335606],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[335782,335832],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[336003,336067],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336224,336263],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336445,336485],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[336666,336714],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336887,336927],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[337108,337147],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[337329,337373],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[337550,337593],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[337771,337815],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[337992,338046],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[338213,338243]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338434,338474],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[338655,338694],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[338876,338920],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[339097,339140],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339318,339352],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339539,339572],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[339760,339798],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[339981,340018],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[340202,340247],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[340423,340468],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[340644,340688],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[340719,340794]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[340865,340910],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341086,341125],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341307,341345],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[341528,341584],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341749,341789],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341970,342000],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[342045,342187]},{"content":"public int numberOfLines(int height100mm)","pos":[342192,342233]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342413,342447],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[342634,342668]},{"content":"public int previewXCompensation100mm(str string)","pos":[342855,342903]},{"content":"public int right100mm()","pos":[343076,343099]},{"content":"public int right100mmInclBorder()","pos":[343297,343330]},{"content":"public int rightMarginAndFrame()","pos":[343518,343550]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343739,343780],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[343960,344000],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[344181,344226],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[344402,344446],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[344623,344680],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[344844,344894]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[345065,345108],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[345286,345325],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[345361,345414]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[345507,345562],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[345728,345770],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[345949,346001],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[346170,346200]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346391,346430],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[346612,346650],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[346833,346876],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[347054,347096],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347275,347308],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[347496,347528],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[347717,347754],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[347938,347974],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348159,348202],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348380,348421],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[348601,348642],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[348822,348887],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[349043,349078],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[349264,349310],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[349485,349541],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349706,349741],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[349781,349843]},{"content":"public int widthOfString100mm(str string)","pos":[349927,349968]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[350148,350182],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[350369,350408],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[350590,350628],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[350665,350703]},{"content":"public void width(Real value, Units unit)","pos":[350811,350852]},{"content":"Gets or sets the width of the control.","pos":[350886,350924]},{"content":"public void topMargin(Real value, Units unit)","pos":[351032,351077]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[351253,351301]},{"content":"public void rightMargin(Real value, Units unit)","pos":[351474,351521]},{"content":"public void leftMargin(Real value, Units unit)","pos":[351695,351741]},{"content":"public void show()","pos":[351916,351934]},{"content":"public void hide()","pos":[352137,352155]},{"content":"public void top(Real value, Units unit)","pos":[352358,352397]},{"content":"public void left(Real value, Units unit)","pos":[352579,352619]},{"content":"public void labelWidth(Real value, Units unit)","pos":[352800,352846]},{"content":"public void height(Real value, Units unit)","pos":[353021,353063]},{"content":"Gets or sets the height of the control.","pos":[353096,353135]},{"pos":[353245,353261],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[353307,353317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353319,353324]},{"pos":[353333,353345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353351,353368],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[353415,353425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353427,353432]},{"pos":[353441,353453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353459,353481],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[353483,353581]},{"pos":[353641,353651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353653,353658]},{"pos":[353667,353679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[353681,353760]},{"pos":[353767,353774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[353776,353813]},{"pos":[353819,353841],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[353843,353892]},{"pos":[353944,353954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353956,353961]},{"pos":[353970,353982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[353984,354028]},{"pos":[354035,354042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[354044,354112]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[354118,354188]},{"content":"The second byte contains a value for green.","pos":[354193,354236]},{"content":"The third byte contains a value for blue.","pos":[354241,354282]},{"content":"The high-order byte must be zero.","pos":[354287,354320]},{"content":"The maximum value for a single byte is 255.","pos":[354325,354368]},{"pos":[354374,354390],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[354392,354454]},{"pos":[354500,354510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354512,354517]},{"pos":[354526,354538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[354540,354601]},{"pos":[354607,354618],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[354620,354695]},{"pos":[354736,354746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354748,354753]},{"pos":[354762,354774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[354776,354826]},{"pos":[354833,354840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[354842,354914]},{"content":"0 Use the default font weight.","pos":[354920,354950]},{"content":"1 Thin.","pos":[354955,354962]},{"content":"2 Extra-light.","pos":[354967,354981]},{"content":"3 Light.","pos":[354986,354994]},{"content":"4 Normal.","pos":[354999,355008]},{"content":"5 Medium.","pos":[355013,355022]},{"content":"6 Semibold.","pos":[355027,355038]},{"content":"7 Bold.","pos":[355043,355050]},{"content":"8 Extra-bold.","pos":[355055,355068]},{"content":"9 Heavy.","pos":[355073,355081]},{"pos":[355087,355114],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[355160,355172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355178,355201],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[355254,355264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355266,355271]},{"pos":[355280,355292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355298,355320],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[355372,355382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355384,355389]},{"pos":[355398,355410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355416,355439],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[355496,355506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355508,355513]},{"pos":[355522,355534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355540,355564],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[355620,355630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355632,355637]},{"pos":[355646,355658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355664,355686],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[355738,355748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355750,355755]},{"pos":[355764,355776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355782,355801],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[355803,355846]},{"pos":[355895,355905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355907,355912]},{"pos":[355921,355933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[355935,355997]},{"pos":[356004,356011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[356013,356117]},{"content":"Value.","pos":[356121,356127]},{"content":"Description.","pos":[356130,356142]},{"content":"0","pos":[356189,356190]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356198,356211],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[356223,356224]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356232,356248],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[356257,356258]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356266,356281],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[356291,356293]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356300,356312],"source":"MAC\\_CHARSET"},{"content":"128","pos":[356325,356328]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356334,356351],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[356359,356362]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356368,356383],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[356393,356396]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356402,356417],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[356427,356430]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356436,356456],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[356461,356464]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356470,356484],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[356495,356498]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356504,356520],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[356529,356532]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356538,356557],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[356563,356566]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356572,356587],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[356597,356600]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356606,356622],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[356631,356634]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356640,356659],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[356665,356668]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356674,356686],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[356698,356786]},{"content":"Value.","pos":[356790,356796]},{"content":"Description.","pos":[356799,356811]},{"content":"130","pos":[356846,356849]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[356855,356869],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[356873,356968]},{"content":"Value.","pos":[356972,356978]},{"content":"Description.","pos":[356981,356993]},{"content":"177","pos":[357030,357033]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[357039,357054],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[357059,357062]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[357068,357083],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[357087,357173]},{"content":"Value.","pos":[357177,357183]},{"content":"Description.","pos":[357186,357198]},{"content":"222","pos":[357231,357234]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[357240,357253],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[357257,357341]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[357342,357548],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[357554,357572],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[357574,357619]},{"pos":[357667,357677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357679,357684]},{"pos":[357693,357705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[357707,357750]},{"pos":[357757,357764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[357766,357827]},{"content":"Value.","pos":[357831,357837]},{"content":"Style.","pos":[357840,357846]},{"content":"0","pos":[357917,357918]},{"content":"Default.","pos":[357926,357934]},{"content":"1","pos":[357960,357961]},{"content":"The MicrosoftWindows palette.","pos":[357969,357998]},{"content":"2","pos":[358003,358004]},{"content":"The true-color scheme.","pos":[358012,358034]},{"pos":[358049,358072],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[358074,358141]},{"pos":[358224,358234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358236,358241]},{"pos":[358250,358262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[358264,358336]},{"pos":[358343,358350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[358352,358433]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[358434,358527]},{"pos":[358533,358551],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[358600,358612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[358618,358633],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[358678,358688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358690,358695]},{"pos":[358704,358716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[358722,358738],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[358792,358802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358804,358809]},{"pos":[358818,358830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[358836,358853],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[358900,358910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358912,358917]},{"pos":[358926,358938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[358944,358957],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[358989,359001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359007,359027],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[359066,359078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359084,359107],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[359182,359192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359194,359199]},{"pos":[359208,359220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359226,359237],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[359239,359296]},{"pos":[359337,359347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359349,359354]},{"pos":[359363,359375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[359377,359432]},{"pos":[359438,359460],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[359501,359513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359519,359547],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[359594,359606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359612,359641],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[359689,359701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359707,359736],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[359784,359796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359802,359830],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[359877,359889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359895,359924],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[359972,359984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359990,360011],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[360051,360063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360069,360096],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[360142,360154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360160,360188],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[360235,360247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360253,360281],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[360328,360340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360346,360373],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[360419,360431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360437,360465],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[360512,360524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360530,360545],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[360547,360604]},{"pos":[360649,360659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360661,360666]},{"pos":[360675,360687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[360689,360722]},{"pos":[360728,360750],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[360752,360803]},{"pos":[360855,360865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360867,360872]},{"pos":[360881,360893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[360895,360939]},{"pos":[360946,360953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[360955,361023]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[361029,361099]},{"content":"The second byte contains a value for green.","pos":[361104,361147]},{"content":"The third byte contains a value for blue.","pos":[361152,361193]},{"content":"The high-order byte must be zero.","pos":[361198,361231]},{"content":"The maximum value for a single byte is 255.","pos":[361236,361279]},{"pos":[361285,361303],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[361362,361372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[361374,361390]},{"pos":[361399,361411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361417,361445],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[361514,361524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[361526,361542]},{"pos":[361551,361563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361569,361586],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[361588,361650]},{"pos":[361697,361707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361709,361714]},{"pos":[361723,361735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[361737,361758]},{"pos":[361765,361772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[361774,361828]},{"content":"Mode.","pos":[361832,361837]},{"content":"Height Calculation.","pos":[361849,361868]},{"content":"Exact.","pos":[362054,362060]},{"content":"The exact height in pixels of the controls is used.","pos":[362071,362122]},{"content":"Auto.","pos":[362165,362170]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[362182,362271]},{"content":"Column height.","pos":[362276,362290]},{"content":"The layout of the form determines the height of the control.","pos":[362293,362353]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[362386,362471]},{"pos":[362477,362514],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[362580,362590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[362592,362598]},{"pos":[362607,362619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362625,362641],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[362687,362697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362699,362704]},{"pos":[362713,362725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362731,362748],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[362799,362809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362811,362816]},{"pos":[362825,362837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362843,362861],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[362863,362902]},{"pos":[362952,362962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362964,362969]},{"pos":[362978,362990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[362992,363013]},{"pos":[363020,363027],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[363029,363119]},{"pos":[363125,363138],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[363189,363199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363201,363206]},{"pos":[363215,363227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363233,363245],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[363247,363284]},{"pos":[363326,363336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363338,363343]},{"pos":[363352,363364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[363366,363404]},{"pos":[363411,363418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[363420,363552]},{"pos":[363558,363574],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[363620,363630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363632,363637]},{"pos":[363646,363658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363664,363688],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[363742,363752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363754,363759]},{"pos":[363768,363780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363786,363806],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[363856,363866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363868,363873]},{"pos":[363882,363894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363900,363916],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[363962,363972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363974,363979]},{"pos":[363988,364000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364006,364026],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[364076,364086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364088,364093]},{"pos":[364102,364114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364120,364138],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[364194,364204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364206,364211]},{"pos":[364220,364232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364238,364259],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[364320,364330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364332,364337]},{"pos":[364346,364358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364364,364389],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[364464,364474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364476,364481]},{"pos":[364490,364502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364508,364528],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[364578,364588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364590,364595]},{"pos":[364604,364616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364622,364643],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[364694,364704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364706,364711]},{"pos":[364720,364732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364738,364759],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[364818,364828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364830,364835]},{"pos":[364844,364856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364862,364883],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[364934,364944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364946,364951]},{"pos":[364960,364972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364978,364998],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[365048,365058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365060,365065]},{"pos":[365074,365086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365092,365113],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[365168,365178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365180,365185]},{"pos":[365194,365206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365212,365234],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[365288,365298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365300,365305]},{"pos":[365314,365326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365332,365348],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[365403,365413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[365415,365429]},{"pos":[365438,365450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365456,365482],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[365547,365557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[365559,365573]},{"pos":[365582,365594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365600,365624],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[365667,365679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365685,365706],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[365757,365767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365769,365774]},{"pos":[365783,365795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365801,365821],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[365871,365881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365883,365888]},{"pos":[365897,365909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365915,365936],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[365991,366001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366003,366008]},{"pos":[366017,366029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366035,366057],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[366111,366121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366123,366128]},{"pos":[366137,366149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366155,366170],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[366215,366225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366227,366232]},{"pos":[366241,366253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366259,366273],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[366317,366327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366329,366334]},{"pos":[366343,366355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366361,366376],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[366425,366435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366437,366442]},{"pos":[366451,366463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366469,366485],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[366533,366543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366545,366550]},{"pos":[366559,366571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366577,366593],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[366649,366659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366661,366666]},{"pos":[366675,366687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366693,366709],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[366765,366775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366777,366782]},{"pos":[366791,366803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366809,366824],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[366826,366901]},{"pos":[366956,366966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366968,366973]},{"pos":[366982,366994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[366996,367045]},{"pos":[367051,367067],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[367123,367133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367135,367140]},{"pos":[367149,367161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367167,367187],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[367237,367247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367249,367254]},{"pos":[367263,367275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367281,367300],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[367349,367359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367361,367366]},{"pos":[367375,367387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367393,367412],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[367479,367489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367491,367496]},{"pos":[367505,367517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367523,367544],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[367595,367605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367607,367612]},{"pos":[367621,367633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367639,367650],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[367652,367794]},{"pos":[367835,367845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367847,367852]},{"pos":[367861,367873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[367875,367943]},{"pos":[367950,367957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[367959,368053]},{"content":"Begins with a letter.","pos":[368059,368080]},{"content":"Doesn't exceed 250 characters.","pos":[368085,368115]},{"content":"Can include numbers and underscore characters.","pos":[368120,368166]},{"content":"Cannot include punctuation or spaces.","pos":[368171,368208]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[368213,368331]},{"pos":[368337,368357],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[368411,368421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[368423,368434]},{"pos":[368443,368455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368461,368476],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[368521,368531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368533,368538]},{"pos":[368547,368559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368565,368583],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[368630,368640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[368642,368648]},{"pos":[368657,368669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368675,368707],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[368768,368778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[368780,368786]},{"pos":[368795,368807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368813,368830],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[368866,368878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368884,368911],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[368957,368969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368975,369001],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[369046,369058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369064,369086],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[369138,369148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369150,369155]},{"pos":[369164,369176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369182,369203],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[369254,369264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369266,369271]},{"pos":[369280,369292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369298,369320],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[369376,369386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369388,369393]},{"pos":[369402,369414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369420,369443],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[369498,369508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369510,369515]},{"pos":[369524,369536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369542,369560],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[369628,369638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369640,369645]},{"pos":[369654,369666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369672,369695],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[369758,369768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[369770,369775]},{"content":"string","pos":[369789,369795]},{"pos":[369804,369816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369822,369838],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[369892,369902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369904,369909]},{"pos":[369918,369930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369936,369948],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[369950,370003]},{"pos":[370053,370063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370065,370070]},{"pos":[370079,370091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[370093,370154]},{"pos":[370160,370176],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[370242,370252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370254,370259]},{"pos":[370268,370280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370286,370301],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[370354,370364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[370366,370379]},{"pos":[370388,370400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370406,370431],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[370494,370504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[370506,370519]},{"pos":[370528,370540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370546,370570],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[370613,370625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370631,370651],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[370701,370711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370713,370718]},{"pos":[370727,370739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370745,370764],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[370813,370823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370825,370830]},{"pos":[370839,370851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370857,370877],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[370931,370941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370943,370948]},{"pos":[370957,370969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370975,370996],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[371049,371059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371061,371066]},{"pos":[371075,371087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371093,371107],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[371151,371161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371163,371168]},{"pos":[371177,371189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371195,371208],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[371251,371261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371263,371268]},{"pos":[371277,371289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371295,371309],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[371357,371367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371369,371374]},{"pos":[371383,371395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371401,371416],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[371463,371473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371475,371480]},{"pos":[371489,371501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371507,371523],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[371577,371587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371589,371594]},{"pos":[371603,371615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371621,371635],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[371687,371697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371699,371704]},{"pos":[371713,371725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371731,371753],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[371805,371815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371817,371822]},{"pos":[371831,371843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371849,371871],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[371947,371957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371959,371964]},{"pos":[371973,371985],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371991,372007],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[372053,372063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372065,372070]},{"pos":[372079,372091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372097,372114],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[372171,372181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[372183,372198]},{"pos":[372207,372219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372225,372252],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[372319,372329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[372331,372346]},{"pos":[372355,372367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372373,372389],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[372391,372453]},{"pos":[372499,372509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372511,372516]},{"pos":[372525,372537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[372539,372600]},{"pos":[372607,372614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[372616,372669]},{"content":"Mode.","pos":[372673,372678]},{"content":"Width Calculation.","pos":[372689,372707]},{"content":"Exact.","pos":[372891,372897]},{"content":"The exact width in pixels of the controls is used.","pos":[372907,372957]},{"content":"Auto.","pos":[373000,373005]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[373016,373104]},{"content":"Column width.","pos":[373109,373122]},{"content":"The layout of the form determines the width of the control.","pos":[373125,373184]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[373217,373300]},{"pos":[373306,373331],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[373385,373395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[373397,373403]},{"pos":[373412,373424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373430,373445],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[373490,373500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373502,373507]},{"pos":[373516,373528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373534,373550],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[373600,373610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373612,373617]},{"pos":[373626,373638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373644,373661],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[373663,373701]},{"pos":[373750,373760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373762,373767]},{"pos":[373776,373788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[373790,373825]},{"pos":[373832,373839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[373841,373914]},{"pos":[373920,373932],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[373934,373972]},{"pos":[374026,374036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374038,374043]},{"content":"unit","pos":[374057,374061]},{"pos":[374070,374077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[374079,374185]},{"content":"Mode.","pos":[374189,374194]},{"content":"Width calculation.","pos":[374207,374225]},{"content":"-1 Exact.","pos":[374411,374420]},{"content":"The exact width in pixels of the controls is used.","pos":[374429,374479]},{"content":"0 Auto.","pos":[374522,374529]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[374540,374628]},{"content":"1 Column width.","pos":[374633,374648]},{"content":"The layout of the form determines the width of the control.","pos":[374651,374710]},{"content":"The width and width calculation mode can be set separately.","pos":[374743,374802]},{"pos":[374808,374824],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[374882,374892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374894,374899]},{"content":"unit","pos":[374913,374917]},{"pos":[374925,374944],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[375005,375015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375017,375022]},{"content":"unit","pos":[375036,375040]},{"pos":[375048,375066],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[375126,375136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375138,375143]},{"content":"unit","pos":[375157,375161]},{"pos":[375169,375186],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[375245,375255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375257,375262]},{"content":"unit","pos":[375276,375280]},{"pos":[375288,375299],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[375329,375340],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[375370,375380],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[375432,375442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375444,375449]},{"content":"unit","pos":[375463,375467]},{"pos":[375475,375486],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[375539,375549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375551,375556]},{"content":"unit","pos":[375570,375574]},{"pos":[375582,375599],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[375658,375668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375670,375675]},{"content":"unit","pos":[375689,375693]},{"pos":[375701,375714],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[375716,375755]},{"pos":[375810,375820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375822,375827]},{"content":"unit","pos":[375841,375845]},{"pos":[375854,375861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[375863,375970]},{"content":"Mode.","pos":[375974,375979]},{"content":"Height calculation.","pos":[375993,376012]},{"content":"-1 Exact.","pos":[376200,376209]},{"content":"The exact height in pixels of the controls is used.","pos":[376219,376270]},{"content":"0 Auto.","pos":[376313,376320]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[376332,376421]},{"content":"1 Column height.","pos":[376426,376442]},{"content":"The layout of the form determines the height of the control.","pos":[376445,376505]},{"content":"The height and height calculation mode can be set separately.","pos":[376538,376599]},{"pos":[376604,376630],"content":"Class ReportIntegerControl","linkify":"Class ReportIntegerControl","nodes":[{"content":"Class ReportIntegerControl","pos":[0,26]}]},{"content":"The ReportIntegerControl class lets you create, read, update, and delete X++ code and metadata.","pos":[376685,376780]},{"pos":[376786,376793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[376795,376905]},{"pos":[376911,376919],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[376925,376932],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[376936,376942]},{"content":"Description","pos":[377011,377022]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377370,377405],"source":"public int alignment(\\[int value\\])"},{"content":"public int allowNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377587,377626],"source":"public int allowNegative(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377804,377840],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378021,378070],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[378096,378194]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378238,378279],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[378313,378362]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378455,378490],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[378530,378592]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378672,378702],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[378747,378823]},{"content":"public int bottomMarginAndFrame()","pos":[378889,378922]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379106,379148],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[379323,379364],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[379540,379586],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[379757,379802],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379974,380015],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380191,380229],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[380266,380309]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380408,380445],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[380483,380528]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[380625,380697],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[380700,380767]},{"content":"public ReportFieldType controlType()","pos":[380842,380878]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381059,381093],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[381276,381319],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381493,381529],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[381710,381729]},{"content":"public int displaceNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[381927,381988],"source":"public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displaceNegativeMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[382144,382199],"source":"public AutoMode displaceNegativeMode(\\[AutoMode mode\\])"},{"content":"public int displaceNegativeValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[382361,382408],"source":"public int displaceNegativeValue(\\[int value\\])"},{"content":"public str effectiveFont()","pos":[382578,382604]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[382795,382859],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int extraSumWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383012,383055],"source":"public int extraSumWidthMode(\\[int value\\])"},{"content":"public str extraSumWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[383229,383271],"source":"public str extraSumWidthStr(\\[str value\\])"},{"content":"public Units extraSumWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[383446,383493],"source":"public Units extraSumWidthUnit(\\[Units value\\])"},{"content":"public Real extraSumWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[383663,383709],"source":"public Real extraSumWidthValue(\\[Real value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[383880,383910],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[383955,384012]},{"content":"public str fontInfoPrinter()","pos":[384097,384125]},{"content":"public int fontInfoPrinterAscent()","pos":[384314,384348]},{"content":"public int fontInfoPrinterDescent()","pos":[384531,384566]},{"content":"public int fontInfoPrinterExtLead()","pos":[384748,384783]},{"content":"public int fontInfoPrinterHeight()","pos":[384965,384999]},{"content":"public int fontInfoPrinterIntLead()","pos":[385182,385217]},{"content":"public str fontInfoScreen()","pos":[385399,385426]},{"content":"public int fontInfoScreenAscent()","pos":[385616,385649]},{"content":"public int fontInfoScreenDescent()","pos":[385833,385867]},{"content":"public int fontInfoScreenExtLead()","pos":[386050,386084]},{"content":"public int fontInfoScreenHeight()","pos":[386267,386300]},{"content":"public int fontInfoScreenIntLead()","pos":[386484,386518]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386701,386735],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[386776,386833]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386918,386959],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[386993,387044]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[387135,387183],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[387352,387410],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387569,387605],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[387644,387706]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[387786,387839]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[388003,388038],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[388220,388260],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[388437,388476],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[388512,388551]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[388654,388694],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[388871,388902],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[388946,388983]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389088,389123],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389305,389348],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[389522,389561],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[389739,389774],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389956,389995],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[390173,390218],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[390390,390440],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[390607,390671],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390824,390863],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391041,391081],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391258,391306],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391475,391515],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[391692,391731],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[391909,391953],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[392126,392169],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[392343,392387],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[392560,392614],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[392777,392807]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392994,393034],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[393211,393250],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[393428,393472],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[393645,393688],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393862,393896],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[394079,394112],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[394296,394334],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[394513,394550],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[394730,394775],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[394947,394992],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[395164,395208],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[395239,395314]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[395381,395426],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[395598,395637],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[395815,395853],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[396032,396088],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[396249,396289],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[396466,396496],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[396541,396679]},{"content":"public int numberOfLines(int height100mm)","pos":[396684,396725]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396901,396935],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[397118,397152]},{"content":"public int previewXCompensation100mm(str string)","pos":[397335,397383]},{"content":"public int right100mm()","pos":[397552,397575]},{"content":"public int right100mmInclBorder()","pos":[397769,397802]},{"content":"public int rightMarginAndFrame()","pos":[397986,398018]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[398203,398244],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[398420,398460],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[398637,398682],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[398854,398898],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public int rotateSign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[399071,399107],"source":"public int rotateSign(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[399288,399345],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[399505,399555]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[399722,399765],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public int showZero(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[399939,399973],"source":"public int showZero(\\[int value\\])"},{"content":"public int signDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[400156,400193],"source":"public int signDisplay(\\[int value\\])"},{"content":"public boolean sumAll(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[400373,400413],"source":"public boolean sumAll(\\[boolean value\\])"},{"content":"public boolean sumNeg(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[400590,400630],"source":"public boolean sumNeg(\\[boolean value\\])"},{"content":"public boolean sumPos(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[400807,400847],"source":"public boolean sumPos(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[401024,401063],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[401099,401152]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[401241,401296],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[401458,401500],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[401675,401727],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[401892,401922]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[402109,402148],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[402326,402364],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[402543,402586],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[402760,402802],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[402977,403010],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[403194,403226],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[403411,403448],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[403628,403664],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[403845,403888],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[404062,404103],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[404279,404320],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[404496,404561],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[404713,404748],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[404930,404976],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[405147,405203],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[405364,405399],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[405439,405501]},{"content":"public int widthOfString100mm(str string)","pos":[405581,405622]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[405798,405832],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[406015,406054],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[406232,406270],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[406307,406345]},{"content":"public void show()","pos":[406449,406467]},{"content":"public void left(Real value, Units unit)","pos":[406666,406706]},{"content":"public void width(Real value, Units unit)","pos":[406883,406924]},{"content":"Gets or sets the width of the control.","pos":[406958,406996]},{"content":"public void extraSumWidth(Real value, Units unit)","pos":[407100,407149]},{"content":"public void leftMargin(Real value, Units unit)","pos":[407317,407363]},{"content":"public void topMargin(Real value, Units unit)","pos":[407534,407579]},{"content":"public void hide()","pos":[407751,407769]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[407968,408016]},{"content":"public void top(Real value, Units unit)","pos":[408185,408224]},{"content":"public void labelWidth(Real value, Units unit)","pos":[408402,408448]},{"content":"public void rightMargin(Real value, Units unit)","pos":[408619,408666]},{"content":"public void height(Real value, Units unit)","pos":[408836,408878]},{"content":"Gets or sets the height of the control.","pos":[408911,408950]},{"pos":[409056,409072],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[409118,409128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409130,409135]},{"pos":[409144,409156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409162,409182],"content":"Method allowNegative","linkify":"Method allowNegative","nodes":[{"content":"Method allowNegative","pos":[0,20]}]},{"pos":[409232,409242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409244,409249]},{"pos":[409258,409270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409276,409293],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[409340,409350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409352,409357]},{"pos":[409366,409378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409384,409406],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[409408,409506]},{"pos":[409566,409576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409578,409583]},{"pos":[409592,409604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[409606,409685]},{"pos":[409692,409699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[409701,409738]},{"pos":[409744,409766],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[409768,409817]},{"pos":[409869,409879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409881,409886]},{"pos":[409895,409907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[409909,409953]},{"pos":[409960,409967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[409969,410037]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[410043,410113]},{"content":"The second byte contains a value for green.","pos":[410118,410161]},{"content":"The third byte contains a value for blue.","pos":[410166,410207]},{"content":"The high-order byte must be zero.","pos":[410212,410245]},{"content":"The maximum value for a single byte is 255.","pos":[410250,410293]},{"pos":[410299,410315],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[410317,410379]},{"pos":[410425,410435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410437,410442]},{"pos":[410451,410463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[410465,410526]},{"pos":[410532,410543],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[410545,410621]},{"pos":[410662,410672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410674,410679]},{"pos":[410688,410700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[410702,410752]},{"pos":[410759,410766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[410768,410840]},{"content":"0 Use the default font weight.","pos":[410846,410876]},{"content":"1 Thin.","pos":[410881,410888]},{"content":"2 Extra-light.","pos":[410893,410907]},{"content":"3 Light.","pos":[410912,410920]},{"content":"4 Normal.","pos":[410925,410934]},{"content":"5 Medium.","pos":[410939,410948]},{"content":"6 Semibold.","pos":[410953,410964]},{"content":"7 Bold.","pos":[410969,410976]},{"content":"8 Extra-bold.","pos":[410981,410994]},{"content":"9 Heavy.","pos":[410999,411007]},{"pos":[411013,411040],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[411086,411098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411104,411127],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[411180,411190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411192,411197]},{"pos":[411206,411218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411224,411246],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[411298,411308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411310,411315]},{"pos":[411324,411336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411342,411365],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[411422,411432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411434,411439]},{"pos":[411448,411460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411466,411490],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[411546,411556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411558,411563]},{"pos":[411572,411584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411590,411612],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[411664,411674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411676,411681]},{"pos":[411690,411702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411708,411727],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[411729,411772]},{"pos":[411821,411831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411833,411838]},{"pos":[411847,411859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[411861,411923]},{"pos":[411930,411937],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[411939,412043]},{"content":"Value.","pos":[412047,412053]},{"content":"Description.","pos":[412056,412068]},{"content":"0","pos":[412115,412116]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412124,412137],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[412149,412150]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412158,412174],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[412183,412184]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412192,412207],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[412217,412219]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412226,412238],"source":"MAC\\_CHARSET"},{"content":"128","pos":[412251,412254]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412260,412277],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[412285,412288]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412294,412309],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[412319,412322]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412328,412343],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[412353,412356]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412362,412382],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[412387,412390]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412396,412410],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[412421,412424]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412430,412446],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[412455,412458]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412464,412483],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[412489,412492]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412498,412513],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[412523,412526]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412532,412548],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[412557,412560]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412566,412585],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[412591,412594]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412600,412612],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[412624,412712]},{"content":"Value.","pos":[412716,412722]},{"content":"Description.","pos":[412725,412737]},{"content":"130","pos":[412772,412775]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412781,412795],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[412799,412885]},{"content":"Value.","pos":[412889,412895]},{"content":"Description.","pos":[412898,412910]},{"content":"177","pos":[412947,412950]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412956,412971],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[412976,412979]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[412985,413000],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[413004,413081]},{"content":"Value.","pos":[413085,413091]},{"content":"Description.","pos":[413094,413106]},{"content":"222","pos":[413139,413142]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[413148,413161],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[413165,413249]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[413250,413456],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[413462,413480],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[413482,413527]},{"pos":[413575,413585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413587,413592]},{"pos":[413601,413613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[413615,413658]},{"pos":[413665,413672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[413674,413735]},{"content":"Value.","pos":[413739,413745]},{"content":"Style.","pos":[413748,413754]},{"content":"0","pos":[413811,413812]},{"content":"Default.","pos":[413820,413828]},{"content":"1","pos":[413847,413848]},{"content":"The Windows palette.","pos":[413856,413876]},{"content":"2","pos":[413883,413884]},{"content":"The true-color scheme.","pos":[413892,413914]},{"pos":[413922,413945],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[413947,414014]},{"pos":[414097,414107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414109,414114]},{"pos":[414123,414135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[414137,414209]},{"pos":[414216,414223],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[414225,414306]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[414307,414400]},{"pos":[414406,414424],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[414473,414485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414491,414506],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[414551,414561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414563,414568]},{"pos":[414577,414589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414595,414611],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[414665,414675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414677,414682]},{"pos":[414691,414703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414709,414726],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[414773,414783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414785,414790]},{"pos":[414799,414811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414817,414830],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[414862,414874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414880,414903],"content":"Method displaceNegative","linkify":"Method displaceNegative","nodes":[{"content":"Method displaceNegative","pos":[0,23]}]},{"pos":[414973,414983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414985,414990]},{"content":"mode","pos":[415004,415008]},{"pos":[415017,415029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415035,415062],"content":"Method displaceNegativeMode","linkify":"Method displaceNegativeMode","nodes":[{"content":"Method displaceNegativeMode","pos":[0,27]}]},{"pos":[415128,415138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[415140,415144]},{"pos":[415153,415165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415171,415199],"content":"Method displaceNegativeValue","linkify":"Method displaceNegativeValue","nodes":[{"content":"Method displaceNegativeValue","pos":[0,28]}]},{"pos":[415257,415267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415269,415274]},{"pos":[415283,415295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415301,415321],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[415360,415372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415378,415401],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[415476,415486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415488,415493]},{"pos":[415502,415514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415520,415544],"content":"Method extraSumWidthMode","linkify":"Method extraSumWidthMode","nodes":[{"content":"Method extraSumWidthMode","pos":[0,24]}]},{"pos":[415598,415608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415610,415615]},{"pos":[415624,415636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415642,415665],"content":"Method extraSumWidthStr","linkify":"Method extraSumWidthStr","nodes":[{"content":"Method extraSumWidthStr","pos":[0,23]}]},{"pos":[415718,415728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415730,415735]},{"pos":[415744,415756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415762,415786],"content":"Method extraSumWidthUnit","linkify":"Method extraSumWidthUnit","nodes":[{"content":"Method extraSumWidthUnit","pos":[0,24]}]},{"pos":[415844,415854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415856,415861]},{"pos":[415870,415882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415888,415913],"content":"Method extraSumWidthValue","linkify":"Method extraSumWidthValue","nodes":[{"content":"Method extraSumWidthValue","pos":[0,25]}]},{"pos":[415970,415980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415982,415987]},{"pos":[415996,416008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416014,416025],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[416027,416084]},{"pos":[416125,416135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416137,416142]},{"pos":[416151,416163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[416165,416220]},{"pos":[416226,416248],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[416289,416301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416307,416335],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[416382,416394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416400,416429],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[416477,416489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416495,416524],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[416572,416584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416590,416618],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[416665,416677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416683,416712],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[416760,416772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416778,416799],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[416839,416851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416857,416884],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[416930,416942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416948,416976],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[417023,417035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417041,417069],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[417116,417128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417134,417161],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[417207,417219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417225,417253],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[417300,417312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417318,417333],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[417335,417392]},{"pos":[417437,417447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417449,417454]},{"pos":[417463,417475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[417477,417510]},{"pos":[417516,417538],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[417540,417591]},{"pos":[417643,417653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417655,417660]},{"pos":[417669,417681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[417683,417727]},{"pos":[417734,417741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[417743,417811]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[417817,417887]},{"content":"The second byte contains a value for green.","pos":[417892,417935]},{"content":"The third byte contains a value for blue.","pos":[417940,417981]},{"content":"The high-order byte must be zero.","pos":[417986,418019]},{"content":"The maximum value for a single byte is 255.","pos":[418024,418067]},{"pos":[418073,418091],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[418150,418160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[418162,418178]},{"pos":[418187,418199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418205,418233],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[418302,418312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[418314,418330]},{"pos":[418339,418351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418357,418374],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[418376,418438]},{"pos":[418485,418495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418497,418502]},{"pos":[418511,418523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[418525,418546]},{"pos":[418553,418560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[418562,418616]},{"content":"Mode.","pos":[418620,418625]},{"content":"Height Calculation.","pos":[418637,418656]},{"content":"Exact.","pos":[418842,418848]},{"content":"The exact height in pixels of the controls is used.","pos":[418859,418910]},{"content":"Auto.","pos":[418953,418958]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[418970,419059]},{"content":"Column height.","pos":[419064,419078]},{"content":"The layout of the form determines the height of the control.","pos":[419081,419141]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[419174,419259]},{"pos":[419265,419302],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[419368,419378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[419380,419386]},{"pos":[419395,419407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419413,419429],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[419475,419485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419487,419492]},{"pos":[419501,419513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419519,419536],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[419587,419597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419599,419604]},{"pos":[419613,419625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419631,419649],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[419651,419690]},{"pos":[419740,419750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419752,419757]},{"pos":[419766,419778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[419780,419801]},{"pos":[419808,419815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[419817,419907]},{"pos":[419913,419926],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[419977,419987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419989,419994]},{"pos":[420003,420015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420021,420033],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[420035,420072]},{"pos":[420114,420124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420126,420131]},{"pos":[420140,420152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[420154,420192]},{"pos":[420199,420206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[420208,420340]},{"pos":[420346,420362],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[420408,420418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420420,420425]},{"pos":[420434,420446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420452,420476],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[420530,420540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420542,420547]},{"pos":[420556,420568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420574,420594],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[420644,420654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420656,420661]},{"pos":[420670,420682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420688,420704],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[420750,420760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420762,420767]},{"pos":[420776,420788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420794,420814],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[420864,420874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420876,420881]},{"pos":[420890,420902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420908,420926],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[420982,420992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420994,420999]},{"pos":[421008,421020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421026,421047],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[421108,421118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421120,421125]},{"pos":[421134,421146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421152,421177],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[421252,421262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421264,421269]},{"pos":[421278,421290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421296,421316],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[421366,421376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421378,421383]},{"pos":[421392,421404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421410,421431],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[421482,421492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421494,421499]},{"pos":[421508,421520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421526,421547],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[421606,421616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421618,421623]},{"pos":[421632,421644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421650,421671],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[421722,421732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421734,421739]},{"pos":[421748,421760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421766,421786],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[421836,421846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421848,421853]},{"pos":[421862,421874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421880,421901],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[421956,421966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421968,421973]},{"pos":[421982,421994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422000,422022],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[422076,422086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422088,422093]},{"pos":[422102,422114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422120,422136],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[422191,422201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[422203,422217]},{"pos":[422226,422238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422244,422270],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[422335,422345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[422347,422361]},{"pos":[422370,422382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422388,422412],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[422455,422467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422473,422494],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[422545,422555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422557,422562]},{"pos":[422571,422583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422589,422609],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[422659,422669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422671,422676]},{"pos":[422685,422697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422703,422724],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[422779,422789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422791,422796]},{"pos":[422805,422817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422823,422845],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[422899,422909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422911,422916]},{"pos":[422925,422937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422943,422958],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[423003,423013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423015,423020]},{"pos":[423029,423041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423047,423061],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[423105,423115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423117,423122]},{"pos":[423131,423143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423149,423164],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[423213,423223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423225,423230]},{"pos":[423239,423251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423257,423273],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[423321,423331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423333,423338]},{"pos":[423347,423359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423365,423381],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[423437,423447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423449,423454]},{"pos":[423463,423475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423481,423497],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[423553,423563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423565,423570]},{"pos":[423579,423591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423597,423612],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[423614,423689]},{"pos":[423744,423754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423756,423761]},{"pos":[423770,423782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[423784,423833]},{"pos":[423839,423855],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[423911,423921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423923,423928]},{"pos":[423937,423949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423955,423975],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[424025,424035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424037,424042]},{"pos":[424051,424063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424069,424088],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[424137,424147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424149,424154]},{"pos":[424163,424175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424181,424200],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[424267,424277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424279,424284]},{"pos":[424293,424305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424311,424332],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[424383,424393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424395,424400]},{"pos":[424409,424421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424427,424438],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[424440,424578]},{"pos":[424619,424629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424631,424636]},{"pos":[424645,424657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[424659,424723]},{"pos":[424730,424737],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[424739,424833]},{"content":"Begins with a letter.","pos":[424839,424860]},{"content":"Doesn't exceed 250 characters.","pos":[424865,424895]},{"content":"Can include numbers and underscore characters.","pos":[424900,424946]},{"content":"Cannot include punctuation or spaces.","pos":[424951,424988]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[424993,425111]},{"pos":[425117,425137],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[425191,425201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[425203,425214]},{"pos":[425223,425235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425241,425256],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[425301,425311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425313,425318]},{"pos":[425327,425339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425345,425363],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[425410,425420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[425422,425428]},{"pos":[425437,425449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425455,425487],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[425548,425558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[425560,425566]},{"pos":[425575,425587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425593,425610],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[425646,425658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425664,425691],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[425737,425749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425755,425781],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[425826,425838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425844,425866],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[425918,425928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425930,425935]},{"pos":[425944,425956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425962,425983],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[426034,426044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426046,426051]},{"pos":[426060,426072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426078,426100],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[426156,426166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426168,426173]},{"pos":[426182,426194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426200,426223],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[426278,426288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426290,426295]},{"pos":[426304,426316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426322,426339],"content":"Method rotateSign","linkify":"Method rotateSign","nodes":[{"content":"Method rotateSign","pos":[0,17]}]},{"pos":[426386,426396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426398,426403]},{"pos":[426412,426424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426430,426448],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[426516,426526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426528,426533]},{"pos":[426542,426554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426560,426583],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[426646,426656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[426658,426663]},{"content":"string","pos":[426677,426683]},{"pos":[426692,426704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426710,426726],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[426780,426790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426792,426797]},{"pos":[426806,426818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426824,426839],"content":"Method showZero","linkify":"Method showZero","nodes":[{"content":"Method showZero","pos":[0,15]}]},{"pos":[426884,426894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426896,426901]},{"pos":[426910,426922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426928,426946],"content":"Method signDisplay","linkify":"Method signDisplay","nodes":[{"content":"Method signDisplay","pos":[0,18]}]},{"pos":[426994,427004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427006,427011]},{"pos":[427020,427032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427038,427051],"content":"Method sumAll","linkify":"Method sumAll","nodes":[{"content":"Method sumAll","pos":[0,13]}]},{"pos":[427102,427112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427114,427119]},{"pos":[427128,427140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427146,427159],"content":"Method sumNeg","linkify":"Method sumNeg","nodes":[{"content":"Method sumNeg","pos":[0,13]}]},{"pos":[427210,427220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427222,427227]},{"pos":[427236,427248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427254,427267],"content":"Method sumPos","linkify":"Method sumPos","nodes":[{"content":"Method sumPos","pos":[0,13]}]},{"pos":[427318,427328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427330,427335]},{"pos":[427344,427356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427362,427374],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[427376,427429]},{"pos":[427479,427489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427491,427496]},{"pos":[427505,427517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[427519,427580]},{"pos":[427586,427602],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[427668,427678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427680,427685]},{"pos":[427694,427706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427712,427727],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[427780,427790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[427792,427805]},{"pos":[427814,427826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427832,427857],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[427920,427930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[427932,427945]},{"pos":[427954,427966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427972,427996],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[428039,428051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428057,428077],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[428127,428137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428139,428144]},{"pos":[428153,428165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428171,428190],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[428239,428249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428251,428256]},{"pos":[428265,428277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428283,428303],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[428357,428367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428369,428374]},{"pos":[428383,428395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428401,428422],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[428475,428485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428487,428492]},{"pos":[428501,428513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428519,428533],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[428577,428587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428589,428594]},{"pos":[428603,428615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428621,428634],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[428677,428687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428689,428694]},{"pos":[428703,428715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428721,428735],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[428783,428793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428795,428800]},{"pos":[428809,428821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428827,428842],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[428889,428899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428901,428906]},{"pos":[428915,428927],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428933,428949],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[429003,429013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429015,429020]},{"pos":[429029,429041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429047,429061],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[429113,429123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429125,429130]},{"pos":[429139,429151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429157,429179],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[429231,429241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429243,429248]},{"pos":[429257,429269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429275,429297],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[429373,429383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429385,429390]},{"pos":[429399,429411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429417,429433],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[429479,429489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429491,429496]},{"pos":[429505,429517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429523,429540],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[429597,429607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[429609,429624]},{"pos":[429633,429645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429651,429678],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[429745,429755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[429757,429772]},{"pos":[429781,429793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429799,429815],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[429817,429879]},{"pos":[429925,429935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429937,429942]},{"pos":[429951,429963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[429965,430026]},{"pos":[430033,430040],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[430042,430095]},{"content":"Mode.","pos":[430099,430104]},{"content":"Width Calculation.","pos":[430115,430133]},{"content":"Exact.","pos":[430317,430323]},{"content":"The exact width in pixels of the controls is used.","pos":[430333,430383]},{"content":"Auto.","pos":[430426,430431]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[430442,430530]},{"content":"Column width.","pos":[430535,430548]},{"content":"The layout of the form determines the width of the control.","pos":[430551,430610]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[430643,430726]},{"pos":[430732,430757],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[430811,430821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[430823,430829]},{"pos":[430838,430850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[430856,430871],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[430916,430926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[430928,430933]},{"pos":[430942,430954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[430960,430976],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[431026,431036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431038,431043]},{"pos":[431052,431064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[431070,431087],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[431089,431127]},{"pos":[431176,431186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431188,431193]},{"pos":[431202,431214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[431216,431251]},{"pos":[431258,431265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[431267,431340]},{"pos":[431346,431357],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[431387,431398],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[431451,431461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431463,431468]},{"content":"unit","pos":[431482,431486]},{"pos":[431494,431506],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[431508,431546]},{"pos":[431600,431610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431612,431617]},{"content":"unit","pos":[431631,431635]},{"pos":[431644,431651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[431653,431759]},{"content":"Mode.","pos":[431763,431768]},{"content":"Width calculation.","pos":[431781,431799]},{"content":"-1 Exact.","pos":[431985,431994]},{"content":"The exact width in pixels of the controls is used.","pos":[432003,432053]},{"content":"0 Auto.","pos":[432096,432103]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[432114,432202]},{"content":"1 Column width.","pos":[432207,432222]},{"content":"The layout of the form determines the width of the control.","pos":[432225,432284]},{"content":"The width and width calculation mode can be set separately.","pos":[432317,432376]},{"pos":[432382,432402],"content":"Method extraSumWidth","linkify":"Method extraSumWidth","nodes":[{"content":"Method extraSumWidth","pos":[0,20]}]},{"pos":[432464,432474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432476,432481]},{"content":"unit","pos":[432495,432499]},{"pos":[432507,432524],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[432583,432593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432595,432600]},{"content":"unit","pos":[432614,432618]},{"pos":[432626,432642],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[432700,432710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432712,432717]},{"content":"unit","pos":[432731,432735]},{"pos":[432743,432754],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[432784,432803],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[432864,432874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432876,432881]},{"content":"unit","pos":[432895,432899]},{"pos":[432907,432917],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[432969,432979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432981,432986]},{"content":"unit","pos":[433000,433004]},{"pos":[433012,433029],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[433088,433098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433100,433105]},{"content":"unit","pos":[433119,433123]},{"pos":[433131,433149],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[433209,433219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433221,433226]},{"content":"unit","pos":[433240,433244]},{"pos":[433252,433265],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[433267,433306]},{"pos":[433361,433371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433373,433378]},{"content":"unit","pos":[433392,433396]},{"pos":[433405,433412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[433414,433521]},{"content":"Mode.","pos":[433525,433530]},{"content":"Height calculation.","pos":[433544,433563]},{"content":"-1 Exact.","pos":[433751,433760]},{"content":"The exact height in pixels of the controls is used.","pos":[433770,433821]},{"content":"0 Auto.","pos":[433864,433871]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[433883,433972]},{"content":"1 Column height.","pos":[433977,433993]},{"content":"The layout of the form determines the height of the control.","pos":[433996,434056]},{"content":"The height and height calculation mode can be set separately.","pos":[434089,434150]},{"pos":[434155,434178],"content":"Class ReportLibraryNode","linkify":"Class ReportLibraryNode","nodes":[{"content":"Class ReportLibraryNode","pos":[0,23]}]},{"pos":[434234,434241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[434247,434255],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[434261,434268],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[434272,434278]},{"content":"Description","pos":[434319,434330]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[434650,434685],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[434697,434771]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[434839,434878],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[434886,434947]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[435028,435065],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[435075,435136]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[435217,435252],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[435264,435333]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[435406,435446],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[435453,435509]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[435595,435633],"source":"public str creationTime(\\[str value\\])"},{"content":"public str designs(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[435784,435817],"source":"public str designs(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[435973,436003],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[436020,436158]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[436163,436197],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public str projectGuid(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[436352,436389],"source":"public str projectGuid(\\[str value\\])"},{"content":"public str referencedProjects(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[436541,436585],"source":"public str referencedProjects(\\[str value\\])"},{"pos":[436733,436749],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[436751,436825]},{"pos":[436871,436881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436883,436888]},{"pos":[436897,436909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[436911,436932]},{"pos":[436938,436956],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[436958,437019]},{"pos":[437069,437079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437081,437086]},{"pos":[437095,437107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[437109,437157]},{"pos":[437163,437181],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[437183,437244]},{"pos":[437292,437302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437304,437309]},{"pos":[437318,437330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[437332,437380]},{"pos":[437386,437402],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[437404,437473]},{"pos":[437519,437529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437531,437536]},{"pos":[437545,437557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[437559,437580]},{"pos":[437586,437605],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[437607,437663]},{"pos":[437714,437724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437726,437731]},{"pos":[437740,437752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[437754,437797]},{"pos":[437803,437822],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[437871,437881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437883,437888]},{"pos":[437897,437909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437915,437929],"content":"Method designs","linkify":"Method designs","nodes":[{"content":"Method designs","pos":[0,14]}]},{"pos":[437973,437983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437985,437990]},{"pos":[437999,438011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438017,438028],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[438030,438168]},{"pos":[438209,438219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438221,438226]},{"pos":[438235,438247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[438249,438313]},{"pos":[438320,438327],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[438329,438423]},{"content":"Begins with a letter.","pos":[438429,438450]},{"content":"Doesn't exceed 250 characters.","pos":[438455,438485]},{"content":"Can include numbers and underscore characters.","pos":[438490,438536]},{"content":"Cannot include punctuation or spaces.","pos":[438541,438578]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[438583,438701]},{"pos":[438707,438720],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[438765,438775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438777,438782]},{"pos":[438791,438803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438809,438827],"content":"Method projectGuid","linkify":"Method projectGuid","nodes":[{"content":"Method projectGuid","pos":[0,18]}]},{"pos":[438875,438885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438887,438892]},{"pos":[438901,438913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438919,438944],"content":"Method referencedProjects","linkify":"Method referencedProjects","nodes":[{"content":"Method referencedProjects","pos":[0,25]}]},{"pos":[438999,439009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439011,439016]},{"pos":[439025,439037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439042,439060],"content":"Class ReportOutput","linkify":"Class ReportOutput","nodes":[{"content":"Class ReportOutput","pos":[0,18]}]},{"content":"The ReportOutput class handles the output of a report to a printer or file.","pos":[439100,439175]},{"pos":[439181,439188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class serves as the base class for the ReportViewer class, which handles preview of reports, and for the ReportOutputUser class, which handles output of reports to a user-defined target in a user-defined format.","pos":[439190,439406]},{"content":"In general, if a report is printed to the printer, the print method creates a ReportOutput object and calls its print method.","pos":[439407,439532]},{"content":"If the call printJobSettings::outputToClient(TRUE) has been made, a ReportViewer object is created instead.","pos":[439533,439640]},{"content":"The call to the print method prints the report on a printer that is set up on the client, because a ReportViewer object can only exist on the client, not on the server.","pos":[439641,439809]},{"pos":[439815,439823],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the job descriptions and page numbers of jobs that have been inserted into the printArchive table on the current date, and prints page 1 on the default printer.","pos":[439825,440014]},{"pos":[440709,440716],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[440720,440726]},{"content":"Description","pos":[440796,440807]},{"content":"public str description(<ph id=\"ph1\">\\[</ph>str description<ph id=\"ph2\">\\]</ph>)","pos":[440976,441019],"source":"public str description(\\[str description\\])"},{"content":"public int getCopyNo()","pos":[441104,441126]},{"content":"public boolean getDeclineOverwrite()","pos":[441232,441268]},{"content":"public int getLastCopyNo()","pos":[441360,441386]},{"content":"public int getLastPageNo()","pos":[441488,441514]},{"content":"public int getPageNo()","pos":[441616,441638]},{"content":"public str getTempFileName(str prefix)","pos":[441744,441782]},{"content":"public PrintJobStatus jobStatus()","pos":[441872,441905]},{"content":"public PrintJobSettings printJobSettings()","pos":[442000,442042]},{"content":"public boolean setNumberOfPages(int pageNo)","pos":[442128,442171]},{"content":"public str type(<ph id=\"ph1\">\\[</ph>str type<ph id=\"ph2\">\\]</ph>)","pos":[442256,442285],"source":"public str type(\\[str type\\])"},{"content":"public void new(PrintJobHeader jobsCursor, <ph id=\"ph1\">\\[</ph>PrintJobPages pagesCursor<ph id=\"ph2\">\\]</ph>)","pos":[442384,442457],"source":"public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\])"},{"content":"Initializes a new instance of the Object class.","pos":[442460,442507]},{"content":"public void printAscii(str filename)","pos":[442512,442548]},{"content":"public void printTextUTF8(str filename)","pos":[442640,442679]},{"content":"Prints a report to a UTF-8 format.","pos":[442716,442750]},{"content":"public void printRTF(str filename)","pos":[442768,442802]},{"content":"public void print()","pos":[442896,442915]},{"content":"public void printPDF(str filename, <ph id=\"ph1\">\\[</ph>boolean embedFonts<ph id=\"ph2\">\\]</ph>)","pos":[443024,443082],"source":"public void printPDF(str filename, \\[boolean embedFonts\\])"},{"content":"public void printHTML(str filename)","pos":[443152,443187]},{"content":"public void abort()","pos":[443280,443299]},{"content":"public void dialogAndPrint()","pos":[443408,443436]},{"content":"public void printToTarget()","pos":[443536,443563]},{"pos":[443667,443685],"content":"Method description","linkify":"Method description","nodes":[{"content":"Method description","pos":[0,18]}]},{"pos":[443739,443749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"description","pos":[443751,443762]},{"pos":[443771,443783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443789,443805],"content":"Method getCopyNo","linkify":"Method getCopyNo","nodes":[{"content":"Method getCopyNo","pos":[0,16]}]},{"pos":[443840,443852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443858,443884],"content":"Method getDeclineOverwrite","linkify":"Method getDeclineOverwrite","nodes":[{"content":"Method getDeclineOverwrite","pos":[0,26]}]},{"pos":[443933,443945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443951,443971],"content":"Method getLastCopyNo","linkify":"Method getLastCopyNo","nodes":[{"content":"Method getLastCopyNo","pos":[0,20]}]},{"pos":[444010,444022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444028,444048],"content":"Method getLastPageNo","linkify":"Method getLastPageNo","nodes":[{"content":"Method getLastPageNo","pos":[0,20]}]},{"pos":[444087,444099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444105,444121],"content":"Method getPageNo","linkify":"Method getPageNo","nodes":[{"content":"Method getPageNo","pos":[0,16]}]},{"pos":[444156,444168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444174,444196],"content":"Method getTempFileName","linkify":"Method getTempFileName","nodes":[{"content":"Method getTempFileName","pos":[0,22]}]},{"pos":[444247,444257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"prefix","pos":[444259,444265]},{"pos":[444274,444286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444292,444308],"content":"Method jobStatus","linkify":"Method jobStatus","nodes":[{"content":"Method jobStatus","pos":[0,16]}]},{"pos":[444354,444366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444372,444395],"content":"Method printJobSettings","linkify":"Method printJobSettings","nodes":[{"content":"Method printJobSettings","pos":[0,23]}]},{"pos":[444450,444462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444468,444491],"content":"Method setNumberOfPages","linkify":"Method setNumberOfPages","nodes":[{"content":"Method setNumberOfPages","pos":[0,23]}]},{"pos":[444547,444557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNo","pos":[444559,444565]},{"pos":[444574,444586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444592,444603],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[444643,444653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[444655,444659]},{"pos":[444668,444680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444686,444696],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[444698,444745]},{"pos":[444829,444839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobsCursor","pos":[444841,444851]},{"content":"pagesCursor","pos":[444865,444876]},{"pos":[444884,444901],"content":"Method printAscii","linkify":"Method printAscii","nodes":[{"content":"Method printAscii","pos":[0,17]}]},{"pos":[444950,444960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[444962,444970]},{"pos":[444978,444998],"content":"Method printTextUTF8","linkify":"Method printTextUTF8","nodes":[{"content":"Method printTextUTF8","pos":[0,20]}]},{"content":"Prints a report to a UTF-8 format.","pos":[445000,445034]},{"pos":[445086,445096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[445098,445106]},{"content":"A string that specifies the name of the file that the report is printed to.","pos":[445109,445184]},{"pos":[445191,445198],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"UTF-8 is a method of character encoding that allows for both single and multibyte characters in one string.","pos":[445200,445307]},{"pos":[445314,445322],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the printTextUTF8 method.","pos":[445324,445387]},{"pos":[445832,445847],"content":"Method printRTF","linkify":"Method printRTF","nodes":[{"content":"Method printRTF","pos":[0,15]}]},{"pos":[445894,445904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[445906,445914]},{"pos":[445922,445934],"content":"Method print","linkify":"Method print","nodes":[{"content":"Method print","pos":[0,12]}]},{"pos":[445965,445980],"content":"Method printPDF","linkify":"Method printPDF","nodes":[{"content":"Method printPDF","pos":[0,15]}]},{"pos":[446049,446059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[446061,446069]},{"content":"embedFonts","pos":[446083,446093]},{"pos":[446101,446117],"content":"Method printHTML","linkify":"Method printHTML","nodes":[{"content":"Method printHTML","pos":[0,16]}]},{"pos":[446165,446175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[446177,446185]},{"pos":[446193,446205],"content":"Method abort","linkify":"Method abort","nodes":[{"content":"Method abort","pos":[0,12]}]},{"pos":[446236,446257],"content":"Method dialogAndPrint","linkify":"Method dialogAndPrint","nodes":[{"content":"Method dialogAndPrint","pos":[0,21]}]},{"pos":[446297,446317],"content":"Method printToTarget","linkify":"Method printToTarget","nodes":[{"content":"Method printToTarget","pos":[0,20]}]},{"pos":[446355,446377],"content":"Class ReportOutputUser","linkify":"Class ReportOutputUser","nodes":[{"content":"Class ReportOutputUser","pos":[0,22]}]},{"content":"The ReportOutputUser class implements a user-defined target for report formatting.","pos":[446427,446509]},{"pos":[446515,446522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, Finance and Operations prints reports to a screen, printer, file, or email address.","pos":[446524,446619]},{"content":"The following API items support a user-defined target:","pos":[446620,446674]},{"content":"ReportOutputUserType system enumeration","pos":[446680,446719]},{"content":"ViewerClass value for the PrintMedium system enumeration","pos":[446724,446780]},{"content":"ClassFactory::createViewer method","pos":[446785,446818]},{"content":"When a report is run, the print method creates a reportOutputUser object if the target is PrintMedium::Viewer class.","pos":[446820,446936]},{"content":"This object will be created by calling the createViewer method and giving reportOutputUserType as one of the arguments.","pos":[446937,447056]},{"content":"The report will then be printed by calling methods on the object: startReport, startPage, startSection, writeField, and so on.","pos":[447057,447183]},{"content":"In general, if the target is, for example, a printer, the reportRun::print method will create a reportOutput object and call its print method to print the report to a printer.","pos":[447184,447359]},{"content":"If the target is viewerClass, it will instead call the createViewer method to get a ReportOutputUser object.","pos":[447360,447468]},{"content":"Then it will call methods on the object: startReport, startPage, startSection, startField, outputStringField, and so on.","pos":[447469,447589]},{"content":"When the report is run, the Text property of the text controls of the report will be written to the print window.","pos":[447590,447703]},{"pos":[447709,447717],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[447723,447730],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[447734,447740]},{"content":"Description","pos":[447834,447845]},{"content":"public boolean pageCreated(int page)","pos":[448038,448074]},{"content":"public str result()","pos":[448190,448209]},{"content":"public void writeAutoLabel(OutputAutoLabelField field, OuputSection section)","pos":[448342,448418]},{"content":"public void endHeaderSection(OutputHeaderSection section)","pos":[448494,448551]},{"content":"public void writeString(OutputStringField field, OuputSection section)","pos":[448646,448716]},{"content":"public void endPageHeaderSection(OutputPageHeaderSection section)","pos":[448798,448863]},{"content":"public void writeBitmap(OutputBitmapField field, OuputSection section)","pos":[448950,449020]},{"content":"public void endBodySection(OutputBodySection section)","pos":[449102,449155]},{"content":"public void startPageHeaderSection(OutputPageHeaderSection section)","pos":[449254,449321]},{"content":"public void printViaClass()","pos":[449406,449433]},{"content":"public void endPageFooterSection(OutputPageFooterSection section)","pos":[449558,449623]},{"content":"public void writeReal(OutputRealField field, OuputSection section)","pos":[449710,449776]},{"content":"public void startColumnHeadingsSection(OutputColumnHeadingsSection section)","pos":[449862,449937]},{"content":"public void writeShape(OutputShapeField field, OuputSection section)","pos":[450014,450082]},{"content":"public void writeDateTime(OutputDateTimeField field, OuputSection section)","pos":[450166,450240]},{"content":"public void writeStaticText(OutputStaticTextField field, OuputSection section)","pos":[450318,450396]},{"content":"public void new(PrintJobHeader jobsCursor, <ph id=\"ph1\">\\[</ph>PrintJobPages pagesCursor<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>container settings<ph id=\"ph4\">\\]</ph>)","pos":[450470,450567],"source":"public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\], \\[container settings\\])"},{"content":"Initializes a new instance of the Object class.","pos":[450570,450617]},{"content":"public void writeInteger(OutputIntegerField field, OuputSection section)","pos":[450622,450694]},{"content":"public void startColumnSection()","pos":[450774,450806]},{"content":"public void startSection(OuputSection section)","pos":[450926,450972]},{"content":"public void writeDate(OutputDateField field, OuputSection section)","pos":[451078,451144]},{"content":"public void pagesTotal(int pagesTotal)","pos":[451230,451268]},{"content":"public void writeInt64(OutputInt64Field field, OuputSection section)","pos":[451382,451450]},{"content":"public void endReport(PrintJobStatus printJobStatus)","pos":[451534,451586]},{"content":"public void endColumnSection()","pos":[451686,451716]},{"content":"public void startReport(PrintJobSettings printJobSettings)","pos":[451838,451896]},{"content":"public void printPageViaClass(int page)","pos":[451990,452029]},{"content":"public void endEpilogSection(OutputEpilogSection section)","pos":[452142,452199]},{"content":"public void endPrologSection(OutputPrologSection section)","pos":[452294,452351]},{"content":"public void endPage()","pos":[452446,452467]},{"content":"public void startFooterSection(OutputFooterSection section)","pos":[452598,452657]},{"content":"public void endProgrammableSection(OutputProgrammableSection section)","pos":[452750,452819]},{"content":"public void startBodySection(OutputBodySection section)","pos":[452902,452957]},{"content":"public void endSection(OuputSection section)","pos":[453054,453098]},{"content":"public void startProgrammableSection(OutputProgrammableSection section)","pos":[453206,453277]},{"content":"public void startEpilogSection(OutputEpilogSection section)","pos":[453358,453417]},{"content":"public void startHeaderSection(OutputHeaderSection section)","pos":[453510,453569]},{"content":"public void endColumnHeadingsSection(OutputColumnHeadingsSection section)","pos":[453662,453735]},{"content":"public void writeLabel(OutputLabelField field, OuputSection section)","pos":[453814,453882]},{"content":"public void endFooterSection(OutputFooterSection section)","pos":[453966,454023]},{"content":"public void writeField(OutputField field, OuputSection section)","pos":[454118,454181]},{"content":"public void writeEnum(OutputEnumField field, OuputSection section)","pos":[454270,454336]},{"content":"public void startPageFooterSection(OutputPageFooterSection section)","pos":[454422,454489]},{"content":"public void writeSum(OutputSumField field, OuputSection section)","pos":[454574,454638]},{"content":"public void writeTime(OutputTimeField field, OuputSection section)","pos":[454726,454792]},{"content":"public void startPage(OutputPage page)","pos":[454878,454916]},{"content":"public void startPrologSection(OutputPrologSection section)","pos":[455030,455089]},{"pos":[455185,455203],"content":"Method pageCreated","linkify":"Method pageCreated","nodes":[{"content":"Method pageCreated","pos":[0,18]}]},{"pos":[455252,455262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"page","pos":[455264,455268]},{"pos":[455277,455289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455295,455308],"content":"Method result","linkify":"Method result","nodes":[{"content":"Method result","pos":[0,13]}]},{"pos":[455340,455352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455358,455379],"content":"Method writeAutoLabel","linkify":"Method writeAutoLabel","nodes":[{"content":"Method writeAutoLabel","pos":[0,21]}]},{"pos":[455468,455478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[455480,455485]},{"content":"section","pos":[455499,455506]},{"pos":[455514,455537],"content":"Method endHeaderSection","linkify":"Method endHeaderSection","nodes":[{"content":"Method endHeaderSection","pos":[0,23]}]},{"pos":[455607,455617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[455619,455626]},{"pos":[455634,455652],"content":"Method writeString","linkify":"Method writeString","nodes":[{"content":"Method writeString","pos":[0,18]}]},{"pos":[455735,455745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[455747,455752]},{"content":"section","pos":[455766,455773]},{"pos":[455781,455808],"content":"Method endPageHeaderSection","linkify":"Method endPageHeaderSection","nodes":[{"content":"Method endPageHeaderSection","pos":[0,27]}]},{"pos":[455886,455896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[455898,455905]},{"pos":[455913,455931],"content":"Method writeBitmap","linkify":"Method writeBitmap","nodes":[{"content":"Method writeBitmap","pos":[0,18]}]},{"pos":[456014,456024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[456026,456031]},{"content":"section","pos":[456045,456052]},{"pos":[456060,456081],"content":"Method endBodySection","linkify":"Method endBodySection","nodes":[{"content":"Method endBodySection","pos":[0,21]}]},{"pos":[456147,456157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[456159,456166]},{"pos":[456174,456203],"content":"Method startPageHeaderSection","linkify":"Method startPageHeaderSection","nodes":[{"content":"Method startPageHeaderSection","pos":[0,29]}]},{"pos":[456283,456293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[456295,456302]},{"pos":[456310,456330],"content":"Method printViaClass","linkify":"Method printViaClass","nodes":[{"content":"Method printViaClass","pos":[0,20]}]},{"pos":[456369,456396],"content":"Method endPageFooterSection","linkify":"Method endPageFooterSection","nodes":[{"content":"Method endPageFooterSection","pos":[0,27]}]},{"pos":[456474,456484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[456486,456493]},{"pos":[456501,456517],"content":"Method writeReal","linkify":"Method writeReal","nodes":[{"content":"Method writeReal","pos":[0,16]}]},{"pos":[456596,456606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[456608,456613]},{"content":"section","pos":[456627,456634]},{"pos":[456642,456675],"content":"Method startColumnHeadingsSection","linkify":"Method startColumnHeadingsSection","nodes":[{"content":"Method startColumnHeadingsSection","pos":[0,33]}]},{"pos":[456763,456773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[456775,456782]},{"pos":[456790,456807],"content":"Method writeShape","linkify":"Method writeShape","nodes":[{"content":"Method writeShape","pos":[0,17]}]},{"pos":[456888,456898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[456900,456905]},{"content":"section","pos":[456919,456926]},{"pos":[456934,456954],"content":"Method writeDateTime","linkify":"Method writeDateTime","nodes":[{"content":"Method writeDateTime","pos":[0,20]}]},{"pos":[457041,457051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[457053,457058]},{"content":"section","pos":[457072,457079]},{"pos":[457087,457109],"content":"Method writeStaticText","linkify":"Method writeStaticText","nodes":[{"content":"Method writeStaticText","pos":[0,22]}]},{"pos":[457200,457210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[457212,457217]},{"content":"section","pos":[457231,457238]},{"pos":[457246,457256],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[457258,457305]},{"pos":[457411,457421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobsCursor","pos":[457423,457433]},{"content":"pagesCursor","pos":[457447,457458]},{"content":"settings","pos":[457472,457480]},{"pos":[457488,457507],"content":"Method writeInteger","linkify":"Method writeInteger","nodes":[{"content":"Method writeInteger","pos":[0,19]}]},{"pos":[457592,457602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[457604,457609]},{"content":"section","pos":[457623,457630]},{"pos":[457638,457663],"content":"Method startColumnSection","linkify":"Method startColumnSection","nodes":[{"content":"Method startColumnSection","pos":[0,25]}]},{"pos":[457707,457726],"content":"Method startSection","linkify":"Method startSection","nodes":[{"content":"Method startSection","pos":[0,19]}]},{"pos":[457785,457795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[457797,457804]},{"pos":[457812,457828],"content":"Method writeDate","linkify":"Method writeDate","nodes":[{"content":"Method writeDate","pos":[0,16]}]},{"pos":[457907,457917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[457919,457924]},{"content":"section","pos":[457938,457945]},{"pos":[457953,457970],"content":"Method pagesTotal","linkify":"Method pagesTotal","nodes":[{"content":"Method pagesTotal","pos":[0,17]}]},{"pos":[458021,458031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pagesTotal","pos":[458033,458043]},{"pos":[458051,458068],"content":"Method writeInt64","linkify":"Method writeInt64","nodes":[{"content":"Method writeInt64","pos":[0,17]}]},{"pos":[458149,458159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[458161,458166]},{"content":"section","pos":[458180,458187]},{"pos":[458195,458211],"content":"Method endReport","linkify":"Method endReport","nodes":[{"content":"Method endReport","pos":[0,16]}]},{"pos":[458276,458286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"printJobStatus","pos":[458288,458302]},{"pos":[458310,458333],"content":"Method endColumnSection","linkify":"Method endColumnSection","nodes":[{"content":"Method endColumnSection","pos":[0,23]}]},{"pos":[458375,458393],"content":"Method startReport","linkify":"Method startReport","nodes":[{"content":"Method startReport","pos":[0,18]}]},{"pos":[458464,458474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"printJobSettings","pos":[458476,458492]},{"pos":[458500,458524],"content":"Method printPageViaClass","linkify":"Method printPageViaClass","nodes":[{"content":"Method printPageViaClass","pos":[0,24]}]},{"pos":[458576,458586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"page","pos":[458588,458592]},{"pos":[458600,458623],"content":"Method endEpilogSection","linkify":"Method endEpilogSection","nodes":[{"content":"Method endEpilogSection","pos":[0,23]}]},{"pos":[458693,458703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[458705,458712]},{"pos":[458720,458743],"content":"Method endPrologSection","linkify":"Method endPrologSection","nodes":[{"content":"Method endPrologSection","pos":[0,23]}]},{"pos":[458813,458823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[458825,458832]},{"pos":[458840,458854],"content":"Method endPage","linkify":"Method endPage","nodes":[{"content":"Method endPage","pos":[0,14]}]},{"pos":[458887,458912],"content":"Method startFooterSection","linkify":"Method startFooterSection","nodes":[{"content":"Method startFooterSection","pos":[0,25]}]},{"pos":[458984,458994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[458996,459003]},{"pos":[459011,459040],"content":"Method endProgrammableSection","linkify":"Method endProgrammableSection","nodes":[{"content":"Method endProgrammableSection","pos":[0,29]}]},{"pos":[459122,459132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459134,459141]},{"pos":[459149,459172],"content":"Method startBodySection","linkify":"Method startBodySection","nodes":[{"content":"Method startBodySection","pos":[0,23]}]},{"pos":[459240,459250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459252,459259]},{"pos":[459267,459284],"content":"Method endSection","linkify":"Method endSection","nodes":[{"content":"Method endSection","pos":[0,17]}]},{"pos":[459341,459351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459353,459360]},{"pos":[459368,459399],"content":"Method startProgrammableSection","linkify":"Method startProgrammableSection","nodes":[{"content":"Method startProgrammableSection","pos":[0,31]}]},{"pos":[459483,459493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459495,459502]},{"pos":[459510,459535],"content":"Method startEpilogSection","linkify":"Method startEpilogSection","nodes":[{"content":"Method startEpilogSection","pos":[0,25]}]},{"pos":[459607,459617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459619,459626]},{"pos":[459634,459659],"content":"Method startHeaderSection","linkify":"Method startHeaderSection","nodes":[{"content":"Method startHeaderSection","pos":[0,25]}]},{"pos":[459731,459741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459743,459750]},{"pos":[459758,459789],"content":"Method endColumnHeadingsSection","linkify":"Method endColumnHeadingsSection","nodes":[{"content":"Method endColumnHeadingsSection","pos":[0,31]}]},{"pos":[459875,459885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[459887,459894]},{"pos":[459902,459919],"content":"Method writeLabel","linkify":"Method writeLabel","nodes":[{"content":"Method writeLabel","pos":[0,17]}]},{"pos":[460000,460010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[460012,460017]},{"content":"section","pos":[460031,460038]},{"pos":[460046,460069],"content":"Method endFooterSection","linkify":"Method endFooterSection","nodes":[{"content":"Method endFooterSection","pos":[0,23]}]},{"pos":[460139,460149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[460151,460158]},{"pos":[460166,460183],"content":"Method writeField","linkify":"Method writeField","nodes":[{"content":"Method writeField","pos":[0,17]}]},{"pos":[460259,460269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[460271,460276]},{"content":"section","pos":[460290,460297]},{"pos":[460305,460321],"content":"Method writeEnum","linkify":"Method writeEnum","nodes":[{"content":"Method writeEnum","pos":[0,16]}]},{"pos":[460400,460410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[460412,460417]},{"content":"section","pos":[460431,460438]},{"pos":[460446,460475],"content":"Method startPageFooterSection","linkify":"Method startPageFooterSection","nodes":[{"content":"Method startPageFooterSection","pos":[0,29]}]},{"pos":[460555,460565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[460567,460574]},{"pos":[460582,460597],"content":"Method writeSum","linkify":"Method writeSum","nodes":[{"content":"Method writeSum","pos":[0,15]}]},{"pos":[460674,460684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[460686,460691]},{"content":"section","pos":[460705,460712]},{"pos":[460720,460736],"content":"Method writeTime","linkify":"Method writeTime","nodes":[{"content":"Method writeTime","pos":[0,16]}]},{"pos":[460815,460825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[460827,460832]},{"content":"section","pos":[460846,460853]},{"pos":[460861,460877],"content":"Method startPage","linkify":"Method startPage","nodes":[{"content":"Method startPage","pos":[0,16]}]},{"pos":[460928,460938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"page","pos":[460940,460944]},{"pos":[460952,460977],"content":"Method startPrologSection","linkify":"Method startPrologSection","nodes":[{"content":"Method startPrologSection","pos":[0,25]}]},{"pos":[461049,461059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[461061,461068]},{"pos":[461075,461094],"content":"Class ReportPrinter","linkify":"Class ReportPrinter","nodes":[{"content":"Class ReportPrinter","pos":[0,19]}]},{"pos":[461145,461152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[461158,461166],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[461172,461179],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[461183,461189]},{"content":"Description","pos":[461192,461203]},{"pos":[461235,461260],"content":"Class ReportPromptControl","linkify":"Class ReportPromptControl","nodes":[{"content":"Class ReportPromptControl","pos":[0,25]}]},{"content":"The ReportPromptControl class lets you create, read, update, and delete X++ code and metadata.","pos":[461314,461408]},{"pos":[461414,461421],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[461423,461533]},{"pos":[461539,461547],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[461553,461560],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[461564,461570]},{"content":"Description","pos":[461639,461650]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461998,462033],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462215,462251],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[462432,462481],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[462507,462605]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462649,462690],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[462724,462773]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462866,462901],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[462941,463003]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463083,463113],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[463158,463233]},{"content":"public int bottomMarginAndFrame()","pos":[463300,463333]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463517,463559],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[463734,463775],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[463951,463997],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[464168,464213],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464385,464421],"source":"public int changeCase(\\[int value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464602,464643],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464819,464857],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[464894,464937]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[465036,465073],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[465111,465156]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[465253,465325],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[465328,465395]},{"content":"public ReportFieldType controlType()","pos":[465470,465506]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[465687,465721],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[465904,465947],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int delete()","pos":[466121,466140]},{"content":"public str effectiveFont()","pos":[466338,466364]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[466555,466619],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[466772,466802],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[466847,466904]},{"content":"public str fontInfoPrinter()","pos":[466989,467017]},{"content":"public int fontInfoPrinterAscent()","pos":[467206,467240]},{"content":"public int fontInfoPrinterDescent()","pos":[467423,467458]},{"content":"public int fontInfoPrinterExtLead()","pos":[467640,467675]},{"content":"public int fontInfoPrinterHeight()","pos":[467857,467891]},{"content":"public int fontInfoPrinterIntLead()","pos":[468074,468109]},{"content":"public str fontInfoScreen()","pos":[468291,468318]},{"content":"public int fontInfoScreenAscent()","pos":[468508,468541]},{"content":"public int fontInfoScreenDescent()","pos":[468725,468759]},{"content":"public int fontInfoScreenExtLead()","pos":[468942,468976]},{"content":"public int fontInfoScreenHeight()","pos":[469159,469192]},{"content":"public int fontInfoScreenIntLead()","pos":[469376,469410]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[469593,469627],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[469668,469725]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[469810,469851],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[469885,469936]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[470027,470075],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[470244,470302],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[470461,470497],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[470536,470598]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[470678,470731]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[470895,470930],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[471112,471152],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[471329,471368],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[471404,471443]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[471546,471586],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[471763,471794],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[471838,471875]},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[471980,472019],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[472197,472247],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[472414,472478],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[472631,472675],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[472848,472902],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[473065,473095]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[473282,473322],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[473499,473538],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[473716,473760],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[473933,473976],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[474150,474184],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[474367,474400],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[474584,474622],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[474801,474838],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[475018,475063],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[475235,475280],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[475452,475496],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[475527,475602]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[475669,475714],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[475886,475925],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[476103,476141],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[476320,476376],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[476537,476577],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[476754,476784],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[476829,476967]},{"content":"public int numberOfLines(int height100mm)","pos":[476972,477013]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[477189,477223],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[477406,477440]},{"content":"public int previewXCompensation100mm(str string)","pos":[477623,477671]},{"content":"public int right100mm()","pos":[477840,477863]},{"content":"public int right100mmInclBorder()","pos":[478057,478090]},{"content":"public int rightMarginAndFrame()","pos":[478274,478306]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[478491,478532],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[478708,478748],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[478925,478970],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[479142,479186],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[479359,479416],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[479576,479626]},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[479793,479832],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[479868,479921]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[480010,480065],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[480227,480269],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[480444,480496],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[480661,480691]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[480878,480917],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[481095,481133],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[481312,481355],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[481529,481571],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[481746,481779],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[481963,481995],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[482180,482217],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[482397,482433],"source":"public Real topValue(\\[Real value\\])"},{"content":"public int typeHeaderPrompt(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[482614,482656],"source":"public int typeHeaderPrompt(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[482831,482874],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[483048,483089],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[483265,483306],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[483482,483547],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[483699,483734],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[483916,483962],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[484133,484189],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484350,484385],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[484425,484487]},{"content":"public int widthOfString100mm(str string)","pos":[484567,484608]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[484784,484818],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[485001,485040],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[485218,485256],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[485293,485331]},{"content":"public void width(Real value, Units unit)","pos":[485435,485476]},{"content":"Gets or sets the width of the control.","pos":[485510,485548]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[485652,485700]},{"content":"public void rightMargin(Real value, Units unit)","pos":[485869,485916]},{"content":"public void leftMargin(Real value, Units unit)","pos":[486086,486132]},{"content":"public void topMargin(Real value, Units unit)","pos":[486303,486348]},{"content":"public void top(Real value, Units unit)","pos":[486520,486559]},{"content":"public void left(Real value, Units unit)","pos":[486737,486777]},{"content":"public void show()","pos":[486954,486972]},{"content":"public void height(Real value, Units unit)","pos":[487171,487213]},{"content":"Gets or sets the height of the control.","pos":[487246,487285]},{"content":"public void hide()","pos":[487388,487406]},{"pos":[487608,487624],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[487670,487680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487682,487687]},{"pos":[487696,487708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487714,487731],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[487778,487788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487790,487795]},{"pos":[487804,487816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487822,487844],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[487846,487944]},{"pos":[488004,488014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488016,488021]},{"pos":[488030,488042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[488044,488123]},{"pos":[488130,488137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[488139,488176]},{"pos":[488182,488204],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[488206,488255]},{"pos":[488307,488317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488319,488324]},{"pos":[488333,488345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[488347,488391]},{"pos":[488398,488405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[488407,488475]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[488481,488551]},{"content":"The second byte contains a value for green.","pos":[488556,488599]},{"content":"The third byte contains a value for blue.","pos":[488604,488645]},{"content":"The high-order byte must be zero.","pos":[488650,488683]},{"content":"The maximum value for a single byte is 255.","pos":[488688,488731]},{"pos":[488737,488753],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[488755,488817]},{"pos":[488863,488873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488875,488880]},{"pos":[488889,488901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[488903,488964]},{"pos":[488970,488981],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[488983,489058]},{"pos":[489099,489109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489111,489116]},{"pos":[489125,489137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[489139,489189]},{"pos":[489196,489203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[489205,489277]},{"content":"0 Use the default font weight.","pos":[489283,489313]},{"content":"1 Thin.","pos":[489318,489325]},{"content":"2 Extra-light.","pos":[489330,489344]},{"content":"3 Light.","pos":[489349,489357]},{"content":"4 Normal.","pos":[489362,489371]},{"content":"5 Medium.","pos":[489376,489385]},{"content":"6 Semibold.","pos":[489390,489401]},{"content":"7 Bold.","pos":[489406,489413]},{"content":"8 Extra-bold.","pos":[489418,489431]},{"content":"9 Heavy.","pos":[489436,489444]},{"pos":[489450,489477],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[489523,489535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[489541,489564],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[489617,489627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489629,489634]},{"pos":[489643,489655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[489661,489683],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[489735,489745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489747,489752]},{"pos":[489761,489773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[489779,489802],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[489859,489869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489871,489876]},{"pos":[489885,489897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[489903,489927],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[489983,489993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489995,490000]},{"pos":[490009,490021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[490027,490044],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[490091,490101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[490103,490108]},{"pos":[490117,490129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[490135,490157],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[490209,490219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[490221,490226]},{"pos":[490235,490247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[490253,490272],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[490274,490317]},{"pos":[490366,490376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[490378,490383]},{"pos":[490392,490404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[490406,490468]},{"pos":[490475,490482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[490484,490588]},{"content":"Value.","pos":[490592,490598]},{"content":"Description.","pos":[490601,490613]},{"content":"0","pos":[490660,490661]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490669,490682],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[490694,490695]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490703,490719],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[490728,490729]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490737,490752],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[490762,490764]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490771,490783],"source":"MAC\\_CHARSET"},{"content":"128","pos":[490796,490799]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490805,490822],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[490830,490833]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490839,490854],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[490864,490867]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490873,490888],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[490898,490901]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490907,490927],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[490932,490935]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490941,490955],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[490966,490969]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[490975,490991],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[491000,491003]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491009,491028],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[491034,491037]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491043,491058],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[491068,491071]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491077,491093],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[491102,491105]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491111,491130],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[491136,491139]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491145,491157],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[491169,491257]},{"content":"Value.","pos":[491261,491267]},{"content":"Description.","pos":[491270,491282]},{"content":"130","pos":[491317,491320]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491326,491340],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[491344,491430]},{"content":"Value.","pos":[491434,491440]},{"content":"Description.","pos":[491443,491455]},{"content":"177","pos":[491492,491495]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491501,491516],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[491521,491524]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491530,491545],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[491549,491626]},{"content":"Value.","pos":[491630,491636]},{"content":"Description.","pos":[491639,491651]},{"content":"222","pos":[491684,491687]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[491693,491706],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[491710,491797]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[491798,492004],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[492010,492028],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[492030,492075]},{"pos":[492123,492133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492135,492140]},{"pos":[492149,492161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[492163,492206]},{"pos":[492213,492220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[492222,492283]},{"content":"Value.","pos":[492287,492293]},{"content":"Style.","pos":[492296,492302]},{"content":"0","pos":[492359,492360]},{"content":"Default.","pos":[492368,492376]},{"content":"1","pos":[492395,492396]},{"content":"The Windows palette.","pos":[492404,492424]},{"content":"2","pos":[492431,492432]},{"content":"The true-color scheme.","pos":[492440,492462]},{"pos":[492470,492493],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[492495,492562]},{"pos":[492645,492655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492657,492662]},{"pos":[492671,492683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[492685,492757]},{"pos":[492764,492771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[492773,492854]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[492855,492948]},{"pos":[492954,492972],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[493021,493033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493039,493054],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[493099,493109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493111,493116]},{"pos":[493125,493137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493143,493159],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[493213,493223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493225,493230]},{"pos":[493239,493251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493257,493270],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[493302,493314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493320,493340],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[493379,493391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493397,493420],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[493495,493505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493507,493512]},{"pos":[493521,493533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493539,493550],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[493552,493609]},{"pos":[493650,493660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493662,493667]},{"pos":[493676,493688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[493690,493745]},{"pos":[493751,493773],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[493814,493826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493832,493860],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[493907,493919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493925,493954],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[494002,494014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494020,494049],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[494097,494109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494115,494143],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[494190,494202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494208,494237],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[494285,494297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494303,494324],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[494364,494376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494382,494409],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[494455,494467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494473,494501],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[494548,494560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494566,494594],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[494641,494653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494659,494686],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[494732,494744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494750,494778],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[494825,494837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494843,494858],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[494860,494917]},{"pos":[494962,494972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494974,494979]},{"pos":[494988,495000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[495002,495035]},{"pos":[495041,495063],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[495065,495116]},{"pos":[495168,495178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495180,495185]},{"pos":[495194,495206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[495208,495252]},{"pos":[495259,495266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[495268,495336]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[495342,495412]},{"content":"The second byte contains a value for green.","pos":[495417,495460]},{"content":"The third byte contains a value for blue.","pos":[495465,495506]},{"content":"The high-order byte must be zero.","pos":[495511,495544]},{"content":"The maximum value for a single byte is 255.","pos":[495549,495592]},{"pos":[495598,495616],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[495675,495685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[495687,495703]},{"pos":[495712,495724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495730,495758],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[495827,495837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[495839,495855]},{"pos":[495864,495876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495882,495899],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[495901,495963]},{"pos":[496010,496020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496022,496027]},{"pos":[496036,496048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[496050,496071]},{"pos":[496078,496085],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[496087,496141]},{"content":"Mode.","pos":[496145,496150]},{"content":"Height Calculation.","pos":[496162,496181]},{"content":"Exact.","pos":[496367,496373]},{"content":"The exact height in pixels of the controls is used.","pos":[496384,496435]},{"content":"Auto.","pos":[496478,496483]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[496495,496584]},{"content":"Column height.","pos":[496589,496603]},{"content":"The layout of the form determines the height of the control.","pos":[496606,496666]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[496699,496784]},{"pos":[496790,496827],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[496893,496903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[496905,496911]},{"pos":[496920,496932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496938,496954],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[497000,497010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497012,497017]},{"pos":[497026,497038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497044,497061],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[497112,497122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497124,497129]},{"pos":[497138,497150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497156,497174],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[497176,497215]},{"pos":[497265,497275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497277,497282]},{"pos":[497291,497303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[497305,497326]},{"pos":[497333,497340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[497342,497432]},{"pos":[497438,497451],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[497502,497512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497514,497519]},{"pos":[497528,497540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497546,497558],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[497560,497597]},{"pos":[497639,497649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497651,497656]},{"pos":[497665,497677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[497679,497717]},{"pos":[497724,497731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[497733,497865]},{"pos":[497871,497891],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[497941,497951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497953,497958]},{"pos":[497967,497979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497985,498006],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[498067,498077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498079,498084]},{"pos":[498093,498105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498111,498136],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[498211,498221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498223,498228]},{"pos":[498237,498249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498255,498271],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[498326,498336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[498338,498352]},{"pos":[498361,498373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498379,498405],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[498470,498480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[498482,498496]},{"pos":[498505,498517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498523,498547],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[498590,498602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498608,498629],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[498680,498690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498692,498697]},{"pos":[498706,498718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498724,498744],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[498794,498804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498806,498811]},{"pos":[498820,498832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498838,498859],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[498914,498924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498926,498931]},{"pos":[498940,498952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[498958,498980],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[499034,499044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499046,499051]},{"pos":[499060,499072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499078,499093],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[499138,499148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499150,499155]},{"pos":[499164,499176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499182,499196],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[499240,499250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499252,499257]},{"pos":[499266,499278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499284,499299],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[499348,499358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499360,499365]},{"pos":[499374,499386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499392,499408],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[499456,499466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499468,499473]},{"pos":[499482,499494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499500,499516],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[499572,499582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499584,499589]},{"pos":[499598,499610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499616,499632],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[499688,499698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499700,499705]},{"pos":[499714,499726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499732,499747],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[499749,499824]},{"pos":[499879,499889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499891,499896]},{"pos":[499905,499917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[499919,499968]},{"pos":[499974,499990],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[500046,500056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500058,500063]},{"pos":[500072,500084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500090,500110],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[500160,500170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500172,500177]},{"pos":[500186,500198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500204,500223],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[500272,500282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500284,500289]},{"pos":[500298,500310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500316,500335],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[500402,500412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500414,500419]},{"pos":[500428,500440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500446,500467],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[500518,500528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500530,500535]},{"pos":[500544,500556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500562,500573],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[500575,500713]},{"pos":[500754,500764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500766,500771]},{"pos":[500780,500792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[500794,500858]},{"pos":[500865,500872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[500874,500968]},{"content":"Begins with a letter.","pos":[500974,500995]},{"content":"Doesn't exceed 250 characters.","pos":[501000,501030]},{"content":"Can include numbers and underscore characters.","pos":[501035,501081]},{"content":"Cannot include punctuation or spaces.","pos":[501086,501123]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[501128,501246]},{"pos":[501252,501272],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[501326,501336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[501338,501349]},{"pos":[501358,501370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501376,501391],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[501436,501446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501448,501453]},{"pos":[501462,501474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501480,501498],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[501545,501555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[501557,501563]},{"pos":[501572,501584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501590,501622],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[501683,501693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[501695,501701]},{"pos":[501710,501722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501728,501745],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[501781,501793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501799,501826],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[501872,501884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501890,501916],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[501961,501973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501979,502001],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[502053,502063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502065,502070]},{"pos":[502079,502091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502097,502118],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[502169,502179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502181,502186]},{"pos":[502195,502207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502213,502235],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[502291,502301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502303,502308]},{"pos":[502317,502329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502335,502358],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[502413,502423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502425,502430]},{"pos":[502439,502451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502457,502475],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[502543,502553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502555,502560]},{"pos":[502569,502581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502587,502610],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[502673,502683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[502685,502690]},{"content":"string","pos":[502704,502710]},{"pos":[502719,502731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502737,502749],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[502751,502804]},{"pos":[502854,502864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502866,502871]},{"pos":[502880,502892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[502894,502955]},{"pos":[502961,502977],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[503043,503053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503055,503060]},{"pos":[503069,503081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503087,503102],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[503155,503165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[503167,503180]},{"pos":[503189,503201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503207,503232],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[503295,503305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[503307,503320]},{"pos":[503329,503341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503347,503371],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[503414,503426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503432,503452],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[503502,503512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503514,503519]},{"pos":[503528,503540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503546,503565],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[503614,503624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503626,503631]},{"pos":[503640,503652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503658,503678],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[503732,503742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503744,503749]},{"pos":[503758,503770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503776,503797],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[503850,503860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503862,503867]},{"pos":[503876,503888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503894,503908],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[503952,503962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503964,503969]},{"pos":[503978,503990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503996,504009],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[504052,504062],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504064,504069]},{"pos":[504078,504090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504096,504110],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[504158,504168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504170,504175]},{"pos":[504184,504196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504202,504217],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[504264,504274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504276,504281]},{"pos":[504290,504302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504308,504331],"content":"Method typeHeaderPrompt","linkify":"Method typeHeaderPrompt","nodes":[{"content":"Method typeHeaderPrompt","pos":[0,23]}]},{"pos":[504384,504394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504396,504401]},{"pos":[504410,504422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504428,504444],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[504498,504508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504510,504515]},{"pos":[504524,504536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504542,504556],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[504608,504618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504620,504625]},{"pos":[504634,504646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504652,504674],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[504726,504736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504738,504743]},{"pos":[504752,504764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504770,504792],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[504868,504878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504880,504885]},{"pos":[504894,504906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504912,504928],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[504974,504984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504986,504991]},{"pos":[505000,505012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505018,505035],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[505092,505102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[505104,505119]},{"pos":[505128,505140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505146,505173],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[505240,505250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[505252,505267]},{"pos":[505276,505288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505294,505310],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[505312,505374]},{"pos":[505420,505430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505432,505437]},{"pos":[505446,505458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[505460,505521]},{"pos":[505528,505535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[505537,505590]},{"content":"Mode.","pos":[505594,505599]},{"content":"Width Calculation.","pos":[505610,505628]},{"content":"Exact.","pos":[505812,505818]},{"content":"The exact width in pixels of the controls is used.","pos":[505828,505878]},{"content":"Auto.","pos":[505921,505926]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[505937,506025]},{"content":"Column width.","pos":[506030,506043]},{"content":"The layout of the form determines the width of the control.","pos":[506046,506105]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[506138,506221]},{"pos":[506227,506252],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[506306,506316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[506318,506324]},{"pos":[506333,506345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[506351,506366],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[506411,506421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506423,506428]},{"pos":[506437,506449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[506455,506471],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[506521,506531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506533,506538]},{"pos":[506547,506559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[506565,506582],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[506584,506622]},{"pos":[506671,506681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506683,506688]},{"pos":[506697,506709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[506711,506746]},{"pos":[506753,506760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[506762,506835]},{"pos":[506841,506853],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[506855,506893]},{"pos":[506947,506957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506959,506964]},{"content":"unit","pos":[506978,506982]},{"pos":[506991,506998],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[507000,507053]},{"content":"Calculate the width according to the following table:","pos":[507054,507107]},{"content":"Mode.","pos":[507111,507116]},{"content":"Width calculation.","pos":[507129,507147]},{"content":"-1 Exact.","pos":[507333,507342]},{"content":"The exact width in pixels of the controls is used.","pos":[507351,507401]},{"content":"0 Auto.","pos":[507444,507451]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[507462,507550]},{"content":"1 Column width.","pos":[507555,507570]},{"content":"The layout of the form determines the width of the control.","pos":[507573,507632]},{"content":"The width and width calculation mode can be set separately.","pos":[507665,507724]},{"pos":[507730,507749],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[507810,507820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507822,507827]},{"content":"unit","pos":[507841,507845]},{"pos":[507853,507871],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[507931,507941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507943,507948]},{"content":"unit","pos":[507962,507966]},{"pos":[507974,507991],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[508050,508060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508062,508067]},{"content":"unit","pos":[508081,508085]},{"pos":[508093,508109],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[508167,508177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508179,508184]},{"content":"unit","pos":[508198,508202]},{"pos":[508210,508220],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[508272,508282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508284,508289]},{"content":"unit","pos":[508303,508307]},{"pos":[508315,508326],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[508379,508389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508391,508396]},{"content":"unit","pos":[508410,508414]},{"pos":[508422,508433],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[508463,508476],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[508478,508517]},{"pos":[508572,508582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508584,508589]},{"content":"unit","pos":[508603,508607]},{"pos":[508616,508623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[508625,508732]},{"content":"Mode.","pos":[508736,508741]},{"content":"Height calculation.","pos":[508755,508774]},{"content":"-1 Exact.","pos":[508962,508971]},{"content":"The exact height in pixels of the controls is used.","pos":[508981,509032]},{"content":"0 Auto.","pos":[509075,509082]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[509094,509183]},{"content":"1 Column height.","pos":[509188,509204]},{"content":"The layout of the form determines the height of the control.","pos":[509207,509267]},{"content":"The height and height calculation mode can be set separately.","pos":[509300,509361]},{"pos":[509367,509378],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[509407,509430],"content":"Class ReportRealControl","linkify":"Class ReportRealControl","nodes":[{"content":"Class ReportRealControl","pos":[0,23]}]},{"content":"The ReportRealControl class enables you to create, read, update, and delete X++ code and metadata.","pos":[509482,509580]},{"pos":[509586,509593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[509599,509607],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[509613,509620],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[509624,509630]},{"content":"Description","pos":[509699,509710]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510066,510101],"source":"public int alignment(\\[int value\\])"},{"content":"public int allowNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510287,510326],"source":"public int allowNegative(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510508,510544],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[510729,510778],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[510804,510902]},{"content":"public int autoInsSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510950,510992],"source":"public int autoInsSeparator(\\[int value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[511171,511212],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[511246,511295]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[511392,511427],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[511467,511529]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[511613,511643],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[511688,511763]},{"content":"public int bottomMarginAndFrame()","pos":[511834,511867]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[512055,512097],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[512276,512317],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[512497,512543],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[512718,512763],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[512939,512980],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[513160,513198],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[513235,513278]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[513381,513418],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[513456,513501]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[513602,513674],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[513677,513744]},{"content":"public ReportFieldType controlType()","pos":[513823,513859]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[514044,514078],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[514265,514308],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[514486,514522],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int decimalSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[514707,514749],"source":"public int decimalSeparator(\\[int value\\])"},{"content":"public int delete()","pos":[514928,514947]},{"content":"public int displaceNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[515149,515210],"source":"public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displaceNegativeMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[515370,515425],"source":"public AutoMode displaceNegativeMode(\\[AutoMode mode\\])"},{"content":"public int displaceNegativeValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[515591,515638],"source":"public int displaceNegativeValue(\\[int value\\])"},{"content":"public str effectiveFont()","pos":[515812,515838]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[516033,516097],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int extraSumWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[516254,516297],"source":"public int extraSumWidthMode(\\[int value\\])"},{"content":"public str extraSumWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[516475,516517],"source":"public str extraSumWidthStr(\\[str value\\])"},{"content":"public Units extraSumWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[516696,516743],"source":"public Units extraSumWidthUnit(\\[Units value\\])"},{"content":"public Real extraSumWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[516917,516963],"source":"public Real extraSumWidthValue(\\[Real value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[517138,517168],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[517213,517270]},{"content":"public str fontInfoPrinter()","pos":[517359,517387]},{"content":"public int fontInfoPrinterAscent()","pos":[517580,517614]},{"content":"public int fontInfoPrinterDescent()","pos":[517801,517836]},{"content":"public int fontInfoPrinterExtLead()","pos":[518022,518057]},{"content":"public int fontInfoPrinterHeight()","pos":[518243,518277]},{"content":"public int fontInfoPrinterIntLead()","pos":[518464,518499]},{"content":"public str fontInfoScreen()","pos":[518685,518712]},{"content":"public int fontInfoScreenAscent()","pos":[518906,518939]},{"content":"public int fontInfoScreenDescent()","pos":[519127,519161]},{"content":"public int fontInfoScreenExtLead()","pos":[519348,519382]},{"content":"public int fontInfoScreenHeight()","pos":[519569,519602]},{"content":"public int fontInfoScreenIntLead()","pos":[519790,519824]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520011,520045],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[520086,520143]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520232,520273],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[520307,520358]},{"content":"public int formatMST(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520453,520488],"source":"public int formatMST(\\[int value\\])"},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[520674,520722],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[520895,520953],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[521116,521152],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[521191,521253]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[521337,521390]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[521558,521593],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[521779,521819],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[522000,522039],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[522075,522114]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[522221,522261],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[522442,522473],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[522517,522554]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[522663,522698],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[522884,522927],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[523105,523144],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[523326,523361],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[523547,523586],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[523768,523813],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[523989,524039],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[524210,524274],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[524431,524470],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[524652,524692],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[524873,524921],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[525094,525134],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[525315,525354],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[525536,525580],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[525757,525800],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[525978,526022],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[526199,526253],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[526420,526450]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[526641,526681],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[526862,526901],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[527083,527127],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[527304,527347],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[527525,527559],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[527746,527779],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[527967,528005],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[528188,528225],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[528409,528454],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[528630,528675],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[528851,528895],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[528926,529001]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[529072,529117],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[529293,529332],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[529514,529552],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[529735,529791],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public int minNoOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[529956,530016],"source":"public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode minNoOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[530177,530231],"source":"public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int minNoOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[530398,530444],"source":"public int minNoOfDecimalsValue(\\[int value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[530619,530659],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[530840,530870],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[530915,531057]},{"content":"public int noOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[531062,531119],"source":"public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode noOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[531283,531334],"source":"public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int noOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[531504,531547],"source":"public int noOfDecimalsValue(\\[int value\\])"},{"content":"public int numberOfLines(int height100mm)","pos":[531725,531766]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[531946,531980],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[532167,532201]},{"content":"public int previewXCompensation100mm(str string)","pos":[532388,532436]},{"content":"public int right100mm()","pos":[532609,532632]},{"content":"public int right100mmInclBorder()","pos":[532830,532863]},{"content":"public int rightMarginAndFrame()","pos":[533051,533083]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[533272,533313],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[533493,533533],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[533714,533759],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[533935,533979],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public int rotateSign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[534156,534192],"source":"public int rotateSign(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[534377,534434],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[534598,534648]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[534819,534862],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public int showZero(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[535040,535074],"source":"public int showZero(\\[int value\\])"},{"content":"public int signDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[535261,535298],"source":"public int signDisplay(\\[int value\\])"},{"content":"public boolean sumAll(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[535482,535522],"source":"public boolean sumAll(\\[boolean value\\])"},{"content":"public boolean sumNeg(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[535703,535743],"source":"public boolean sumNeg(\\[boolean value\\])"},{"content":"public boolean sumPos(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[535924,535964],"source":"public boolean sumPos(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[536145,536184],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[536220,536273]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[536366,536421],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int thousandSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[536587,536630],"source":"public int thousandSeparator(\\[int value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[536808,536850],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[537029,537081],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[537250,537280]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[537471,537510],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[537692,537730],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[537913,537956],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[538134,538176],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[538355,538388],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[538576,538608],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[538797,538834],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[539018,539054],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[539239,539282],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[539460,539501],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[539681,539722],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[539902,539967],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[540123,540158],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[540344,540390],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[540565,540621],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[540786,540821],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[540861,540923]},{"content":"public int widthOfString100mm(str string)","pos":[541007,541048]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[541228,541262],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[541449,541488],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[541670,541708],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[541745,541783]},{"content":"public void show()","pos":[541891,541909]},{"content":"public void hide()","pos":[542112,542130]},{"content":"public void height(Real value, Units unit)","pos":[542333,542375]},{"content":"Gets or sets the height of the control.","pos":[542408,542447]},{"content":"public void rightMargin(Real value, Units unit)","pos":[542554,542601]},{"content":"public void left(Real value, Units unit)","pos":[542775,542815]},{"content":"public void width(Real value, Units unit)","pos":[542996,543037]},{"content":"Gets or sets the width of the control.","pos":[543071,543109]},{"content":"public void extraSumWidth(Real value, Units unit)","pos":[543217,543266]},{"content":"public void topMargin(Real value, Units unit)","pos":[543438,543483]},{"content":"public void leftMargin(Real value, Units unit)","pos":[543659,543705]},{"content":"public void labelWidth(Real value, Units unit)","pos":[543880,543926]},{"content":"public void top(Real value, Units unit)","pos":[544101,544140]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[544322,544370]},{"pos":[544546,544562],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[544608,544618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[544620,544625]},{"pos":[544634,544646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[544652,544672],"content":"Method allowNegative","linkify":"Method allowNegative","nodes":[{"content":"Method allowNegative","pos":[0,20]}]},{"pos":[544722,544732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[544734,544739]},{"pos":[544748,544760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[544766,544783],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[544830,544840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[544842,544847]},{"pos":[544856,544868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[544874,544896],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[544898,544996]},{"pos":[545056,545066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[545068,545073]},{"pos":[545082,545094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[545096,545175]},{"pos":[545182,545189],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[545191,545228]},{"pos":[545234,545257],"content":"Method autoInsSeparator","linkify":"Method autoInsSeparator","nodes":[{"content":"Method autoInsSeparator","pos":[0,23]}]},{"pos":[545310,545320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[545322,545327]},{"pos":[545336,545348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[545354,545376],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[545378,545427]},{"pos":[545479,545489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[545491,545496]},{"pos":[545505,545517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[545519,545563]},{"pos":[545570,545577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[545579,545647]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[545653,545723]},{"content":"The second byte contains a value for green.","pos":[545728,545771]},{"content":"The third byte contains a value for blue.","pos":[545776,545817]},{"content":"The high-order byte must be zero.","pos":[545822,545855]},{"content":"The maximum value for a single byte is 255.","pos":[545860,545903]},{"pos":[545909,545925],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[545927,545989]},{"pos":[546035,546045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[546047,546052]},{"pos":[546061,546073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[546075,546136]},{"pos":[546142,546153],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[546155,546230]},{"pos":[546271,546281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[546283,546288]},{"pos":[546297,546309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[546311,546361]},{"pos":[546368,546375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[546377,546449]},{"content":"0 Use the default font weight.","pos":[546455,546485]},{"content":"1 Thin.","pos":[546490,546497]},{"content":"2 Extra-light.","pos":[546502,546516]},{"content":"3 Light.","pos":[546521,546529]},{"content":"4 Normal.","pos":[546534,546543]},{"content":"5 Medium.","pos":[546548,546557]},{"content":"6 Semibold.","pos":[546562,546573]},{"content":"7 Bold.","pos":[546578,546585]},{"content":"8 Extra-bold.","pos":[546590,546603]},{"content":"9 Heavy.","pos":[546608,546616]},{"pos":[546622,546649],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[546695,546707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[546713,546736],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[546789,546799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[546801,546806]},{"pos":[546815,546827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[546833,546855],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[546907,546917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[546919,546924]},{"pos":[546933,546945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[546951,546974],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[547031,547041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547043,547048]},{"pos":[547057,547069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[547075,547099],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[547155,547165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547167,547172]},{"pos":[547181,547193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[547199,547221],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[547273,547283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547285,547290]},{"pos":[547299,547311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[547317,547336],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[547338,547381]},{"pos":[547430,547440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547442,547447]},{"pos":[547456,547468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[547470,547532]},{"pos":[547539,547546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[547548,547652]},{"content":"Value.","pos":[547656,547662]},{"content":"Description.","pos":[547665,547677]},{"content":"0","pos":[547724,547725]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547733,547746],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[547758,547759]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547767,547783],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[547792,547793]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547801,547816],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[547826,547828]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547835,547847],"source":"MAC\\_CHARSET"},{"content":"128","pos":[547860,547863]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547869,547886],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[547894,547897]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547903,547918],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[547928,547931]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547937,547952],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[547962,547965]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[547971,547991],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[547996,547999]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548005,548019],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[548030,548033]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548039,548055],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[548064,548067]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548073,548092],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[548098,548101]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548107,548122],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[548132,548135]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548141,548157],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[548166,548169]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548175,548194],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[548200,548203]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548209,548221],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[548233,548321]},{"content":"Value.","pos":[548325,548331]},{"content":"Description.","pos":[548334,548346]},{"content":"130","pos":[548381,548384]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548390,548404],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[548408,548503]},{"content":"Value.","pos":[548507,548513]},{"content":"Description.","pos":[548516,548528]},{"content":"177","pos":[548565,548568]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548574,548589],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[548594,548597]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548603,548618],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[548622,548708]},{"content":"Value.","pos":[548712,548718]},{"content":"Description.","pos":[548721,548733]},{"content":"222","pos":[548766,548769]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[548775,548788],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[548792,548876]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[548877,549083],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[549089,549107],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[549109,549154]},{"pos":[549202,549212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[549214,549219]},{"pos":[549228,549240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[549242,549285]},{"pos":[549292,549299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[549301,549362]},{"content":"Value.","pos":[549366,549372]},{"content":"Style.","pos":[549375,549381]},{"content":"0","pos":[549452,549453]},{"content":"Default.","pos":[549461,549469]},{"content":"1","pos":[549495,549496]},{"content":"The MicrosoftWindows palette.","pos":[549504,549533]},{"content":"2","pos":[549538,549539]},{"content":"The true-color scheme.","pos":[549547,549569]},{"pos":[549584,549607],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[549609,549676]},{"pos":[549759,549769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[549771,549776]},{"pos":[549785,549797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[549799,549871]},{"pos":[549878,549885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[549887,549968]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[549969,550062]},{"pos":[550068,550086],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[550135,550147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550153,550168],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[550213,550223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550225,550230]},{"pos":[550239,550251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550257,550273],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[550327,550337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550339,550344]},{"pos":[550353,550365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550371,550388],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[550435,550445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550447,550452]},{"pos":[550461,550473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550479,550502],"content":"Method decimalSeparator","linkify":"Method decimalSeparator","nodes":[{"content":"Method decimalSeparator","pos":[0,23]}]},{"pos":[550555,550565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550567,550572]},{"pos":[550581,550593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550599,550612],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[550644,550656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550662,550685],"content":"Method displaceNegative","linkify":"Method displaceNegative","nodes":[{"content":"Method displaceNegative","pos":[0,23]}]},{"pos":[550755,550765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550767,550772]},{"content":"mode","pos":[550786,550790]},{"pos":[550799,550811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550817,550844],"content":"Method displaceNegativeMode","linkify":"Method displaceNegativeMode","nodes":[{"content":"Method displaceNegativeMode","pos":[0,27]}]},{"pos":[550910,550920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[550922,550926]},{"pos":[550935,550947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[550953,550981],"content":"Method displaceNegativeValue","linkify":"Method displaceNegativeValue","nodes":[{"content":"Method displaceNegativeValue","pos":[0,28]}]},{"pos":[551039,551049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551051,551056]},{"pos":[551065,551077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551083,551103],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[551142,551154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551160,551183],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[551258,551268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551270,551275]},{"pos":[551284,551296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551302,551326],"content":"Method extraSumWidthMode","linkify":"Method extraSumWidthMode","nodes":[{"content":"Method extraSumWidthMode","pos":[0,24]}]},{"pos":[551380,551390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551392,551397]},{"pos":[551406,551418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551424,551447],"content":"Method extraSumWidthStr","linkify":"Method extraSumWidthStr","nodes":[{"content":"Method extraSumWidthStr","pos":[0,23]}]},{"pos":[551500,551510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551512,551517]},{"pos":[551526,551538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551544,551568],"content":"Method extraSumWidthUnit","linkify":"Method extraSumWidthUnit","nodes":[{"content":"Method extraSumWidthUnit","pos":[0,24]}]},{"pos":[551626,551636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551638,551643]},{"pos":[551652,551664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551670,551695],"content":"Method extraSumWidthValue","linkify":"Method extraSumWidthValue","nodes":[{"content":"Method extraSumWidthValue","pos":[0,25]}]},{"pos":[551752,551762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551764,551769]},{"pos":[551778,551790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[551796,551807],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[551809,551866]},{"pos":[551907,551917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551919,551924]},{"pos":[551933,551945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[551947,552002]},{"pos":[552008,552030],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[552071,552083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552089,552117],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[552164,552176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552182,552211],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[552259,552271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552277,552306],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[552354,552366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552372,552400],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[552447,552459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552465,552494],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[552542,552554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552560,552581],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[552621,552633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552639,552666],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[552712,552724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552730,552758],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[552805,552817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552823,552851],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[552898,552910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552916,552943],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[552989,553001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[553007,553035],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[553082,553094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[553100,553115],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[553117,553174]},{"pos":[553219,553229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[553231,553236]},{"pos":[553245,553257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[553259,553292]},{"pos":[553298,553320],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[553322,553373]},{"pos":[553425,553435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[553437,553442]},{"pos":[553451,553463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[553465,553509]},{"pos":[553516,553523],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[553525,553593]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[553599,553669]},{"content":"The second byte contains a value for green.","pos":[553674,553717]},{"content":"The third byte contains a value for blue.","pos":[553722,553763]},{"content":"The high-order byte must be zero.","pos":[553768,553801]},{"content":"The maximum value for a single byte is 255.","pos":[553806,553849]},{"pos":[553855,553871],"content":"Method formatMST","linkify":"Method formatMST","nodes":[{"content":"Method formatMST","pos":[0,16]}]},{"pos":[553917,553927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[553929,553934]},{"pos":[553943,553955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[553961,553979],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[554038,554048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[554050,554066]},{"pos":[554075,554087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[554093,554121],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[554190,554200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[554202,554218]},{"pos":[554227,554239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[554245,554262],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[554264,554326]},{"pos":[554373,554383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[554385,554390]},{"pos":[554399,554411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[554413,554434]},{"pos":[554441,554448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[554450,554504]},{"content":"Mode.","pos":[554508,554513]},{"content":"Height Calculation.","pos":[554525,554544]},{"content":"Exact.","pos":[554730,554736]},{"content":"The exact height in pixels of the controls is used.","pos":[554747,554798]},{"content":"Auto.","pos":[554841,554846]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[554858,554947]},{"content":"Column height.","pos":[554952,554966]},{"content":"The layout of the form determines the height of the control.","pos":[554969,555029]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[555062,555147]},{"pos":[555153,555190],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[555256,555266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[555268,555274]},{"pos":[555283,555295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555301,555317],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[555363,555373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555375,555380]},{"pos":[555389,555401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555407,555424],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[555475,555485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555487,555492]},{"pos":[555501,555513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555519,555537],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[555539,555578]},{"pos":[555628,555638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555640,555645]},{"pos":[555654,555666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[555668,555689]},{"pos":[555696,555703],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[555705,555795]},{"pos":[555801,555814],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[555865,555875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555877,555882]},{"pos":[555891,555903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555909,555921],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[555923,555960]},{"pos":[556002,556012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556014,556019]},{"pos":[556028,556040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[556042,556080]},{"pos":[556087,556094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[556096,556228]},{"pos":[556234,556250],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[556296,556306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556308,556313]},{"pos":[556322,556334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556340,556364],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[556418,556428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556430,556435]},{"pos":[556444,556456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556462,556482],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[556532,556542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556544,556549]},{"pos":[556558,556570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556576,556592],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[556638,556648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556650,556655]},{"pos":[556664,556676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556682,556702],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[556752,556762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556764,556769]},{"pos":[556778,556790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556796,556814],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[556870,556880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556882,556887]},{"pos":[556896,556908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556914,556935],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[556996,557006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557008,557013]},{"pos":[557022,557034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557040,557065],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[557140,557150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557152,557157]},{"pos":[557166,557178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557184,557204],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[557254,557264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557266,557271]},{"pos":[557280,557292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557298,557319],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[557370,557380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557382,557387]},{"pos":[557396,557408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557414,557435],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[557494,557504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557506,557511]},{"pos":[557520,557532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557538,557559],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[557610,557620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557622,557627]},{"pos":[557636,557648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557654,557674],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[557724,557734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557736,557741]},{"pos":[557750,557762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557768,557789],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[557844,557854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557856,557861]},{"pos":[557870,557882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557888,557910],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[557964,557974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557976,557981]},{"pos":[557990,558002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558008,558024],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[558079,558089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[558091,558105]},{"pos":[558114,558126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558132,558158],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[558223,558233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[558235,558249]},{"pos":[558258,558270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558276,558300],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[558343,558355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558361,558382],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[558433,558443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558445,558450]},{"pos":[558459,558471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558477,558497],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[558547,558557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558559,558564]},{"pos":[558573,558585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558591,558612],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[558667,558677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558679,558684]},{"pos":[558693,558705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558711,558733],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[558787,558797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558799,558804]},{"pos":[558813,558825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558831,558846],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[558891,558901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558903,558908]},{"pos":[558917,558929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[558935,558949],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[558993,559003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559005,559010]},{"pos":[559019,559031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559037,559052],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[559101,559111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559113,559118]},{"pos":[559127,559139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559145,559161],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[559209,559219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559221,559226]},{"pos":[559235,559247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559253,559269],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[559325,559335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559337,559342]},{"pos":[559351,559363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559369,559385],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[559441,559451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559453,559458]},{"pos":[559467,559479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559485,559500],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[559502,559577]},{"pos":[559632,559642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559644,559649]},{"pos":[559658,559670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[559672,559721]},{"pos":[559727,559743],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[559799,559809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559811,559816]},{"pos":[559825,559837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559843,559863],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[559913,559923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559925,559930]},{"pos":[559939,559951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559957,559976],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[560025,560035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560037,560042]},{"pos":[560051,560063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560069,560088],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[560155,560165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560167,560172]},{"pos":[560181,560193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560199,560221],"content":"Method minNoOfDecimals","linkify":"Method minNoOfDecimals","nodes":[{"content":"Method minNoOfDecimals","pos":[0,22]}]},{"pos":[560290,560300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560302,560307]},{"content":"mode","pos":[560321,560325]},{"pos":[560334,560346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560352,560378],"content":"Method minNoOfDecimalsMode","linkify":"Method minNoOfDecimalsMode","nodes":[{"content":"Method minNoOfDecimalsMode","pos":[0,26]}]},{"pos":[560443,560453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[560455,560459]},{"pos":[560468,560480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560486,560513],"content":"Method minNoOfDecimalsValue","linkify":"Method minNoOfDecimalsValue","nodes":[{"content":"Method minNoOfDecimalsValue","pos":[0,27]}]},{"pos":[560570,560580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560582,560587]},{"pos":[560596,560608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560614,560635],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[560686,560696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560698,560703]},{"pos":[560712,560724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[560730,560741],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[560743,560885]},{"pos":[560926,560936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[560938,560943]},{"pos":[560952,560964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[560966,561034]},{"pos":[561041,561048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[561050,561144]},{"content":"Begins with a letter.","pos":[561150,561171]},{"content":"Doesn't exceed 250 characters.","pos":[561176,561206]},{"content":"Can include numbers and underscore characters.","pos":[561211,561257]},{"content":"Cannot include punctuation or spaces.","pos":[561262,561299]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[561304,561422]},{"pos":[561428,561447],"content":"Method noOfDecimals","linkify":"Method noOfDecimals","nodes":[{"content":"Method noOfDecimals","pos":[0,19]}]},{"pos":[561513,561523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[561525,561530]},{"content":"mode","pos":[561544,561548]},{"pos":[561557,561569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[561575,561598],"content":"Method noOfDecimalsMode","linkify":"Method noOfDecimalsMode","nodes":[{"content":"Method noOfDecimalsMode","pos":[0,23]}]},{"pos":[561660,561670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[561672,561676]},{"pos":[561685,561697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[561703,561727],"content":"Method noOfDecimalsValue","linkify":"Method noOfDecimalsValue","nodes":[{"content":"Method noOfDecimalsValue","pos":[0,24]}]},{"pos":[561781,561791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[561793,561798]},{"pos":[561807,561819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[561825,561845],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[561899,561909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[561911,561922]},{"pos":[561931,561943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[561949,561964],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[562009,562019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562021,562026]},{"pos":[562035,562047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562053,562071],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[562118,562128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[562130,562136]},{"pos":[562145,562157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562163,562195],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[562256,562266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[562268,562274]},{"pos":[562283,562295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562301,562318],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[562354,562366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562372,562399],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[562445,562457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562463,562489],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[562534,562546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562552,562574],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[562626,562636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562638,562643]},{"pos":[562652,562664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562670,562691],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[562742,562752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562754,562759]},{"pos":[562768,562780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562786,562808],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[562864,562874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562876,562881]},{"pos":[562890,562902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[562908,562931],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[562986,562996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562998,563003]},{"pos":[563012,563024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563030,563047],"content":"Method rotateSign","linkify":"Method rotateSign","nodes":[{"content":"Method rotateSign","pos":[0,17]}]},{"pos":[563094,563104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563106,563111]},{"pos":[563120,563132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563138,563156],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[563224,563234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563236,563241]},{"pos":[563250,563262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563268,563291],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[563354,563364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[563366,563371]},{"content":"string","pos":[563385,563391]},{"pos":[563400,563412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563418,563434],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[563488,563498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563500,563505]},{"pos":[563514,563526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563532,563547],"content":"Method showZero","linkify":"Method showZero","nodes":[{"content":"Method showZero","pos":[0,15]}]},{"pos":[563592,563602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563604,563609]},{"pos":[563618,563630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563636,563654],"content":"Method signDisplay","linkify":"Method signDisplay","nodes":[{"content":"Method signDisplay","pos":[0,18]}]},{"pos":[563702,563712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563714,563719]},{"pos":[563728,563740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563746,563759],"content":"Method sumAll","linkify":"Method sumAll","nodes":[{"content":"Method sumAll","pos":[0,13]}]},{"pos":[563810,563820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563822,563827]},{"pos":[563836,563848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563854,563867],"content":"Method sumNeg","linkify":"Method sumNeg","nodes":[{"content":"Method sumNeg","pos":[0,13]}]},{"pos":[563918,563928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563930,563935]},{"pos":[563944,563956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563962,563975],"content":"Method sumPos","linkify":"Method sumPos","nodes":[{"content":"Method sumPos","pos":[0,13]}]},{"pos":[564026,564036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564038,564043]},{"pos":[564052,564064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564070,564082],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[564084,564137]},{"pos":[564187,564197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564199,564204]},{"pos":[564213,564225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[564227,564288]},{"pos":[564294,564310],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[564376,564386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564388,564393]},{"pos":[564402,564414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564420,564444],"content":"Method thousandSeparator","linkify":"Method thousandSeparator","nodes":[{"content":"Method thousandSeparator","pos":[0,24]}]},{"pos":[564498,564508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564510,564515]},{"pos":[564524,564536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564542,564557],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[564610,564620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[564622,564635]},{"pos":[564644,564656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564662,564687],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[564750,564760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[564762,564775]},{"pos":[564784,564796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564802,564826],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[564869,564881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564887,564907],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[564957,564967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564969,564974]},{"pos":[564983,564995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565001,565020],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[565069,565079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565081,565086]},{"pos":[565095,565107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565113,565133],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[565187,565197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565199,565204]},{"pos":[565213,565225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565231,565252],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[565305,565315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565317,565322]},{"pos":[565331,565343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565349,565363],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[565407,565417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565419,565424]},{"pos":[565433,565445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565451,565464],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[565507,565517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565519,565524]},{"pos":[565533,565545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565551,565565],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[565613,565623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565625,565630]},{"pos":[565639,565651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565657,565672],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[565719,565729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565731,565736]},{"pos":[565745,565757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565763,565779],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[565833,565843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565845,565850]},{"pos":[565859,565871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565877,565891],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[565943,565953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565955,565960]},{"pos":[565969,565981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565987,566009],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[566061,566071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566073,566078]},{"pos":[566087,566099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566105,566127],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[566203,566213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566215,566220]},{"pos":[566229,566241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566247,566263],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[566309,566319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566321,566326]},{"pos":[566335,566347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566353,566370],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[566427,566437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[566439,566454]},{"pos":[566463,566475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566481,566508],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[566575,566585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[566587,566602]},{"pos":[566611,566623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566629,566645],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[566647,566709]},{"pos":[566755,566765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566767,566772]},{"pos":[566781,566793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[566795,566856]},{"pos":[566863,566870],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[566872,566925]},{"content":"Mode.","pos":[566929,566934]},{"content":"Width Calculation.","pos":[566945,566963]},{"content":"Exact.","pos":[567147,567153]},{"content":"The exact width in pixels of the controls is used.","pos":[567163,567213]},{"content":"Auto.","pos":[567256,567261]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[567272,567360]},{"content":"Column width.","pos":[567365,567378]},{"content":"The layout of the form determines the width of the control.","pos":[567381,567440]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[567473,567556]},{"pos":[567562,567587],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[567641,567651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[567653,567659]},{"pos":[567668,567680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567686,567701],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[567746,567756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567758,567763]},{"pos":[567772,567784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567790,567806],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[567856,567866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567868,567873]},{"pos":[567882,567894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567900,567917],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[567919,567957]},{"pos":[568006,568016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568018,568023]},{"pos":[568032,568044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[568046,568081]},{"pos":[568088,568095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[568097,568170]},{"pos":[568176,568187],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[568217,568228],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[568258,568271],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[568273,568312]},{"pos":[568367,568377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568379,568384]},{"content":"unit","pos":[568398,568402]},{"pos":[568411,568418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[568420,568473]},{"content":"Calculate the height according to the following table:","pos":[568474,568528]},{"content":"Mode.","pos":[568532,568537]},{"content":"Height calculation.","pos":[568551,568570]},{"content":"-1 Exact.","pos":[568758,568767]},{"content":"The exact height in pixels of the controls is used.","pos":[568777,568828]},{"content":"0 Auto.","pos":[568871,568878]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[568890,568979]},{"content":"1 Column height.","pos":[568984,569000]},{"content":"The layout of the form determines the height of the control.","pos":[569003,569063]},{"content":"The height and height calculation mode can be set separately.","pos":[569096,569157]},{"pos":[569163,569181],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[569241,569251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569253,569258]},{"content":"unit","pos":[569272,569276]},{"pos":[569284,569295],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[569348,569358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569360,569365]},{"content":"unit","pos":[569379,569383]},{"pos":[569391,569403],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[569405,569443]},{"pos":[569497,569507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569509,569514]},{"content":"unit","pos":[569528,569532]},{"pos":[569541,569548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[569550,569603]},{"content":"Calculate the width according to the following table:","pos":[569604,569657]},{"content":"Mode.","pos":[569661,569666]},{"content":"Width calculation.","pos":[569679,569697]},{"content":"-1 Exact.","pos":[569883,569892]},{"content":"The exact width in pixels of the controls is used.","pos":[569901,569951]},{"content":"0 Auto.","pos":[569994,570001]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[570012,570100]},{"content":"1 Column width.","pos":[570105,570120]},{"content":"The layout of the form determines the width of the control.","pos":[570123,570182]},{"content":"The width and width calculation mode can be set separately.","pos":[570215,570274]},{"pos":[570280,570300],"content":"Method extraSumWidth","linkify":"Method extraSumWidth","nodes":[{"content":"Method extraSumWidth","pos":[0,20]}]},{"pos":[570362,570372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570374,570379]},{"content":"unit","pos":[570393,570397]},{"pos":[570405,570421],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[570479,570489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570491,570496]},{"content":"unit","pos":[570510,570514]},{"pos":[570522,570539],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[570598,570608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570610,570615]},{"content":"unit","pos":[570629,570633]},{"pos":[570641,570658],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[570717,570727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570729,570734]},{"content":"unit","pos":[570748,570752]},{"pos":[570760,570770],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[570822,570832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570834,570839]},{"content":"unit","pos":[570853,570857]},{"pos":[570865,570884],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[570945,570955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570957,570962]},{"content":"unit","pos":[570976,570980]},{"pos":[570987,571002],"content":"Class ReportRun","linkify":"Class ReportRun","nodes":[{"content":"Class ReportRun","pos":[0,15]}]},{"content":"The ReportRun class generates and prints a report or previews a report on the screen.","pos":[571042,571127]},{"pos":[571133,571140],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"As opposed to the , which defines the structure of a report, a ReportRun object contains the runtime characteristics of the report.A ReportRun object can be created by using one of the following arguments:","pos":[571142,571347]},{"content":"An Args object where the name and optionally designName parameters are specified.","pos":[571353,571434]},{"content":"A created container, by using the for example.","pos":[571439,571485]},{"content":"The report name and an optional design name.","pos":[571490,571534]},{"content":"The section template node type allows the sections to be defined once and reuse them many times in different reports.","pos":[571536,571653]},{"content":"A typical example of this would be a check or a giro.","pos":[571654,571707]},{"pos":[571713,571721],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example runs the Customer design of the existing Cust report:","pos":[571723,571798]},{"pos":[572006,572013],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[572017,572023]},{"content":"Description","pos":[572173,572184]},{"content":"public boolean allPages(<ph id=\"ph1\">\\[</ph>boolean all<ph id=\"ph2\">\\]</ph>)","pos":[572629,572669],"source":"public boolean allPages(\\[boolean all\\])"},{"content":"public boolean callMenuFunction(xMenuFunction menuFunction)","pos":[572935,572994]},{"content":"public str caption(str reportSpelling, str reportName, str designCaption, str designName)","pos":[573241,573330]},{"content":"Creates a caption when previewing a report, or a document name when printing a report.","pos":[573397,573483]},{"content":"public boolean collate(<ph id=\"ph1\">\\[</ph>boolean collate<ph id=\"ph2\">\\]</ph>)","pos":[573547,573590],"source":"public boolean collate(\\[boolean collate\\])"},{"content":"public TableId columnHeadings(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[573853,573903],"source":"public TableId columnHeadings(\\[TableId tableId\\])"},{"content":"Provides control of column headings in a report.","pos":[574009,574057]},{"content":"public ReportControl control()","pos":[574159,574189]},{"content":"Retrieves the control that is being executed.","pos":[574315,574360]},{"content":"public int copies(<ph id=\"ph1\">\\[</ph>int numberOfCopies<ph id=\"ph2\">\\]</ph>)","pos":[574465,574506],"source":"public int copies(\\[int numberOfCopies\\])"},{"content":"public int copiesTotal()","pos":[574771,574795]},{"content":"Enables marking copies of reports.","pos":[574927,574961]},{"content":"public int copy()","pos":[575077,575094]},{"content":"Returns the number of the copy of a report.","pos":[575233,575276]},{"content":"public str copyDescription()","pos":[575383,575411]},{"content":"public xFormRun createProgressForm()","pos":[575689,575725]},{"content":"Creates the form that contains progress information.","pos":[575845,575897]},{"content":"public int currentYmm100()","pos":[575995,576021]},{"content":"public ReportDesign design(<ph id=\"ph1\">\\[</ph>AnyType nameOrReportDesign<ph id=\"ph2\">\\]</ph>)","pos":[576301,576359],"source":"public ReportDesign design(\\[AnyType nameOrReportDesign\\])"},{"content":"Gets or sets the name of the design.","pos":[576457,576493]},{"content":"public str deviceName(<ph id=\"ph1\">\\[</ph>str device<ph id=\"ph2\">\\]</ph>)","pos":[576607,576644],"source":"public str deviceName(\\[str device\\])"},{"content":"public Object dialog(Object dialog)","pos":[576913,576948]},{"content":"public str driverName()","pos":[577219,577242]},{"content":"Returns the printer driver name.","pos":[577375,577407]},{"content":"public boolean enableAllBodies(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[577525,577575],"source":"public boolean enableAllBodies(\\[boolean enable\\])"},{"content":"public boolean execute(int number)","pos":[577831,577865]},{"content":"Prints the programmable sections of a report.","pos":[577987,578032]},{"content":"public boolean executeBodyColumnHeadings(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[578137,578215],"source":"public boolean executeBodyColumnHeadings(TableId tableId, \\[FieldId fieldId\\])"},{"content":"Prints the column headings of a body section in a report.","pos":[578293,578350]},{"content":"public boolean executeColumnHeadings(ReportSection section)","pos":[578443,578502]},{"content":"public boolean executeControlColumnHeadings(int number)","pos":[578749,578804]},{"content":"Executes the column headings of a programmable section.","pos":[578905,578960]},{"content":"public boolean executeFooter(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FieldId fieldId<ph id=\"ph4\">\\]</ph>)","pos":[579055,579125],"source":"public boolean executeFooter(\\[TableId tableId\\], \\[FieldId fieldId\\])"},{"content":"Execute a footer section.","pos":[579211,579236]},{"content":"public boolean executeHeader(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FieldId fieldId<ph id=\"ph4\">\\]</ph>)","pos":[579361,579431],"source":"public boolean executeHeader(\\[TableId tableId\\], \\[FieldId fieldId\\])"},{"content":"Executes a header section.","pos":[579517,579543]},{"content":"public boolean executeSection(ReportSection section)","pos":[579667,579719]},{"content":"Prints the specified section in the report.","pos":[579823,579866]},{"content":"public boolean fetch()","pos":[579973,579995]},{"content":"Executes the report query and calls the send method for the record that is found by the query.","pos":[580129,580223]},{"content":"public int from(<ph id=\"ph1\">\\[</ph>int fromPage<ph id=\"ph2\">\\]</ph>)","pos":[580279,580312],"source":"public int from(\\[int fromPage\\])"},{"content":"public int generateDesign(<ph id=\"ph1\">\\[</ph>Query query<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int designNo<ph id=\"ph4\">\\]</ph>)","pos":[580585,580645],"source":"public int generateDesign(\\[Query query\\], \\[int designNo\\])"},{"content":"public boolean getDeclineOverwrite()","pos":[580891,580927]},{"content":"public int getNumberOfPrinters()","pos":[581197,581229]},{"content":"public str getPrinter(int number)","pos":[581503,581536]},{"content":"public str getRangeDescription(int number)","pos":[581809,581851]},{"content":"public ReportViewer getReportViewer()","pos":[582115,582152]},{"content":"public PrintMedium getTarget()","pos":[582421,582451]},{"content":"public boolean hasGeneratedDesign()","pos":[582727,582762]},{"content":"public str headerDescription()","pos":[583033,583063]},{"content":"public int heightOfPageFooters()","pos":[583339,583371]},{"content":"public int indent()","pos":[583645,583664]},{"content":"public boolean isBodyEnabled(TableId tableId)","pos":[583951,583996]},{"content":"public Int64 jobId()","pos":[584257,584277]},{"content":"public Common last(TableId tableId)","pos":[584563,584598]},{"content":"public int mm100Left()","pos":[584869,584891]},{"content":"public int mm100PageHeight()","pos":[585175,585203]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[585481,585510],"source":"public str name(\\[str name\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.","pos":[585637,585758]},{"content":"public container pack()","pos":[585787,585810]},{"content":"Serializes the current instance of the ReportRun class.","pos":[585943,585998]},{"content":"public container packDesign()","pos":[586093,586122]},{"content":"public container packPageSettings()","pos":[586399,586434]},{"content":"public container packPrinterSettings()","pos":[586705,586743]},{"content":"public container packPrintJobSettings()","pos":[587011,587050]},{"content":"public container packSubtotalSettings()","pos":[587317,587356]},{"content":"public int page(<ph id=\"ph1\">\\[</ph>int number<ph id=\"ph2\">\\]</ph>)","pos":[587623,587654],"source":"public int page(\\[int number\\])"},{"content":"public boolean pageFormatting()","pos":[587929,587960]},{"content":"Displays the printer properties of the printer.","pos":[588085,588132]},{"content":"public int pagesTotal()","pos":[588235,588258]},{"content":"public str passThrough(str str)","pos":[588541,588572]},{"content":"public int pixelsLeft()","pos":[588847,588870]},{"content":"public int print()","pos":[589153,589171]},{"content":"Sends the generated report to a print medium, such as a printer or the screen.","pos":[589309,589387]},{"content":"public int printerAttributes()","pos":[589459,589489]},{"content":"public int printerAveragePPM()","pos":[589765,589795]},{"content":"public str printerComment()","pos":[590071,590098]},{"content":"public str printerDatatype()","pos":[590377,590405]},{"content":"public int printerDefaultPriority()","pos":[590683,590718]},{"content":"public str printerDriverName()","pos":[590989,591019]},{"content":"public str printerFontInfo()","pos":[591295,591323]},{"content":"Indicates which font is used to print the report.","pos":[591451,591500]},{"content":"public str printerLocation()","pos":[591601,591629]},{"content":"public int printerPageHeight()","pos":[591907,591937]},{"content":"public int printerPageWidth()","pos":[592213,592242]},{"content":"public int printerPaper()","pos":[592519,592544]},{"content":"public str printerParameters()","pos":[592825,592855]},{"content":"public str printerPortName()","pos":[593131,593159]},{"content":"public str printerPrinterName()","pos":[593437,593468]},{"content":"public str printerPrintProcessor()","pos":[593743,593777]},{"content":"public int printerPriority()","pos":[594049,594077]},{"content":"public int printerQueuedJobs()","pos":[594355,594385]},{"content":"public str printerSepFile()","pos":[594661,594688]},{"content":"public str printerServerName()","pos":[594967,594997]},{"content":"public boolean printerSettings(<ph id=\"ph1\">\\[</ph>int showWhat<ph id=\"ph2\">\\]</ph>)","pos":[595273,595321],"source":"public boolean printerSettings(\\[int showWhat\\])"},{"content":"Enables the user to select printer settings.","pos":[595429,595473]},{"content":"public str printerShareName()","pos":[595579,595608]},{"content":"public TimeOfDay printerStartTime()","pos":[595885,595920]},{"content":"public int printerStatus()","pos":[596191,596217]},{"content":"public TimeOfDay printerUntilTime()","pos":[596497,596532]},{"content":"public PrintJobSettings printJobSettings(<ph id=\"ph1\">\\[</ph>container packedPrintJobSettings<ph id=\"ph2\">\\]</ph>)","pos":[596803,596881],"source":"public PrintJobSettings printJobSettings(\\[container packedPrintJobSettings\\])"},{"content":"public int printSum()","pos":[597109,597130]},{"content":"public xFormRun progressForm(<ph id=\"ph1\">\\[</ph>xFormRun form<ph id=\"ph2\">\\]</ph>)","pos":[597415,597462],"source":"public xFormRun progressForm(\\[xFormRun form\\])"},{"content":"public str progressInfo(int pageNo, int lineNo)","pos":[597721,597768]},{"content":"Creates a string that describes how much of the report has been generated during the execution of a report every time that a section is executed.","pos":[597877,598022]},{"content":"public boolean prompt(<ph id=\"ph1\">\\[</ph>boolean enableCopy<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean enablePages<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean enableDevice<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean enableProperties<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>boolean enablePrintTo<ph id=\"ph10\">\\]</ph>)","pos":[598027,598180],"source":"public boolean prompt(\\[boolean enableCopy\\], \\[boolean enablePages\\], \\[boolean enableDevice\\], \\[boolean enableProperties\\], \\[boolean enablePrintTo\\])"},{"content":"Prompts the user a report is run.","pos":[598183,598216]},{"content":"public Query query(<ph id=\"ph1\">\\[</ph>Query query<ph id=\"ph2\">\\]</ph>)","pos":[598333,598368],"source":"public Query query(\\[Query query\\])"},{"content":"public QueryRun queryRun(<ph id=\"ph1\">\\[</ph>QueryRun queryRun<ph id=\"ph2\">\\]</ph>)","pos":[598639,598686],"source":"public QueryRun queryRun(\\[QueryRun queryRun\\])"},{"content":"public Report report()","pos":[598945,598967]},{"content":"public str reportUser(<ph id=\"ph1\">\\[</ph>str user<ph id=\"ph2\">\\]</ph>)","pos":[599251,599286],"source":"public str reportUser(\\[str user\\])"},{"content":"public int rulerCM()","pos":[599557,599577]},{"content":"public int rulerINCH()","pos":[599863,599885]},{"content":"public str screenFontInfo()","pos":[600169,600196]},{"content":"public ReportSection section()","pos":[600475,600505]},{"content":"public int sectionsLeft(ReportSection section)","pos":[600781,600827]},{"content":"public boolean send(Common cursor, <ph id=\"ph1\">\\[</ph>int level<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean triggerOffBody<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean newPageBeforeBody<ph id=\"ph6\">\\]</ph>)","pos":[601087,601195],"source":"public boolean send(Common cursor, \\[int level\\], \\[boolean triggerOffBody\\], \\[boolean newPageBeforeBody\\])"},{"content":"Triggers the body sections that belong to a section group.","pos":[601243,601301]},{"content":"public PrintMedium setTarget(PrintMedium target)","pos":[601393,601441]},{"content":"public boolean showMenuFunction(xMenuFunction menuFunction)","pos":[601699,601758]},{"content":"public boolean showMenuReference(WebMenu menuReference)","pos":[602005,602060]},{"content":"public str sortInfo(Common cursor)","pos":[602311,602345]},{"content":"public Date startDate()","pos":[602617,602640]},{"content":"public DateTime startDateTime()","pos":[602923,602954]},{"content":"public Date startMachineDate()","pos":[603229,603259]},{"content":"public TimeOfDay startTime()","pos":[603535,603563]},{"content":"public Real sum(TableId tableId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[603841,603906],"source":"public Real sum(TableId tableId, FieldId fieldId, \\[int indent\\])"},{"content":"public Real sumControl(str fieldName, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[604147,604200],"source":"public Real sumControl(str fieldName, \\[int indent\\])"},{"content":"public Real sumControlNeg(str fieldName, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[604453,604509],"source":"public Real sumControlNeg(str fieldName, \\[int indent\\])"},{"content":"public Real sumControlPos(str fieldName, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[604759,604815],"source":"public Real sumControlPos(str fieldName, \\[int indent\\])"},{"content":"public str sumDescription()","pos":[605065,605092]},{"content":"public Real sumNeg(TableId tableId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[605371,605439],"source":"public Real sumNeg(TableId tableId, FieldId fieldId, \\[int indent\\])"},{"content":"public Real sumPos(TableId tableId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[605677,605745],"source":"public Real sumPos(TableId tableId, FieldId fieldId, \\[int indent\\])"},{"content":"public boolean suppressReportIsEmptyMessage(<ph id=\"ph1\">\\[</ph>boolean suppress<ph id=\"ph2\">\\]</ph>)","pos":[605983,606048],"source":"public boolean suppressReportIsEmptyMessage(\\[boolean suppress\\])"},{"content":"public str title(<ph id=\"ph1\">\\[</ph>str title<ph id=\"ph2\">\\]</ph>)","pos":[606289,606320],"source":"public str title(\\[str title\\])"},{"content":"Gets or sets the print job description.","pos":[606445,606484]},{"content":"public int to(<ph id=\"ph1\">\\[</ph>int toPage<ph id=\"ph2\">\\]</ph>)","pos":[606595,606624],"source":"public int to(\\[int toPage\\])"},{"content":"public str toString()","pos":[606901,606922]},{"content":"Returns a textual description of the class.","pos":[607057,607100]},{"content":"public boolean unpackPageSettings(container packedPageSetup)","pos":[607207,607267]},{"content":"public boolean unpackPrinterSettings(container packedPrinterSetup)","pos":[607513,607579]},{"content":"public boolean unpackPrintJobSettings(container packedPrintJobSettings)","pos":[607819,607890]},{"content":"public boolean unpackSubtotalSettings(container packedSubtotalSetup)","pos":[608125,608193]},{"content":"public PrinterOrientation userSelectedOrientation()","pos":[608431,608482]},{"content":"public void disableBody(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[608737,608781],"source":"public void disableBody(\\[TableId tableId\\])"},{"content":"public void attach()","pos":[609043,609063]},{"content":"public void new(AnyType argsOrReportOrContainer, <ph id=\"ph1\">\\[</ph>str designName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean isWebReport<ph id=\"ph4\">\\]</ph>)","pos":[609349,609442],"source":"public void new(AnyType argsOrReportOrContainer, \\[str designName\\], \\[boolean isWebReport\\])"},{"content":"Initializes an instance of the ReportRun class.","pos":[609505,609552]},{"content":"public void disableSection(ReportSection section)","pos":[609655,609704]},{"content":"public void arrangeLevelGlobal()","pos":[609961,609993]},{"content":"public void setEscapeSequence(str str)","pos":[610267,610305]},{"content":"public void enableBody(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[610573,610616],"source":"public void enableBody(\\[TableId tableId\\])"},{"content":"public void clearAllRangeDescriptions()","pos":[610879,610918]},{"content":"public void header(ReportSection headerSection, TableId tableId, FieldId fieldId)","pos":[611185,611266]},{"content":"Controls the header.","pos":[611341,611361]},{"content":"public void unpackDesign(container packedDesign)","pos":[611491,611539]},{"content":"public void newPage(<ph id=\"ph1\">\\[</ph>boolean doPageFooter<ph id=\"ph2\">\\]</ph>)","pos":[611797,611842],"source":"public void newPage(\\[boolean doPageFooter\\])"},{"content":"public void footer(ReportSection footerSection, TableId tableId, FieldId fieldId)","pos":[612103,612184]},{"content":"Controls the footer.","pos":[612259,612279]},{"content":"public void reset(<ph id=\"ph1\">\\[</ph>boolean delayExceptions<ph id=\"ph2\">\\]</ph>)","pos":[612409,612455],"source":"public void reset(\\[boolean delayExceptions\\])"},{"content":"Enables a single instance of the ReportRun class to create multiple reports.","pos":[612565,612641]},{"content":"public void arrangeLevelNone()","pos":[612715,612745]},{"content":"public void run()","pos":[613021,613038]},{"content":"Runs the report.","pos":[613177,613193]},{"content":"public void gotoYmm100(<ph id=\"ph1\">\\[</ph>int mm100<ph id=\"ph2\">\\]</ph>)","pos":[613327,613364],"source":"public void gotoYmm100(\\[int mm100\\])"},{"content":"public void disableColumnHeadings(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[613633,613687],"source":"public void disableColumnHeadings(\\[TableId tableId\\])"},{"content":"public void enablePageFooter()","pos":[613939,613969]},{"content":"public void init()","pos":[614245,614263]},{"content":"public void arrangeLevelControl()","pos":[614551,614584]},{"content":"public void disablePageFooter()","pos":[614857,614888]},{"content":"public void addPendingSums()","pos":[615163,615191]},{"content":"Prints the relevant footers of the report.","pos":[615319,615361]},{"content":"public void arrangeLevelSection()","pos":[615469,615502]},{"content":"public void enableSection(ReportSection section)","pos":[615775,615823]},{"content":"public void detach()","pos":[616081,616101]},{"content":"public void addRangeDescription(int x, int y, str text, <ph id=\"ph1\">\\[</ph>str fontName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int fontSize<ph id=\"ph4\">\\]</ph>)","pos":[616387,616478],"source":"public void addRangeDescription(int x, int y, str text, \\[str fontName\\], \\[int fontSize\\])"},{"content":"public void finalize()","pos":[616693,616715]},{"pos":[617002,617017],"content":"Method allPages","linkify":"Method allPages","nodes":[{"content":"Method allPages","pos":[0,15]}]},{"pos":[617068,617078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"all","pos":[617080,617083]},{"pos":[617092,617104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[617110,617133],"content":"Method callMenuFunction","linkify":"Method callMenuFunction","nodes":[{"content":"Method callMenuFunction","pos":[0,23]}]},{"pos":[617205,617215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuFunction","pos":[617217,617229]},{"pos":[617238,617250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[617256,617270],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Creates a caption when previewing a report, or a document name when printing a report.","pos":[617272,617358]},{"pos":[617460,617470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reportSpelling","pos":[617472,617486]},{"content":"The name of the design.","pos":[617489,617512]},{"content":"reportName","pos":[617524,617534]},{"content":"The name of the design.","pos":[617537,617560]},{"content":"designCaption","pos":[617572,617585]},{"content":"The name of the design.","pos":[617588,617611]},{"content":"designName","pos":[617623,617633]},{"content":"The name of the design.","pos":[617636,617659]},{"pos":[617666,617678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains \"DesignLabel - ReportSpelling\" if the DesignLabel is not empty.","pos":[617680,617766]},{"content":"A string that contains \"ReportName(DesignName) - ReportSpelling\" if the DesignLabel is empty.","pos":[617767,617860]},{"pos":[617867,617874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The call to the super method in this method creates a string that is used as a caption when previewing a report and as the document name when printing a report.It is recommended that you always fill out the Caption property of the report design so that the caption that is used during the preview of the report is in the actual language.","pos":[617876,618213]},{"pos":[618219,618233],"content":"Method collate","linkify":"Method collate","nodes":[{"content":"Method collate","pos":[0,14]}]},{"pos":[618287,618297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"collate","pos":[618299,618306]},{"pos":[618315,618327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[618333,618354],"content":"Method columnHeadings","linkify":"Method columnHeadings","nodes":[{"content":"Method columnHeadings","pos":[0,21]}]},{"content":"Provides control of column headings in a report.","pos":[618356,618404]},{"pos":[618465,618475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[618477,618484]},{"content":"A table ID; optional.","pos":[618487,618508]},{"pos":[618515,618527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The last tableId value for which columnHeading objects were printed.","pos":[618529,618597]},{"pos":[618603,618617],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"content":"Retrieves the control that is being executed.","pos":[618619,618664]},{"pos":[618707,618719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The control that is being executed.","pos":[618721,618756]},{"pos":[618763,618770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is intended for internal use.","pos":[618772,618813]},{"pos":[618819,618832],"content":"Method copies","linkify":"Method copies","nodes":[{"content":"Method copies","pos":[0,13]}]},{"pos":[618884,618894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"numberOfCopies","pos":[618896,618910]},{"pos":[618919,618931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[618937,618955],"content":"Method copiesTotal","linkify":"Method copiesTotal","nodes":[{"content":"Method copiesTotal","pos":[0,18]}]},{"content":"Enables marking copies of reports.","pos":[618957,618991]},{"pos":[619028,619040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of copies the user requested in the sysPrintForm form.","pos":[619042,619107]},{"pos":[619114,619121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls are typically evaluated during the execution of a report.","pos":[619123,619189]},{"content":"A control that uses this method is evaluated when the report is printed.","pos":[619190,619262]},{"pos":[619268,619279],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Returns the number of the copy of a report.","pos":[619281,619324]},{"pos":[619354,619366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of the copy.","pos":[619368,619391]},{"pos":[619398,619405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the user prints three copies of a report a control that have a dataFunction method, this method will return one for the first copy, two for the second copy, and three for the last copy.","pos":[619407,619595]},{"pos":[619601,619623],"content":"Method copyDescription","linkify":"Method copyDescription","nodes":[{"content":"Method copyDescription","pos":[0,22]}]},{"pos":[619664,619676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[619682,619707],"content":"Method createProgressForm","linkify":"Method createProgressForm","nodes":[{"content":"Method createProgressForm","pos":[0,25]}]},{"content":"Creates the form that contains progress information.","pos":[619709,619761]},{"pos":[619810,619822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The form to use to display the progress information.","pos":[619824,619876]},{"pos":[619883,619890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can overload this method.","pos":[619892,619921]},{"content":"The method is called when the first page is created.","pos":[619922,619974]},{"content":"The default implementation will open the SysPrintProgress form.If you implement your own progress form, you must implement the setNames and setPagePercent methods because these methods are called within the kernel.This form is shown when the pages are created, not when the pages are printed.","pos":[619975,620267]},{"pos":[620273,620293],"content":"Method currentYmm100","linkify":"Method currentYmm100","nodes":[{"content":"Method currentYmm100","pos":[0,20]}]},{"pos":[620332,620344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[620350,620363],"content":"Method design","linkify":"Method design","nodes":[{"content":"Method design","pos":[0,13]}]},{"content":"Gets or sets the name of the design.","pos":[620365,620401]},{"pos":[620470,620480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nameOrReportDesign","pos":[620482,620500]},{"content":"The name of the design; optional.","pos":[620503,620536]},{"pos":[620543,620555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the design.","pos":[620557,620580]},{"pos":[620587,620594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be used to change from one design to another while the report is executed.","pos":[620596,620686]},{"pos":[620692,620709],"content":"Method deviceName","linkify":"Method deviceName","nodes":[{"content":"Method deviceName","pos":[0,17]}]},{"pos":[620757,620767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"device","pos":[620769,620775]},{"pos":[620784,620796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[620802,620815],"content":"Method dialog","linkify":"Method dialog","nodes":[{"content":"Method dialog","pos":[0,13]}]},{"pos":[620863,620873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dialog","pos":[620875,620881]},{"pos":[620890,620902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[620908,620925],"content":"Method driverName","linkify":"Method driverName","nodes":[{"content":"Method driverName","pos":[0,17]}]},{"content":"Returns the printer driver name.","pos":[620927,620959]},{"pos":[620995,621007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The printer driver name.","pos":[621009,621033]},{"pos":[621040,621047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method often returns the string \"winspool\".","pos":[621049,621096]},{"content":"This is the printer driver name that is used when the printer device context is created.If no printers have been set up on the computer, the string \"Screen\" is returned.","pos":[621097,621266]},{"pos":[621272,621294],"content":"Method enableAllBodies","linkify":"Method enableAllBodies","nodes":[{"content":"Method enableAllBodies","pos":[0,22]}]},{"pos":[621355,621365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[621367,621373]},{"pos":[621382,621394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[621400,621414],"content":"Method execute","linkify":"Method execute","nodes":[{"content":"Method execute","pos":[0,14]}]},{"content":"Prints the programmable sections of a report.","pos":[621416,621461]},{"pos":[621508,621518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[621520,621526]},{"content":"The controlNumber value of the programmable section.","pos":[621529,621581]},{"pos":[621588,621600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"false if the toPage object has been generated; otherwise, true.","pos":[621602,621665]},{"pos":[621671,621703],"content":"Method executeBodyColumnHeadings","linkify":"Method executeBodyColumnHeadings","nodes":[{"content":"Method executeBodyColumnHeadings","pos":[0,32]}]},{"content":"Prints the column headings of a body section in a report.","pos":[621705,621762]},{"pos":[621851,621861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[621863,621870]},{"content":"The field ID of the DataField property of a section group; optional.","pos":[621873,621941]},{"content":"fieldId","pos":[621953,621960]},{"content":"The field ID of the DataField property of a section group; optional.","pos":[621963,622031]},{"pos":[622038,622050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if any column headings were printed; otherwise, false.","pos":[622052,622111]},{"pos":[622118,622125],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is useful when a report should contain more column headings than those automatically printed in the report.","pos":[622127,622246]},{"pos":[622252,622280],"content":"Method executeColumnHeadings","linkify":"Method executeColumnHeadings","nodes":[{"content":"Method executeColumnHeadings","pos":[0,28]}]},{"pos":[622352,622362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[622364,622371]},{"pos":[622380,622392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[622398,622433],"content":"Method executeControlColumnHeadings","linkify":"Method executeControlColumnHeadings","nodes":[{"content":"Method executeControlColumnHeadings","pos":[0,35]}]},{"content":"Executes the column headings of a programmable section.","pos":[622435,622490]},{"pos":[622558,622568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[622570,622576]},{"content":"The controlNumber value of the programmable section.","pos":[622579,622631]},{"pos":[622638,622650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if any sections were printed; otherwise, false.","pos":[622652,622704]},{"pos":[622711,622718],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is useful if you want to add columnHeading objects to a programmable section.If a programmable section causes a page break, the columnHeadings objects of the section are repeated.","pos":[622720,622911]},{"content":"Under these circumstances this method not have to be called.","pos":[622912,622972]},{"pos":[622978,622998],"content":"Method executeFooter","linkify":"Method executeFooter","nodes":[{"content":"Method executeFooter","pos":[0,20]}]},{"content":"Execute a footer section.","pos":[623000,623025]},{"pos":[623104,623114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[623116,623123]},{"content":"The field ID of the dataField property of the footer section group; optional.","pos":[623126,623203]},{"content":"fieldId","pos":[623215,623222]},{"content":"The field ID of the dataField property of the footer section group; optional.","pos":[623225,623302]},{"pos":[623309,623321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if anything was printed; otherwise, false.","pos":[623323,623370]},{"pos":[623376,623396],"content":"Method executeHeader","linkify":"Method executeHeader","nodes":[{"content":"Method executeHeader","pos":[0,20]}]},{"content":"Executes a header section.","pos":[623398,623424]},{"pos":[623503,623513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[623515,623522]},{"content":"The field ID of the dataField property of the header section group; optional.","pos":[623525,623602]},{"content":"fieldId","pos":[623614,623621]},{"content":"The field ID of the dataField property of the header section group; optional.","pos":[623624,623701]},{"pos":[623708,623720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[623726,623747],"content":"Method executeSection","linkify":"Method executeSection","nodes":[{"content":"Method executeSection","pos":[0,21]}]},{"content":"Prints the specified section in the report.","pos":[623749,623792]},{"pos":[623857,623867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[623869,623876]},{"content":"The section to print.","pos":[623879,623900]},{"pos":[623907,623919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[623925,623937],"content":"Method fetch","linkify":"Method fetch","nodes":[{"content":"Method fetch","pos":[0,12]}]},{"content":"Executes the report query and calls the send method for the record that is found by the query.","pos":[623939,624033]},{"pos":[624068,624080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if execution of the report should continue; otherwise, false.","pos":[624082,624148]},{"pos":[624155,624162],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The fetch method is called from the super call in the run method.","pos":[624164,624229]},{"pos":[624235,624246],"content":"Method from","linkify":"Method from","nodes":[{"content":"Method from","pos":[0,11]}]},{"pos":[624290,624300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fromPage","pos":[624302,624310]},{"pos":[624319,624331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624337,624358],"content":"Method generateDesign","linkify":"Method generateDesign","nodes":[{"content":"Method generateDesign","pos":[0,21]}]},{"pos":[624427,624437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[624439,624444]},{"content":"designNo","pos":[624458,624466]},{"pos":[624475,624487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624493,624519],"content":"Method getDeclineOverwrite","linkify":"Method getDeclineOverwrite","nodes":[{"content":"Method getDeclineOverwrite","pos":[0,26]}]},{"pos":[624568,624580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624586,624612],"content":"Method getNumberOfPrinters","linkify":"Method getNumberOfPrinters","nodes":[{"content":"Method getNumberOfPrinters","pos":[0,26]}]},{"pos":[624657,624669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624675,624692],"content":"Method getPrinter","linkify":"Method getPrinter","nodes":[{"content":"Method getPrinter","pos":[0,17]}]},{"pos":[624738,624748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[624750,624756]},{"pos":[624765,624777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624783,624809],"content":"Method getRangeDescription","linkify":"Method getRangeDescription","nodes":[{"content":"Method getRangeDescription","pos":[0,26]}]},{"pos":[624864,624874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[624876,624882]},{"pos":[624891,624903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624909,624931],"content":"Method getReportViewer","linkify":"Method getReportViewer","nodes":[{"content":"Method getReportViewer","pos":[0,22]}]},{"pos":[624981,624993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[624999,625015],"content":"Method getTarget","linkify":"Method getTarget","nodes":[{"content":"Method getTarget","pos":[0,16]}]},{"pos":[625058,625070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625076,625101],"content":"Method hasGeneratedDesign","linkify":"Method hasGeneratedDesign","nodes":[{"content":"Method hasGeneratedDesign","pos":[0,25]}]},{"pos":[625149,625161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625167,625191],"content":"Method headerDescription","linkify":"Method headerDescription","nodes":[{"content":"Method headerDescription","pos":[0,24]}]},{"pos":[625234,625246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625252,625278],"content":"Method heightOfPageFooters","linkify":"Method heightOfPageFooters","nodes":[{"content":"Method heightOfPageFooters","pos":[0,26]}]},{"pos":[625323,625335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625341,625354],"content":"Method indent","linkify":"Method indent","nodes":[{"content":"Method indent","pos":[0,13]}]},{"pos":[625386,625398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625404,625424],"content":"Method isBodyEnabled","linkify":"Method isBodyEnabled","nodes":[{"content":"Method isBodyEnabled","pos":[0,20]}]},{"pos":[625482,625492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[625494,625501]},{"pos":[625510,625522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625528,625540],"content":"Method jobId","linkify":"Method jobId","nodes":[{"content":"Method jobId","pos":[0,12]}]},{"pos":[625573,625585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625591,625602],"content":"Method last","linkify":"Method last","nodes":[{"content":"Method last","pos":[0,11]}]},{"pos":[625650,625660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[625662,625669]},{"pos":[625678,625690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625696,625712],"content":"Method mm100Left","linkify":"Method mm100Left","nodes":[{"content":"Method mm100Left","pos":[0,16]}]},{"pos":[625747,625759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625765,625787],"content":"Method mm100PageHeight","linkify":"Method mm100PageHeight","nodes":[{"content":"Method mm100PageHeight","pos":[0,22]}]},{"pos":[625828,625840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[625846,625857],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.","pos":[625859,625980]},{"pos":[626020,626030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[626032,626036]},{"pos":[626045,626057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[626059,626123]},{"pos":[626130,626137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[626139,626233]},{"content":"Begins with a letter.","pos":[626239,626260]},{"content":"Doesn't exceed 250 characters.","pos":[626265,626295]},{"content":"Can include numbers and underscore characters.","pos":[626300,626346]},{"content":"Cannot include punctuation or spaces.","pos":[626351,626388]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[626393,626511]},{"pos":[626517,626528],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the ReportRun class.","pos":[626530,626585]},{"pos":[626621,626633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the ReportRun class.","pos":[626635,626705]},{"pos":[626711,626728],"content":"Method packDesign","linkify":"Method packDesign","nodes":[{"content":"Method packDesign","pos":[0,17]}]},{"pos":[626770,626782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[626788,626811],"content":"Method packPageSettings","linkify":"Method packPageSettings","nodes":[{"content":"Method packPageSettings","pos":[0,23]}]},{"pos":[626859,626871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[626877,626903],"content":"Method packPrinterSettings","linkify":"Method packPrinterSettings","nodes":[{"content":"Method packPrinterSettings","pos":[0,26]}]},{"pos":[626954,626966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[626972,626999],"content":"Method packPrintJobSettings","linkify":"Method packPrintJobSettings","nodes":[{"content":"Method packPrintJobSettings","pos":[0,27]}]},{"pos":[627051,627063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627069,627096],"content":"Method packSubtotalSettings","linkify":"Method packSubtotalSettings","nodes":[{"content":"Method packSubtotalSettings","pos":[0,27]}]},{"pos":[627148,627160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627166,627177],"content":"Method page","linkify":"Method page","nodes":[{"content":"Method page","pos":[0,11]}]},{"pos":[627219,627229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[627231,627237]},{"pos":[627246,627258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627264,627285],"content":"Method pageFormatting","linkify":"Method pageFormatting","nodes":[{"content":"Method pageFormatting","pos":[0,21]}]},{"content":"Displays the printer properties of the printer.","pos":[627287,627334]},{"pos":[627378,627390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627397,627404],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method on the Report object is never called by the kernel.","pos":[627406,627469]},{"content":"It could be called by the sysPrintForm form when the user clicks the Properties button, but instead, the sysPrintForm form calls the directly.","pos":[627470,627612]},{"pos":[627618,627635],"content":"Method pagesTotal","linkify":"Method pagesTotal","nodes":[{"content":"Method pagesTotal","pos":[0,17]}]},{"pos":[627671,627683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627689,627707],"content":"Method passThrough","linkify":"Method passThrough","nodes":[{"content":"Method passThrough","pos":[0,18]}]},{"pos":[627751,627761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"str","pos":[627763,627766]},{"pos":[627775,627787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627793,627810],"content":"Method pixelsLeft","linkify":"Method pixelsLeft","nodes":[{"content":"Method pixelsLeft","pos":[0,17]}]},{"pos":[627846,627858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[627864,627876],"content":"Method print","linkify":"Method print","nodes":[{"content":"Method print","pos":[0,12]}]},{"content":"Sends the generated report to a print medium, such as a printer or the screen.","pos":[627878,627956]},{"pos":[627987,627999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[628006,628013],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The call to the super method in this method directs the generated report to a printMedium object, such as printer or screen.If the target is a screen, the call to the super method will create a reportViewer object on the client and call the showPage method.If the target is a printer, the call to the super method will create a reportOutput object and call the print method on this object.","pos":[628015,628404]},{"content":"If the outputToClient method of the PrintJobSettings class has been called with a parameter of true, a reportViewer object will be created and the print method of that object will be called.","pos":[628405,628595]},{"content":"In in this manner, a report that is generated on the server can be output to a printer that is set up on the client.","pos":[628596,628712]},{"pos":[628718,628742],"content":"Method printerAttributes","linkify":"Method printerAttributes","nodes":[{"content":"Method printerAttributes","pos":[0,24]}]},{"pos":[628785,628797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[628803,628827],"content":"Method printerAveragePPM","linkify":"Method printerAveragePPM","nodes":[{"content":"Method printerAveragePPM","pos":[0,24]}]},{"pos":[628870,628882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[628888,628909],"content":"Method printerComment","linkify":"Method printerComment","nodes":[{"content":"Method printerComment","pos":[0,21]}]},{"pos":[628949,628961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[628967,628989],"content":"Method printerDatatype","linkify":"Method printerDatatype","nodes":[{"content":"Method printerDatatype","pos":[0,22]}]},{"pos":[629030,629042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629048,629077],"content":"Method printerDefaultPriority","linkify":"Method printerDefaultPriority","nodes":[{"content":"Method printerDefaultPriority","pos":[0,29]}]},{"pos":[629125,629137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629143,629167],"content":"Method printerDriverName","linkify":"Method printerDriverName","nodes":[{"content":"Method printerDriverName","pos":[0,24]}]},{"pos":[629210,629222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629228,629250],"content":"Method printerFontInfo","linkify":"Method printerFontInfo","nodes":[{"content":"Method printerFontInfo","pos":[0,22]}]},{"content":"Indicates which font is used to print the report.","pos":[629252,629301]},{"pos":[629342,629354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font.","pos":[629356,629377]},{"pos":[629384,629391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The font to use to print the report is not necessarily the same as that set on the font property of the control as that font might not be available on the user system.","pos":[629393,629560]},{"pos":[629566,629588],"content":"Method printerLocation","linkify":"Method printerLocation","nodes":[{"content":"Method printerLocation","pos":[0,22]}]},{"pos":[629629,629641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629647,629671],"content":"Method printerPageHeight","linkify":"Method printerPageHeight","nodes":[{"content":"Method printerPageHeight","pos":[0,24]}]},{"pos":[629714,629726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629732,629755],"content":"Method printerPageWidth","linkify":"Method printerPageWidth","nodes":[{"content":"Method printerPageWidth","pos":[0,23]}]},{"pos":[629797,629809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629815,629834],"content":"Method printerPaper","linkify":"Method printerPaper","nodes":[{"content":"Method printerPaper","pos":[0,19]}]},{"pos":[629872,629884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629890,629914],"content":"Method printerParameters","linkify":"Method printerParameters","nodes":[{"content":"Method printerParameters","pos":[0,24]}]},{"pos":[629957,629969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[629975,629997],"content":"Method printerPortName","linkify":"Method printerPortName","nodes":[{"content":"Method printerPortName","pos":[0,22]}]},{"pos":[630038,630050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630056,630081],"content":"Method printerPrinterName","linkify":"Method printerPrinterName","nodes":[{"content":"Method printerPrinterName","pos":[0,25]}]},{"pos":[630125,630137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630143,630171],"content":"Method printerPrintProcessor","linkify":"Method printerPrintProcessor","nodes":[{"content":"Method printerPrintProcessor","pos":[0,28]}]},{"pos":[630218,630230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630236,630258],"content":"Method printerPriority","linkify":"Method printerPriority","nodes":[{"content":"Method printerPriority","pos":[0,22]}]},{"pos":[630299,630311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630317,630341],"content":"Method printerQueuedJobs","linkify":"Method printerQueuedJobs","nodes":[{"content":"Method printerQueuedJobs","pos":[0,24]}]},{"pos":[630384,630396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630402,630423],"content":"Method printerSepFile","linkify":"Method printerSepFile","nodes":[{"content":"Method printerSepFile","pos":[0,21]}]},{"pos":[630463,630475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630481,630505],"content":"Method printerServerName","linkify":"Method printerServerName","nodes":[{"content":"Method printerServerName","pos":[0,24]}]},{"pos":[630548,630560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[630566,630588],"content":"Method printerSettings","linkify":"Method printerSettings","nodes":[{"content":"Method printerSettings","pos":[0,22]}]},{"content":"Enables the user to select printer settings.","pos":[630590,630634]},{"pos":[630693,630703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"showWhat","pos":[630705,630713]},{"content":"This parameter is currently not functional.","pos":[630716,630759]},{"pos":[630766,630778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if execution of the report should continue; otherwise, false.","pos":[630780,630846]},{"pos":[630853,630860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The call to the super method in this method runs the sysPrintForm form.","pos":[630862,630933]},{"content":"The prompt method is called from the super method call in the prompt method.","pos":[630934,631010]},{"content":"The PrintFormName property on the reportDesign object determines which form the call to the super method in the printerSettiings object will run.","pos":[631011,631156]},{"pos":[631162,631185],"content":"Method printerShareName","linkify":"Method printerShareName","nodes":[{"content":"Method printerShareName","pos":[0,23]}]},{"pos":[631227,631239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631245,631268],"content":"Method printerStartTime","linkify":"Method printerStartTime","nodes":[{"content":"Method printerStartTime","pos":[0,23]}]},{"pos":[631316,631328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631334,631354],"content":"Method printerStatus","linkify":"Method printerStatus","nodes":[{"content":"Method printerStatus","pos":[0,20]}]},{"pos":[631393,631405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631411,631434],"content":"Method printerUntilTime","linkify":"Method printerUntilTime","nodes":[{"content":"Method printerUntilTime","pos":[0,23]}]},{"pos":[631482,631494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631500,631523],"content":"Method printJobSettings","linkify":"Method printJobSettings","nodes":[{"content":"Method printJobSettings","pos":[0,23]}]},{"pos":[631612,631622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPrintJobSettings","pos":[631624,631646]},{"pos":[631655,631667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631673,631688],"content":"Method printSum","linkify":"Method printSum","nodes":[{"content":"Method printSum","pos":[0,15]}]},{"pos":[631722,631734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631740,631759],"content":"Method progressForm","linkify":"Method progressForm","nodes":[{"content":"Method progressForm","pos":[0,19]}]},{"pos":[631817,631827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[631829,631833]},{"pos":[631842,631854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[631860,631879],"content":"Method progressInfo","linkify":"Method progressInfo","nodes":[{"content":"Method progressInfo","pos":[0,19]}]},{"content":"Creates a string that describes how much of the report has been generated during the execution of a report every time that a section is executed.","pos":[631881,632026]},{"pos":[632086,632096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNo","pos":[632098,632104]},{"content":"The section number of the page.","pos":[632107,632138]},{"content":"lineNo","pos":[632150,632156]},{"content":"The section number of the page.","pos":[632159,632190]},{"pos":[632197,632209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes how much of the report has been generated.","pos":[632211,632277]},{"pos":[632283,632296],"content":"Method prompt","linkify":"Method prompt","nodes":[{"content":"Method prompt","pos":[0,13]}]},{"content":"Prompts the user a report is run.","pos":[632298,632331]},{"pos":[632487,632497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enableCopy","pos":[632499,632509]},{"content":"A Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.","pos":[632512,632617]},{"content":"enablePages","pos":[632629,632640]},{"content":"A Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.","pos":[632643,632748]},{"content":"enableDevice","pos":[632760,632772]},{"content":"A Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.","pos":[632775,632880]},{"content":"enableProperties","pos":[632892,632908]},{"content":"A Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.","pos":[632911,633016]},{"content":"enablePrintTo","pos":[633028,633041]},{"content":"A Boolean value that indicates whether the user can select the target in the sysPrintForm form; optional.","pos":[633044,633149]},{"pos":[633156,633168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if execution of report should continue; otherwise, false.","pos":[633170,633232]},{"pos":[633239,633246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The call to the super method in the prompt method runs the sysPrintForm form.This method is called from the run method.","pos":[633248,633367]},{"pos":[633373,633385],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[633431,633441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[633443,633448]},{"pos":[633457,633469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633475,633490],"content":"Method queryRun","linkify":"Method queryRun","nodes":[{"content":"Method queryRun","pos":[0,15]}]},{"pos":[633548,633558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"queryRun","pos":[633560,633568]},{"pos":[633577,633589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633595,633608],"content":"Method report","linkify":"Method report","nodes":[{"content":"Method report","pos":[0,13]}]},{"pos":[633643,633655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633661,633678],"content":"Method reportUser","linkify":"Method reportUser","nodes":[{"content":"Method reportUser","pos":[0,17]}]},{"pos":[633724,633734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"user","pos":[633736,633740]},{"pos":[633749,633761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633767,633781],"content":"Method rulerCM","linkify":"Method rulerCM","nodes":[{"content":"Method rulerCM","pos":[0,14]}]},{"pos":[633814,633826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633832,633848],"content":"Method rulerINCH","linkify":"Method rulerINCH","nodes":[{"content":"Method rulerINCH","pos":[0,16]}]},{"pos":[633883,633895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633901,633922],"content":"Method screenFontInfo","linkify":"Method screenFontInfo","nodes":[{"content":"Method screenFontInfo","pos":[0,21]}]},{"pos":[633962,633974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[633980,633994],"content":"Method section","linkify":"Method section","nodes":[{"content":"Method section","pos":[0,14]}]},{"pos":[634037,634049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[634055,634074],"content":"Method sectionsLeft","linkify":"Method sectionsLeft","nodes":[{"content":"Method sectionsLeft","pos":[0,19]}]},{"pos":[634133,634143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[634145,634152]},{"pos":[634161,634173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[634179,634190],"content":"Method send","linkify":"Method send","nodes":[{"content":"Method send","pos":[0,11]}]},{"content":"Triggers the body sections that belong to a section group.","pos":[634192,634250]},{"pos":[634365,634375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cursor","pos":[634377,634383]},{"content":"level","pos":[634397,634402]},{"content":"triggerOffBody","pos":[634416,634430]},{"content":"newPageBeforeBody","pos":[634444,634461]},{"pos":[634470,634482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"false if the toPage object has been generated; otherwise true.","pos":[634484,634546]},{"pos":[634553,634560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The executeSection method of the ReportSection class is called on each triggered section.By default in a master-detail report, the records from the master table have level of one, and the records from the details table have level of two.","pos":[634562,634799]},{"pos":[634805,634821],"content":"Method setTarget","linkify":"Method setTarget","nodes":[{"content":"Method setTarget","pos":[0,16]}]},{"pos":[634882,634892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[634894,634900]},{"pos":[634909,634921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[634927,634950],"content":"Method showMenuFunction","linkify":"Method showMenuFunction","nodes":[{"content":"Method showMenuFunction","pos":[0,23]}]},{"pos":[635022,635032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuFunction","pos":[635034,635046]},{"pos":[635055,635067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635073,635097],"content":"Method showMenuReference","linkify":"Method showMenuReference","nodes":[{"content":"Method showMenuReference","pos":[0,24]}]},{"pos":[635165,635175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuReference","pos":[635177,635190]},{"pos":[635199,635211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635217,635232],"content":"Method sortInfo","linkify":"Method sortInfo","nodes":[{"content":"Method sortInfo","pos":[0,15]}]},{"pos":[635279,635289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cursor","pos":[635291,635297]},{"pos":[635306,635318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635324,635340],"content":"Method startDate","linkify":"Method startDate","nodes":[{"content":"Method startDate","pos":[0,16]}]},{"pos":[635376,635388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635394,635414],"content":"Method startDateTime","linkify":"Method startDateTime","nodes":[{"content":"Method startDateTime","pos":[0,20]}]},{"pos":[635458,635470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635476,635499],"content":"Method startMachineDate","linkify":"Method startMachineDate","nodes":[{"content":"Method startMachineDate","pos":[0,23]}]},{"pos":[635542,635554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635560,635576],"content":"Method startTime","linkify":"Method startTime","nodes":[{"content":"Method startTime","pos":[0,16]}]},{"pos":[635617,635629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635635,635645],"content":"Method sum","linkify":"Method sum","nodes":[{"content":"Method sum","pos":[0,10]}]},{"pos":[635721,635731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[635733,635740]},{"content":"fieldId","pos":[635754,635761]},{"content":"indent","pos":[635775,635781]},{"pos":[635790,635802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635808,635825],"content":"Method sumControl","linkify":"Method sumControl","nodes":[{"content":"Method sumControl","pos":[0,17]}]},{"pos":[635889,635899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[635901,635910]},{"content":"indent","pos":[635924,635930]},{"pos":[635939,635951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[635957,635977],"content":"Method sumControlNeg","linkify":"Method sumControlNeg","nodes":[{"content":"Method sumControlNeg","pos":[0,20]}]},{"pos":[636044,636054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[636056,636065]},{"content":"indent","pos":[636079,636085]},{"pos":[636094,636106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636112,636132],"content":"Method sumControlPos","linkify":"Method sumControlPos","nodes":[{"content":"Method sumControlPos","pos":[0,20]}]},{"pos":[636199,636209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[636211,636220]},{"content":"indent","pos":[636234,636240]},{"pos":[636249,636261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636267,636288],"content":"Method sumDescription","linkify":"Method sumDescription","nodes":[{"content":"Method sumDescription","pos":[0,21]}]},{"pos":[636328,636340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636346,636359],"content":"Method sumNeg","linkify":"Method sumNeg","nodes":[{"content":"Method sumNeg","pos":[0,13]}]},{"pos":[636438,636448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[636450,636457]},{"content":"fieldId","pos":[636471,636478]},{"content":"indent","pos":[636492,636498]},{"pos":[636507,636519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636525,636538],"content":"Method sumPos","linkify":"Method sumPos","nodes":[{"content":"Method sumPos","pos":[0,13]}]},{"pos":[636617,636627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[636629,636636]},{"content":"fieldId","pos":[636650,636657]},{"content":"indent","pos":[636671,636677]},{"pos":[636686,636698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636704,636739],"content":"Method suppressReportIsEmptyMessage","linkify":"Method suppressReportIsEmptyMessage","nodes":[{"content":"Method suppressReportIsEmptyMessage","pos":[0,35]}]},{"pos":[636815,636825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"suppress","pos":[636827,636835]},{"pos":[636844,636856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[636862,636874],"content":"Method title","linkify":"Method title","nodes":[{"content":"Method title","pos":[0,12]}]},{"content":"Gets or sets the print job description.","pos":[636876,636915]},{"pos":[636957,636967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"title","pos":[636969,636974]},{"content":"The new printJobDescription value; optional.","pos":[636977,637021]},{"pos":[637028,637040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the job description.","pos":[637042,637085]},{"pos":[637092,637099],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If reports are written to the printArchive object, the print job description is stored in the jobDescription field of the printJobHeader table.","pos":[637101,637244]},{"content":"If the report is previewed, the print job description is used as the caption.This method is not called by the kernel during the execution of a report.","pos":[637245,637395]},{"content":"Therefore overriding the method will have no effect.","pos":[637396,637448]},{"pos":[637454,637463],"content":"Method to","linkify":"Method to","nodes":[{"content":"Method to","pos":[0,9]}]},{"pos":[637503,637513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"toPage","pos":[637515,637521]},{"pos":[637530,637542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[637548,637563],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a textual description of the class.","pos":[637565,637608]},{"pos":[637642,637654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the class.","pos":[637656,637690]},{"pos":[637697,637704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For most classes the toString method returns a string that contains the class handle and name, but for some classes more information is returned in the string.","pos":[637706,637865]},{"pos":[637871,637896],"content":"Method unpackPageSettings","linkify":"Method unpackPageSettings","nodes":[{"content":"Method unpackPageSettings","pos":[0,25]}]},{"pos":[637969,637979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPageSetup","pos":[637981,637996]},{"pos":[638005,638017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638023,638051],"content":"Method unpackPrinterSettings","linkify":"Method unpackPrinterSettings","nodes":[{"content":"Method unpackPrinterSettings","pos":[0,28]}]},{"pos":[638130,638140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPrinterSetup","pos":[638142,638160]},{"pos":[638169,638181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638187,638216],"content":"Method unpackPrintJobSettings","linkify":"Method unpackPrintJobSettings","nodes":[{"content":"Method unpackPrintJobSettings","pos":[0,29]}]},{"pos":[638300,638310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedPrintJobSettings","pos":[638312,638334]},{"pos":[638343,638355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638361,638390],"content":"Method unpackSubtotalSettings","linkify":"Method unpackSubtotalSettings","nodes":[{"content":"Method unpackSubtotalSettings","pos":[0,29]}]},{"pos":[638471,638481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedSubtotalSetup","pos":[638483,638502]},{"pos":[638511,638523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638529,638559],"content":"Method userSelectedOrientation","linkify":"Method userSelectedOrientation","nodes":[{"content":"Method userSelectedOrientation","pos":[0,30]}]},{"pos":[638623,638635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[638641,638659],"content":"Method disableBody","linkify":"Method disableBody","nodes":[{"content":"Method disableBody","pos":[0,18]}]},{"pos":[638714,638724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[638726,638733]},{"pos":[638741,638754],"content":"Method attach","linkify":"Method attach","nodes":[{"content":"Method attach","pos":[0,13]}]},{"pos":[638786,638796],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes an instance of the ReportRun class.","pos":[638798,638845]},{"pos":[638947,638957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"argsOrReportOrContainer","pos":[638959,638982]},{"content":"designName","pos":[638996,639006]},{"content":"isWebReport","pos":[639020,639031]},{"pos":[639039,639060],"content":"Method disableSection","linkify":"Method disableSection","nodes":[{"content":"Method disableSection","pos":[0,21]}]},{"pos":[639122,639132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[639134,639141]},{"pos":[639149,639174],"content":"Method arrangeLevelGlobal","linkify":"Method arrangeLevelGlobal","nodes":[{"content":"Method arrangeLevelGlobal","pos":[0,25]}]},{"pos":[639218,639242],"content":"Method setEscapeSequence","linkify":"Method setEscapeSequence","nodes":[{"content":"Method setEscapeSequence","pos":[0,24]}]},{"pos":[639293,639303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"str","pos":[639305,639308]},{"pos":[639316,639333],"content":"Method enableBody","linkify":"Method enableBody","nodes":[{"content":"Method enableBody","pos":[0,17]}]},{"pos":[639387,639397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[639399,639406]},{"pos":[639414,639446],"content":"Method clearAllRangeDescriptions","linkify":"Method clearAllRangeDescriptions","nodes":[{"content":"Method clearAllRangeDescriptions","pos":[0,32]}]},{"pos":[639497,639510],"content":"Method header","linkify":"Method header","nodes":[{"content":"Method header","pos":[0,13]}]},{"content":"Controls the header.","pos":[639512,639532]},{"pos":[639626,639636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"headerSection","pos":[639638,639651]},{"content":"The ID of the field that contains the changed value.","pos":[639654,639706]},{"content":"tableId","pos":[639718,639725]},{"content":"The ID of the field that contains the changed value.","pos":[639728,639780]},{"content":"fieldId","pos":[639792,639799]},{"content":"The ID of the field that contains the changed value.","pos":[639802,639854]},{"pos":[639861,639868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method works just like the footer method, except it is called before a group of records, whereas the footer method is called after a group of records.","pos":[639870,640025]},{"pos":[640031,640050],"content":"Method unpackDesign","linkify":"Method unpackDesign","nodes":[{"content":"Method unpackDesign","pos":[0,19]}]},{"pos":[640111,640121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedDesign","pos":[640123,640135]},{"pos":[640143,640157],"content":"Method newPage","linkify":"Method newPage","nodes":[{"content":"Method newPage","pos":[0,14]}]},{"pos":[640213,640223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"doPageFooter","pos":[640225,640237]},{"pos":[640245,640258],"content":"Method footer","linkify":"Method footer","nodes":[{"content":"Method footer","pos":[0,13]}]},{"content":"Controls the footer.","pos":[640260,640280]},{"pos":[640374,640384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"footerSection","pos":[640386,640399]},{"content":"The ID of the field that contains the changed value.","pos":[640402,640454]},{"content":"tableId","pos":[640466,640473]},{"content":"The ID of the field that contains the changed value.","pos":[640476,640528]},{"content":"fieldId","pos":[640540,640547]},{"content":"The ID of the field that contains the changed value.","pos":[640550,640602]},{"pos":[640609,640616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a field is sorted after it changes value, even if the user has chosen not to print headers or footers.One call of the send method can trigger the printing of multiple footer sections and header sections before the body sections.","pos":[640618,640873]},{"content":"The header and footer methods allow the user to execute code before or after printing the header or footer.","pos":[640874,640981]},{"pos":[640987,640999],"content":"Method reset","linkify":"Method reset","nodes":[{"content":"Method reset","pos":[0,12]}]},{"content":"Enables a single instance of the ReportRun class to create multiple reports.","pos":[641001,641077]},{"pos":[641134,641144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"delayExceptions","pos":[641146,641161]},{"pos":[641169,641192],"content":"Method arrangeLevelNone","linkify":"Method arrangeLevelNone","nodes":[{"content":"Method arrangeLevelNone","pos":[0,23]}]},{"pos":[641234,641244],"content":"Method run","linkify":"Method run","nodes":[{"content":"Method run","pos":[0,10]}]},{"content":"Runs the report.","pos":[641246,641262]},{"pos":[641292,641299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The call to the super method in this method calls the following methods:","pos":[641301,641373]},{"content":"prompt - Lets the user select the printer in the sysPrintForm form","pos":[641379,641445]},{"content":"fetch - Runs the report query","pos":[641450,641479]},{"content":"print - Directs the report to the printer or display.","pos":[641484,641537]},{"pos":[641543,641560],"content":"Method gotoYmm100","linkify":"Method gotoYmm100","nodes":[{"content":"Method gotoYmm100","pos":[0,17]}]},{"pos":[641608,641618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mm100","pos":[641620,641625]},{"pos":[641633,641661],"content":"Method disableColumnHeadings","linkify":"Method disableColumnHeadings","nodes":[{"content":"Method disableColumnHeadings","pos":[0,28]}]},{"pos":[641726,641736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[641738,641745]},{"pos":[641753,641776],"content":"Method enablePageFooter","linkify":"Method enablePageFooter","nodes":[{"content":"Method enablePageFooter","pos":[0,23]}]},{"pos":[641818,641829],"content":"Method init","linkify":"Method init","nodes":[{"content":"Method init","pos":[0,11]}]},{"pos":[641859,641885],"content":"Method arrangeLevelControl","linkify":"Method arrangeLevelControl","nodes":[{"content":"Method arrangeLevelControl","pos":[0,26]}]},{"pos":[641930,641954],"content":"Method disablePageFooter","linkify":"Method disablePageFooter","nodes":[{"content":"Method disablePageFooter","pos":[0,24]}]},{"pos":[641997,642018],"content":"Method addPendingSums","linkify":"Method addPendingSums","nodes":[{"content":"Method addPendingSums","pos":[0,21]}]},{"content":"Prints the relevant footers of the report.","pos":[642020,642062]},{"pos":[642103,642110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method should only be called in reports where the fetch method is called more than once.","pos":[642112,642205]},{"pos":[642211,642237],"content":"Method arrangeLevelSection","linkify":"Method arrangeLevelSection","nodes":[{"content":"Method arrangeLevelSection","pos":[0,26]}]},{"pos":[642282,642302],"content":"Method enableSection","linkify":"Method enableSection","nodes":[{"content":"Method enableSection","pos":[0,20]}]},{"pos":[642363,642373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"section","pos":[642375,642382]},{"pos":[642390,642403],"content":"Method detach","linkify":"Method detach","nodes":[{"content":"Method detach","pos":[0,13]}]},{"pos":[642435,642461],"content":"Method addRangeDescription","linkify":"Method addRangeDescription","nodes":[{"content":"Method addRangeDescription","pos":[0,26]}]},{"pos":[642561,642571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[642573,642574]},{"content":"y","pos":[642588,642589]},{"content":"text","pos":[642603,642607]},{"content":"fontName","pos":[642621,642629]},{"content":"fontSize","pos":[642643,642651]},{"pos":[642659,642674],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[642707,642726],"content":"Class ReportSection","linkify":"Class ReportSection","nodes":[{"content":"Class ReportSection","pos":[0,19]}]},{"content":"The ReportSection class contains a collection of report controls.","pos":[642769,642834]},{"pos":[642840,642847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A section is printed on the report when the query for the report is executed or when the methods of the report are executed.","pos":[642849,642973]},{"content":"This class lets you to create, read, update, and delete X++ code and metadata.","pos":[642974,643052]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[643053,643163]},{"content":"A report section can be one of the following types: prologue, page header, header, footer, page footer, epilogue, programmable section, header, body, or footer.","pos":[643164,643324]},{"content":"The section template node type lets you define sections one time and then reuse them many times in different reports.","pos":[643325,643442]},{"content":"A typical example of this is a check or a giro.","pos":[643443,643490]},{"pos":[643496,643504],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example adds a section to a report:","pos":[643506,643555]},{"pos":[644400,644407],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[644411,644417]},{"content":"Description","pos":[644506,644517]},{"content":"public ReportBitmapControl addBitmapControl()","pos":[644885,644930]},{"content":"Adds a bitmap control to a report section.","pos":[644980,645022]},{"content":"public ReportShapeControl addBoxControl(<ph id=\"ph1\">\\[</ph>ShapeType type<ph id=\"ph2\">\\]</ph>)","pos":[645122,645181],"source":"public ReportShapeControl addBoxControl(\\[ShapeType type\\])"},{"content":"Adds a shape control to a report section.","pos":[645217,645258]},{"content":"public ReportControl addControl(TableId tableId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[645359,645444],"source":"public ReportControl addControl(TableId tableId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"Adds a report control to a report section.","pos":[645454,645496]},{"content":"public ReportDateControl addDateControl(TableId tableId, FieldId fieldId)","pos":[645596,645669]},{"content":"Adds a date control to a report section.","pos":[645691,645731]},{"content":"public ReportDateControl addDateDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[645833,645917],"source":"public ReportDateControl addDateDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"Adds a date control to a report section.","pos":[645928,645968]},{"content":"public ReportDateTimeControl addDateTimeControl(TableId tableId, FieldId fieldId)","pos":[646070,646151]},{"content":"public ReportDateTimeControl addDateTimeDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[646307,646399],"source":"public ReportDateTimeControl addDateTimeDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportControl addDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[646544,646620],"source":"public ReportControl addDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportEnumControl addEnumControl(TableId tableId, FieldId fieldId)","pos":[646781,646854]},{"content":"public ReportEnumControl addEnumDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[647018,647102],"source":"public ReportEnumControl addEnumDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportFieldGroup addFieldGroup(TableId tableId, str name)","pos":[647255,647319]},{"content":"public ReportGuidControl addGuidControl(TableId tableId, FieldId fieldId)","pos":[647492,647565]},{"content":"public ReportGuidControl addGuidDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[647729,647813],"source":"public ReportGuidControl addGuidDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportInt64Control addInt64Control(TableId tableId, FieldId fieldId)","pos":[647966,648041]},{"content":"public ReportInt64Control addInt64DisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[648203,648289],"source":"public ReportInt64Control addInt64DisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportIntegerControl addIntegerControl(TableId tableId, FieldId fieldId)","pos":[648440,648519]},{"content":"public ReportIntegerControl addIntegerDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[648677,648767],"source":"public ReportIntegerControl addIntegerDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportPromptControl addPromptControl(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[648914,648995],"source":"public ReportPromptControl addPromptControl(TableId tableId, \\[FieldId fieldId\\])"},{"content":"public ReportRealControl addRealControl(TableId tableId, FieldId fieldId)","pos":[649151,649224]},{"content":"public ReportRealControl addRealDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[649388,649472],"source":"public ReportRealControl addRealDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportSectionGroup addSection(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[649625,649699],"source":"public ReportSectionGroup addSection(TableId tableId, \\[FieldId fieldId\\])"},{"content":"public ReportShapeControl addShapeControl(<ph id=\"ph1\">\\[</ph>ShapeType type<ph id=\"ph2\">\\]</ph>)","pos":[649862,649923],"source":"public ReportShapeControl addShapeControl(\\[ShapeType type\\])"},{"content":"public ReportStringControl addStringControl(TableId tableId, FieldId fieldId)","pos":[650099,650176]},{"content":"public ReportStringControl addStringDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[650336,650424],"source":"public ReportStringControl addStringDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public ReportSumControl addSumControl(TableId tableId, FieldId fieldId)","pos":[650573,650644]},{"content":"public ReportSumControl addSumNameControl(str name)","pos":[650810,650861]},{"content":"public ReportTextControl addTextControl(str text)","pos":[651047,651096]},{"content":"public ReportTimeControl addTimeControl(TableId tableId, FieldId fieldId)","pos":[651284,651357]},{"content":"public ReportTimeControl addTimeDisplayControl(str displayFunc, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[651521,651605],"source":"public ReportTimeControl addTimeDisplayControl(str displayFunc, \\[TableId tableId\\])"},{"content":"public int arrange()","pos":[651758,651778]},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[651995,652034],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[652232,652269],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[652469,652518],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[652564,652662]},{"content":"public boolean autoHeader(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[652706,652750],"source":"public boolean autoHeader(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[652943,652973],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[653038,653113]},{"content":"public int bottomMarginAndFrame()","pos":[653180,653213]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[653417,653459],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[653654,653695],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[653891,653937],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[654128,654173],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int bottomMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[654365,654401],"source":"public int bottomMode(\\[int value\\])"},{"content":"public str bottomStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[654602,654637],"source":"public str bottomStr(\\[str value\\])"},{"content":"public Units bottomUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[654839,654879],"source":"public Units bottomUnit(\\[Units value\\])"},{"content":"public Real bottomValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[655076,655115],"source":"public Real bottomValue(\\[Real value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[655313,655351],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[655408,655451]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[655550,655587],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[655645,655690]},{"content":"public int columnHeadingsStrategy(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[655787,655835],"source":"public int columnHeadingsStrategy(\\[int value\\])"},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[656024,656079],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[656261,656313],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspaceMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[656498,656539],"source":"public int columnspaceMode(\\[int value\\])"},{"content":"public str columnspaceStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[656735,656775],"source":"public str columnspaceStr(\\[str value\\])"},{"content":"public Units columnspaceUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[656972,657017],"source":"public Units columnspaceUnit(\\[Units value\\])"},{"content":"public Real columnspaceValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[657209,657253],"source":"public Real columnspaceValue(\\[Real value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[657446,657484],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ReportControl control(FieldId fieldId, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[657683,657749],"source":"public ReportControl control(FieldId fieldId, \\[TableId tableId\\])"},{"content":"Finds a control in the section, based on the control’s table and dataField properties.","pos":[657778,657864]},{"content":"public int controlCount()","pos":[657920,657945]},{"content":"public ReportControl controlName(str name)","pos":[658157,658199]},{"content":"Finds a control in a section, based on the control's Name property.","pos":[658252,658319]},{"content":"public ReportControl controlNo(int number)","pos":[658394,658436]},{"content":"public int controlNumber(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[658631,658670],"source":"public int controlNumber(\\[int value\\])"},{"content":"public int delete()","pos":[658868,658887]},{"content":"Deletes the current node from the AOT.","pos":[658963,659001]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[659105,659135],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[659200,659257]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[659342,659376],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[659437,659494]},{"content":"public str footerText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[659579,659615],"source":"public str footerText(\\[str value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[659816,659857],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[659911,659962]},{"content":"public boolean grandHeader(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[660053,660098],"source":"public boolean grandHeader(\\[boolean value\\])"},{"content":"public boolean grandTotal(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[660290,660334],"source":"public boolean grandTotal(\\[boolean value\\])"},{"content":"Determines whether the FooterText property value can be displayed.","pos":[660385,660451]},{"content":"public boolean hasButtons(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[660527,660571],"source":"public boolean hasButtons(\\[boolean value\\])"},{"content":"public int headerDetailLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[660764,660826],"source":"public int headerDetailLevel(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode headerDetailLevelMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[661001,661057],"source":"public AutoMode headerDetailLevelMode(\\[AutoMode mode\\])"},{"content":"public int headerDetailLevelValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[661238,661286],"source":"public int headerDetailLevelValue(\\[int value\\])"},{"content":"public str headerText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[661475,661511],"source":"public str headerText(\\[str value\\])"},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int height<ph id=\"ph2\">\\]</ph>)","pos":[661712,661750],"source":"public int height100mm(\\[int height\\])"},{"content":"Gets or sets the height of a section, excluding the height of the border and the top and bottom margins.","pos":[661807,661911]},{"content":"public int heightmm100(<ph id=\"ph1\">\\[</ph>int heightInclMargins<ph id=\"ph2\">\\]</ph>)","pos":[661949,661998],"source":"public int heightmm100(\\[int heightInclMargins\\])"},{"content":"Gets or sets the height of a section, including the height of the border and the top and bottom margins.","pos":[662044,662148]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[662186,662222],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[662281,662343]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[662423,662458],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[662660,662700],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[662897,662936],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[662992,663031]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[663134,663174],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label()","pos":[663371,663389]},{"content":"Gets the description of the section node in the AOT.","pos":[663466,663518]},{"content":"public int labelBottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[663608,663655],"source":"public int labelBottomMarginMode(\\[int value\\])"},{"content":"public str labelBottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[663845,663891],"source":"public str labelBottomMarginStr(\\[str value\\])"},{"content":"public Units labelBottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[664082,664133],"source":"public Units labelBottomMarginUnit(\\[Units value\\])"},{"content":"public Real labelBottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[664319,664369],"source":"public Real labelBottomMarginValue(\\[Real value\\])"},{"content":"public int labelTopMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[664556,664600],"source":"public int labelTopMarginMode(\\[int value\\])"},{"content":"public str labelTopMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[664793,664836],"source":"public str labelTopMarginStr(\\[str value\\])"},{"content":"public Units labelTopMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[665030,665078],"source":"public Units labelTopMarginUnit(\\[Units value\\])"},{"content":"public Real labelTopMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[665267,665314],"source":"public Real labelTopMarginValue(\\[Real value\\])"},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[665504,665544],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public int leftMarginsEtc()","pos":[665741,665768]},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[665978,666017],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[666215,666259],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[666452,666495],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[666689,666734],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[666926,666971],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[667163,667207],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[667258,667333]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[667400,667445],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public TableId map(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[667637,667674],"source":"public TableId map(\\[TableId value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[667874,667904],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[667969,668107]},{"content":"public int noOfHeadingLines(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[668112,668173],"source":"public int noOfHeadingLines(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode noOfHeadingLinesMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[668349,668404],"source":"public AutoMode noOfHeadingLinesMode(\\[AutoMode mode\\])"},{"content":"public int noOfHeadingLinesValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[668586,668633],"source":"public int noOfHeadingLinesValue(\\[int value\\])"},{"content":"public str resolutionX(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[668823,668860],"source":"public str resolutionX(\\[str value\\])"},{"content":"public int resolutionXStr(str value)","pos":[669060,669096]},{"content":"public Units resolutionXUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[669297,669342],"source":"public Units resolutionXUnit(\\[Units value\\])"},{"content":"public str resolutionY(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[669534,669571],"source":"public str resolutionY(\\[str value\\])"},{"content":"public int resolutionYStr(str value)","pos":[669771,669807]},{"content":"public Units resolutionYUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[670008,670053],"source":"public Units resolutionYUnit(\\[Units value\\])"},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[670245,670286],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public int rightMarginsEtc()","pos":[670482,670510]},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[670719,670759],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[670956,671001],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[671193,671237],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public int ruler(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[671430,671461],"source":"public int ruler(\\[int value\\])"},{"content":"public ReportSectionGroup sectionGroup(TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[671667,671743],"source":"public ReportSectionGroup sectionGroup(TableId tableId, \\[FieldId fieldId\\])"},{"content":"Finds an existing section group in the generated design.","pos":[671762,671818]},{"content":"public ReportBlockType sectionType()","pos":[671904,671940]},{"content":"Retrieves the type of a given report section, such as ReportBlockType::Prolog, ReportBlockType::PageHeader, or ReportBlockType::Body.","pos":[671999,672132]},{"content":"public int sumDetailLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[672141,672200],"source":"public int sumDetailLevel(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode sumDetailLevelMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[672378,672431],"source":"public AutoMode sumDetailLevelMode(\\[AutoMode mode\\])"},{"content":"public int sumDetailLevelValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[672615,672660],"source":"public int sumDetailLevelValue(\\[int value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[672852,672891],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[672947,673000]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[673089,673144],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int topMarginAndFrame()","pos":[673326,673356]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[673563,673602],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[673800,673838],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[674037,674080],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[674274,674316],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[674511,674544],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[674748,674780],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[674985,675022],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[675222,675258],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[675459,675502],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public void columnspace(Real value, Units unit)","pos":[675696,675743]},{"content":"public void bottom(Real value, Units unit)","pos":[675933,675975]},{"content":"public void labelBottomMargin(Real value, Units unit)","pos":[676170,676223]},{"content":"public void labelTopMargin(Real value, Units unit)","pos":[676407,676457]},{"content":"public void executeColumnHeadings()","pos":[676644,676679]},{"content":"public void executeSection()","pos":[676881,676909]},{"content":"Prints the section on the report.","pos":[676976,677009]},{"content":"public void rightMargin(Real value, Units unit)","pos":[677118,677165]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[677355,677403]},{"content":"public void topMargin(Real value, Units unit)","pos":[677592,677637]},{"content":"public void leftMargin(Real value, Units unit)","pos":[677829,677875]},{"content":"public void top(Real value, Units unit)","pos":[678066,678105]},{"content":"public void height(Real value, Units unit)","pos":[678303,678345]},{"content":"Gets or sets the height of the control.","pos":[678398,678437]},{"pos":[678543,678566],"content":"Method addBitmapControl","linkify":"Method addBitmapControl","nodes":[{"content":"Method addBitmapControl","pos":[0,23]}]},{"content":"Adds a bitmap control to a report section.","pos":[678568,678610]},{"pos":[678668,678680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The bitmap control that is created.","pos":[678682,678717]},{"pos":[678723,678743],"content":"Method addBoxControl","linkify":"Method addBoxControl","nodes":[{"content":"Method addBoxControl","pos":[0,20]}]},{"content":"Adds a shape control to a report section.","pos":[678745,678786]},{"pos":[678856,678866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[678868,678872]},{"content":"The type of shape control to add; optional.","pos":[678875,678918]},{"pos":[678925,678937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The shape control that is created.","pos":[678939,678973]},{"pos":[678979,678996],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"content":"Adds a report control to a report section.","pos":[678998,679040]},{"pos":[679136,679146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[679148,679155]},{"content":"fieldId","pos":[679169,679176]},{"content":"arrayIndex","pos":[679190,679200]},{"pos":[679209,679221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The report control that is created.","pos":[679223,679258]},{"pos":[679265,679272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method adds the specified type of control, such as string, enumeration, integer, real, or date, depending on the type of the field that is specified by the arguments.","pos":[679274,679445]},{"pos":[679451,679472],"content":"Method addDateControl","linkify":"Method addDateControl","nodes":[{"content":"Method addDateControl","pos":[0,21]}]},{"content":"Adds a date control to a report section.","pos":[679474,679514]},{"pos":[679600,679610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[679612,679619]},{"content":"The field ID.","pos":[679622,679635]},{"content":"fieldId","pos":[679647,679654]},{"content":"The field ID.","pos":[679657,679670]},{"pos":[679677,679689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date control that is created.","pos":[679691,679724]},{"pos":[679731,679739],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[680635,680663],"content":"Method addDateDisplayControl","linkify":"Method addDateDisplayControl","nodes":[{"content":"Method addDateDisplayControl","pos":[0,28]}]},{"content":"Adds a date control to a report section.","pos":[680665,680705]},{"pos":[680800,680810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[680812,680823]},{"content":"The name of the table on which the display method is declared; optional.","pos":[680826,680898]},{"content":"tableId","pos":[680910,680917]},{"content":"The name of the table on which the display method is declared; optional.","pos":[680920,680992]},{"pos":[680999,681011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date control that is created.","pos":[681013,681046]},{"pos":[681053,681060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data control shows the result when a display method returns a date.","pos":[681062,681133]},{"pos":[681139,681164],"content":"Method addDateTimeControl","linkify":"Method addDateTimeControl","nodes":[{"content":"Method addDateTimeControl","pos":[0,25]}]},{"pos":[681258,681268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[681270,681277]},{"content":"fieldId","pos":[681291,681298]},{"pos":[681307,681319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[681325,681357],"content":"Method addDateTimeDisplayControl","linkify":"Method addDateTimeDisplayControl","nodes":[{"content":"Method addDateTimeDisplayControl","pos":[0,32]}]},{"pos":[681460,681470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[681472,681483]},{"content":"tableId","pos":[681497,681504]},{"pos":[681513,681525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[681531,681555],"content":"Method addDisplayControl","linkify":"Method addDisplayControl","nodes":[{"content":"Method addDisplayControl","pos":[0,24]}]},{"pos":[681642,681652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[681654,681665]},{"content":"tableId","pos":[681679,681686]},{"pos":[681695,681707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[681713,681734],"content":"Method addEnumControl","linkify":"Method addEnumControl","nodes":[{"content":"Method addEnumControl","pos":[0,21]}]},{"pos":[681820,681830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[681832,681839]},{"content":"fieldId","pos":[681853,681860]},{"pos":[681869,681881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[681887,681915],"content":"Method addEnumDisplayControl","linkify":"Method addEnumDisplayControl","nodes":[{"content":"Method addEnumDisplayControl","pos":[0,28]}]},{"pos":[682010,682020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[682022,682033]},{"content":"tableId","pos":[682047,682054]},{"pos":[682063,682075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682081,682101],"content":"Method addFieldGroup","linkify":"Method addFieldGroup","nodes":[{"content":"Method addFieldGroup","pos":[0,20]}]},{"pos":[682178,682188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[682190,682197]},{"content":"name","pos":[682211,682215]},{"pos":[682224,682236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682242,682263],"content":"Method addGuidControl","linkify":"Method addGuidControl","nodes":[{"content":"Method addGuidControl","pos":[0,21]}]},{"pos":[682349,682359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[682361,682368]},{"content":"fieldId","pos":[682382,682389]},{"pos":[682398,682410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682416,682444],"content":"Method addGuidDisplayControl","linkify":"Method addGuidDisplayControl","nodes":[{"content":"Method addGuidDisplayControl","pos":[0,28]}]},{"pos":[682539,682549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[682551,682562]},{"content":"tableId","pos":[682576,682583]},{"pos":[682592,682604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682610,682632],"content":"Method addInt64Control","linkify":"Method addInt64Control","nodes":[{"content":"Method addInt64Control","pos":[0,22]}]},{"pos":[682720,682730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[682732,682739]},{"content":"fieldId","pos":[682753,682760]},{"pos":[682769,682781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682787,682816],"content":"Method addInt64DisplayControl","linkify":"Method addInt64DisplayControl","nodes":[{"content":"Method addInt64DisplayControl","pos":[0,29]}]},{"pos":[682913,682923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[682925,682936]},{"content":"tableId","pos":[682950,682957]},{"pos":[682966,682978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[682984,683008],"content":"Method addIntegerControl","linkify":"Method addIntegerControl","nodes":[{"content":"Method addIntegerControl","pos":[0,24]}]},{"pos":[683100,683110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[683112,683119]},{"content":"fieldId","pos":[683133,683140]},{"pos":[683149,683161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[683167,683198],"content":"Method addIntegerDisplayControl","linkify":"Method addIntegerDisplayControl","nodes":[{"content":"Method addIntegerDisplayControl","pos":[0,31]}]},{"pos":[683299,683309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[683311,683322]},{"content":"tableId","pos":[683336,683343]},{"pos":[683352,683364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[683370,683393],"content":"Method addPromptControl","linkify":"Method addPromptControl","nodes":[{"content":"Method addPromptControl","pos":[0,23]}]},{"pos":[683485,683495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[683497,683504]},{"content":"fieldId","pos":[683518,683525]},{"pos":[683534,683546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[683552,683573],"content":"Method addRealControl","linkify":"Method addRealControl","nodes":[{"content":"Method addRealControl","pos":[0,21]}]},{"pos":[683659,683669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[683671,683678]},{"content":"fieldId","pos":[683692,683699]},{"pos":[683708,683720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[683726,683754],"content":"Method addRealDisplayControl","linkify":"Method addRealDisplayControl","nodes":[{"content":"Method addRealDisplayControl","pos":[0,28]}]},{"pos":[683849,683859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[683861,683872]},{"content":"tableId","pos":[683886,683893]},{"pos":[683902,683914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[683920,683937],"content":"Method addSection","linkify":"Method addSection","nodes":[{"content":"Method addSection","pos":[0,17]}]},{"pos":[684022,684032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[684034,684041]},{"content":"fieldId","pos":[684055,684062]},{"pos":[684071,684083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684089,684111],"content":"Method addShapeControl","linkify":"Method addShapeControl","nodes":[{"content":"Method addShapeControl","pos":[0,22]}]},{"pos":[684183,684193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[684195,684199]},{"pos":[684208,684220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684226,684249],"content":"Method addStringControl","linkify":"Method addStringControl","nodes":[{"content":"Method addStringControl","pos":[0,23]}]},{"pos":[684339,684349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[684351,684358]},{"content":"fieldId","pos":[684372,684379]},{"pos":[684388,684400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684406,684436],"content":"Method addStringDisplayControl","linkify":"Method addStringDisplayControl","nodes":[{"content":"Method addStringDisplayControl","pos":[0,30]}]},{"pos":[684535,684545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[684547,684558]},{"content":"tableId","pos":[684572,684579]},{"pos":[684588,684600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684606,684626],"content":"Method addSumControl","linkify":"Method addSumControl","nodes":[{"content":"Method addSumControl","pos":[0,20]}]},{"pos":[684710,684720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[684722,684729]},{"content":"fieldId","pos":[684743,684750]},{"pos":[684759,684771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684777,684801],"content":"Method addSumNameControl","linkify":"Method addSumNameControl","nodes":[{"content":"Method addSumNameControl","pos":[0,24]}]},{"pos":[684865,684875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[684877,684881]},{"pos":[684890,684902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[684908,684929],"content":"Method addTextControl","linkify":"Method addTextControl","nodes":[{"content":"Method addTextControl","pos":[0,21]}]},{"pos":[684991,685001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[685003,685007]},{"pos":[685016,685028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685034,685055],"content":"Method addTimeControl","linkify":"Method addTimeControl","nodes":[{"content":"Method addTimeControl","pos":[0,21]}]},{"pos":[685141,685151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[685153,685160]},{"content":"fieldId","pos":[685174,685181]},{"pos":[685190,685202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685208,685236],"content":"Method addTimeDisplayControl","linkify":"Method addTimeDisplayControl","nodes":[{"content":"Method addTimeDisplayControl","pos":[0,28]}]},{"pos":[685331,685341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displayFunc","pos":[685343,685354]},{"content":"tableId","pos":[685368,685375]},{"pos":[685384,685396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685402,685416],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[685449,685461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685467,685487],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[685537,685547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[685549,685554]},{"pos":[685563,685575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685581,685599],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[685647,685657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[685659,685664]},{"pos":[685673,685685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[685691,685713],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[685715,685813]},{"pos":[685873,685883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[685885,685890]},{"pos":[685899,685911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[685913,685992]},{"pos":[685999,686006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[686008,686045]},{"pos":[686051,686068],"content":"Method autoHeader","linkify":"Method autoHeader","nodes":[{"content":"Method autoHeader","pos":[0,17]}]},{"pos":[686123,686133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[686135,686140]},{"pos":[686149,686161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[686167,686178],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[686180,686255]},{"pos":[686296,686306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[686308,686313]},{"pos":[686322,686334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[686336,686386]},{"pos":[686393,686400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[686402,686474]},{"content":"0 Use the default font weight.","pos":[686480,686510]},{"content":"1 Thin.","pos":[686515,686522]},{"content":"2 Extra-light.","pos":[686527,686541]},{"content":"3 Light.","pos":[686546,686554]},{"content":"4 Normal.","pos":[686559,686568]},{"content":"5 Medium.","pos":[686573,686582]},{"content":"6 Semibold.","pos":[686587,686598]},{"content":"7 Bold.","pos":[686603,686610]},{"content":"8 Extra-bold.","pos":[686615,686628]},{"content":"9 Heavy.","pos":[686633,686641]},{"pos":[686647,686674],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[686720,686732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[686738,686761],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[686814,686824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[686826,686831]},{"pos":[686840,686852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[686858,686880],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[686932,686942],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[686944,686949]},{"pos":[686958,686970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[686976,686999],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[687056,687066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687068,687073]},{"pos":[687082,687094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687100,687124],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[687180,687190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687192,687197]},{"pos":[687206,687218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687224,687241],"content":"Method bottomMode","linkify":"Method bottomMode","nodes":[{"content":"Method bottomMode","pos":[0,17]}]},{"pos":[687288,687298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687300,687305]},{"pos":[687314,687326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687332,687348],"content":"Method bottomStr","linkify":"Method bottomStr","nodes":[{"content":"Method bottomStr","pos":[0,16]}]},{"pos":[687394,687404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687406,687411]},{"pos":[687420,687432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687438,687455],"content":"Method bottomUnit","linkify":"Method bottomUnit","nodes":[{"content":"Method bottomUnit","pos":[0,17]}]},{"pos":[687506,687516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687518,687523]},{"pos":[687532,687544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687550,687568],"content":"Method bottomValue","linkify":"Method bottomValue","nodes":[{"content":"Method bottomValue","pos":[0,18]}]},{"pos":[687618,687628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687630,687635]},{"pos":[687644,687656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[687662,687681],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[687683,687726]},{"pos":[687775,687785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[687787,687792]},{"pos":[687801,687813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[687815,687877]},{"pos":[687884,687891],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[687893,687997]},{"content":"Value.","pos":[688001,688007]},{"content":"Description.","pos":[688010,688022]},{"content":"0","pos":[688069,688070]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688078,688091],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[688103,688104]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688112,688128],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[688137,688138]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688146,688161],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[688171,688173]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688180,688192],"source":"MAC\\_CHARSET"},{"content":"128","pos":[688205,688208]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688214,688231],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[688239,688242]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688248,688263],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[688273,688276]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688282,688297],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[688307,688310]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688316,688336],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[688341,688344]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688350,688364],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[688375,688378]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688384,688400],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[688409,688412]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688418,688437],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[688443,688446]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688452,688467],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[688477,688480]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688486,688502],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[688511,688514]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688520,688539],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[688545,688548]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688554,688566],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows:","pos":[688578,688666]},{"content":"Value.","pos":[688670,688676]},{"content":"Description.","pos":[688679,688691]},{"content":"130","pos":[688726,688729]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688735,688749],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows:","pos":[688753,688839]},{"content":"Value.","pos":[688843,688849]},{"content":"Description.","pos":[688852,688864]},{"content":"177","pos":[688901,688904]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688910,688925],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[688930,688933]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[688939,688954],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows:","pos":[688958,689035]},{"content":"Value.","pos":[689039,689045]},{"content":"Description.","pos":[689048,689060]},{"content":"222","pos":[689093,689096]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[689102,689115],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[689119,689206]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[689207,689298],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[689299,689414]},{"pos":[689420,689438],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[689440,689485]},{"pos":[689533,689543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[689545,689550]},{"pos":[689559,689571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[689573,689616]},{"pos":[689623,689630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[689632,689693]},{"content":"Value.","pos":[689697,689703]},{"content":"Style.","pos":[689706,689712]},{"content":"0","pos":[689769,689770]},{"content":"Default.","pos":[689778,689786]},{"content":"1","pos":[689805,689806]},{"content":"The Windows palette.","pos":[689814,689834]},{"content":"2","pos":[689841,689842]},{"content":"The true-color scheme.","pos":[689850,689872]},{"pos":[689880,689909],"content":"Method columnHeadingsStrategy","linkify":"Method columnHeadingsStrategy","nodes":[{"content":"Method columnHeadingsStrategy","pos":[0,29]}]},{"pos":[689968,689978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[689980,689985]},{"pos":[689994,690006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690012,690026],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[690090,690100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690102,690107]},{"content":"mode","pos":[690121,690125]},{"pos":[690134,690146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690152,690170],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[690233,690243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[690245,690249]},{"pos":[690258,690270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690276,690298],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[690350,690360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690362,690367]},{"pos":[690376,690388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690394,690415],"content":"Method columnspaceStr","linkify":"Method columnspaceStr","nodes":[{"content":"Method columnspaceStr","pos":[0,21]}]},{"pos":[690466,690476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690478,690483]},{"pos":[690492,690504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690510,690532],"content":"Method columnspaceUnit","linkify":"Method columnspaceUnit","nodes":[{"content":"Method columnspaceUnit","pos":[0,22]}]},{"pos":[690588,690598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690600,690605]},{"pos":[690614,690626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690632,690655],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[690710,690720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690722,690727]},{"pos":[690736,690748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690754,690773],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[690822,690832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[690834,690839]},{"pos":[690848,690860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[690866,690880],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"content":"Finds a control in the section, based on the control’s table and dataField properties.","pos":[690882,690968]},{"pos":[691045,691055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[691057,691064]},{"content":"The control's table property; optional.","pos":[691067,691106]},{"content":"tableId","pos":[691118,691125]},{"content":"The control's table property; optional.","pos":[691128,691167]},{"pos":[691174,691186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The report control that is found.","pos":[691188,691221]},{"pos":[691228,691235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the table ID is not supplied, the table property from the section’s parent section group is used.","pos":[691237,691337]},{"pos":[691343,691362],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[691400,691412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[691418,691436],"content":"Method controlName","linkify":"Method controlName","nodes":[{"content":"Method controlName","pos":[0,18]}]},{"content":"Finds a control in a section, based on the control's Name property.","pos":[691438,691505]},{"pos":[691560,691570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[691572,691576]},{"content":"The Name property of the control.","pos":[691579,691612]},{"pos":[691619,691631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The control that is found.","pos":[691633,691659]},{"pos":[691665,691681],"content":"Method controlNo","linkify":"Method controlNo","nodes":[{"content":"Method controlNo","pos":[0,16]}]},{"pos":[691736,691746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[691748,691754]},{"pos":[691763,691775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[691781,691801],"content":"Method controlNumber","linkify":"Method controlNumber","nodes":[{"content":"Method controlNumber","pos":[0,20]}]},{"pos":[691851,691861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[691863,691868]},{"pos":[691877,691889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[691895,691908],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes the current node from the AOT.","pos":[691910,691948]},{"pos":[691980,691992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[691998,692009],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[692011,692068]},{"pos":[692109,692119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[692121,692126]},{"pos":[692135,692147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[692149,692204]},{"pos":[692210,692225],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[692227,692284]},{"pos":[692329,692339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[692341,692346]},{"pos":[692355,692367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[692369,692402]},{"pos":[692408,692425],"content":"Method footerText","linkify":"Method footerText","nodes":[{"content":"Method footerText","pos":[0,17]}]},{"pos":[692472,692482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[692484,692489]},{"pos":[692498,692510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[692516,692538],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[692540,692591]},{"pos":[692643,692653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[692655,692660]},{"pos":[692669,692681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[692683,692727]},{"pos":[692734,692741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[692743,692811]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[692817,692887]},{"content":"The second byte contains a value for green.","pos":[692892,692935]},{"content":"The third byte contains a value for blue.","pos":[692940,692981]},{"content":"The high-order byte must be zero.","pos":[692986,693019]},{"content":"The maximum value for a single byte is 255.","pos":[693024,693067]},{"pos":[693073,693091],"content":"Method grandHeader","linkify":"Method grandHeader","nodes":[{"content":"Method grandHeader","pos":[0,18]}]},{"pos":[693147,693157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[693159,693164]},{"pos":[693173,693185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[693191,693208],"content":"Method grandTotal","linkify":"Method grandTotal","nodes":[{"content":"Method grandTotal","pos":[0,17]}]},{"content":"Determines whether the FooterText property value can be displayed.","pos":[693210,693276]},{"pos":[693331,693341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[693343,693348]},{"pos":[693357,693369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the FooterText property value is displayed; otherwise, false.","pos":[693371,693440]},{"pos":[693447,693454],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The grandTotal property is available only when a report has unnested, multiple data sources.","pos":[693456,693548]},{"pos":[693554,693571],"content":"Method hasButtons","linkify":"Method hasButtons","nodes":[{"content":"Method hasButtons","pos":[0,17]}]},{"pos":[693626,693636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[693638,693643]},{"pos":[693652,693664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[693670,693694],"content":"Method headerDetailLevel","linkify":"Method headerDetailLevel","nodes":[{"content":"Method headerDetailLevel","pos":[0,24]}]},{"pos":[693765,693775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[693777,693782]},{"content":"mode","pos":[693796,693800]},{"pos":[693809,693821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[693827,693855],"content":"Method headerDetailLevelMode","linkify":"Method headerDetailLevelMode","nodes":[{"content":"Method headerDetailLevelMode","pos":[0,28]}]},{"pos":[693922,693932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[693934,693938]},{"pos":[693947,693959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[693965,693994],"content":"Method headerDetailLevelValue","linkify":"Method headerDetailLevelValue","nodes":[{"content":"Method headerDetailLevelValue","pos":[0,29]}]},{"pos":[694053,694063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[694065,694070]},{"pos":[694079,694091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[694097,694114],"content":"Method headerText","linkify":"Method headerText","nodes":[{"content":"Method headerText","pos":[0,17]}]},{"pos":[694161,694171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[694173,694178]},{"pos":[694187,694199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[694205,694223],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"content":"Gets or sets the height of a section, excluding the height of the border and the top and bottom margins.","pos":[694225,694329]},{"pos":[694378,694388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height","pos":[694390,694396]},{"content":"The new value in 1/100 mm; optional.","pos":[694399,694435]},{"pos":[694442,694454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in 1/100 mm.","pos":[694456,694479]},{"pos":[694486,694493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method acts as a heightExclBorderAndMargins method.","pos":[694495,694551]},{"content":"The height that is returned corresponds to the value of the height property.","pos":[694552,694628]},{"content":"Before you use this function to set the height property, make sure that the height property is not set to AUTO.","pos":[694629,694740]},{"content":"Otherwise, built-in logic might recalculate the value.","pos":[694741,694795]},{"pos":[694801,694819],"content":"Method heightmm100","linkify":"Method heightmm100","nodes":[{"content":"Method heightmm100","pos":[0,18]}]},{"content":"Gets or sets the height of a section, including the height of the border and the top and bottom margins.","pos":[694821,694925]},{"pos":[694985,694995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclMargins","pos":[694997,695014]},{"content":"The new total height of the section in 1/100 mm; optional.","pos":[695017,695075]},{"pos":[695082,695094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in 1/100 mm.","pos":[695096,695119]},{"pos":[695126,695133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method acts as a heightInclBorderAndMargins method.","pos":[695135,695191]},{"content":"Before you use this function to set the height property, make sure that the height property is not set to AUTO.","pos":[695192,695303]},{"content":"Otherwise, the built-in logic might set the height.","pos":[695304,695355]},{"content":"If the heightmm100 method returns 1000, the total height of the section is 10 mm.","pos":[695356,695437]},{"pos":[695443,695460],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[695462,695524]},{"pos":[695571,695581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[695583,695588]},{"pos":[695597,695609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[695611,695632]},{"pos":[695639,695646],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[695648,695702]},{"content":"Mode.","pos":[695706,695711]},{"content":"Height Calculation.","pos":[695723,695742]},{"content":"Exact.","pos":[695928,695934]},{"content":"The exact height in pixels of the controls is used.","pos":[695945,695996]},{"content":"Auto.","pos":[696039,696044]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[696056,696145]},{"content":"Column height.","pos":[696150,696164]},{"content":"The layout of the form determines the height of the control.","pos":[696167,696227]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[696260,696345]},{"pos":[696351,696367],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[696413,696423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[696425,696430]},{"pos":[696439,696451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[696457,696474],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[696525,696535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[696537,696542]},{"pos":[696551,696563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[696569,696587],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[696589,696628]},{"pos":[696678,696688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[696690,696695]},{"pos":[696704,696716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[696718,696739]},{"pos":[696746,696753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[696755,696845]},{"pos":[696851,696864],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[696915,696925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[696927,696932]},{"pos":[696941,696953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[696959,696971],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets the description of the section node in the AOT.","pos":[696973,697025]},{"pos":[697056,697068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the description of the section node.","pos":[697070,697129]},{"pos":[697135,697163],"content":"Method labelBottomMarginMode","linkify":"Method labelBottomMarginMode","nodes":[{"content":"Method labelBottomMarginMode","pos":[0,28]}]},{"pos":[697221,697231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697233,697238]},{"pos":[697247,697259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697265,697292],"content":"Method labelBottomMarginStr","linkify":"Method labelBottomMarginStr","nodes":[{"content":"Method labelBottomMarginStr","pos":[0,27]}]},{"pos":[697349,697359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697361,697366]},{"pos":[697375,697387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697393,697421],"content":"Method labelBottomMarginUnit","linkify":"Method labelBottomMarginUnit","nodes":[{"content":"Method labelBottomMarginUnit","pos":[0,28]}]},{"pos":[697483,697493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697495,697500]},{"pos":[697509,697521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697527,697556],"content":"Method labelBottomMarginValue","linkify":"Method labelBottomMarginValue","nodes":[{"content":"Method labelBottomMarginValue","pos":[0,29]}]},{"pos":[697617,697627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697629,697634]},{"pos":[697643,697655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697661,697686],"content":"Method labelTopMarginMode","linkify":"Method labelTopMarginMode","nodes":[{"content":"Method labelTopMarginMode","pos":[0,25]}]},{"pos":[697741,697751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697753,697758]},{"pos":[697767,697779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697785,697809],"content":"Method labelTopMarginStr","linkify":"Method labelTopMarginStr","nodes":[{"content":"Method labelTopMarginStr","pos":[0,24]}]},{"pos":[697863,697873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[697875,697880]},{"pos":[697889,697901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[697907,697932],"content":"Method labelTopMarginUnit","linkify":"Method labelTopMarginUnit","nodes":[{"content":"Method labelTopMarginUnit","pos":[0,25]}]},{"pos":[697991,698001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698003,698008]},{"pos":[698017,698029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698035,698061],"content":"Method labelTopMarginValue","linkify":"Method labelTopMarginValue","nodes":[{"content":"Method labelTopMarginValue","pos":[0,26]}]},{"pos":[698119,698129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698131,698136]},{"pos":[698145,698157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698163,698184],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[698235,698245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698247,698252]},{"pos":[698261,698273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698279,698300],"content":"Method leftMarginsEtc","linkify":"Method leftMarginsEtc","nodes":[{"content":"Method leftMarginsEtc","pos":[0,21]}]},{"pos":[698340,698352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698358,698378],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[698428,698438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698440,698445]},{"pos":[698454,698466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698472,698493],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[698548,698558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698560,698565]},{"pos":[698574,698586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698592,698614],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[698668,698678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698680,698685]},{"pos":[698694,698706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698712,698728],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[698784,698794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698796,698801]},{"pos":[698810,698822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698828,698844],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[698900,698910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[698912,698917]},{"pos":[698926,698938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[698944,698959],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[698961,699036]},{"pos":[699091,699101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[699103,699108]},{"pos":[699117,699129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[699131,699180]},{"pos":[699186,699202],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[699258,699268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[699270,699275]},{"pos":[699284,699296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[699302,699312],"content":"Method map","linkify":"Method map","nodes":[{"content":"Method map","pos":[0,10]}]},{"pos":[699360,699370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[699372,699377]},{"pos":[699386,699398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[699404,699415],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[699417,699555]},{"pos":[699596,699606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[699608,699613]},{"pos":[699622,699634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[699636,699700]},{"pos":[699707,699714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[699716,699810]},{"content":"Begins with a letter.","pos":[699816,699837]},{"content":"Doesn't exceed 250 characters.","pos":[699842,699872]},{"content":"Can include numbers and underscore characters.","pos":[699877,699923]},{"content":"Cannot include punctuation or spaces.","pos":[699928,699965]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[699970,700088]},{"pos":[700094,700117],"content":"Method noOfHeadingLines","linkify":"Method noOfHeadingLines","nodes":[{"content":"Method noOfHeadingLines","pos":[0,23]}]},{"pos":[700187,700197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700199,700204]},{"content":"mode","pos":[700218,700222]},{"pos":[700231,700243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700249,700276],"content":"Method noOfHeadingLinesMode","linkify":"Method noOfHeadingLinesMode","nodes":[{"content":"Method noOfHeadingLinesMode","pos":[0,27]}]},{"pos":[700342,700352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[700354,700358]},{"pos":[700367,700379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700385,700413],"content":"Method noOfHeadingLinesValue","linkify":"Method noOfHeadingLinesValue","nodes":[{"content":"Method noOfHeadingLinesValue","pos":[0,28]}]},{"pos":[700471,700481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700483,700488]},{"pos":[700497,700509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700515,700533],"content":"Method resolutionX","linkify":"Method resolutionX","nodes":[{"content":"Method resolutionX","pos":[0,18]}]},{"pos":[700581,700591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700593,700598]},{"pos":[700607,700619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700625,700646],"content":"Method resolutionXStr","linkify":"Method resolutionXStr","nodes":[{"content":"Method resolutionXStr","pos":[0,21]}]},{"pos":[700695,700705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700707,700712]},{"pos":[700721,700733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700739,700761],"content":"Method resolutionXUnit","linkify":"Method resolutionXUnit","nodes":[{"content":"Method resolutionXUnit","pos":[0,22]}]},{"pos":[700817,700827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700829,700834]},{"pos":[700843,700855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700861,700879],"content":"Method resolutionY","linkify":"Method resolutionY","nodes":[{"content":"Method resolutionY","pos":[0,18]}]},{"pos":[700927,700937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[700939,700944]},{"pos":[700953,700965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[700971,700992],"content":"Method resolutionYStr","linkify":"Method resolutionYStr","nodes":[{"content":"Method resolutionYStr","pos":[0,21]}]},{"pos":[701041,701051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701053,701058]},{"pos":[701067,701079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701085,701107],"content":"Method resolutionYUnit","linkify":"Method resolutionYUnit","nodes":[{"content":"Method resolutionYUnit","pos":[0,22]}]},{"pos":[701163,701173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701175,701180]},{"pos":[701189,701201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701207,701229],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[701281,701291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701293,701298]},{"pos":[701307,701319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701325,701347],"content":"Method rightMarginsEtc","linkify":"Method rightMarginsEtc","nodes":[{"content":"Method rightMarginsEtc","pos":[0,22]}]},{"pos":[701388,701400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701406,701427],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[701478,701488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701490,701495]},{"pos":[701504,701516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701522,701544],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[701600,701610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701612,701617]},{"pos":[701626,701638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701644,701667],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[701722,701732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701734,701739]},{"pos":[701748,701760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701766,701778],"content":"Method ruler","linkify":"Method ruler","nodes":[{"content":"Method ruler","pos":[0,12]}]},{"pos":[701820,701830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[701832,701837]},{"pos":[701846,701858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[701864,701883],"content":"Method sectionGroup","linkify":"Method sectionGroup","nodes":[{"content":"Method sectionGroup","pos":[0,19]}]},{"content":"Finds an existing section group in the generated design.","pos":[701885,701941]},{"pos":[702028,702038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[702040,702047]},{"content":"The field ID; optional.","pos":[702050,702073]},{"content":"fieldId","pos":[702085,702092]},{"content":"The field ID; optional.","pos":[702095,702118]},{"pos":[702125,702137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The specified section group.","pos":[702139,702167]},{"pos":[702174,702182],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[703219,703237],"content":"Method sectionType","linkify":"Method sectionType","nodes":[{"content":"Method sectionType","pos":[0,18]}]},{"content":"Retrieves the type of a given report section, such as ReportBlockType::Prolog, ReportBlockType::PageHeader, or ReportBlockType::Body.","pos":[703239,703372]},{"pos":[703421,703433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The report block type of the section.","pos":[703435,703472]},{"pos":[703479,703486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reportBlockType type should be reportSectionType.","pos":[703488,703541]},{"pos":[703547,703568],"content":"Method sumDetailLevel","linkify":"Method sumDetailLevel","nodes":[{"content":"Method sumDetailLevel","pos":[0,21]}]},{"pos":[703636,703646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[703648,703653]},{"content":"mode","pos":[703667,703671]},{"pos":[703680,703692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[703698,703723],"content":"Method sumDetailLevelMode","linkify":"Method sumDetailLevelMode","nodes":[{"content":"Method sumDetailLevelMode","pos":[0,25]}]},{"pos":[703787,703797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[703799,703803]},{"pos":[703812,703824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[703830,703856],"content":"Method sumDetailLevelValue","linkify":"Method sumDetailLevelValue","nodes":[{"content":"Method sumDetailLevelValue","pos":[0,26]}]},{"pos":[703912,703922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[703924,703929]},{"pos":[703938,703950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[703956,703968],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[703970,704023]},{"pos":[704073,704083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704085,704090]},{"pos":[704099,704111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[704113,704174]},{"pos":[704180,704196],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[704262,704272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704274,704279]},{"pos":[704288,704300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704306,704330],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[704373,704385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704391,704411],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[704461,704471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704473,704478]},{"pos":[704487,704499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704505,704524],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[704573,704583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704585,704590]},{"pos":[704599,704611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704617,704637],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[704691,704701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704703,704708]},{"pos":[704717,704729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704735,704756],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[704809,704819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704821,704826]},{"pos":[704835,704847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704853,704867],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[704911,704921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[704923,704928]},{"pos":[704937,704949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[704955,704968],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[705011,705021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705023,705028]},{"pos":[705037,705049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[705055,705069],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[705117,705127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705129,705134]},{"pos":[705143,705155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[705161,705176],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[705223,705233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705235,705240]},{"pos":[705249,705261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[705267,705283],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[705337,705347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705349,705354]},{"pos":[705363,705375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[705381,705399],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[705459,705469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705471,705476]},{"content":"unit","pos":[705490,705494]},{"pos":[705502,705515],"content":"Method bottom","linkify":"Method bottom","nodes":[{"content":"Method bottom","pos":[0,13]}]},{"pos":[705570,705580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705582,705587]},{"content":"unit","pos":[705601,705605]},{"pos":[705613,705637],"content":"Method labelBottomMargin","linkify":"Method labelBottomMargin","nodes":[{"content":"Method labelBottomMargin","pos":[0,24]}]},{"pos":[705703,705713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705715,705720]},{"content":"unit","pos":[705734,705738]},{"pos":[705746,705767],"content":"Method labelTopMargin","linkify":"Method labelTopMargin","nodes":[{"content":"Method labelTopMargin","pos":[0,21]}]},{"pos":[705830,705840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[705842,705847]},{"content":"unit","pos":[705861,705865]},{"pos":[705873,705901],"content":"Method executeColumnHeadings","linkify":"Method executeColumnHeadings","nodes":[{"content":"Method executeColumnHeadings","pos":[0,28]}]},{"pos":[705948,705969],"content":"Method executeSection","linkify":"Method executeSection","nodes":[{"content":"Method executeSection","pos":[0,21]}]},{"content":"Prints the section on the report.","pos":[705971,706004]},{"pos":[706045,706052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when the section is triggered.","pos":[706054,706106]},{"content":"For example, a body section is triggered when ReportRun::send method is executed.","pos":[706107,706188]},{"content":"It is the super method call in the executeSection method that actually prints the section in the report.","pos":[706189,706293]},{"content":"In the Finance and Operations Application Object Tree (AOT), you will find the executeSection method below each section's methods node.","pos":[706294,706429]},{"content":"If you want to perform some action before a section is printed, such as go to the next page, this action can be coded in the executeSection method.","pos":[706430,706577]},{"pos":[706583,706601],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[706661,706671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[706673,706678]},{"content":"unit","pos":[706692,706696]},{"pos":[706704,706723],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[706784,706794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[706796,706801]},{"content":"unit","pos":[706815,706819]},{"pos":[706827,706843],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[706901,706911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[706913,706918]},{"content":"unit","pos":[706932,706936]},{"pos":[706944,706961],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[707020,707030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[707032,707037]},{"content":"unit","pos":[707051,707055]},{"pos":[707063,707073],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[707125,707135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[707137,707142]},{"content":"unit","pos":[707156,707160]},{"pos":[707168,707181],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[707183,707222]},{"pos":[707277,707287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[707289,707294]},{"content":"unit","pos":[707308,707312]},{"pos":[707321,707328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[707330,707437]},{"content":"Mode.","pos":[707441,707446]},{"content":"Height calculation.","pos":[707460,707479]},{"content":"-1 Exact.","pos":[707667,707676]},{"content":"The exact height in pixels of the controls is used.","pos":[707686,707737]},{"content":"0 Auto.","pos":[707780,707787]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[707799,707888]},{"content":"1 Column height.","pos":[707893,707909]},{"content":"The layout of the form determines the height of the control.","pos":[707912,707972]},{"content":"The height and height calculation mode can be set separately.","pos":[708005,708066]},{"pos":[708071,708095],"content":"Class ReportSectionGroup","linkify":"Class ReportSectionGroup","nodes":[{"content":"Class ReportSectionGroup","pos":[0,24]}]},{"content":"The ReportSectionGroup class defines a collection of report sections.","pos":[708143,708212]},{"pos":[708218,708225],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A report section group can contain header sections, body sections, and footer sections.","pos":[708227,708314]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[708315,708390]},{"content":"You must have access to the development security key (SysDevelopment) before you call this API.","pos":[708391,708486]},{"pos":[708492,708500],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[708506,708513],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[708517,708523]},{"content":"Description","pos":[708580,708591]},{"content":"public ReportSection addSection(ReportBlockType sectionType)","pos":[708895,708955]},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[709084,709127],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int delete()","pos":[709273,709292]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[709462,709492],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[709525,709646]},{"content":"public ReportSection section(ReportBlockType sectionType)","pos":[709651,709708]},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[709840,709879],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[709903,709956]},{"pos":[710032,710049],"content":"Method addSection","linkify":"Method addSection","nodes":[{"content":"Method addSection","pos":[0,17]}]},{"pos":[710122,710132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sectionType","pos":[710134,710145]},{"pos":[710154,710166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[710172,710188],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[710242,710252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[710254,710259]},{"pos":[710268,710280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[710286,710299],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[710331,710343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[710349,710360],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[710362,710483]},{"pos":[710524,710534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[710536,710541]},{"pos":[710550,710562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[710564,710628]},{"pos":[710635,710642],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[710644,710738]},{"content":"Begins with a letter.","pos":[710744,710765]},{"content":"Doesn't exceed 250 characters.","pos":[710770,710800]},{"content":"Can include numbers and underscore characters.","pos":[710805,710851]},{"content":"Cannot include punctuation or spaces.","pos":[710856,710893]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[710898,711016]},{"pos":[711022,711036],"content":"Method section","linkify":"Method section","nodes":[{"content":"Method section","pos":[0,14]}]},{"pos":[711106,711116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sectionType","pos":[711118,711129]},{"pos":[711138,711150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[711156,711168],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[711170,711223]},{"pos":[711273,711283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[711285,711290]},{"pos":[711299,711311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[711313,711374]},{"pos":[711379,711403],"content":"Class ReportShapeControl","linkify":"Class ReportShapeControl","nodes":[{"content":"Class ReportShapeControl","pos":[0,24]}]},{"content":"The ReportShapeControl class enables you to create, read, update, and delete X++ code and metadata.","pos":[711456,711555]},{"pos":[711561,711568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[711574,711582],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[711588,711595],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[711599,711605]},{"content":"Description","pos":[711674,711685]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[711985,712034],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[712060,712158]},{"content":"public int bottomMarginAndFrame()","pos":[712178,712211]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[712371,712413],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[712564,712605],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[712757,712803],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[712950,712995],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[713143,713184],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[713336,713373],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[713411,713456]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[713529,713601],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[713604,713671]},{"content":"public ReportFieldType controlType()","pos":[713722,713758]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[713915,713949],"source":"public str cssClass(\\[str value\\])"},{"content":"public int delete()","pos":[714108,714127]},{"content":"public str effectiveFont()","pos":[714301,714327]},{"content":"public str fontInfoPrinter()","pos":[714494,714522]},{"content":"public int fontInfoPrinterAscent()","pos":[714687,714721]},{"content":"public int fontInfoPrinterDescent()","pos":[714880,714915]},{"content":"public int fontInfoPrinterExtLead()","pos":[715073,715108]},{"content":"public int fontInfoPrinterHeight()","pos":[715266,715300]},{"content":"public int fontInfoPrinterIntLead()","pos":[715459,715494]},{"content":"public str fontInfoScreen()","pos":[715652,715679]},{"content":"public int fontInfoScreenAscent()","pos":[715845,715878]},{"content":"public int fontInfoScreenDescent()","pos":[716038,716072]},{"content":"public int fontInfoScreenExtLead()","pos":[716231,716265]},{"content":"public int fontInfoScreenHeight()","pos":[716424,716457]},{"content":"public int fontInfoScreenIntLead()","pos":[716617,716651]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[716810,716851],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[716885,716936]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[717003,717051],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[717196,717254],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[717389,717425],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[717464,717526]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[717582,717635]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[717775,717810],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[717968,718008],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[718161,718200],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[718236,718275]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[718354,718385],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[718429,718466]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[718547,718582],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[718740,718783],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[718933,718972],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[719126,719161],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[719319,719358],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[719512,719557],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[719705,719755],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[719898,719962],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[720091,720130],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[720284,720324],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[720477,720525],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[720670,720710],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[720863,720902],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[721056,721100],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[721249,721292],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[721442,721486],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[721635,721689],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[721828,721858]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[722021,722061],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[722214,722253],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[722407,722451],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[722600,722643],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[722793,722827],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[722986,723019],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[723179,723217],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[723372,723409],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType line(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[723565,723605],"source":"public LineType line(\\[LineType value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[723758,723803],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[723951,723996],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[724144,724188],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[724219,724294]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[724337,724382],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[724530,724569],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[724723,724761],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[724916,724972],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[725109,725149],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[725302,725332],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[725377,725490]},{"content":"public int numberOfLines(int height100mm)","pos":[725495,725536]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[725688,725722],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[725881,725915]},{"content":"public int previewXCompensation100mm(str string)","pos":[726074,726122]},{"content":"public int right100mm()","pos":[726267,726290]},{"content":"public int right100mmInclBorder()","pos":[726460,726493]},{"content":"public int rightMarginAndFrame()","pos":[726653,726685]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[726846,726887],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[727039,727079],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[727232,727277],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[727425,727469],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[727618,727675],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[727811,727861]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[728004,728047],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[728197,728252],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[728390,728432],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[728583,728635],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[728776,728806]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[728969,729008],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[729162,729200],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[729355,729398],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[729548,729590],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[729741,729774],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[729934,729966],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[730127,730164],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[730320,730356],"source":"public Real topValue(\\[Real value\\])"},{"content":"public ShapeType type(<ph id=\"ph1\">\\[</ph>ShapeType value<ph id=\"ph2\">\\]</ph>)","pos":[730513,730555],"source":"public ShapeType type(\\[ShapeType value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[730706,730747],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[730899,730940],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[731092,731157],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[731285,731320],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[731478,731524],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[731671,731727],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[731864,731899],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[731939,732001]},{"content":"public int widthOfString100mm(str string)","pos":[732057,732098]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[732250,732284],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[732443,732482],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[732636,732674],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[732711,732749]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[732829,732877]},{"content":"public void left(Real value, Units unit)","pos":[733022,733062]},{"content":"public void top(Real value, Units unit)","pos":[733215,733254]},{"content":"public void labelWidth(Real value, Units unit)","pos":[733408,733454]},{"content":"public void height(Real value, Units unit)","pos":[733601,733643]},{"content":"Gets or sets the height of the control.","pos":[733676,733715]},{"content":"public void leftMargin(Real value, Units unit)","pos":[733794,733840]},{"content":"public void rightMargin(Real value, Units unit)","pos":[733987,734034]},{"content":"public void hide()","pos":[734180,734198]},{"content":"public void topMargin(Real value, Units unit)","pos":[734373,734418]},{"content":"public void show()","pos":[734566,734584]},{"content":"public void width(Real value, Units unit)","pos":[734759,734800]},{"content":"Gets or sets the width of the control.","pos":[734834,734872]},{"pos":[734955,734977],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[734979,735077]},{"pos":[735137,735147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735149,735154]},{"pos":[735163,735175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[735177,735256]},{"pos":[735263,735270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[735272,735309]},{"pos":[735315,735342],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[735388,735400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[735406,735429],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[735482,735492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735494,735499]},{"pos":[735508,735520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[735526,735548],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[735600,735610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735612,735617]},{"pos":[735626,735638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[735644,735667],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[735724,735734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735736,735741]},{"pos":[735750,735762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[735768,735792],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[735848,735858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735860,735865]},{"pos":[735874,735886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[735892,735914],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[735966,735976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[735978,735983]},{"pos":[735992,736004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[736010,736028],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[736030,736075]},{"pos":[736123,736133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[736135,736140]},{"pos":[736149,736161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[736163,736206]},{"pos":[736213,736220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[736222,736283]},{"content":"Value.","pos":[736287,736293]},{"content":"Style.","pos":[736296,736302]},{"content":"0","pos":[736375,736376]},{"content":"Default.","pos":[736384,736392]},{"content":"1","pos":[736419,736420]},{"content":"The Microsoft Windows palette.","pos":[736428,736458]},{"content":"2","pos":[736463,736464]},{"content":"The true-color scheme.","pos":[736472,736494]},{"pos":[736510,736533],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[736535,736602]},{"pos":[736685,736695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[736697,736702]},{"pos":[736711,736723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[736725,736797]},{"pos":[736804,736811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[736813,736894]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[736895,736988]},{"pos":[736994,737012],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[737061,737073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737079,737094],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[737139,737149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[737151,737156]},{"pos":[737165,737177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737183,737196],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[737228,737240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737246,737266],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[737305,737317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737323,737345],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[737386,737398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737404,737432],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[737479,737491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737497,737526],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[737574,737586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737592,737621],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[737669,737681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737687,737715],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[737762,737774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737780,737809],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[737857,737869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737875,737896],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[737936,737948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[737954,737981],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[738027,738039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[738045,738073],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[738120,738132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[738138,738166],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[738213,738225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[738231,738258],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[738304,738316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[738322,738350],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[738397,738409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[738415,738437],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[738439,738490]},{"pos":[738542,738552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[738554,738559]},{"pos":[738568,738580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[738582,738626]},{"pos":[738633,738640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[738642,738710]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[738716,738786]},{"content":"The second byte contains a value for green.","pos":[738791,738834]},{"content":"The third byte contains a value for blue.","pos":[738839,738880]},{"content":"The high-order byte must be zero.","pos":[738885,738918]},{"content":"The maximum value for a single byte is 255.","pos":[738923,738966]},{"pos":[738972,738990],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[739049,739059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[739061,739077]},{"pos":[739086,739098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[739104,739132],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[739201,739211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[739213,739229]},{"pos":[739238,739250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[739256,739273],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[739275,739337]},{"pos":[739384,739394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[739396,739401]},{"pos":[739410,739422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[739424,739445]},{"pos":[739452,739459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[739461,739515]},{"content":"Mode.","pos":[739519,739524]},{"content":"Height Calculation.","pos":[739536,739555]},{"content":"Exact.","pos":[739741,739747]},{"content":"The exact height in pixels of the controls is used.","pos":[739758,739809]},{"content":"Auto.","pos":[739852,739857]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[739869,739958]},{"content":"Column height.","pos":[739963,739977]},{"content":"The layout of the form determines the height of the control.","pos":[739980,740040]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[740073,740158]},{"pos":[740164,740201],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[740267,740277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[740279,740285]},{"pos":[740294,740306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[740312,740328],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[740374,740384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[740386,740391]},{"pos":[740400,740412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[740418,740435],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[740486,740496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[740498,740503]},{"pos":[740512,740524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[740530,740548],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[740550,740589]},{"pos":[740639,740649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[740651,740656]},{"pos":[740665,740677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[740679,740700]},{"pos":[740707,740714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[740716,740806]},{"pos":[740812,740824],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[740826,740863]},{"pos":[740905,740915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[740917,740922]},{"pos":[740931,740943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[740945,740983]},{"pos":[740990,740997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[740999,741131]},{"pos":[741137,741153],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[741199,741209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741211,741216]},{"pos":[741225,741237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741243,741267],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[741321,741331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741333,741338]},{"pos":[741347,741359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741365,741385],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[741435,741445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741447,741452]},{"pos":[741461,741473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741479,741495],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[741541,741551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741553,741558]},{"pos":[741567,741579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741585,741605],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[741655,741665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741667,741672]},{"pos":[741681,741693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741699,741717],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[741773,741783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741785,741790]},{"pos":[741799,741811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741817,741838],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[741899,741909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[741911,741916]},{"pos":[741925,741937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[741943,741968],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[742043,742053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742055,742060]},{"pos":[742069,742081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742087,742107],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[742157,742167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742169,742174]},{"pos":[742183,742195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742201,742222],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[742273,742283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742285,742290]},{"pos":[742299,742311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742317,742338],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[742397,742407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742409,742414]},{"pos":[742423,742435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742441,742462],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[742513,742523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742525,742530]},{"pos":[742539,742551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742557,742577],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[742627,742637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742639,742644]},{"pos":[742653,742665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742671,742692],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[742747,742757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742759,742764]},{"pos":[742773,742785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742791,742813],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[742867,742877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[742879,742884]},{"pos":[742893,742905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[742911,742927],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[742982,742992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[742994,743008]},{"pos":[743017,743029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743035,743061],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[743126,743136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[743138,743152]},{"pos":[743161,743173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743179,743203],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[743246,743258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743264,743285],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[743336,743346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743348,743353]},{"pos":[743362,743374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743380,743400],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[743450,743460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743462,743467]},{"pos":[743476,743488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743494,743515],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[743570,743580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743582,743587]},{"pos":[743596,743608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743614,743636],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[743690,743700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743702,743707]},{"pos":[743716,743728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743734,743749],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[743794,743804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743806,743811]},{"pos":[743820,743832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743838,743852],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[743896,743906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[743908,743913]},{"pos":[743922,743934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[743940,743955],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[744004,744014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744016,744021]},{"pos":[744030,744042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744048,744064],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[744112,744122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744124,744129]},{"pos":[744138,744150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744156,744167],"content":"Method line","linkify":"Method line","nodes":[{"content":"Method line","pos":[0,11]}]},{"pos":[744218,744228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744230,744235]},{"pos":[744244,744256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744262,744278],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[744334,744344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744346,744351]},{"pos":[744360,744372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744378,744394],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[744450,744460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744462,744467]},{"pos":[744476,744488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744494,744509],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[744511,744586]},{"pos":[744641,744651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744653,744658]},{"pos":[744667,744679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[744681,744730]},{"pos":[744736,744752],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[744808,744818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744820,744825]},{"pos":[744834,744846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744852,744872],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[744922,744932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[744934,744939]},{"pos":[744948,744960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[744966,744985],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[745034,745044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[745046,745051]},{"pos":[745060,745072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[745078,745097],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[745164,745174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[745176,745181]},{"pos":[745190,745202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[745208,745229],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[745280,745290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[745292,745297]},{"pos":[745306,745318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[745324,745335],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[745337,745450]},{"pos":[745491,745501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[745503,745508]},{"pos":[745517,745529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name used in code to identify an application object.","pos":[745531,745587]},{"pos":[745594,745601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[745603,745697]},{"content":"Begins with a letter.","pos":[745703,745724]},{"content":"Doesn't exceed 250 characters.","pos":[745729,745759]},{"content":"Can include numbers and underscore characters.","pos":[745764,745810]},{"content":"Cannot include punctuation or spaces.","pos":[745815,745852]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[745857,745975]},{"pos":[745981,746001],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[746055,746065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[746067,746078]},{"pos":[746087,746099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746105,746120],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[746165,746175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[746177,746182]},{"pos":[746191,746203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746209,746227],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[746274,746284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[746286,746292]},{"pos":[746301,746313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746319,746351],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[746412,746422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[746424,746430]},{"pos":[746439,746451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746457,746474],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[746510,746522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746528,746555],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[746601,746613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746619,746645],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[746690,746702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746708,746730],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[746782,746792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[746794,746799]},{"pos":[746808,746820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746826,746847],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[746898,746908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[746910,746915]},{"pos":[746924,746936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[746942,746964],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[747020,747030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[747032,747037]},{"pos":[747046,747058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747064,747087],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[747142,747152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[747154,747159]},{"pos":[747168,747180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747186,747204],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[747272,747282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[747284,747289]},{"pos":[747298,747310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747316,747339],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[747402,747412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[747414,747419]},{"content":"string","pos":[747433,747439]},{"pos":[747448,747460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747466,747482],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[747536,747546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[747548,747553]},{"pos":[747562,747574],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747580,747596],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[747662,747672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[747674,747679]},{"pos":[747688,747700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747706,747721],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[747774,747784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[747786,747799]},{"pos":[747808,747820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747826,747851],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[747914,747924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[747926,747939]},{"pos":[747948,747960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[747966,747990],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[748033,748045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748051,748071],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[748121,748131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748133,748138]},{"pos":[748147,748159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748165,748184],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[748233,748243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748245,748250]},{"pos":[748259,748271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748277,748297],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[748351,748361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748363,748368]},{"pos":[748377,748389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748395,748416],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[748469,748479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748481,748486]},{"pos":[748495,748507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748513,748527],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[748571,748581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748583,748588]},{"pos":[748597,748609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748615,748628],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[748671,748681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748683,748688]},{"pos":[748697,748709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748715,748729],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[748777,748787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748789,748794]},{"pos":[748803,748815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748821,748836],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[748883,748893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[748895,748900]},{"pos":[748909,748921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[748927,748938],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[748991,749001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749003,749008]},{"pos":[749017,749029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749035,749049],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[749101,749111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749113,749118]},{"pos":[749127,749139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749145,749167],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[749219,749229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749231,749236]},{"pos":[749245,749257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749263,749285],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[749361,749371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749373,749378]},{"pos":[749387,749399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749405,749421],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[749467,749477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749479,749484]},{"pos":[749493,749505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749511,749528],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[749585,749595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[749597,749612]},{"pos":[749621,749633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749639,749666],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[749733,749743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[749745,749760]},{"pos":[749769,749781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[749787,749803],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[749805,749867]},{"pos":[749913,749923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[749925,749930]},{"pos":[749939,749951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[749953,750014]},{"pos":[750021,750028],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[750030,750083]},{"content":"Mode.","pos":[750087,750092]},{"content":"Width Calculation.","pos":[750103,750121]},{"content":"Exact.","pos":[750305,750311]},{"content":"The exact width in pixels of the controls is used.","pos":[750321,750371]},{"content":"Auto.","pos":[750414,750419]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[750430,750518]},{"content":"Column width.","pos":[750523,750536]},{"content":"The layout of the form determines the width of the control.","pos":[750539,750598]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[750631,750714]},{"pos":[750720,750745],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[750799,750809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[750811,750817]},{"pos":[750826,750838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[750844,750859],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[750904,750914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[750916,750921]},{"pos":[750930,750942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[750948,750964],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[751014,751024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751026,751031]},{"pos":[751040,751052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[751058,751075],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[751077,751115]},{"pos":[751164,751174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751176,751181]},{"pos":[751190,751202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[751204,751239]},{"pos":[751246,751253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[751255,751328]},{"pos":[751334,751353],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[751414,751424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751426,751431]},{"content":"unit","pos":[751445,751449]},{"pos":[751457,751468],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[751521,751531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751533,751538]},{"content":"unit","pos":[751552,751556]},{"pos":[751564,751574],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[751626,751636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751638,751643]},{"content":"unit","pos":[751657,751661]},{"pos":[751669,751686],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[751745,751755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751757,751762]},{"content":"unit","pos":[751776,751780]},{"pos":[751788,751801],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[751803,751842]},{"pos":[751897,751907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[751909,751914]},{"content":"unit","pos":[751928,751932]},{"pos":[751941,751948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[751950,752057]},{"content":"Mode.","pos":[752061,752066]},{"content":"Height calculation.","pos":[752080,752099]},{"content":"-1 Exact.","pos":[752287,752296]},{"content":"The exact height in pixels of the controls is used.","pos":[752306,752357]},{"content":"0 Auto.","pos":[752400,752407]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[752419,752508]},{"content":"1 Column height.","pos":[752513,752529]},{"content":"The layout of the form determines the height of the control.","pos":[752532,752592]},{"content":"The height and height calculation mode can be set separately.","pos":[752625,752686]},{"pos":[752692,752709],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[752768,752778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[752780,752785]},{"content":"unit","pos":[752799,752803]},{"pos":[752811,752829],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[752889,752899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[752901,752906]},{"content":"unit","pos":[752920,752924]},{"pos":[752932,752943],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[752973,752989],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[753047,753057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[753059,753064]},{"content":"unit","pos":[753078,753082]},{"pos":[753090,753101],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[753131,753143],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[753145,753183]},{"pos":[753237,753247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[753249,753254]},{"content":"unit","pos":[753268,753272]},{"pos":[753281,753288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[753290,753396]},{"content":"Mode.","pos":[753400,753405]},{"content":"Width calculation.","pos":[753418,753436]},{"content":"-1 Exact.","pos":[753622,753631]},{"content":"The exact width in pixels of the controls is used.","pos":[753640,753690]},{"content":"0 Auto.","pos":[753733,753740]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[753751,753839]},{"content":"1 Column width.","pos":[753844,753859]},{"content":"The layout of the form determines the width of the control.","pos":[753862,753921]},{"content":"The width and width calculation mode can be set separately.","pos":[753954,754013]},{"pos":[754018,754043],"content":"Class ReportStringControl","linkify":"Class ReportStringControl","nodes":[{"content":"Class ReportStringControl","pos":[0,25]}]},{"content":"The ReportStringControl class lets you create, read, update, and delete X++ code and metadata.","pos":[754097,754191]},{"pos":[754197,754204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[754206,754316]},{"pos":[754322,754330],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[754336,754343],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[754347,754353]},{"content":"Description","pos":[754422,754433]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[754781,754816],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[754998,755034],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[755215,755264],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[755290,755388]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[755432,755473],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[755507,755556]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[755649,755684],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[755724,755785]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[755866,755896],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[755941,756016]},{"content":"public int bottomMarginAndFrame()","pos":[756083,756116]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[756300,756342],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[756517,756558],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[756734,756780],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[756951,756996],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[757168,757204],"source":"public int changeCase(\\[int value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[757385,757426],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[757602,757640],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[757677,757720]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[757819,757856],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[757894,757939]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[758036,758108],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[758111,758178]},{"content":"public ReportFieldType controlType()","pos":[758253,758289]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[758470,758504],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[758687,758730],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[758904,758940],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[759121,759140]},{"content":"public boolean dynamicHeight(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[759338,759385],"source":"public boolean dynamicHeight(\\[boolean value\\])"},{"content":"public str effectiveFont()","pos":[759555,759581]},{"content":"public str eval()","pos":[759772,759789]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[759989,760053],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[760206,760236],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[760281,760338]},{"content":"public str fontInfoPrinter()","pos":[760423,760451]},{"content":"public int fontInfoPrinterAscent()","pos":[760640,760674]},{"content":"public int fontInfoPrinterDescent()","pos":[760857,760892]},{"content":"public int fontInfoPrinterExtLead()","pos":[761074,761109]},{"content":"public int fontInfoPrinterHeight()","pos":[761291,761325]},{"content":"public int fontInfoPrinterIntLead()","pos":[761508,761543]},{"content":"public str fontInfoScreen()","pos":[761725,761752]},{"content":"public int fontInfoScreenAscent()","pos":[761942,761975]},{"content":"public int fontInfoScreenDescent()","pos":[762159,762193]},{"content":"public int fontInfoScreenExtLead()","pos":[762376,762410]},{"content":"public int fontInfoScreenHeight()","pos":[762593,762626]},{"content":"public int fontInfoScreenIntLead()","pos":[762810,762844]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[763027,763061],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[763102,763159]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[763244,763285],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[763319,763370]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[763461,763509],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[763678,763736],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[763895,763931],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[763970,764032]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[764112,764165]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[764329,764364],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[764546,764586],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[764763,764802],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[764838,764877]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[764980,765020],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[765197,765228],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[765272,765309]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[765414,765449],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[765631,765674],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[765848,765887],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[766065,766100],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[766282,766321],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[766499,766544],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[766716,766766],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[766933,766997],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[767150,767189],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[767367,767407],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[767584,767632],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[767801,767841],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[768018,768057],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[768235,768279],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[768452,768495],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[768669,768713],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[768886,768940],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[769103,769133]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[769320,769360],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[769537,769576],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[769754,769798],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[769971,770014],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[770188,770222],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[770405,770438],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[770622,770660],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[770839,770876],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[771056,771101],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[771273,771318],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[771490,771534],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[771565,771640]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[771707,771752],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[771924,771963],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[772141,772179],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[772358,772414],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[772575,772615],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[772792,772822],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[772867,773005]},{"content":"public int numberOfLines(int height100mm)","pos":[773010,773051]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[773227,773261],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[773444,773478]},{"content":"public int previewXCompensation100mm(str string)","pos":[773661,773709]},{"content":"public int right100mm()","pos":[773878,773901]},{"content":"public int right100mmInclBorder()","pos":[774095,774128]},{"content":"public int rightMarginAndFrame()","pos":[774312,774344]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[774529,774570],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[774746,774786],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[774963,775008],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[775180,775224],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[775397,775454],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[775614,775664]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[775831,775874],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[776048,776087],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[776123,776176]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[776265,776320],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[776482,776524],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[776699,776751],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[776916,776946]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[777133,777172],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[777350,777388],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[777567,777610],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[777784,777826],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[778001,778034],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[778218,778250],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[778435,778472],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[778652,778688],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[778869,778912],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[779086,779127],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[779303,779344],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[779520,779585],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[779737,779772],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[779954,780000],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[780171,780227],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[780388,780423],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[780463,780525]},{"content":"public int widthOfString100mm(str string)","pos":[780605,780646]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[780822,780856],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[781039,781078],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[781256,781294],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[781331,781369]},{"content":"public void height(Real value, Units unit)","pos":[781473,781515]},{"content":"Gets or sets the height of the control.","pos":[781548,781587]},{"content":"public void topMargin(Real value, Units unit)","pos":[781690,781735]},{"content":"public void labelWidth(Real value, Units unit)","pos":[781907,781953]},{"content":"public void hide()","pos":[782124,782142]},{"content":"public void left(Real value, Units unit)","pos":[782341,782381]},{"content":"public void rightMargin(Real value, Units unit)","pos":[782558,782605]},{"content":"public void show()","pos":[782775,782793]},{"content":"public void width(Real value, Units unit)","pos":[782992,783033]},{"content":"Gets or sets the width of the control.","pos":[783067,783105]},{"content":"public void leftMargin(Real value, Units unit)","pos":[783209,783255]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[783426,783474]},{"content":"public void top(Real value, Units unit)","pos":[783643,783682]},{"pos":[783863,783879],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[783925,783935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[783937,783942]},{"pos":[783951,783963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[783969,783986],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[784033,784043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[784045,784050]},{"pos":[784059,784071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[784077,784099],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[784101,784199]},{"pos":[784259,784269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[784271,784276]},{"pos":[784285,784297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[784299,784378]},{"pos":[784385,784392],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[784394,784431]},{"pos":[784437,784459],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[784461,784510]},{"pos":[784562,784572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[784574,784579]},{"pos":[784588,784600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[784602,784646]},{"pos":[784653,784660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[784662,784730]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[784736,784806]},{"content":"The second byte contains a value for green.","pos":[784811,784854]},{"content":"The third byte contains a value for blue.","pos":[784859,784900]},{"content":"The high-order byte must be zero.","pos":[784905,784938]},{"content":"The maximum value for a single byte is 255.","pos":[784943,784986]},{"pos":[784992,785008],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[785010,785071]},{"pos":[785117,785127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[785129,785134]},{"pos":[785143,785155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[785157,785218]},{"pos":[785224,785235],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[785237,785312]},{"pos":[785353,785363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[785365,785370]},{"pos":[785379,785391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[785393,785443]},{"pos":[785450,785457],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[785459,785531]},{"content":"0 Use the default font weight.","pos":[785537,785567]},{"content":"1 Thin.","pos":[785572,785579]},{"content":"2 Extra-light.","pos":[785584,785598]},{"content":"3 Light.","pos":[785603,785611]},{"content":"4 Normal.","pos":[785616,785625]},{"content":"5 Medium.","pos":[785630,785639]},{"content":"6 Semibold.","pos":[785644,785655]},{"content":"7 Bold.","pos":[785660,785667]},{"content":"8 Extra-bold.","pos":[785672,785685]},{"content":"9 Heavy.","pos":[785690,785698]},{"pos":[785704,785731],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[785777,785789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[785795,785818],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[785871,785881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[785883,785888]},{"pos":[785897,785909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[785915,785937],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[785989,785999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786001,786006]},{"pos":[786015,786027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[786033,786056],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[786113,786123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786125,786130]},{"pos":[786139,786151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[786157,786181],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[786237,786247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786249,786254]},{"pos":[786263,786275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[786281,786298],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[786345,786355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786357,786362]},{"pos":[786371,786383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[786389,786411],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[786463,786473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786475,786480]},{"pos":[786489,786501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[786507,786526],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[786528,786571]},{"pos":[786620,786630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[786632,786637]},{"pos":[786646,786658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[786660,786722]},{"pos":[786729,786736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[786738,786842]},{"content":"Value.","pos":[786846,786852]},{"content":"Description.","pos":[786855,786867]},{"content":"0","pos":[786914,786915]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[786923,786936],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[786948,786949]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[786957,786973],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[786982,786983]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[786991,787006],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[787016,787018]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787025,787037],"source":"MAC\\_CHARSET"},{"content":"128","pos":[787050,787053]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787059,787076],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[787084,787087]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787093,787108],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[787118,787121]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787127,787142],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[787152,787155]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787161,787181],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[787186,787189]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787195,787209],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[787220,787223]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787229,787245],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[787254,787257]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787263,787282],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[787288,787291]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787297,787312],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[787322,787325]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787331,787347],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[787356,787359]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787365,787384],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[787390,787393]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787399,787411],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[787423,787511]},{"content":"Value.","pos":[787515,787521]},{"content":"Description.","pos":[787524,787536]},{"content":"130","pos":[787571,787574]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787580,787594],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[787598,787684]},{"content":"Value.","pos":[787688,787694]},{"content":"Description.","pos":[787697,787709]},{"content":"177","pos":[787746,787749]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787755,787770],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[787775,787778]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787784,787799],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[787803,787880]},{"content":"Value.","pos":[787884,787890]},{"content":"Description.","pos":[787893,787905]},{"content":"222","pos":[787938,787941]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[787947,787960],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[787964,788051]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[788052,788258],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[788264,788282],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[788284,788329]},{"pos":[788377,788387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[788389,788394]},{"pos":[788403,788415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[788417,788460]},{"pos":[788467,788474],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[788476,788537]},{"content":"Value.","pos":[788541,788547]},{"content":"Style.","pos":[788550,788556]},{"content":"0","pos":[788613,788614]},{"content":"Default.","pos":[788622,788630]},{"content":"1","pos":[788649,788650]},{"content":"The Windows palette.","pos":[788658,788678]},{"content":"2","pos":[788685,788686]},{"content":"The true-color scheme.","pos":[788694,788716]},{"pos":[788724,788747],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[788749,788816]},{"pos":[788899,788909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[788911,788916]},{"pos":[788925,788937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[788939,789011]},{"pos":[789018,789025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[789027,789108]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[789109,789202]},{"pos":[789208,789226],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[789275,789287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789293,789308],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[789353,789363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[789365,789370]},{"pos":[789379,789391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789397,789413],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[789467,789477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[789479,789484]},{"pos":[789493,789505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789511,789528],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[789575,789585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[789587,789592]},{"pos":[789601,789613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789619,789632],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[789664,789676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789682,789702],"content":"Method dynamicHeight","linkify":"Method dynamicHeight","nodes":[{"content":"Method dynamicHeight","pos":[0,20]}]},{"pos":[789760,789770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[789772,789777]},{"pos":[789786,789798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789804,789824],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[789863,789875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789881,789892],"content":"Method eval","linkify":"Method eval","nodes":[{"content":"Method eval","pos":[0,11]}]},{"pos":[789922,789934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[789940,789963],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[790038,790048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[790050,790055]},{"pos":[790064,790076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790082,790093],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[790095,790152]},{"pos":[790193,790203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[790205,790210]},{"pos":[790219,790231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[790233,790288]},{"pos":[790294,790316],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[790357,790369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790375,790403],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[790450,790462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790468,790497],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[790545,790557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790563,790592],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[790640,790652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790658,790686],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[790733,790745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790751,790780],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[790828,790840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790846,790867],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[790907,790919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[790925,790952],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[790998,791010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[791016,791044],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[791091,791103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[791109,791137],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[791184,791196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[791202,791229],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[791275,791287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[791293,791321],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[791368,791380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[791386,791401],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[791403,791460]},{"pos":[791505,791515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[791517,791522]},{"pos":[791531,791543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[791545,791578]},{"pos":[791584,791606],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[791608,791659]},{"pos":[791711,791721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[791723,791728]},{"pos":[791737,791749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[791751,791795]},{"pos":[791802,791809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[791811,791879]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[791885,791955]},{"content":"The second byte contains a value for green.","pos":[791960,792003]},{"content":"The third byte contains a value for blue.","pos":[792008,792049]},{"content":"The high-order byte must be zero.","pos":[792054,792087]},{"content":"The maximum value for a single byte is 255.","pos":[792092,792135]},{"pos":[792141,792159],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[792218,792228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[792230,792246]},{"pos":[792255,792267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[792273,792301],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[792370,792380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[792382,792398]},{"pos":[792407,792419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[792425,792442],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[792444,792506]},{"pos":[792553,792563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[792565,792570]},{"pos":[792579,792591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[792593,792614]},{"pos":[792621,792628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[792630,792684]},{"content":"Mode.","pos":[792688,792693]},{"content":"Height Calculation.","pos":[792705,792724]},{"content":"Exact.","pos":[792910,792916]},{"content":"The exact height in pixels of the controls is used.","pos":[792927,792978]},{"content":"Auto.","pos":[793021,793026]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[793038,793127]},{"content":"Column height.","pos":[793132,793146]},{"content":"The layout of the form determines the height of the control.","pos":[793149,793209]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[793242,793327]},{"pos":[793333,793370],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[793436,793446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[793448,793454]},{"pos":[793463,793475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[793481,793497],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[793543,793553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[793555,793560]},{"pos":[793569,793581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[793587,793604],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[793655,793665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[793667,793672]},{"pos":[793681,793693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[793699,793717],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[793719,793758]},{"pos":[793808,793818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[793820,793825]},{"pos":[793834,793846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[793848,793869]},{"pos":[793876,793883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[793885,793975]},{"pos":[793981,793994],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[794045,794055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794057,794062]},{"pos":[794071,794083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794089,794101],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[794103,794140]},{"pos":[794182,794192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794194,794199]},{"pos":[794208,794220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[794222,794260]},{"pos":[794267,794274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[794276,794408]},{"pos":[794414,794430],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[794476,794486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794488,794493]},{"pos":[794502,794514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794520,794544],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[794598,794608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794610,794615]},{"pos":[794624,794636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794642,794662],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[794712,794722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794724,794729]},{"pos":[794738,794750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794756,794772],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[794818,794828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794830,794835]},{"pos":[794844,794856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794862,794882],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[794932,794942],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[794944,794949]},{"pos":[794958,794970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[794976,794994],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[795050,795060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795062,795067]},{"pos":[795076,795088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795094,795115],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[795176,795186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795188,795193]},{"pos":[795202,795214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795220,795245],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[795320,795330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795332,795337]},{"pos":[795346,795358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795364,795384],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[795434,795444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795446,795451]},{"pos":[795460,795472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795478,795499],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[795550,795560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795562,795567]},{"pos":[795576,795588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795594,795615],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[795674,795684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795686,795691]},{"pos":[795700,795712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795718,795739],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[795790,795800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795802,795807]},{"pos":[795816,795828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795834,795854],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[795904,795914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[795916,795921]},{"pos":[795930,795942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[795948,795969],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[796024,796034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796036,796041]},{"pos":[796050,796062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796068,796090],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[796144,796154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796156,796161]},{"pos":[796170,796182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796188,796204],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[796259,796269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[796271,796285]},{"pos":[796294,796306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796312,796338],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[796403,796413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[796415,796429]},{"pos":[796438,796450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796456,796480],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[796523,796535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796541,796562],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[796613,796623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796625,796630]},{"pos":[796639,796651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796657,796677],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[796727,796737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796739,796744]},{"pos":[796753,796765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796771,796792],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[796847,796857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796859,796864]},{"pos":[796873,796885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[796891,796913],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[796967,796977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[796979,796984]},{"pos":[796993,797005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797011,797026],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[797071,797081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797083,797088]},{"pos":[797097,797109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797115,797129],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[797173,797183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797185,797190]},{"pos":[797199,797211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797217,797232],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[797281,797291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797293,797298]},{"pos":[797307,797319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797325,797341],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[797389,797399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797401,797406]},{"pos":[797415,797427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797433,797449],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[797505,797515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797517,797522]},{"pos":[797531,797543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797549,797565],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[797621,797631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797633,797638]},{"pos":[797647,797659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[797665,797680],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[797682,797757]},{"pos":[797812,797822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797824,797829]},{"pos":[797838,797850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[797852,797901]},{"pos":[797907,797923],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[797979,797989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[797991,797996]},{"pos":[798005,798017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[798023,798043],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[798093,798103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[798105,798110]},{"pos":[798119,798131],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[798137,798156],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[798205,798215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[798217,798222]},{"pos":[798231,798243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[798249,798268],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[798335,798345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[798347,798352]},{"pos":[798361,798373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[798379,798400],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[798451,798461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[798463,798468]},{"pos":[798477,798489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[798495,798506],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[798508,798646]},{"pos":[798687,798697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[798699,798704]},{"pos":[798713,798725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[798727,798791]},{"pos":[798798,798805],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[798807,798901]},{"content":"Begins with a letter.","pos":[798907,798928]},{"content":"Doesn't exceed 250 characters.","pos":[798933,798963]},{"content":"Can include numbers and underscore characters.","pos":[798968,799014]},{"content":"Cannot include punctuation or spaces.","pos":[799019,799056]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[799061,799179]},{"pos":[799185,799205],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[799259,799269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[799271,799282]},{"pos":[799291,799303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799309,799324],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[799369,799379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[799381,799386]},{"pos":[799395,799407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799413,799431],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[799478,799488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[799490,799496]},{"pos":[799505,799517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799523,799555],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[799616,799626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[799628,799634]},{"pos":[799643,799655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799661,799678],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[799714,799726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799732,799759],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[799805,799817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799823,799849],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[799894,799906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[799912,799934],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[799986,799996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[799998,800003]},{"pos":[800012,800024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800030,800051],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[800102,800112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800114,800119]},{"pos":[800128,800140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800146,800168],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[800224,800234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800236,800241]},{"pos":[800250,800262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800268,800291],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[800346,800356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800358,800363]},{"pos":[800372,800384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800390,800408],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[800476,800486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800488,800493]},{"pos":[800502,800514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800520,800543],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[800606,800616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[800618,800623]},{"content":"string","pos":[800637,800643]},{"pos":[800652,800664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800670,800686],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[800740,800750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800752,800757]},{"pos":[800766,800778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[800784,800796],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[800798,800851]},{"pos":[800901,800911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[800913,800918]},{"pos":[800927,800939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[800941,801002]},{"pos":[801008,801024],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[801090,801100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[801102,801107]},{"pos":[801116,801128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801134,801149],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[801202,801212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[801214,801227]},{"pos":[801236,801248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801254,801279],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[801342,801352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[801354,801367]},{"pos":[801376,801388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801394,801418],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[801461,801473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801479,801499],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[801549,801559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[801561,801566]},{"pos":[801575,801587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801593,801612],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[801661,801671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[801673,801678]},{"pos":[801687,801699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801705,801725],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[801779,801789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[801791,801796]},{"pos":[801805,801817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801823,801844],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[801897,801907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[801909,801914]},{"pos":[801923,801935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[801941,801955],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[801999,802009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802011,802016]},{"pos":[802025,802037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802043,802056],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[802099,802109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802111,802116]},{"pos":[802125,802137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802143,802157],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[802205,802215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802217,802222]},{"pos":[802231,802243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802249,802264],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[802311,802321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802323,802328]},{"pos":[802337,802349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802355,802371],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[802425,802435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802437,802442]},{"pos":[802451,802463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802469,802483],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[802535,802545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802547,802552]},{"pos":[802561,802573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802579,802601],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[802653,802663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802665,802670]},{"pos":[802679,802691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802697,802719],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[802795,802805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802807,802812]},{"pos":[802821,802833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802839,802855],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[802901,802911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[802913,802918]},{"pos":[802927,802939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[802945,802962],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[803019,803029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[803031,803046]},{"pos":[803055,803067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[803073,803100],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[803167,803177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[803179,803194]},{"pos":[803203,803215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[803221,803237],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[803239,803301]},{"pos":[803347,803357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[803359,803364]},{"pos":[803373,803385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[803387,803448]},{"pos":[803455,803462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[803464,803517]},{"content":"Mode.","pos":[803521,803526]},{"content":"Width Calculation.","pos":[803537,803555]},{"content":"Exact.","pos":[803739,803745]},{"content":"The exact width in pixels of the controls is used.","pos":[803755,803805]},{"content":"Auto.","pos":[803848,803853]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[803864,803952]},{"content":"Column width.","pos":[803957,803970]},{"content":"The layout of the form determines the width of the control.","pos":[803973,804032]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[804065,804148]},{"pos":[804154,804179],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[804233,804243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[804245,804251]},{"pos":[804260,804272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[804278,804293],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[804338,804348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[804350,804355]},{"pos":[804364,804376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[804382,804398],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[804448,804458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[804460,804465]},{"pos":[804474,804486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[804492,804509],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[804511,804549]},{"pos":[804598,804608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[804610,804615]},{"pos":[804624,804636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[804638,804673]},{"pos":[804680,804687],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[804689,804762]},{"pos":[804768,804781],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[804783,804822]},{"pos":[804877,804887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[804889,804894]},{"content":"unit","pos":[804908,804912]},{"pos":[804921,804928],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[804930,805037]},{"content":"Mode.","pos":[805041,805046]},{"content":"Height calculation.","pos":[805060,805079]},{"content":"-1 Exact.","pos":[805267,805276]},{"content":"The exact height in pixels of the controls is used.","pos":[805286,805337]},{"content":"0 Auto.","pos":[805380,805387]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[805399,805488]},{"content":"1 Column height.","pos":[805493,805509]},{"content":"The layout of the form determines the height of the control.","pos":[805512,805572]},{"content":"The height and height calculation mode can be set separately.","pos":[805605,805666]},{"pos":[805672,805688],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[805746,805756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[805758,805763]},{"content":"unit","pos":[805777,805781]},{"pos":[805789,805806],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[805865,805875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[805877,805882]},{"content":"unit","pos":[805896,805900]},{"pos":[805908,805919],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[805949,805960],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[806013,806023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[806025,806030]},{"content":"unit","pos":[806044,806048]},{"pos":[806056,806074],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[806134,806144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[806146,806151]},{"content":"unit","pos":[806165,806169]},{"pos":[806177,806188],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[806218,806230],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[806232,806270]},{"pos":[806324,806334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[806336,806341]},{"content":"unit","pos":[806355,806359]},{"pos":[806368,806375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[806377,806483]},{"content":"Mode.","pos":[806487,806492]},{"content":"Width calculation.","pos":[806505,806523]},{"content":"-1 Exact.","pos":[806709,806718]},{"content":"The exact width in pixels of the controls is used.","pos":[806727,806777]},{"content":"0 Auto.","pos":[806820,806827]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[806838,806926]},{"content":"1 Column width.","pos":[806931,806946]},{"content":"The layout of the form determines the width of the control.","pos":[806949,807008]},{"content":"The width and width calculation mode can be set separately.","pos":[807041,807100]},{"pos":[807106,807123],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[807182,807192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[807194,807199]},{"content":"unit","pos":[807213,807217]},{"pos":[807225,807244],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[807305,807315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[807317,807322]},{"content":"unit","pos":[807336,807340]},{"pos":[807348,807358],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[807410,807420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[807422,807427]},{"content":"unit","pos":[807441,807445]},{"pos":[807452,807474],"content":"Class ReportSumControl","linkify":"Class ReportSumControl","nodes":[{"content":"Class ReportSumControl","pos":[0,22]}]},{"content":"The ReportSumcontrol class lets you create, read, update, and delete X++ code and metadata.","pos":[807525,807616]},{"pos":[807622,807629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[807631,807741]},{"pos":[807747,807755],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[807761,807768],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[807772,807778]},{"content":"Description","pos":[807847,807858]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[808190,808225],"source":"public int alignment(\\[int value\\])"},{"content":"public int allowNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[808399,808438],"source":"public int allowNegative(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[808608,808644],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[808817,808866],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[808892,808990]},{"content":"public int autoInsSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[809026,809068],"source":"public int autoInsSeparator(\\[int value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[809235,809276],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[809310,809359]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[809444,809479],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[809519,809581]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[809653,809683],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[809728,809795]},{"content":"public int bottomMarginAndFrame()","pos":[809862,809895]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[810071,810113],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[810280,810321],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[810489,810535],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[810698,810743],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[810907,810948],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[811116,811154],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[811191,811234]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[811325,811362],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[811400,811445]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[811534,811606],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[811609,811676]},{"content":"public ReportFieldType controlType()","pos":[811743,811779]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[811952,811986],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[812161,812204],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[812370,812409],"source":"public str dataFieldName(\\[str value\\])"},{"content":"public int decimalSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[812579,812621],"source":"public int decimalSeparator(\\[int value\\])"},{"content":"public int delete()","pos":[812788,812807]},{"content":"public int displaceNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[812997,813058],"source":"public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displaceNegativeMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[813206,813261],"source":"public AutoMode displaceNegativeMode(\\[AutoMode mode\\])"},{"content":"public int displaceNegativeValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[813415,813462],"source":"public int displaceNegativeValue(\\[int value\\])"},{"content":"public str effectiveFont()","pos":[813624,813650]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[813833,813897],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int extraSumWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[814042,814085],"source":"public int extraSumWidthMode(\\[int value\\])"},{"content":"public str extraSumWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[814251,814293],"source":"public str extraSumWidthStr(\\[str value\\])"},{"content":"public Units extraSumWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[814460,814507],"source":"public Units extraSumWidthUnit(\\[Units value\\])"},{"content":"public Real extraSumWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[814669,814715],"source":"public Real extraSumWidthValue(\\[Real value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[814878,814908],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[814953,815010]},{"content":"public str fontInfoPrinter()","pos":[815087,815115]},{"content":"public int fontInfoPrinterAscent()","pos":[815296,815330]},{"content":"public int fontInfoPrinterDescent()","pos":[815505,815540]},{"content":"public int fontInfoPrinterExtLead()","pos":[815714,815749]},{"content":"public int fontInfoPrinterHeight()","pos":[815923,815957]},{"content":"public int fontInfoPrinterIntLead()","pos":[816132,816167]},{"content":"public str fontInfoScreen()","pos":[816341,816368]},{"content":"public int fontInfoScreenAscent()","pos":[816550,816583]},{"content":"public int fontInfoScreenDescent()","pos":[816759,816793]},{"content":"public int fontInfoScreenExtLead()","pos":[816968,817002]},{"content":"public int fontInfoScreenHeight()","pos":[817177,817210]},{"content":"public int fontInfoScreenIntLead()","pos":[817386,817420]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[817595,817629],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[817670,817727]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[817804,817845],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[817879,817930]},{"content":"public int formatMST(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[818013,818048],"source":"public int formatMST(\\[int value\\])"},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[818222,818270],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[818431,818489],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[818640,818676],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[818715,818777]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[818849,818902]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[819058,819093],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[819267,819307],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[819476,819515],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[819551,819590]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[819685,819725],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[819894,819925],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[819969,820006]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[820103,820138],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[820312,820355],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[820521,820560],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[820730,820765],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[820939,820978],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[821148,821193],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[821357,821407],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[821566,821630],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[821775,821814],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[821984,822024],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[822193,822241],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[822402,822442],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[822611,822650],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[822820,822864],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[823029,823072],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[823238,823282],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[823447,823501],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[823656,823686]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[823865,823905],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[824074,824113],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[824283,824327],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[824492,824535],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[824701,824735],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[824910,824943],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[825119,825157],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[825328,825365],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[825537,825582],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[825746,825791],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[825955,825999],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[826030,826105]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[826164,826209],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[826373,826412],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[826582,826620],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[826791,826847],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public int minNoOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[827000,827060],"source":"public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode minNoOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[827209,827263],"source":"public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int minNoOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[827418,827464],"source":"public int minNoOfDecimalsValue(\\[int value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[827627,827667],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[827836,827866],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[827911,828041]},{"content":"public int noOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[828046,828103],"source":"public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode noOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[828255,828306],"source":"public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int noOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[828464,828507],"source":"public int noOfDecimalsValue(\\[int value\\])"},{"content":"public int numberOfLines(int height100mm)","pos":[828673,828714]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[828882,828916],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[829091,829125]},{"content":"public int previewXCompensation100mm(str string)","pos":[829300,829348]},{"content":"public int right100mm()","pos":[829509,829532]},{"content":"public int right100mmInclBorder()","pos":[829718,829751]},{"content":"public int rightMarginAndFrame()","pos":[829927,829959]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[830136,830177],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[830345,830385],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[830554,830599],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[830763,830807],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public int rotateSign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[830972,831008],"source":"public int rotateSign(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[831181,831238],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[831390,831440]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[831599,831642],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public int showZero(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[831808,831842],"source":"public int showZero(\\[int value\\])"},{"content":"public int signDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[832017,832054],"source":"public int signDisplay(\\[int value\\])"},{"content":"public int sumType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[832226,832259],"source":"public int sumType(\\[int value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[832435,832474],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[832510,832563]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[832644,832699],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int thousandSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[832853,832896],"source":"public int thousandSeparator(\\[int value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[833062,833104],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[833271,833323],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[833480,833510]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[833689,833728],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[833898,833936],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[834107,834150],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[834316,834358],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[834525,834558],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[834734,834766],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[834943,834980],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[835152,835188],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[835361,835404],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[835570,835611],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[835779,835820],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[835988,836053],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[836197,836232],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[836406,836452],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[836615,836671],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[836824,836859],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[836899,836961]},{"content":"public int widthOfString100mm(str string)","pos":[837033,837074]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[837242,837276],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[837451,837490],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[837660,837698],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[837735,837773]},{"content":"public void top(Real value, Units unit)","pos":[837869,837908]},{"content":"public void topMargin(Real value, Units unit)","pos":[838078,838123]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[838287,838335]},{"content":"public void rightMargin(Real value, Units unit)","pos":[838496,838543]},{"content":"public void leftMargin(Real value, Units unit)","pos":[838705,838751]},{"content":"public void show()","pos":[838914,838932]},{"content":"public void left(Real value, Units unit)","pos":[839123,839163]},{"content":"public void width(Real value, Units unit)","pos":[839332,839373]},{"content":"Gets or sets the width of the control.","pos":[839407,839445]},{"content":"public void extraSumWidth(Real value, Units unit)","pos":[839541,839590]},{"content":"public void labelWidth(Real value, Units unit)","pos":[839750,839796]},{"content":"public void hide()","pos":[839959,839977]},{"content":"public void height(Real value, Units unit)","pos":[840168,840210]},{"content":"Gets or sets the height of the control.","pos":[840243,840282]},{"pos":[840380,840396],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[840442,840452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[840454,840459]},{"pos":[840468,840480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[840486,840506],"content":"Method allowNegative","linkify":"Method allowNegative","nodes":[{"content":"Method allowNegative","pos":[0,20]}]},{"pos":[840556,840566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[840568,840573]},{"pos":[840582,840594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[840600,840617],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[840664,840674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[840676,840681]},{"pos":[840690,840702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[840708,840730],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[840732,840830]},{"pos":[840890,840900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[840902,840907]},{"pos":[840916,840928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[840930,841009]},{"pos":[841016,841023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[841025,841062]},{"pos":[841068,841091],"content":"Method autoInsSeparator","linkify":"Method autoInsSeparator","nodes":[{"content":"Method autoInsSeparator","pos":[0,23]}]},{"pos":[841144,841154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[841156,841161]},{"pos":[841170,841182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[841188,841210],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[841212,841261]},{"pos":[841313,841323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[841325,841330]},{"pos":[841339,841351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[841353,841397]},{"pos":[841404,841411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[841413,841481]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[841487,841557]},{"content":"The second byte contains a value for green.","pos":[841562,841605]},{"content":"The third byte contains a value for blue.","pos":[841610,841651]},{"content":"The high-order byte must be zero.","pos":[841656,841689]},{"content":"The maximum value for a single byte is 255.","pos":[841694,841737]},{"pos":[841743,841759],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[841761,841823]},{"pos":[841869,841879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[841881,841886]},{"pos":[841895,841907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[841909,841970]},{"pos":[841976,841987],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[841989,842056]},{"pos":[842097,842107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[842109,842114]},{"pos":[842123,842135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[842137,842187]},{"pos":[842194,842201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[842203,842275]},{"content":"0 Use the default font weight.","pos":[842281,842311]},{"content":"1 Thin.","pos":[842316,842323]},{"content":"2 Extra-light.","pos":[842328,842342]},{"content":"3 Light.","pos":[842347,842355]},{"content":"4 Normal.","pos":[842360,842369]},{"content":"5 Medium.","pos":[842374,842383]},{"content":"6 Semibold.","pos":[842388,842399]},{"content":"7 Bold.","pos":[842404,842411]},{"content":"8 Extra-bold.","pos":[842416,842429]},{"content":"9 Heavy.","pos":[842434,842442]},{"pos":[842448,842475],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[842521,842533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[842539,842562],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[842615,842625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[842627,842632]},{"pos":[842641,842653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[842659,842681],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[842733,842743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[842745,842750]},{"pos":[842759,842771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[842777,842800],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[842857,842867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[842869,842874]},{"pos":[842883,842895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[842901,842925],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[842981,842991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[842993,842998]},{"pos":[843007,843019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[843025,843047],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[843099,843109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[843111,843116]},{"pos":[843125,843137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[843143,843162],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[843164,843207]},{"pos":[843256,843266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[843268,843273]},{"pos":[843282,843294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[843296,843358]},{"pos":[843365,843372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[843374,843478]},{"content":"Value.","pos":[843482,843488]},{"content":"Description.","pos":[843491,843503]},{"content":"0","pos":[843550,843551]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843559,843572],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[843584,843585]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843593,843609],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[843618,843619]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843627,843642],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[843652,843654]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843661,843673],"source":"MAC\\_CHARSET"},{"content":"128","pos":[843686,843689]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843695,843712],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[843720,843723]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843729,843744],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[843754,843757]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843763,843778],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[843788,843791]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843797,843817],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[843822,843825]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843831,843845],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[843856,843859]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843865,843881],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[843890,843893]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843899,843918],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[843924,843927]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843933,843948],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[843958,843961]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[843967,843983],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[843992,843995]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844001,844020],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[844026,844029]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844035,844047],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[844059,844147]},{"content":"Value.","pos":[844151,844157]},{"content":"Description.","pos":[844160,844172]},{"content":"130","pos":[844207,844210]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844216,844230],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[844234,844320]},{"content":"Value.","pos":[844324,844330]},{"content":"Description.","pos":[844333,844345]},{"content":"177","pos":[844382,844385]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844391,844406],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[844411,844414]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844420,844435],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[844439,844516]},{"content":"Value.","pos":[844520,844526]},{"content":"Description.","pos":[844529,844541]},{"content":"222","pos":[844574,844577]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[844583,844596],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[844600,844679]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[844680,844886],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[844892,844910],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[844912,844957]},{"pos":[845005,845015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[845017,845022]},{"pos":[845031,845043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[845045,845088]},{"pos":[845095,845102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[845104,845165]},{"content":"Value.","pos":[845169,845175]},{"content":"Style.","pos":[845178,845184]},{"content":"0","pos":[845241,845242]},{"content":"Default.","pos":[845250,845258]},{"content":"1","pos":[845277,845278]},{"content":"The Windows palette.","pos":[845286,845306]},{"content":"2","pos":[845313,845314]},{"content":"The true-color scheme.","pos":[845322,845344]},{"pos":[845352,845375],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[845377,845444]},{"pos":[845527,845537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[845539,845544]},{"pos":[845553,845565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[845567,845639]},{"pos":[845646,845653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[845655,845736]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[845737,845830]},{"pos":[845836,845854],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[845903,845915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[845921,845936],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[845981,845991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[845993,845998]},{"pos":[846007,846019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846025,846041],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[846095,846105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[846107,846112]},{"pos":[846121,846133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846139,846159],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[846209,846219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[846221,846226]},{"pos":[846235,846247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846253,846276],"content":"Method decimalSeparator","linkify":"Method decimalSeparator","nodes":[{"content":"Method decimalSeparator","pos":[0,23]}]},{"pos":[846329,846339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[846341,846346]},{"pos":[846355,846367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846373,846386],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[846418,846430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846436,846459],"content":"Method displaceNegative","linkify":"Method displaceNegative","nodes":[{"content":"Method displaceNegative","pos":[0,23]}]},{"pos":[846529,846539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[846541,846546]},{"content":"mode","pos":[846560,846564]},{"pos":[846573,846585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846591,846618],"content":"Method displaceNegativeMode","linkify":"Method displaceNegativeMode","nodes":[{"content":"Method displaceNegativeMode","pos":[0,27]}]},{"pos":[846684,846694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[846696,846700]},{"pos":[846709,846721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846727,846755],"content":"Method displaceNegativeValue","linkify":"Method displaceNegativeValue","nodes":[{"content":"Method displaceNegativeValue","pos":[0,28]}]},{"pos":[846813,846823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[846825,846830]},{"pos":[846839,846851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846857,846877],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[846916,846928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[846934,846957],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[847032,847042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847044,847049]},{"pos":[847058,847070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847076,847100],"content":"Method extraSumWidthMode","linkify":"Method extraSumWidthMode","nodes":[{"content":"Method extraSumWidthMode","pos":[0,24]}]},{"pos":[847154,847164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847166,847171]},{"pos":[847180,847192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847198,847221],"content":"Method extraSumWidthStr","linkify":"Method extraSumWidthStr","nodes":[{"content":"Method extraSumWidthStr","pos":[0,23]}]},{"pos":[847274,847284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847286,847291]},{"pos":[847300,847312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847318,847342],"content":"Method extraSumWidthUnit","linkify":"Method extraSumWidthUnit","nodes":[{"content":"Method extraSumWidthUnit","pos":[0,24]}]},{"pos":[847400,847410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847412,847417]},{"pos":[847426,847438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847444,847469],"content":"Method extraSumWidthValue","linkify":"Method extraSumWidthValue","nodes":[{"content":"Method extraSumWidthValue","pos":[0,25]}]},{"pos":[847526,847536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847538,847543]},{"pos":[847552,847564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847570,847581],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[847583,847640]},{"pos":[847681,847691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[847693,847698]},{"pos":[847707,847719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[847721,847776]},{"pos":[847782,847804],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[847845,847857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847863,847891],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[847938,847950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[847956,847985],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[848033,848045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848051,848080],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[848128,848140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848146,848174],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[848221,848233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848239,848268],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[848316,848328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848334,848355],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[848395,848407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848413,848440],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[848486,848498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848504,848532],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[848579,848591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848597,848625],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[848672,848684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848690,848717],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[848763,848775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848781,848809],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[848856,848868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[848874,848889],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[848891,848948]},{"pos":[848993,849003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[849005,849010]},{"pos":[849019,849031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[849033,849066]},{"pos":[849072,849094],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[849096,849147]},{"pos":[849199,849209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[849211,849216]},{"pos":[849225,849237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[849239,849283]},{"pos":[849290,849297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[849299,849367]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[849373,849443]},{"content":"The second byte contains a value for green.","pos":[849448,849491]},{"content":"The third byte contains a value for blue.","pos":[849496,849537]},{"content":"The high-order byte must be zero.","pos":[849542,849575]},{"content":"The maximum value for a single byte is 255.","pos":[849580,849623]},{"pos":[849629,849645],"content":"Method formatMST","linkify":"Method formatMST","nodes":[{"content":"Method formatMST","pos":[0,16]}]},{"pos":[849691,849701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[849703,849708]},{"pos":[849717,849729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[849735,849753],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[849812,849822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[849824,849840]},{"pos":[849849,849861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[849867,849895],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[849964,849974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[849976,849992]},{"pos":[850001,850013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[850019,850036],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[850038,850100]},{"pos":[850147,850157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[850159,850164]},{"pos":[850173,850185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[850187,850208]},{"pos":[850215,850222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[850224,850278]},{"content":"Mode.","pos":[850282,850287]},{"content":"Height Calculation.","pos":[850299,850318]},{"content":"Exact.","pos":[850504,850510]},{"content":"The exact height in pixels of the controls is used.","pos":[850521,850572]},{"content":"Auto.","pos":[850615,850620]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[850632,850721]},{"content":"Column height.","pos":[850726,850740]},{"content":"The layout of the form determines the height of the control.","pos":[850743,850803]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[850836,850921]},{"pos":[850927,850964],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[851030,851040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[851042,851048]},{"pos":[851057,851069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[851075,851091],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[851137,851147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[851149,851154]},{"pos":[851163,851175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[851181,851198],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[851249,851259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[851261,851266]},{"pos":[851275,851287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[851293,851311],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[851313,851352]},{"pos":[851402,851412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[851414,851419]},{"pos":[851428,851440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[851442,851463]},{"pos":[851470,851477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[851479,851569]},{"pos":[851575,851588],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[851639,851649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[851651,851656]},{"pos":[851665,851677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[851683,851695],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[851697,851734]},{"pos":[851776,851786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[851788,851793]},{"pos":[851802,851814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[851816,851854]},{"pos":[851861,851868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[851870,852002]},{"pos":[852008,852024],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[852070,852080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852082,852087]},{"pos":[852096,852108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852114,852138],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[852192,852202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852204,852209]},{"pos":[852218,852230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852236,852256],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[852306,852316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852318,852323]},{"pos":[852332,852344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852350,852366],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[852412,852422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852424,852429]},{"pos":[852438,852450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852456,852476],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[852526,852536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852538,852543]},{"pos":[852552,852564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852570,852588],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[852644,852654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852656,852661]},{"pos":[852670,852682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852688,852709],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[852770,852780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852782,852787]},{"pos":[852796,852808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852814,852839],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[852914,852924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[852926,852931]},{"pos":[852940,852952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[852958,852978],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[853028,853038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853040,853045]},{"pos":[853054,853066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853072,853093],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[853144,853154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853156,853161]},{"pos":[853170,853182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853188,853209],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[853268,853278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853280,853285]},{"pos":[853294,853306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853312,853333],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[853384,853394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853396,853401]},{"pos":[853410,853422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853428,853448],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[853498,853508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853510,853515]},{"pos":[853524,853536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853542,853563],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[853618,853628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853630,853635]},{"pos":[853644,853656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853662,853684],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[853738,853748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[853750,853755]},{"pos":[853764,853776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853782,853798],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[853853,853863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[853865,853879]},{"pos":[853888,853900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[853906,853932],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[853997,854007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[854009,854023]},{"pos":[854032,854044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854050,854074],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[854117,854129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854135,854156],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[854207,854217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854219,854224]},{"pos":[854233,854245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854251,854271],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[854321,854331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854333,854338]},{"pos":[854347,854359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854365,854386],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[854441,854451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854453,854458]},{"pos":[854467,854479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854485,854507],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[854561,854571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854573,854578]},{"pos":[854587,854599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854605,854620],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[854665,854675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854677,854682]},{"pos":[854691,854703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854709,854723],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[854767,854777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854779,854784]},{"pos":[854793,854805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854811,854826],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[854875,854885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854887,854892]},{"pos":[854901,854913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[854919,854935],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[854983,854993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[854995,855000]},{"pos":[855009,855021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855027,855043],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[855099,855109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855111,855116]},{"pos":[855125,855137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855143,855159],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[855215,855225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855227,855232]},{"pos":[855241,855253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855259,855274],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[855276,855351]},{"pos":[855406,855416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855418,855423]},{"pos":[855432,855444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[855446,855495]},{"pos":[855501,855517],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[855573,855583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855585,855590]},{"pos":[855599,855611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855617,855637],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[855687,855697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855699,855704]},{"pos":[855713,855725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855731,855750],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[855799,855809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855811,855816]},{"pos":[855825,855837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855843,855862],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[855929,855939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[855941,855946]},{"pos":[855955,855967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[855973,855995],"content":"Method minNoOfDecimals","linkify":"Method minNoOfDecimals","nodes":[{"content":"Method minNoOfDecimals","pos":[0,22]}]},{"pos":[856064,856074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[856076,856081]},{"content":"mode","pos":[856095,856099]},{"pos":[856108,856120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[856126,856152],"content":"Method minNoOfDecimalsMode","linkify":"Method minNoOfDecimalsMode","nodes":[{"content":"Method minNoOfDecimalsMode","pos":[0,26]}]},{"pos":[856217,856227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[856229,856233]},{"pos":[856242,856254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[856260,856287],"content":"Method minNoOfDecimalsValue","linkify":"Method minNoOfDecimalsValue","nodes":[{"content":"Method minNoOfDecimalsValue","pos":[0,27]}]},{"pos":[856344,856354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[856356,856361]},{"pos":[856370,856382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[856388,856409],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[856460,856470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[856472,856477]},{"pos":[856486,856498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[856504,856515],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name used in code to identify a form, report, rable, query, or another Finance and Operations application object.","pos":[856517,856647]},{"pos":[856688,856698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[856700,856705]},{"pos":[856714,856726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name used in code to identify an application object.","pos":[856728,856784]},{"pos":[856791,856798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[856800,856894]},{"content":"Begins with a letter.","pos":[856900,856921]},{"content":"Doesn't exceed 250 characters.","pos":[856926,856956]},{"content":"Can include numbers and underscore characters.","pos":[856961,857007]},{"content":"Cannot include punctuation or spaces.","pos":[857012,857049]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[857054,857172]},{"pos":[857178,857197],"content":"Method noOfDecimals","linkify":"Method noOfDecimals","nodes":[{"content":"Method noOfDecimals","pos":[0,19]}]},{"pos":[857263,857273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[857275,857280]},{"content":"mode","pos":[857294,857298]},{"pos":[857307,857319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857325,857348],"content":"Method noOfDecimalsMode","linkify":"Method noOfDecimalsMode","nodes":[{"content":"Method noOfDecimalsMode","pos":[0,23]}]},{"pos":[857410,857420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[857422,857426]},{"pos":[857435,857447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857453,857477],"content":"Method noOfDecimalsValue","linkify":"Method noOfDecimalsValue","nodes":[{"content":"Method noOfDecimalsValue","pos":[0,24]}]},{"pos":[857531,857541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[857543,857548]},{"pos":[857557,857569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857575,857595],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[857649,857659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[857661,857672]},{"pos":[857681,857693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857699,857714],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[857759,857769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[857771,857776]},{"pos":[857785,857797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857803,857821],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[857868,857878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[857880,857886]},{"pos":[857895,857907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[857913,857945],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[858006,858016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[858018,858024]},{"pos":[858033,858045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858051,858068],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[858104,858116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858122,858149],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[858195,858207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858213,858239],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[858284,858296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858302,858324],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[858376,858386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858388,858393]},{"pos":[858402,858414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858420,858441],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[858492,858502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858504,858509]},{"pos":[858518,858530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858536,858558],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[858614,858624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858626,858631]},{"pos":[858640,858652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858658,858681],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[858736,858746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858748,858753]},{"pos":[858762,858774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858780,858797],"content":"Method rotateSign","linkify":"Method rotateSign","nodes":[{"content":"Method rotateSign","pos":[0,17]}]},{"pos":[858844,858854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858856,858861]},{"pos":[858870,858882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[858888,858906],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[858974,858984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[858986,858991]},{"pos":[859000,859012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859018,859041],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[859104,859114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[859116,859121]},{"content":"string","pos":[859135,859141]},{"pos":[859150,859162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859168,859184],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[859238,859248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859250,859255]},{"pos":[859264,859276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859282,859297],"content":"Method showZero","linkify":"Method showZero","nodes":[{"content":"Method showZero","pos":[0,15]}]},{"pos":[859342,859352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859354,859359]},{"pos":[859368,859380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859386,859404],"content":"Method signDisplay","linkify":"Method signDisplay","nodes":[{"content":"Method signDisplay","pos":[0,18]}]},{"pos":[859452,859462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859464,859469]},{"pos":[859478,859490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859496,859510],"content":"Method sumType","linkify":"Method sumType","nodes":[{"content":"Method sumType","pos":[0,14]}]},{"pos":[859554,859564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859566,859571]},{"pos":[859580,859592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859598,859610],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[859612,859665]},{"pos":[859715,859725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859727,859732]},{"pos":[859741,859753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[859755,859816]},{"pos":[859822,859838],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[859904,859914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[859916,859921]},{"pos":[859930,859942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[859948,859972],"content":"Method thousandSeparator","linkify":"Method thousandSeparator","nodes":[{"content":"Method thousandSeparator","pos":[0,24]}]},{"pos":[860026,860036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860038,860043]},{"pos":[860052,860064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860070,860085],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[860138,860148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[860150,860163]},{"pos":[860172,860184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860190,860215],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[860278,860288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[860290,860303]},{"pos":[860312,860324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860330,860354],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[860397,860409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860415,860435],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[860485,860495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860497,860502]},{"pos":[860511,860523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860529,860548],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[860597,860607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860609,860614]},{"pos":[860623,860635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860641,860661],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[860715,860725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860727,860732]},{"pos":[860741,860753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860759,860780],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[860833,860843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860845,860850]},{"pos":[860859,860871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860877,860891],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[860935,860945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[860947,860952]},{"pos":[860961,860973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[860979,860992],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[861035,861045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861047,861052]},{"pos":[861061,861073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861079,861093],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[861141,861151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861153,861158]},{"pos":[861167,861179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861185,861200],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[861247,861257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861259,861264]},{"pos":[861273,861285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861291,861307],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[861361,861371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861373,861378]},{"pos":[861387,861399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861405,861419],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[861471,861481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861483,861488]},{"pos":[861497,861509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861515,861537],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[861589,861599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861601,861606]},{"pos":[861615,861627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861633,861655],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[861731,861741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861743,861748]},{"pos":[861757,861769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861775,861791],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[861837,861847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[861849,861854]},{"pos":[861863,861875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[861881,861898],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[861955,861965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[861967,861982]},{"pos":[861991,862003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[862009,862036],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[862103,862113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[862115,862130]},{"pos":[862139,862151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[862157,862173],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[862175,862237]},{"pos":[862283,862293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[862295,862300]},{"pos":[862309,862321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[862323,862384]},{"pos":[862391,862398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[862400,862453]},{"content":"Mode.","pos":[862457,862462]},{"content":"Width Calculation.","pos":[862473,862491]},{"content":"Exact.","pos":[862675,862681]},{"content":"The exact width in pixels of the controls is used.","pos":[862691,862741]},{"content":"Auto.","pos":[862784,862789]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[862800,862888]},{"content":"Column width.","pos":[862893,862906]},{"content":"The layout of the form determines the width of the control.","pos":[862909,862968]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[863001,863084]},{"pos":[863090,863115],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[863169,863179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[863181,863187]},{"pos":[863196,863208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[863214,863229],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[863274,863284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[863286,863291]},{"pos":[863300,863312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[863318,863334],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[863384,863394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[863396,863401]},{"pos":[863410,863422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[863428,863445],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[863447,863485]},{"pos":[863534,863544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[863546,863551]},{"pos":[863560,863572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[863574,863609]},{"pos":[863616,863623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[863625,863698]},{"pos":[863704,863714],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[863766,863776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[863778,863783]},{"content":"unit","pos":[863797,863801]},{"pos":[863809,863825],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[863883,863893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[863895,863900]},{"content":"unit","pos":[863914,863918]},{"pos":[863926,863945],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[864006,864016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[864018,864023]},{"content":"unit","pos":[864037,864041]},{"pos":[864049,864067],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[864127,864137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[864139,864144]},{"content":"unit","pos":[864158,864162]},{"pos":[864170,864187],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[864246,864256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[864258,864263]},{"content":"unit","pos":[864277,864281]},{"pos":[864289,864300],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[864330,864341],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[864394,864404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[864406,864411]},{"content":"unit","pos":[864425,864429]},{"pos":[864437,864449],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[864451,864489]},{"pos":[864543,864553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[864555,864560]},{"content":"unit","pos":[864574,864578]},{"pos":[864587,864594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[864596,864702]},{"content":"Mode.","pos":[864706,864711]},{"content":"Width calculation.","pos":[864724,864742]},{"content":"-1 Exact.","pos":[864928,864937]},{"content":"The exact width in pixels of the controls is used.","pos":[864946,864996]},{"content":"0 Auto.","pos":[865039,865046]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[865057,865145]},{"content":"1 Column width.","pos":[865150,865165]},{"content":"The layout of the form determines the width of the control.","pos":[865168,865227]},{"content":"The width and width calculation mode can be set separately.","pos":[865260,865319]},{"pos":[865325,865345],"content":"Method extraSumWidth","linkify":"Method extraSumWidth","nodes":[{"content":"Method extraSumWidth","pos":[0,20]}]},{"pos":[865407,865417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[865419,865424]},{"content":"unit","pos":[865438,865442]},{"pos":[865450,865467],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[865526,865536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[865538,865543]},{"content":"unit","pos":[865557,865561]},{"pos":[865569,865580],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[865610,865623],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[865625,865664]},{"pos":[865719,865729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[865731,865736]},{"content":"unit","pos":[865750,865754]},{"pos":[865763,865770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[865772,865879]},{"content":"Mode.","pos":[865883,865888]},{"content":"Height calculation.","pos":[865902,865921]},{"content":"-1 Exact.","pos":[866109,866118]},{"content":"The exact height in pixels of the controls is used.","pos":[866128,866179]},{"content":"0 Auto.","pos":[866222,866229]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[866241,866330]},{"content":"1 Column height.","pos":[866335,866351]},{"content":"The layout of the form determines the height of the control.","pos":[866354,866414]},{"content":"The height and height calculation mode can be set separately.","pos":[866447,866508]},{"pos":[866513,866536],"content":"Class ReportTextControl","linkify":"Class ReportTextControl","nodes":[{"content":"Class ReportTextControl","pos":[0,23]}]},{"content":"The ReportTextControl class lets you create, read, update, and delete X++ code and metadata.","pos":[866588,866680]},{"pos":[866686,866693],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[866695,866805]},{"pos":[866811,866819],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[866825,866832],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[866836,866842]},{"content":"Description","pos":[866911,866922]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[867270,867305],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[867487,867536],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[867562,867660]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[867704,867745],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[867779,867828]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[867921,867956],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[867996,868057]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[868138,868168],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[868213,868288]},{"content":"public int bottomMarginAndFrame()","pos":[868355,868388]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[868572,868614],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[868789,868830],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[869006,869052],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[869223,869268],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[869440,869476],"source":"public int changeCase(\\[int value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[869657,869698],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[869874,869912],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[869949,869992]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[870091,870128],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[870166,870211]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[870308,870380],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[870383,870450]},{"content":"public ReportFieldType controlType()","pos":[870525,870561]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[870742,870776],"source":"public str cssClass(\\[str value\\])"},{"content":"public int delete()","pos":[870959,870978]},{"content":"public str effectiveFont()","pos":[871176,871202]},{"content":"public str eval()","pos":[871393,871410]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[871610,871674],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[871827,871857],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[871902,871959]},{"content":"public str fontInfoPrinter()","pos":[872044,872072]},{"content":"public int fontInfoPrinterAscent()","pos":[872261,872295]},{"content":"public int fontInfoPrinterDescent()","pos":[872478,872513]},{"content":"public int fontInfoPrinterExtLead()","pos":[872695,872730]},{"content":"public int fontInfoPrinterHeight()","pos":[872912,872946]},{"content":"public int fontInfoPrinterIntLead()","pos":[873129,873164]},{"content":"public str fontInfoScreen()","pos":[873346,873373]},{"content":"public int fontInfoScreenAscent()","pos":[873563,873596]},{"content":"public int fontInfoScreenDescent()","pos":[873780,873814]},{"content":"public int fontInfoScreenExtLead()","pos":[873997,874031]},{"content":"public int fontInfoScreenHeight()","pos":[874214,874247]},{"content":"public int fontInfoScreenIntLead()","pos":[874431,874465]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[874648,874682],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[874723,874780]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[874865,874906],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[874940,874991]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[875082,875130],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[875299,875357],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[875516,875552],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[875591,875653]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[875733,875786]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[875950,875985],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[876167,876207],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[876384,876423],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[876459,876498]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[876601,876641],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[876818,876849],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[876893,876930]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[877035,877070],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[877252,877295],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[877469,877508],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[877686,877721],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[877903,877942],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[878120,878165],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[878337,878387],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[878554,878618],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[878771,878810],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[878988,879028],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[879205,879253],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[879422,879462],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[879639,879678],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[879856,879900],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[880073,880116],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[880290,880334],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[880507,880561],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[880724,880754]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[880941,880981],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[881158,881197],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[881375,881419],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[881592,881635],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[881809,881843],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[882026,882059],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[882243,882281],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[882460,882497],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[882677,882722],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[882894,882939],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[883111,883155],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[883186,883261]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[883328,883373],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[883545,883584],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[883762,883800],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[883979,884035],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[884196,884236],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[884413,884443],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[884488,884626]},{"content":"public int numberOfLines(int height100mm)","pos":[884631,884672]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[884848,884882],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[885065,885099]},{"content":"public int previewXCompensation100mm(str string)","pos":[885282,885330]},{"content":"public int right100mm()","pos":[885499,885522]},{"content":"public int right100mmInclBorder()","pos":[885716,885749]},{"content":"public int rightMarginAndFrame()","pos":[885933,885965]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[886150,886191],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[886367,886407],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[886584,886629],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[886801,886845],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[887018,887075],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[887235,887285]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[887452,887495],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[887669,887699],"source":"public str text(\\[str value\\])"},{"content":"public int textExtentX100mm()","pos":[887886,887915]},{"content":"public int textExtentY100mm()","pos":[888103,888132]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[888320,888375],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[888537,888579],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[888754,888806],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[888971,889001]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[889188,889227],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[889405,889443],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[889622,889665],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[889839,889881],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[890056,890089],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[890273,890305],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[890490,890527],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[890707,890743],"source":"public Real topValue(\\[Real value\\])"},{"content":"public int typeHeaderPrompt(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[890924,890966],"source":"public int typeHeaderPrompt(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[891141,891184],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[891358,891399],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[891575,891616],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[891792,891857],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[892009,892044],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[892226,892272],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[892443,892499],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[892660,892695],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[892735,892797]},{"content":"public int widthOfString100mm(str string)","pos":[892877,892918]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[893094,893128],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[893311,893350],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[893528,893566],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[893603,893641]},{"content":"public void show()","pos":[893745,893763]},{"content":"public void topMargin(Real value, Units unit)","pos":[893962,894007]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[894179,894227]},{"content":"public void labelWidth(Real value, Units unit)","pos":[894396,894442]},{"content":"public void top(Real value, Units unit)","pos":[894613,894652]},{"content":"public void width(Real value, Units unit)","pos":[894830,894871]},{"content":"Gets or sets the width of the control.","pos":[894905,894943]},{"content":"public void leftMargin(Real value, Units unit)","pos":[895047,895093]},{"content":"public void height(Real value, Units unit)","pos":[895264,895306]},{"content":"Gets or sets the height of the control.","pos":[895339,895378]},{"content":"public void rightMargin(Real value, Units unit)","pos":[895481,895528]},{"content":"public void left(Real value, Units unit)","pos":[895698,895738]},{"content":"public void hide()","pos":[895915,895933]},{"pos":[896135,896151],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[896197,896207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[896209,896214]},{"pos":[896223,896235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[896241,896263],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[896265,896363]},{"pos":[896423,896433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[896435,896440]},{"pos":[896449,896461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[896463,896542]},{"pos":[896549,896556],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[896558,896595]},{"pos":[896601,896623],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[896625,896674]},{"pos":[896726,896736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[896738,896743]},{"pos":[896752,896764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[896766,896810]},{"pos":[896817,896824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[896826,896894]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[896900,896970]},{"content":"The second byte contains a value for green.","pos":[896975,897018]},{"content":"The third byte contains a value for blue.","pos":[897023,897064]},{"content":"The high-order byte must be zero.","pos":[897069,897102]},{"content":"The maximum value for a single byte is 255.","pos":[897107,897150]},{"pos":[897156,897172],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[897174,897235]},{"pos":[897281,897291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[897293,897298]},{"pos":[897307,897319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[897321,897382]},{"pos":[897388,897399],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[897401,897476]},{"pos":[897517,897527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[897529,897534]},{"pos":[897543,897555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[897557,897607]},{"pos":[897614,897621],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[897623,897695]},{"content":"0 Use the default font weight.","pos":[897701,897731]},{"content":"1 Thin.","pos":[897736,897743]},{"content":"2 Extra-light.","pos":[897748,897762]},{"content":"3 Light.","pos":[897767,897775]},{"content":"4 Normal.","pos":[897780,897789]},{"content":"5 Medium.","pos":[897794,897803]},{"content":"6 Semibold.","pos":[897808,897819]},{"content":"7 Bold.","pos":[897824,897831]},{"content":"8 Extra-bold.","pos":[897836,897849]},{"content":"9 Heavy.","pos":[897854,897862]},{"pos":[897868,897895],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[897941,897953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[897959,897982],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[898035,898045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898047,898052]},{"pos":[898061,898073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898079,898101],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[898153,898163],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898165,898170]},{"pos":[898179,898191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898197,898220],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[898277,898287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898289,898294]},{"pos":[898303,898315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898321,898345],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[898401,898411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898413,898418]},{"pos":[898427,898439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898445,898462],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[898509,898519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898521,898526]},{"pos":[898535,898547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898553,898575],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[898627,898637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898639,898644]},{"pos":[898653,898665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[898671,898690],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[898692,898735]},{"pos":[898784,898794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[898796,898801]},{"pos":[898810,898822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[898824,898886]},{"pos":[898893,898900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Integer values that are retrieved indicate the character set according to the following table:","pos":[898902,899000]},{"content":"Value.","pos":[899004,899010]},{"content":"Description.","pos":[899013,899025]},{"content":"0","pos":[899072,899073]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899081,899094],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[899106,899107]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899115,899131],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[899140,899141]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899149,899164],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[899174,899176]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899183,899195],"source":"MAC\\_CHARSET"},{"content":"128","pos":[899208,899211]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899217,899234],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[899242,899245]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899251,899266],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[899276,899279]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899285,899300],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[899310,899313]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899319,899339],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[899344,899347]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899353,899367],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[899378,899381]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899387,899403],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[899412,899415]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899421,899440],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[899446,899449]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899455,899470],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[899480,899483]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899489,899505],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[899514,899517]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899523,899542],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[899548,899551]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899557,899569],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[899581,899669]},{"content":"Value.","pos":[899673,899679]},{"content":"Description.","pos":[899682,899694]},{"content":"130","pos":[899729,899732]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899738,899752],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[899756,899842]},{"content":"Value.","pos":[899846,899852]},{"content":"Description.","pos":[899855,899867]},{"content":"177","pos":[899904,899907]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899913,899928],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[899933,899936]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[899942,899957],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[899961,900038]},{"content":"Value.","pos":[900042,900048]},{"content":"Description.","pos":[900051,900063]},{"content":"222","pos":[900096,900099]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[900105,900118],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[900122,900209]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[900210,900416],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[900422,900440],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[900442,900487]},{"pos":[900535,900545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[900547,900552]},{"pos":[900561,900573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[900575,900618]},{"pos":[900625,900632],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[900634,900695]},{"content":"Value.","pos":[900699,900705]},{"content":"Style.","pos":[900708,900714]},{"content":"0","pos":[900771,900772]},{"content":"Default.","pos":[900780,900788]},{"content":"1","pos":[900807,900808]},{"content":"The Windows palette.","pos":[900816,900836]},{"content":"2","pos":[900843,900844]},{"content":"The true-color scheme.","pos":[900852,900874]},{"pos":[900882,900905],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[900907,900974]},{"pos":[901057,901067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[901069,901074]},{"pos":[901083,901095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[901097,901169]},{"pos":[901176,901183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[901185,901266]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[901267,901360]},{"pos":[901366,901384],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[901433,901445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901451,901466],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[901511,901521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[901523,901528]},{"pos":[901537,901549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901555,901568],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[901600,901612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901618,901638],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[901677,901689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901695,901706],"content":"Method eval","linkify":"Method eval","nodes":[{"content":"Method eval","pos":[0,11]}]},{"pos":[901736,901748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901754,901777],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[901852,901862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[901864,901869]},{"pos":[901878,901890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[901896,901907],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[901909,901966]},{"pos":[902007,902017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[902019,902024]},{"pos":[902033,902045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[902047,902102]},{"pos":[902108,902130],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[902171,902183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902189,902217],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[902264,902276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902282,902311],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[902359,902371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902377,902406],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[902454,902466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902472,902500],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[902547,902559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902565,902594],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[902642,902654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902660,902681],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[902721,902733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902739,902766],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[902812,902824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902830,902858],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[902905,902917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[902923,902951],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[902998,903010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[903016,903043],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[903089,903101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[903107,903135],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[903182,903194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[903200,903215],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[903217,903274]},{"pos":[903319,903329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[903331,903336]},{"pos":[903345,903357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[903359,903392]},{"pos":[903398,903420],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[903422,903473]},{"pos":[903525,903535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[903537,903542]},{"pos":[903551,903563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[903565,903609]},{"pos":[903616,903623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[903625,903693]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[903699,903769]},{"content":"The second byte contains a value for green.","pos":[903774,903817]},{"content":"The third byte contains a value for blue.","pos":[903822,903863]},{"content":"The high-order byte must be zero.","pos":[903868,903901]},{"content":"The maximum value for a single byte is 255.","pos":[903906,903949]},{"pos":[903955,903973],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[904032,904042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[904044,904060]},{"pos":[904069,904081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[904087,904115],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[904184,904194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[904196,904212]},{"pos":[904221,904233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[904239,904256],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[904258,904320]},{"pos":[904367,904377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[904379,904384]},{"pos":[904393,904405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[904407,904428]},{"pos":[904435,904442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[904444,904498]},{"content":"Mode.","pos":[904502,904507]},{"content":"Height Calculation.","pos":[904519,904538]},{"content":"Exact.","pos":[904724,904730]},{"content":"The exact height in pixels of the controls is used.","pos":[904741,904792]},{"content":"Auto.","pos":[904835,904840]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[904852,904941]},{"content":"Column height.","pos":[904946,904960]},{"content":"The layout of the form determines the height of the control.","pos":[904963,905023]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[905056,905141]},{"pos":[905147,905184],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[905250,905260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[905262,905268]},{"pos":[905277,905289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[905295,905311],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[905357,905367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[905369,905374]},{"pos":[905383,905395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[905401,905418],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[905469,905479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[905481,905486]},{"pos":[905495,905507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[905513,905531],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[905533,905572]},{"pos":[905622,905632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[905634,905639]},{"pos":[905648,905660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[905662,905683]},{"pos":[905690,905697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[905699,905789]},{"pos":[905795,905808],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[905859,905869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[905871,905876]},{"pos":[905885,905897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[905903,905915],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[905917,905954]},{"pos":[905996,906006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906008,906013]},{"pos":[906022,906034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[906036,906074]},{"pos":[906081,906088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[906090,906222]},{"pos":[906228,906244],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[906290,906300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906302,906307]},{"pos":[906316,906328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906334,906358],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[906412,906422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906424,906429]},{"pos":[906438,906450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906456,906476],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[906526,906536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906538,906543]},{"pos":[906552,906564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906570,906586],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[906632,906642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906644,906649]},{"pos":[906658,906670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906676,906696],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[906746,906756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906758,906763]},{"pos":[906772,906784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906790,906808],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[906864,906874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[906876,906881]},{"pos":[906890,906902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[906908,906929],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[906990,907000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907002,907007]},{"pos":[907016,907028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907034,907059],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[907134,907144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907146,907151]},{"pos":[907160,907172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907178,907198],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[907248,907258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907260,907265]},{"pos":[907274,907286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907292,907313],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[907364,907374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907376,907381]},{"pos":[907390,907402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907408,907429],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[907488,907498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907500,907505]},{"pos":[907514,907526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907532,907553],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[907604,907614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907616,907621]},{"pos":[907630,907642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907648,907668],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[907718,907728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907730,907735]},{"pos":[907744,907756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907762,907783],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[907838,907848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907850,907855]},{"pos":[907864,907876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[907882,907904],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[907958,907968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[907970,907975]},{"pos":[907984,907996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908002,908018],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[908073,908083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[908085,908099]},{"pos":[908108,908120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908126,908152],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[908217,908227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[908229,908243]},{"pos":[908252,908264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908270,908294],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[908337,908349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908355,908376],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[908427,908437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908439,908444]},{"pos":[908453,908465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908471,908491],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[908541,908551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908553,908558]},{"pos":[908567,908579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908585,908606],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[908661,908671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908673,908678]},{"pos":[908687,908699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908705,908727],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[908781,908791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908793,908798]},{"pos":[908807,908819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908825,908840],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[908885,908895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908897,908902]},{"pos":[908911,908923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[908929,908943],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[908987,908997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[908999,909004]},{"pos":[909013,909025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909031,909046],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[909095,909105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909107,909112]},{"pos":[909121,909133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909139,909155],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[909203,909213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909215,909220]},{"pos":[909229,909241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909247,909263],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[909319,909329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909331,909336]},{"pos":[909345,909357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909363,909379],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[909435,909445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909447,909452]},{"pos":[909461,909473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909479,909494],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[909496,909571]},{"pos":[909626,909636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909638,909643]},{"pos":[909652,909664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[909666,909715]},{"pos":[909721,909737],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[909793,909803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909805,909810]},{"pos":[909819,909831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909837,909857],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[909907,909917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[909919,909924]},{"pos":[909933,909945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[909951,909970],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[910019,910029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[910031,910036]},{"pos":[910045,910057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[910063,910082],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[910149,910159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[910161,910166]},{"pos":[910175,910187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[910193,910214],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[910265,910275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[910277,910282]},{"pos":[910291,910303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[910309,910320],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[910322,910460]},{"pos":[910501,910511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[910513,910518]},{"pos":[910527,910539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[910541,910605]},{"pos":[910612,910619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[910621,910715]},{"content":"Begins with a letter.","pos":[910721,910742]},{"content":"Doesn't exceed 250 characters.","pos":[910747,910777]},{"content":"Can include numbers and underscore characters.","pos":[910782,910828]},{"content":"Cannot include punctuation or spaces.","pos":[910833,910870]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[910875,910993]},{"pos":[910999,911019],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[911073,911083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[911085,911096]},{"pos":[911105,911117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911123,911138],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[911183,911193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[911195,911200]},{"pos":[911209,911221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911227,911245],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[911292,911302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[911304,911310]},{"pos":[911319,911331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911337,911369],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[911430,911440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[911442,911448]},{"pos":[911457,911469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911475,911492],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[911528,911540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911546,911573],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[911619,911631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911637,911663],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[911708,911720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911726,911748],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[911800,911810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[911812,911817]},{"pos":[911826,911838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911844,911865],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[911916,911926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[911928,911933]},{"pos":[911942,911954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[911960,911982],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[912038,912048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912050,912055]},{"pos":[912064,912076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912082,912105],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[912160,912170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912172,912177]},{"pos":[912186,912198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912204,912222],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[912290,912300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912302,912307]},{"pos":[912316,912328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912334,912357],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[912420,912430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[912432,912437]},{"content":"string","pos":[912451,912457]},{"pos":[912466,912478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912484,912500],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[912554,912564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912566,912571]},{"pos":[912580,912592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912598,912609],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[912650,912660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912662,912667]},{"pos":[912676,912688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912694,912717],"content":"Method textExtentX100mm","linkify":"Method textExtentX100mm","nodes":[{"content":"Method textExtentX100mm","pos":[0,23]}]},{"pos":[912759,912771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912777,912800],"content":"Method textExtentY100mm","linkify":"Method textExtentY100mm","nodes":[{"content":"Method textExtentY100mm","pos":[0,23]}]},{"pos":[912842,912854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912860,912876],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[912942,912952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[912954,912959]},{"pos":[912968,912980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[912986,913001],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[913054,913064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[913066,913079]},{"pos":[913088,913100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913106,913131],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[913194,913204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[913206,913219]},{"pos":[913228,913240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913246,913270],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[913313,913325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913331,913351],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[913401,913411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913413,913418]},{"pos":[913427,913439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913445,913464],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[913513,913523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913525,913530]},{"pos":[913539,913551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913557,913577],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[913631,913641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913643,913648]},{"pos":[913657,913669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913675,913696],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[913749,913759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913761,913766]},{"pos":[913775,913787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913793,913807],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[913851,913861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913863,913868]},{"pos":[913877,913889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913895,913908],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[913951,913961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[913963,913968]},{"pos":[913977,913989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[913995,914009],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[914057,914067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914069,914074]},{"pos":[914083,914095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914101,914116],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[914163,914173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914175,914180]},{"pos":[914189,914201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914207,914230],"content":"Method typeHeaderPrompt","linkify":"Method typeHeaderPrompt","nodes":[{"content":"Method typeHeaderPrompt","pos":[0,23]}]},{"pos":[914283,914293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914295,914300]},{"pos":[914309,914321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914327,914343],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[914397,914407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914409,914414]},{"pos":[914423,914435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914441,914455],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[914507,914517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914519,914524]},{"pos":[914533,914545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914551,914573],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[914625,914635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914637,914642]},{"pos":[914651,914663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914669,914691],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[914767,914777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914779,914784]},{"pos":[914793,914805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914811,914827],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[914873,914883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[914885,914890]},{"pos":[914899,914911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[914917,914934],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[914991,915001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[915003,915018]},{"pos":[915027,915039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[915045,915072],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[915139,915149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[915151,915166]},{"pos":[915175,915187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[915193,915209],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[915211,915273]},{"pos":[915319,915329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[915331,915336]},{"pos":[915345,915357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[915359,915420]},{"pos":[915427,915434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[915436,915489]},{"content":"Mode.","pos":[915493,915498]},{"content":"Width Calculation.","pos":[915509,915527]},{"content":"Exact.","pos":[915711,915717]},{"content":"The exact width in pixels of the controls is used.","pos":[915727,915777]},{"content":"Auto.","pos":[915820,915825]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[915836,915924]},{"content":"Column width.","pos":[915929,915942]},{"content":"The layout of the form determines the width of the control.","pos":[915945,916004]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[916037,916120]},{"pos":[916126,916151],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[916205,916215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[916217,916223]},{"pos":[916232,916244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[916250,916265],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[916310,916320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[916322,916327]},{"pos":[916336,916348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[916354,916370],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[916420,916430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[916432,916437]},{"pos":[916446,916458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[916464,916481],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[916483,916521]},{"pos":[916570,916580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[916582,916587]},{"pos":[916596,916608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[916610,916645]},{"pos":[916652,916659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[916661,916734]},{"pos":[916740,916751],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[916781,916797],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[916855,916865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[916867,916872]},{"content":"unit","pos":[916886,916890]},{"pos":[916898,916917],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[916978,916988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[916990,916995]},{"content":"unit","pos":[917009,917013]},{"pos":[917021,917038],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[917097,917107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[917109,917114]},{"content":"unit","pos":[917128,917132]},{"pos":[917140,917150],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[917202,917212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[917214,917219]},{"content":"unit","pos":[917233,917237]},{"pos":[917245,917257],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[917259,917297]},{"pos":[917351,917361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[917363,917368]},{"content":"unit","pos":[917382,917386]},{"pos":[917395,917402],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[917404,917457]},{"content":"Calculate the width according to the following table:","pos":[917458,917511]},{"content":"Mode.","pos":[917515,917520]},{"content":"Width calculation.","pos":[917533,917551]},{"content":"-1 Exact.","pos":[917737,917746]},{"content":"The exact width in pixels of the controls is used.","pos":[917755,917805]},{"content":"0 Auto.","pos":[917848,917855]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[917866,917954]},{"content":"1 Column width.","pos":[917959,917974]},{"content":"The layout of the form determines the width of the control.","pos":[917977,918036]},{"content":"The width and width calculation mode can be set separately.","pos":[918069,918128]},{"pos":[918134,918151],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[918210,918220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[918222,918227]},{"content":"unit","pos":[918241,918245]},{"pos":[918253,918266],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[918268,918307]},{"pos":[918362,918372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[918374,918379]},{"content":"unit","pos":[918393,918397]},{"pos":[918406,918413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[918415,918468]},{"content":"Calculate the height according to the following table:","pos":[918469,918523]},{"content":"Mode.","pos":[918527,918532]},{"content":"Height calculation.","pos":[918546,918565]},{"content":"-1 Exact.","pos":[918753,918762]},{"content":"The exact height in pixels of the controls is used.","pos":[918772,918823]},{"content":"0 Auto.","pos":[918866,918873]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[918885,918974]},{"content":"1 Column height.","pos":[918979,918995]},{"content":"The layout of the form determines the height of the control.","pos":[918998,919058]},{"content":"The height and height calculation mode can be set separately.","pos":[919091,919152]},{"pos":[919158,919176],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[919236,919246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[919248,919253]},{"content":"unit","pos":[919267,919271]},{"pos":[919279,919290],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[919343,919353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[919355,919360]},{"content":"unit","pos":[919374,919378]},{"pos":[919386,919397],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[919426,919449],"content":"Class ReportTimeControl","linkify":"Class ReportTimeControl","nodes":[{"content":"Class ReportTimeControl","pos":[0,23]}]},{"content":"The ReportTimeControl class lets you create, read, update, and delete X++ code and metadata.","pos":[919501,919593]},{"pos":[919599,919606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[919608,919718]},{"pos":[919724,919732],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[919738,919745],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[919749,919755]},{"content":"Description","pos":[919824,919835]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[920183,920218],"source":"public int alignment(\\[int value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[920400,920436],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[920617,920666],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[920692,920790]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[920834,920875],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[920909,920958]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[921051,921086],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[921126,921188]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[921268,921298],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[921343,921418]},{"content":"public int bottomMarginAndFrame()","pos":[921485,921518]},{"content":"public int bottomMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[921702,921744],"source":"public int bottomMarginMode(\\[int value\\])"},{"content":"public str bottomMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[921919,921960],"source":"public str bottomMarginStr(\\[str value\\])"},{"content":"public Units bottomMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[922136,922182],"source":"public Units bottomMarginUnit(\\[Units value\\])"},{"content":"public Real bottomMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[922353,922398],"source":"public Real bottomMarginValue(\\[Real value\\])"},{"content":"public int changeLabelCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[922570,922611],"source":"public int changeLabelCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[922787,922825],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[922862,922905]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[923004,923041],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[923079,923124]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[923221,923293],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[923296,923363]},{"content":"public ReportFieldType controlType()","pos":[923438,923474]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[923655,923689],"source":"public str cssClass(\\[str value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[923872,923915],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[924089,924125],"source":"public str dataMethod(\\[str value\\])"},{"content":"public int delete()","pos":[924306,924325]},{"content":"public str effectiveFont()","pos":[924523,924549]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[924740,924804],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[924957,924987],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[925032,925089]},{"content":"public str fontInfoPrinter()","pos":[925174,925202]},{"content":"public int fontInfoPrinterAscent()","pos":[925391,925425]},{"content":"public int fontInfoPrinterDescent()","pos":[925608,925643]},{"content":"public int fontInfoPrinterExtLead()","pos":[925825,925860]},{"content":"public int fontInfoPrinterHeight()","pos":[926042,926076]},{"content":"public int fontInfoPrinterIntLead()","pos":[926259,926294]},{"content":"public str fontInfoScreen()","pos":[926476,926503]},{"content":"public int fontInfoScreenAscent()","pos":[926693,926726]},{"content":"public int fontInfoScreenDescent()","pos":[926910,926944]},{"content":"public int fontInfoScreenExtLead()","pos":[927127,927161]},{"content":"public int fontInfoScreenHeight()","pos":[927344,927377]},{"content":"public int fontInfoScreenIntLead()","pos":[927561,927595]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[927778,927812],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[927853,927910]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[927995,928036],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[928070,928121]},{"content":"public int height100mm(<ph id=\"ph1\">\\[</ph>int heightExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[928212,928260],"source":"public int height100mm(\\[int heightExclBorder\\])"},{"content":"public int height100mmInclBorder(<ph id=\"ph1\">\\[</ph>int heightInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[928429,928487],"source":"public int height100mmInclBorder(\\[int heightInclBorder\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[928646,928682],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[928721,928783]},{"content":"public int heightOfWordWrappedString100mm(str string)","pos":[928863,928916]},{"content":"public str heightStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[929080,929115],"source":"public str heightStr(\\[str value\\])"},{"content":"public Units heightUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[929297,929337],"source":"public Units heightUnit(\\[Units value\\])"},{"content":"public Real heightValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[929514,929553],"source":"public Real heightValue(\\[Real value\\])"},{"content":"Gets or sets the height of the control.","pos":[929589,929628]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[929731,929771],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[929948,929979],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[930023,930060]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[930165,930200],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[930382,930425],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelCssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[930599,930638],"source":"public str labelCssClass(\\[str value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[930816,930851],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[931033,931072],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[931250,931295],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public LineType labelLineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[931467,931517],"source":"public LineType labelLineBelow(\\[LineType value\\])"},{"content":"public LineThickness labelLineThickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[931684,931748],"source":"public LineThickness labelLineThickness(\\[LineThickness value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[931901,931940],"source":"public int labelPosition(\\[int value\\])"},{"content":"public int labelTabLeader(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[932118,932158],"source":"public int labelTabLeader(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[932335,932383],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[932552,932592],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public str labelWidthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[932769,932808],"source":"public str labelWidthStr(\\[str value\\])"},{"content":"public Units labelWidthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[932986,933030],"source":"public Units labelWidthUnit(\\[Units value\\])"},{"content":"public Real labelWidthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[933203,933246],"source":"public Real labelWidthValue(\\[Real value\\])"},{"content":"public int left100mm(<ph id=\"ph1\">\\[</ph>int leftExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[933420,933464],"source":"public int left100mm(\\[int leftExclBorder\\])"},{"content":"public int left100mmInclBorder(<ph id=\"ph1\">\\[</ph>int leftInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[933637,933691],"source":"public int left100mmInclBorder(\\[int leftInclBorder\\])"},{"content":"public int leftMarginAnFrame()","pos":[933854,933884]},{"content":"public int leftMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[934071,934111],"source":"public int leftMarginMode(\\[int value\\])"},{"content":"public str leftMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[934288,934327],"source":"public str leftMarginStr(\\[str value\\])"},{"content":"public Units leftMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[934505,934549],"source":"public Units leftMarginUnit(\\[Units value\\])"},{"content":"public Real leftMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[934722,934765],"source":"public Real leftMarginValue(\\[Real value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[934939,934973],"source":"public int leftMode(\\[int value\\])"},{"content":"public str leftStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[935156,935189],"source":"public str leftStr(\\[str value\\])"},{"content":"public Units leftUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[935373,935411],"source":"public Units leftUnit(\\[Units value\\])"},{"content":"public Real leftValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[935590,935627],"source":"public Real leftValue(\\[Real value\\])"},{"content":"public LineType lineAbove(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[935807,935852],"source":"public LineType lineAbove(\\[LineType value\\])"},{"content":"public LineType lineBelow(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[936024,936069],"source":"public LineType lineBelow(\\[LineType value\\])"},{"content":"public LineType lineLeft(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[936241,936285],"source":"public LineType lineLeft(\\[LineType value\\])"},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[936316,936391]},{"content":"public LineType lineRight(<ph id=\"ph1\">\\[</ph>LineType value<ph id=\"ph2\">\\]</ph>)","pos":[936458,936503],"source":"public LineType lineRight(\\[LineType value\\])"},{"content":"public str menuItemLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[936675,936714],"source":"public str menuItemLabel(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[936892,936930],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[937109,937165],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str modelFieldName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[937326,937366],"source":"public str modelFieldName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[937543,937573],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[937618,937756]},{"content":"public int numberOfLines(int height100mm)","pos":[937761,937802]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[937978,938012],"source":"public int position(\\[int value\\])"},{"content":"public str previewInfo(str string)","pos":[938195,938229]},{"content":"public int previewXCompensation100mm(str string)","pos":[938412,938460]},{"content":"public int right100mm()","pos":[938629,938652]},{"content":"public int right100mmInclBorder()","pos":[938846,938879]},{"content":"public int rightMarginAndFrame()","pos":[939063,939095]},{"content":"public int rightMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[939280,939321],"source":"public int rightMarginMode(\\[int value\\])"},{"content":"public str rightMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[939497,939537],"source":"public str rightMarginStr(\\[str value\\])"},{"content":"public Units rightMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[939714,939759],"source":"public Units rightMarginUnit(\\[Units value\\])"},{"content":"public Real rightMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[939931,939975],"source":"public Real rightMarginValue(\\[Real value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[940148,940205],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public str setHeightGetText(int lines, str string)","pos":[940365,940415]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[940582,940625],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[940799,940838],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[940874,940927]},{"content":"public LineThickness thickness(<ph id=\"ph1\">\\[</ph>LineThickness value<ph id=\"ph2\">\\]</ph>)","pos":[941016,941071],"source":"public LineThickness thickness(\\[LineThickness value\\])"},{"content":"public int timeFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[941233,941269],"source":"public int timeFormat(\\[int value\\])"},{"content":"public int timeHours(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[941450,941485],"source":"public int timeHours(\\[int value\\])"},{"content":"public int timeMinute(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[941667,941703],"source":"public int timeMinute(\\[int value\\])"},{"content":"public int timeSeconds(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[941884,941921],"source":"public int timeSeconds(\\[int value\\])"},{"content":"public int timeSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[942101,942140],"source":"public int timeSeparator(\\[int value\\])"},{"content":"public int top100mm(<ph id=\"ph1\">\\[</ph>int topExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[942318,942360],"source":"public int top100mm(\\[int topExclBorder\\])"},{"content":"public int top100mmInclBorder(<ph id=\"ph1\">\\[</ph>int topInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[942535,942587],"source":"public int top100mmInclBorder(\\[int topInclBorder\\])"},{"content":"public int topMarginAndFrame()","pos":[942752,942782]},{"content":"public int topMarginMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[942969,943008],"source":"public int topMarginMode(\\[int value\\])"},{"content":"public str topMarginStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[943186,943224],"source":"public str topMarginStr(\\[str value\\])"},{"content":"public Units topMarginUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[943403,943446],"source":"public Units topMarginUnit(\\[Units value\\])"},{"content":"public Real topMarginValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[943620,943662],"source":"public Real topMarginValue(\\[Real value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[943837,943870],"source":"public int topMode(\\[int value\\])"},{"content":"public str topStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[944054,944086],"source":"public str topStr(\\[str value\\])"},{"content":"public Units topUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[944271,944308],"source":"public Units topUnit(\\[Units value\\])"},{"content":"public Real topValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[944488,944524],"source":"public Real topValue(\\[Real value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[944705,944748],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[944922,944963],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[945139,945180],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public WebMenuItemType webMenuItemType(<ph id=\"ph1\">\\[</ph>WebMenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[945356,945421],"source":"public WebMenuItemType webMenuItemType(\\[WebMenuItemType value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[945573,945608],"source":"public str webTarget(\\[str value\\])"},{"content":"public int width100mm(<ph id=\"ph1\">\\[</ph>int widthExclBorder<ph id=\"ph2\">\\]</ph>)","pos":[945790,945836],"source":"public int width100mm(\\[int widthExclBorder\\])"},{"content":"public int width100mmInclBorder(<ph id=\"ph1\">\\[</ph>int widthInclBorder<ph id=\"ph2\">\\]</ph>)","pos":[946007,946063],"source":"public int width100mmInclBorder(\\[int widthInclBorder\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[946224,946259],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[946299,946361]},{"content":"public int widthOfString100mm(str string)","pos":[946441,946482]},{"content":"public str widthStr(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[946658,946692],"source":"public str widthStr(\\[str value\\])"},{"content":"public Units widthUnit(<ph id=\"ph1\">\\[</ph>Units value<ph id=\"ph2\">\\]</ph>)","pos":[946875,946914],"source":"public Units widthUnit(\\[Units value\\])"},{"content":"public Real widthValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[947092,947130],"source":"public Real widthValue(\\[Real value\\])"},{"content":"Gets or sets the width of the control.","pos":[947167,947205]},{"content":"public void leftMargin(Real value, Units unit)","pos":[947309,947355]},{"content":"public void rightMargin(Real value, Units unit)","pos":[947526,947573]},{"content":"public void bottomMargin(Real value, Units unit)","pos":[947743,947791]},{"content":"public void width(Real value, Units unit)","pos":[947960,948001]},{"content":"Gets or sets the width of the control.","pos":[948035,948073]},{"content":"public void top(Real value, Units unit)","pos":[948177,948216]},{"content":"public void height(Real value, Units unit)","pos":[948394,948436]},{"content":"Gets or sets the height of the control.","pos":[948469,948508]},{"content":"public void labelWidth(Real value, Units unit)","pos":[948611,948657]},{"content":"public void topMargin(Real value, Units unit)","pos":[948828,948873]},{"content":"public void left(Real value, Units unit)","pos":[949045,949085]},{"content":"public void hide()","pos":[949262,949280]},{"content":"public void show()","pos":[949479,949497]},{"pos":[949699,949715],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[949761,949771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[949773,949778]},{"pos":[949787,949799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[949805,949822],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[949869,949879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[949881,949886]},{"pos":[949895,949907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[949913,949935],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[949937,950035]},{"pos":[950095,950105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[950107,950112]},{"pos":[950121,950133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[950135,950214]},{"pos":[950221,950228],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[950230,950267]},{"pos":[950273,950295],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[950297,950346]},{"pos":[950398,950408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[950410,950415]},{"pos":[950424,950436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[950438,950482]},{"pos":[950489,950496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[950498,950566]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[950572,950642]},{"content":"The second byte contains a value for green.","pos":[950647,950690]},{"content":"The third byte contains a value for blue.","pos":[950695,950736]},{"content":"The high-order byte must be zero.","pos":[950741,950774]},{"content":"The maximum value for a single byte is 255.","pos":[950779,950822]},{"pos":[950828,950844],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[950846,950908]},{"pos":[950954,950964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[950966,950971]},{"pos":[950980,950992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[950994,951055]},{"pos":[951061,951072],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[951074,951149]},{"pos":[951190,951200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[951202,951207]},{"pos":[951216,951228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[951230,951280]},{"pos":[951287,951294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[951296,951368]},{"content":"0 Use the default font weight.","pos":[951374,951404]},{"content":"1 Thin.","pos":[951409,951416]},{"content":"2 Extra-light.","pos":[951421,951435]},{"content":"3 Light.","pos":[951440,951448]},{"content":"4 Normal.","pos":[951453,951462]},{"content":"5 Medium.","pos":[951467,951476]},{"content":"6 Semibold.","pos":[951481,951492]},{"content":"7 Bold.","pos":[951497,951504]},{"content":"8 Extra-bold.","pos":[951509,951522]},{"content":"9 Heavy.","pos":[951527,951535]},{"pos":[951541,951568],"content":"Method bottomMarginAndFrame","linkify":"Method bottomMarginAndFrame","nodes":[{"content":"Method bottomMarginAndFrame","pos":[0,27]}]},{"pos":[951614,951626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[951632,951655],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[951708,951718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[951720,951725]},{"pos":[951734,951746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[951752,951774],"content":"Method bottomMarginStr","linkify":"Method bottomMarginStr","nodes":[{"content":"Method bottomMarginStr","pos":[0,22]}]},{"pos":[951826,951836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[951838,951843]},{"pos":[951852,951864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[951870,951893],"content":"Method bottomMarginUnit","linkify":"Method bottomMarginUnit","nodes":[{"content":"Method bottomMarginUnit","pos":[0,23]}]},{"pos":[951950,951960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[951962,951967]},{"pos":[951976,951988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[951994,952018],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[952074,952084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[952086,952091]},{"pos":[952100,952112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[952118,952140],"content":"Method changeLabelCase","linkify":"Method changeLabelCase","nodes":[{"content":"Method changeLabelCase","pos":[0,22]}]},{"pos":[952192,952202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[952204,952209]},{"pos":[952218,952230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[952236,952255],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[952257,952300]},{"pos":[952349,952359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[952361,952366]},{"pos":[952375,952387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[952389,952451]},{"pos":[952458,952465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[952467,952571]},{"content":"Value.","pos":[952575,952581]},{"content":"Description.","pos":[952584,952596]},{"content":"0","pos":[952643,952644]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952652,952665],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[952677,952678]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952686,952702],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[952711,952712]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952720,952735],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[952745,952747]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952754,952766],"source":"MAC\\_CHARSET"},{"content":"128","pos":[952779,952782]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952788,952805],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[952813,952816]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952822,952837],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[952847,952850]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952856,952871],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[952881,952884]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952890,952910],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[952915,952918]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952924,952938],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[952949,952952]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952958,952974],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[952983,952986]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[952992,953011],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[953017,953020]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953026,953041],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[953051,953054]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953060,953076],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[953085,953088]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953094,953113],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[953119,953122]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953128,953140],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[953152,953240]},{"content":"Value.","pos":[953244,953250]},{"content":"Description.","pos":[953253,953265]},{"content":"130","pos":[953300,953303]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953309,953323],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[953327,953413]},{"content":"Value.","pos":[953417,953423]},{"content":"Description.","pos":[953426,953438]},{"content":"177","pos":[953475,953478]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953484,953499],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[953504,953507]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953513,953528],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[953532,953609]},{"content":"Value.","pos":[953613,953619]},{"content":"Description.","pos":[953622,953634]},{"content":"222","pos":[953667,953670]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[953676,953689],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[953693,953777]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[953778,953869],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[953870,953985]},{"pos":[953991,954009],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[954011,954056]},{"pos":[954104,954114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[954116,954121]},{"pos":[954130,954142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[954144,954187]},{"pos":[954194,954201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[954203,954264]},{"content":"Value.","pos":[954268,954274]},{"content":"Style.","pos":[954277,954283]},{"content":"0","pos":[954340,954341]},{"content":"Default.","pos":[954349,954357]},{"content":"1","pos":[954376,954377]},{"content":"The Windows palette.","pos":[954385,954405]},{"content":"2","pos":[954412,954413]},{"content":"The true-color scheme.","pos":[954421,954443]},{"pos":[954451,954474],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[954476,954543]},{"pos":[954626,954636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[954638,954643]},{"pos":[954652,954664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[954666,954738]},{"pos":[954745,954752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[954754,954835]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[954836,954929]},{"pos":[954935,954953],"content":"Method controlType","linkify":"Method controlType","nodes":[{"content":"Method controlType","pos":[0,18]}]},{"pos":[955002,955014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955020,955035],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[955080,955090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[955092,955097]},{"pos":[955106,955118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955124,955140],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[955194,955204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[955206,955211]},{"pos":[955220,955232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955238,955255],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[955302,955312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[955314,955319]},{"pos":[955328,955340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955346,955359],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[955391,955403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955409,955429],"content":"Method effectiveFont","linkify":"Method effectiveFont","nodes":[{"content":"Method effectiveFont","pos":[0,20]}]},{"pos":[955468,955480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955486,955509],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[955584,955594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[955596,955601]},{"pos":[955610,955622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955628,955639],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[955641,955698]},{"pos":[955739,955749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[955751,955756]},{"pos":[955765,955777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[955779,955834]},{"pos":[955840,955862],"content":"Method fontInfoPrinter","linkify":"Method fontInfoPrinter","nodes":[{"content":"Method fontInfoPrinter","pos":[0,22]}]},{"pos":[955903,955915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[955921,955949],"content":"Method fontInfoPrinterAscent","linkify":"Method fontInfoPrinterAscent","nodes":[{"content":"Method fontInfoPrinterAscent","pos":[0,28]}]},{"pos":[955996,956008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956014,956043],"content":"Method fontInfoPrinterDescent","linkify":"Method fontInfoPrinterDescent","nodes":[{"content":"Method fontInfoPrinterDescent","pos":[0,29]}]},{"pos":[956091,956103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956109,956138],"content":"Method fontInfoPrinterExtLead","linkify":"Method fontInfoPrinterExtLead","nodes":[{"content":"Method fontInfoPrinterExtLead","pos":[0,29]}]},{"pos":[956186,956198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956204,956232],"content":"Method fontInfoPrinterHeight","linkify":"Method fontInfoPrinterHeight","nodes":[{"content":"Method fontInfoPrinterHeight","pos":[0,28]}]},{"pos":[956279,956291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956297,956326],"content":"Method fontInfoPrinterIntLead","linkify":"Method fontInfoPrinterIntLead","nodes":[{"content":"Method fontInfoPrinterIntLead","pos":[0,29]}]},{"pos":[956374,956386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956392,956413],"content":"Method fontInfoScreen","linkify":"Method fontInfoScreen","nodes":[{"content":"Method fontInfoScreen","pos":[0,21]}]},{"pos":[956453,956465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956471,956498],"content":"Method fontInfoScreenAscent","linkify":"Method fontInfoScreenAscent","nodes":[{"content":"Method fontInfoScreenAscent","pos":[0,27]}]},{"pos":[956544,956556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956562,956590],"content":"Method fontInfoScreenDescent","linkify":"Method fontInfoScreenDescent","nodes":[{"content":"Method fontInfoScreenDescent","pos":[0,28]}]},{"pos":[956637,956649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956655,956683],"content":"Method fontInfoScreenExtLead","linkify":"Method fontInfoScreenExtLead","nodes":[{"content":"Method fontInfoScreenExtLead","pos":[0,28]}]},{"pos":[956730,956742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956748,956775],"content":"Method fontInfoScreenHeight","linkify":"Method fontInfoScreenHeight","nodes":[{"content":"Method fontInfoScreenHeight","pos":[0,27]}]},{"pos":[956821,956833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956839,956867],"content":"Method fontInfoScreenIntLead","linkify":"Method fontInfoScreenIntLead","nodes":[{"content":"Method fontInfoScreenIntLead","pos":[0,28]}]},{"pos":[956914,956926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[956932,956947],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[956949,957006]},{"pos":[957051,957061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[957063,957068]},{"pos":[957077,957089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[957091,957124]},{"pos":[957130,957152],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[957154,957205]},{"pos":[957257,957267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[957269,957274]},{"pos":[957283,957295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[957297,957341]},{"pos":[957348,957355],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[957357,957425]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[957431,957501]},{"content":"The second byte contains a value for green.","pos":[957506,957549]},{"content":"The third byte contains a value for blue.","pos":[957554,957595]},{"content":"The high-order byte must be zero.","pos":[957600,957633]},{"content":"The maximum value for a single byte is 255.","pos":[957638,957681]},{"pos":[957687,957705],"content":"Method height100mm","linkify":"Method height100mm","nodes":[{"content":"Method height100mm","pos":[0,18]}]},{"pos":[957764,957774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightExclBorder","pos":[957776,957792]},{"pos":[957801,957813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[957819,957847],"content":"Method height100mmInclBorder","linkify":"Method height100mmInclBorder","nodes":[{"content":"Method height100mmInclBorder","pos":[0,28]}]},{"pos":[957916,957926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"heightInclBorder","pos":[957928,957944]},{"pos":[957953,957965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[957971,957988],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[957990,958052]},{"pos":[958099,958109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[958111,958116]},{"pos":[958125,958137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[958139,958160]},{"pos":[958167,958174],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[958176,958230]},{"content":"Mode.","pos":[958234,958239]},{"content":"Height Calculation.","pos":[958251,958270]},{"content":"Exact.","pos":[958456,958462]},{"content":"The exact height in pixels of the controls is used.","pos":[958473,958524]},{"content":"Auto.","pos":[958567,958572]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[958584,958673]},{"content":"Column height.","pos":[958678,958692]},{"content":"The layout of the form determines the height of the control.","pos":[958695,958755]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[958788,958873]},{"pos":[958879,958916],"content":"Method heightOfWordWrappedString100mm","linkify":"Method heightOfWordWrappedString100mm","nodes":[{"content":"Method heightOfWordWrappedString100mm","pos":[0,37]}]},{"pos":[958982,958992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[958994,959000]},{"pos":[959009,959021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[959027,959043],"content":"Method heightStr","linkify":"Method heightStr","nodes":[{"content":"Method heightStr","pos":[0,16]}]},{"pos":[959089,959099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[959101,959106]},{"pos":[959115,959127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[959133,959150],"content":"Method heightUnit","linkify":"Method heightUnit","nodes":[{"content":"Method heightUnit","pos":[0,17]}]},{"pos":[959201,959211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[959213,959218]},{"pos":[959227,959239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[959245,959263],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[959265,959304]},{"pos":[959354,959364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[959366,959371]},{"pos":[959380,959392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[959394,959415]},{"pos":[959422,959429],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[959431,959521]},{"pos":[959527,959540],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[959591,959601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[959603,959608]},{"pos":[959617,959629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[959635,959647],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[959649,959686]},{"pos":[959728,959738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[959740,959745]},{"pos":[959754,959766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[959768,959806]},{"pos":[959813,959820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[959822,959954]},{"pos":[959960,959976],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[960022,960032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960034,960039]},{"pos":[960048,960060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960066,960090],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[960144,960154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960156,960161]},{"pos":[960170,960182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960188,960208],"content":"Method labelCssClass","linkify":"Method labelCssClass","nodes":[{"content":"Method labelCssClass","pos":[0,20]}]},{"pos":[960258,960268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960270,960275]},{"pos":[960284,960296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960302,960318],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[960364,960374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960376,960381]},{"pos":[960390,960402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960408,960428],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[960478,960488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960490,960495]},{"pos":[960504,960516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960522,960540],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[960596,960606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960608,960613]},{"pos":[960622,960634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960640,960661],"content":"Method labelLineBelow","linkify":"Method labelLineBelow","nodes":[{"content":"Method labelLineBelow","pos":[0,21]}]},{"pos":[960722,960732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960734,960739]},{"pos":[960748,960760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960766,960791],"content":"Method labelLineThickness","linkify":"Method labelLineThickness","nodes":[{"content":"Method labelLineThickness","pos":[0,25]}]},{"pos":[960866,960876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960878,960883]},{"pos":[960892,960904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[960910,960930],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[960980,960990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[960992,960997]},{"pos":[961006,961018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961024,961045],"content":"Method labelTabLeader","linkify":"Method labelTabLeader","nodes":[{"content":"Method labelTabLeader","pos":[0,21]}]},{"pos":[961096,961106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961108,961113]},{"pos":[961122,961134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961140,961161],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[961220,961230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961232,961237]},{"pos":[961246,961258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961264,961285],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[961336,961346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961348,961353]},{"pos":[961362,961374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961380,961400],"content":"Method labelWidthStr","linkify":"Method labelWidthStr","nodes":[{"content":"Method labelWidthStr","pos":[0,20]}]},{"pos":[961450,961460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961462,961467]},{"pos":[961476,961488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961494,961515],"content":"Method labelWidthUnit","linkify":"Method labelWidthUnit","nodes":[{"content":"Method labelWidthUnit","pos":[0,21]}]},{"pos":[961570,961580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961582,961587]},{"pos":[961596,961608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961614,961636],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[961690,961700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[961702,961707]},{"pos":[961716,961728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961734,961750],"content":"Method left100mm","linkify":"Method left100mm","nodes":[{"content":"Method left100mm","pos":[0,16]}]},{"pos":[961805,961815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftExclBorder","pos":[961817,961831]},{"pos":[961840,961852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[961858,961884],"content":"Method left100mmInclBorder","linkify":"Method left100mmInclBorder","nodes":[{"content":"Method left100mmInclBorder","pos":[0,26]}]},{"pos":[961949,961959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"leftInclBorder","pos":[961961,961975]},{"pos":[961984,961996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962002,962026],"content":"Method leftMarginAnFrame","linkify":"Method leftMarginAnFrame","nodes":[{"content":"Method leftMarginAnFrame","pos":[0,24]}]},{"pos":[962069,962081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962087,962108],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[962159,962169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962171,962176]},{"pos":[962185,962197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962203,962223],"content":"Method leftMarginStr","linkify":"Method leftMarginStr","nodes":[{"content":"Method leftMarginStr","pos":[0,20]}]},{"pos":[962273,962283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962285,962290]},{"pos":[962299,962311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962317,962338],"content":"Method leftMarginUnit","linkify":"Method leftMarginUnit","nodes":[{"content":"Method leftMarginUnit","pos":[0,21]}]},{"pos":[962393,962403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962405,962410]},{"pos":[962419,962431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962437,962459],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[962513,962523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962525,962530]},{"pos":[962539,962551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962557,962572],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[962617,962627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962629,962634]},{"pos":[962643,962655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962661,962675],"content":"Method leftStr","linkify":"Method leftStr","nodes":[{"content":"Method leftStr","pos":[0,14]}]},{"pos":[962719,962729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962731,962736]},{"pos":[962745,962757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962763,962778],"content":"Method leftUnit","linkify":"Method leftUnit","nodes":[{"content":"Method leftUnit","pos":[0,15]}]},{"pos":[962827,962837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962839,962844]},{"pos":[962853,962865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962871,962887],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[962935,962945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[962947,962952]},{"pos":[962961,962973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[962979,962995],"content":"Method lineAbove","linkify":"Method lineAbove","nodes":[{"content":"Method lineAbove","pos":[0,16]}]},{"pos":[963051,963061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963063,963068]},{"pos":[963077,963089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963095,963111],"content":"Method lineBelow","linkify":"Method lineBelow","nodes":[{"content":"Method lineBelow","pos":[0,16]}]},{"pos":[963167,963177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963179,963184]},{"pos":[963193,963205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963211,963226],"content":"Method lineLeft","linkify":"Method lineLeft","nodes":[{"content":"Method lineLeft","pos":[0,15]}]},{"content":"Gets or sets the type of line that is used as the left border of a section.","pos":[963228,963303]},{"pos":[963358,963368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963370,963375]},{"pos":[963384,963396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of line that is used as the left border.","pos":[963398,963447]},{"pos":[963453,963469],"content":"Method lineRight","linkify":"Method lineRight","nodes":[{"content":"Method lineRight","pos":[0,16]}]},{"pos":[963525,963535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963537,963542]},{"pos":[963551,963563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963569,963589],"content":"Method menuItemLabel","linkify":"Method menuItemLabel","nodes":[{"content":"Method menuItemLabel","pos":[0,20]}]},{"pos":[963639,963649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963651,963656]},{"pos":[963665,963677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963683,963702],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[963751,963761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963763,963768]},{"pos":[963777,963789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963795,963814],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[963881,963891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[963893,963898]},{"pos":[963907,963919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[963925,963946],"content":"Method modelFieldName","linkify":"Method modelFieldName","nodes":[{"content":"Method modelFieldName","pos":[0,21]}]},{"pos":[963997,964007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[964009,964014]},{"pos":[964023,964035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[964041,964052],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[964054,964192]},{"pos":[964233,964243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[964245,964250]},{"pos":[964259,964271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[964273,964337]},{"pos":[964344,964351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[964353,964447]},{"content":"Begins with a letter.","pos":[964453,964474]},{"content":"Doesn't exceed 250 characters.","pos":[964479,964509]},{"content":"Can include numbers and underscore characters.","pos":[964514,964560]},{"content":"Cannot include punctuation or spaces.","pos":[964565,964602]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[964607,964725]},{"pos":[964731,964751],"content":"Method numberOfLines","linkify":"Method numberOfLines","nodes":[{"content":"Method numberOfLines","pos":[0,20]}]},{"pos":[964805,964815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height100mm","pos":[964817,964828]},{"pos":[964837,964849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[964855,964870],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[964915,964925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[964927,964932]},{"pos":[964941,964953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[964959,964977],"content":"Method previewInfo","linkify":"Method previewInfo","nodes":[{"content":"Method previewInfo","pos":[0,18]}]},{"pos":[965024,965034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[965036,965042]},{"pos":[965051,965063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965069,965101],"content":"Method previewXCompensation100mm","linkify":"Method previewXCompensation100mm","nodes":[{"content":"Method previewXCompensation100mm","pos":[0,32]}]},{"pos":[965162,965172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[965174,965180]},{"pos":[965189,965201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965207,965224],"content":"Method right100mm","linkify":"Method right100mm","nodes":[{"content":"Method right100mm","pos":[0,17]}]},{"pos":[965260,965272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965278,965305],"content":"Method right100mmInclBorder","linkify":"Method right100mmInclBorder","nodes":[{"content":"Method right100mmInclBorder","pos":[0,27]}]},{"pos":[965351,965363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965369,965395],"content":"Method rightMarginAndFrame","linkify":"Method rightMarginAndFrame","nodes":[{"content":"Method rightMarginAndFrame","pos":[0,26]}]},{"pos":[965440,965452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965458,965480],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[965532,965542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[965544,965549]},{"pos":[965558,965570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965576,965597],"content":"Method rightMarginStr","linkify":"Method rightMarginStr","nodes":[{"content":"Method rightMarginStr","pos":[0,21]}]},{"pos":[965648,965658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[965660,965665]},{"pos":[965674,965686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965692,965714],"content":"Method rightMarginUnit","linkify":"Method rightMarginUnit","nodes":[{"content":"Method rightMarginUnit","pos":[0,22]}]},{"pos":[965770,965780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[965782,965787]},{"pos":[965796,965808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965814,965837],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[965892,965902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[965904,965909]},{"pos":[965918,965930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[965936,965954],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[966022,966032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966034,966039]},{"pos":[966048,966060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966066,966089],"content":"Method setHeightGetText","linkify":"Method setHeightGetText","nodes":[{"content":"Method setHeightGetText","pos":[0,23]}]},{"pos":[966152,966162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[966164,966169]},{"content":"string","pos":[966183,966189]},{"pos":[966198,966210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966216,966232],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[966286,966296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966298,966303]},{"pos":[966312,966324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966330,966342],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[966344,966397]},{"pos":[966447,966457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966459,966464]},{"pos":[966473,966485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[966487,966548]},{"pos":[966554,966570],"content":"Method thickness","linkify":"Method thickness","nodes":[{"content":"Method thickness","pos":[0,16]}]},{"pos":[966636,966646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966648,966653]},{"pos":[966662,966674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966680,966697],"content":"Method timeFormat","linkify":"Method timeFormat","nodes":[{"content":"Method timeFormat","pos":[0,17]}]},{"pos":[966744,966754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966756,966761]},{"pos":[966770,966782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966788,966804],"content":"Method timeHours","linkify":"Method timeHours","nodes":[{"content":"Method timeHours","pos":[0,16]}]},{"pos":[966850,966860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966862,966867]},{"pos":[966876,966888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[966894,966911],"content":"Method timeMinute","linkify":"Method timeMinute","nodes":[{"content":"Method timeMinute","pos":[0,17]}]},{"pos":[966958,966968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[966970,966975]},{"pos":[966984,966996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967002,967020],"content":"Method timeSeconds","linkify":"Method timeSeconds","nodes":[{"content":"Method timeSeconds","pos":[0,18]}]},{"pos":[967068,967078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[967080,967085]},{"pos":[967094,967106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967112,967132],"content":"Method timeSeparator","linkify":"Method timeSeparator","nodes":[{"content":"Method timeSeparator","pos":[0,20]}]},{"pos":[967182,967192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[967194,967199]},{"pos":[967208,967220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967226,967241],"content":"Method top100mm","linkify":"Method top100mm","nodes":[{"content":"Method top100mm","pos":[0,15]}]},{"pos":[967294,967304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topExclBorder","pos":[967306,967319]},{"pos":[967328,967340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967346,967371],"content":"Method top100mmInclBorder","linkify":"Method top100mmInclBorder","nodes":[{"content":"Method top100mmInclBorder","pos":[0,25]}]},{"pos":[967434,967444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"topInclBorder","pos":[967446,967459]},{"pos":[967468,967480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967486,967510],"content":"Method topMarginAndFrame","linkify":"Method topMarginAndFrame","nodes":[{"content":"Method topMarginAndFrame","pos":[0,24]}]},{"pos":[967553,967565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967571,967591],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[967641,967651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[967653,967658]},{"pos":[967667,967679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967685,967704],"content":"Method topMarginStr","linkify":"Method topMarginStr","nodes":[{"content":"Method topMarginStr","pos":[0,19]}]},{"pos":[967753,967763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[967765,967770]},{"pos":[967779,967791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967797,967817],"content":"Method topMarginUnit","linkify":"Method topMarginUnit","nodes":[{"content":"Method topMarginUnit","pos":[0,20]}]},{"pos":[967871,967881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[967883,967888]},{"pos":[967897,967909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[967915,967936],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[967989,967999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968001,968006]},{"pos":[968015,968027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968033,968047],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[968091,968101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968103,968108]},{"pos":[968117,968129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968135,968148],"content":"Method topStr","linkify":"Method topStr","nodes":[{"content":"Method topStr","pos":[0,13]}]},{"pos":[968191,968201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968203,968208]},{"pos":[968217,968229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968235,968249],"content":"Method topUnit","linkify":"Method topUnit","nodes":[{"content":"Method topUnit","pos":[0,14]}]},{"pos":[968297,968307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968309,968314]},{"pos":[968323,968335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968341,968356],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[968403,968413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968415,968420]},{"pos":[968429,968441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968447,968463],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[968517,968527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968529,968534]},{"pos":[968543,968555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968561,968575],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[968627,968637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968639,968644]},{"pos":[968653,968665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968671,968693],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[968745,968755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968757,968762]},{"pos":[968771,968783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968789,968811],"content":"Method webMenuItemType","linkify":"Method webMenuItemType","nodes":[{"content":"Method webMenuItemType","pos":[0,22]}]},{"pos":[968887,968897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[968899,968904]},{"pos":[968913,968925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[968931,968947],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[968993,969003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[969005,969010]},{"pos":[969019,969031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[969037,969054],"content":"Method width100mm","linkify":"Method width100mm","nodes":[{"content":"Method width100mm","pos":[0,17]}]},{"pos":[969111,969121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthExclBorder","pos":[969123,969138]},{"pos":[969147,969159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[969165,969192],"content":"Method width100mmInclBorder","linkify":"Method width100mmInclBorder","nodes":[{"content":"Method width100mmInclBorder","pos":[0,27]}]},{"pos":[969259,969269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"widthInclBorder","pos":[969271,969286]},{"pos":[969295,969307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[969313,969329],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[969331,969393]},{"pos":[969439,969449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[969451,969456]},{"pos":[969465,969477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[969479,969540]},{"pos":[969547,969554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[969556,969609]},{"content":"Mode.","pos":[969613,969618]},{"content":"Width Calculation.","pos":[969629,969647]},{"content":"Exact.","pos":[969831,969837]},{"content":"The exact width in pixels of the controls is used.","pos":[969847,969897]},{"content":"Auto.","pos":[969940,969945]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[969956,970044]},{"content":"Column width.","pos":[970049,970062]},{"content":"The layout of the form determines the width of the control.","pos":[970065,970124]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[970157,970240]},{"pos":[970246,970271],"content":"Method widthOfString100mm","linkify":"Method widthOfString100mm","nodes":[{"content":"Method widthOfString100mm","pos":[0,25]}]},{"pos":[970325,970335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[970337,970343]},{"pos":[970352,970364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[970370,970385],"content":"Method widthStr","linkify":"Method widthStr","nodes":[{"content":"Method widthStr","pos":[0,15]}]},{"pos":[970430,970440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[970442,970447]},{"pos":[970456,970468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[970474,970490],"content":"Method widthUnit","linkify":"Method widthUnit","nodes":[{"content":"Method widthUnit","pos":[0,16]}]},{"pos":[970540,970550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[970552,970557]},{"pos":[970566,970578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[970584,970601],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[970603,970641]},{"pos":[970690,970700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[970702,970707]},{"pos":[970716,970728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[970730,970765]},{"pos":[970772,970779],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[970781,970854]},{"pos":[970860,970877],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[970936,970946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[970948,970953]},{"content":"unit","pos":[970967,970971]},{"pos":[970979,970997],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[971057,971067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[971069,971074]},{"content":"unit","pos":[971088,971092]},{"pos":[971100,971119],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[971180,971190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[971192,971197]},{"content":"unit","pos":[971211,971215]},{"pos":[971223,971235],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[971237,971275]},{"pos":[971329,971339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[971341,971346]},{"content":"unit","pos":[971360,971364]},{"pos":[971373,971380],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[971382,971488]},{"content":"Mode.","pos":[971492,971497]},{"content":"Width calculation.","pos":[971510,971528]},{"content":"-1 Exact.","pos":[971714,971723]},{"content":"The exact width in pixels of the controls is used.","pos":[971732,971782]},{"content":"0 Auto.","pos":[971825,971832]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[971843,971931]},{"content":"1 Column width.","pos":[971936,971951]},{"content":"The layout of the form determines the width of the control.","pos":[971954,972013]},{"content":"The width and width calculation mode can be set separately.","pos":[972046,972105]},{"pos":[972111,972121],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[972173,972183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[972185,972190]},{"content":"unit","pos":[972204,972208]},{"pos":[972216,972229],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[972231,972270]},{"pos":[972325,972335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[972337,972342]},{"content":"unit","pos":[972356,972360]},{"pos":[972369,972376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[972378,972485]},{"content":"Mode.","pos":[972489,972494]},{"content":"Height calculation.","pos":[972508,972527]},{"content":"-1 Exact.","pos":[972715,972724]},{"content":"The exact height in pixels of the controls is used.","pos":[972734,972785]},{"content":"0 Auto.","pos":[972828,972835]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[972847,972936]},{"content":"1 Column height.","pos":[972941,972957]},{"content":"The layout of the form determines the height of the control.","pos":[972960,973020]},{"content":"The height and height calculation mode can be set separately.","pos":[973053,973114]},{"pos":[973120,973137],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[973196,973206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[973208,973213]},{"content":"unit","pos":[973227,973231]},{"pos":[973239,973255],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[973313,973323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[973325,973330]},{"content":"unit","pos":[973344,973348]},{"pos":[973356,973367],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[973420,973430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[973432,973437]},{"content":"unit","pos":[973451,973455]},{"pos":[973463,973474],"content":"Method hide","linkify":"Method hide","nodes":[{"content":"Method hide","pos":[0,11]}]},{"pos":[973504,973515],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[973544,973562],"content":"Class ReportViewer","linkify":"Class ReportViewer","nodes":[{"content":"Class ReportViewer","pos":[0,18]}]},{"content":"The ReportViewer class lets the user preview a report.","pos":[973608,973662]},{"pos":[973668,973675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"ReportViewer objects can exist only on the client, because a report preview can occur only on a client.","pos":[973677,973780]},{"pos":[973786,973794],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code will print the job descriptions and the page numbers of jobs that are inserted in the printArchive on the current date, and it will show page 1 in the report viewer.","pos":[973796,973980]},{"pos":[974689,974696],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[974700,974706]},{"content":"Description","pos":[974814,974825]},{"content":"public boolean setNumberOfPages(int pageNo, <ph id=\"ph1\">\\[</ph>boolean updataProgressForm<ph id=\"ph2\">\\]</ph>)","pos":[975032,975107],"source":"public boolean setNumberOfPages(int pageNo, \\[boolean updataProgressForm\\])"},{"content":"public void nextPage()","pos":[975198,975220]},{"content":"public void lastPage()","pos":[975364,975386]},{"content":"public void new(PrintJobHeader jobsCursor, <ph id=\"ph1\">\\[</ph>PrintJobPages pagesCursor<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>container packedPrintJobSettings<ph id=\"ph4\">\\]</ph>)","pos":[975530,975641],"source":"public void new(PrintJobHeader jobsCursor, \\[PrintJobPages pagesCursor\\], \\[container packedPrintJobSettings\\])"},{"content":"Initializes a new instance of the Object class.","pos":[975644,975691]},{"content":"public void gotoPage(int pageNo)","pos":[975696,975728]},{"content":"public void pause()","pos":[975862,975881]},{"content":"public void showPage(int pageNo)","pos":[976028,976060]},{"content":"public void firstPage()","pos":[976194,976217]},{"content":"public void setAborted()","pos":[976360,976384]},{"content":"public void close()","pos":[976526,976545]},{"content":"public void prevPage()","pos":[976692,976714]},{"content":"public void setCompleted()","pos":[976858,976884]},{"pos":[977027,977050],"content":"Method setNumberOfPages","linkify":"Method setNumberOfPages","nodes":[{"content":"Method setNumberOfPages","pos":[0,23]}]},{"pos":[977136,977146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNo","pos":[977148,977154]},{"content":"updataProgressForm","pos":[977168,977186]},{"pos":[977195,977207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[977213,977228],"content":"Method nextPage","linkify":"Method nextPage","nodes":[{"content":"Method nextPage","pos":[0,15]}]},{"pos":[977262,977277],"content":"Method lastPage","linkify":"Method lastPage","nodes":[{"content":"Method lastPage","pos":[0,15]}]},{"pos":[977311,977321],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[977323,977370]},{"pos":[977490,977500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobsCursor","pos":[977502,977512]},{"content":"pagesCursor","pos":[977526,977537]},{"content":"packedPrintJobSettings","pos":[977551,977573]},{"pos":[977581,977596],"content":"Method gotoPage","linkify":"Method gotoPage","nodes":[{"content":"Method gotoPage","pos":[0,15]}]},{"pos":[977641,977651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNo","pos":[977653,977659]},{"pos":[977667,977679],"content":"Method pause","linkify":"Method pause","nodes":[{"content":"Method pause","pos":[0,12]}]},{"pos":[977710,977725],"content":"Method showPage","linkify":"Method showPage","nodes":[{"content":"Method showPage","pos":[0,15]}]},{"pos":[977770,977780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNo","pos":[977782,977788]},{"pos":[977796,977812],"content":"Method firstPage","linkify":"Method firstPage","nodes":[{"content":"Method firstPage","pos":[0,16]}]},{"pos":[977847,977864],"content":"Method setAborted","linkify":"Method setAborted","nodes":[{"content":"Method setAborted","pos":[0,17]}]},{"pos":[977900,977912],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[977943,977958],"content":"Method prevPage","linkify":"Method prevPage","nodes":[{"content":"Method prevPage","pos":[0,15]}]},{"pos":[977992,978011],"content":"Method setCompleted","linkify":"Method setCompleted","nodes":[{"content":"Method setCompleted","pos":[0,19]}]},{"pos":[978048,978063],"content":"Class ResultSet","linkify":"Class ResultSet","nodes":[{"content":"Class ResultSet","pos":[0,15]}]},{"content":"The ResultSet class provides access to a table of data generated by executing a Statement.","pos":[978100,978190]},{"pos":[978196,978203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For maximum portability, ResultSet columns within each row should be read in left-to-right order and each column should be read only once.","pos":[978205,978343]},{"content":"A ResultSet provides access to a table of data generated by executing a instance.","pos":[978344,978425]},{"content":"The table rows are retrieved in sequence.","pos":[978426,978467]},{"content":"Within a row its column values can be accessed in any order.","pos":[978468,978528]},{"content":"A ResultSet maintains a cursor that points to its current row of data.","pos":[978529,978599]},{"content":"Initially the cursor is positioned before the first row.","pos":[978600,978656]},{"content":"The 'next' method moves the cursor to the next row.","pos":[978657,978708]},{"content":"For the getXX methods, Finance and Operations attempts to convert the underlying data to the specified type and returns a suitable value.","pos":[978709,978846]},{"content":"The getXX methods retrieve column values for the current row.","pos":[978847,978908]},{"content":"You retrieve values using the index number of the column.","pos":[978909,978966]},{"content":"Columns are numbered from 1.","pos":[978967,978995]},{"content":"A ResultSet is automatically closed by the statement that generated it when that Statement is closed, re-executed, or is used to retrieve the next result from a sequence of multiple results.","pos":[978996,979186]},{"pos":[979192,979200],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[979697,979704],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[979708,979714]},{"content":"Description","pos":[979752,979763]},{"content":"public boolean getBoolean(int ColumnID)","pos":[979984,980023]},{"content":"Retrieves the Boolean value of a column in the current row.","pos":[980028,980087]},{"content":"public int getByte(int ColumnID)","pos":[980122,980154]},{"content":"public Date getDate(int ColumnID)","pos":[980260,980293]},{"content":"Retrieves the value of a column in the current row as an Finance and Operationsdate value.","pos":[980304,980394]},{"content":"public DateTime getDateTime(int ColumnID)","pos":[980399,980440]},{"content":"public Guid getGuid(int ColumnID)","pos":[980537,980570]},{"content":"public int getInt(int ColumnID)","pos":[980675,980706]},{"content":"Retrieves the value of a column in the current row as an integer.","pos":[980719,980784]},{"content":"public Int64 getInt64(int ColumnID)","pos":[980813,980848]},{"content":"public ResultSetMetaData getMetaData()","pos":[980951,980989]},{"content":"public Real getReal(int ColumnID)","pos":[981089,981122]},{"content":"Retrieves the value of a column in the current row as a value of the type real.","pos":[981133,981212]},{"content":"public str getString(int ColumnID)","pos":[981227,981261]},{"content":"Gets the string value of a column in the current row.","pos":[981271,981324]},{"content":"public boolean next()","pos":[981365,981386]},{"content":"Selects the first or subsequent row.","pos":[981409,981445]},{"content":"public boolean wasNull(int ColumnID)","pos":[981503,981539]},{"content":"Reports whether the last column read has the value SQL NULL.","pos":[981547,981607]},{"content":"public void close()","pos":[981641,981660]},{"content":"Releases the object's database resources immediately.","pos":[981685,981738]},{"pos":[981782,981799],"content":"Method getBoolean","linkify":"Method getBoolean","nodes":[{"content":"Method getBoolean","pos":[0,17]}]},{"content":"Retrieves the Boolean value of a column in the current row.","pos":[981801,981860]},{"pos":[981912,981922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[981924,981932]},{"content":"The column ID.","pos":[981935,981949]},{"pos":[981956,981968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of a column in the current row.","pos":[981970,982011]},{"pos":[982017,982031],"content":"Method getByte","linkify":"Method getByte","nodes":[{"content":"Method getByte","pos":[0,14]}]},{"pos":[982076,982086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982088,982096]},{"pos":[982105,982117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[982123,982137],"content":"Method getDate","linkify":"Method getDate","nodes":[{"content":"Method getDate","pos":[0,14]}]},{"content":"Retrieves the value of a column in the current row as an Finance and Operationsdate value.","pos":[982139,982229]},{"pos":[982275,982285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982287,982295]},{"content":"The ID of the column.","pos":[982298,982319]},{"pos":[982326,982338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date.","pos":[982340,982349]},{"pos":[982355,982373],"content":"Method getDateTime","linkify":"Method getDateTime","nodes":[{"content":"Method getDateTime","pos":[0,18]}]},{"pos":[982427,982437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982439,982447]},{"pos":[982456,982468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[982474,982488],"content":"Method getGuid","linkify":"Method getGuid","nodes":[{"content":"Method getGuid","pos":[0,14]}]},{"pos":[982534,982544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982546,982554]},{"pos":[982563,982575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[982581,982594],"content":"Method getInt","linkify":"Method getInt","nodes":[{"content":"Method getInt","pos":[0,13]}]},{"content":"Retrieves the value of a column in the current row as an integer.","pos":[982596,982661]},{"pos":[982705,982715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982717,982725]},{"content":"The column ID.","pos":[982728,982742]},{"pos":[982749,982761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The integer value of the column.","pos":[982763,982795]},{"pos":[982801,982816],"content":"Method getInt64","linkify":"Method getInt64","nodes":[{"content":"Method getInt64","pos":[0,15]}]},{"pos":[982864,982874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[982876,982884]},{"pos":[982893,982905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[982911,982929],"content":"Method getMetaData","linkify":"Method getMetaData","nodes":[{"content":"Method getMetaData","pos":[0,18]}]},{"pos":[982980,982992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[982998,983012],"content":"Method getReal","linkify":"Method getReal","nodes":[{"content":"Method getReal","pos":[0,14]}]},{"content":"Retrieves the value of a column in the current row as a value of the type real.","pos":[983014,983093]},{"pos":[983139,983149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[983151,983159]},{"content":"The ID of the column.","pos":[983162,983183]},{"content":"The first column is 1, the second is 2, and so on.","pos":[983184,983234]},{"pos":[983241,983253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[983260,983268],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[983341,983357],"content":"Method getString","linkify":"Method getString","nodes":[{"content":"Method getString","pos":[0,16]}]},{"content":"Gets the string value of a column in the current row.","pos":[983359,983412]},{"pos":[983459,983469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[983471,983479]},{"content":"The column ID.","pos":[983482,983496]},{"pos":[983503,983515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string value of the column.","pos":[983517,983548]},{"pos":[983554,983565],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Selects the first or subsequent row.","pos":[983567,983603]},{"pos":[983637,983649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the new current row is valid; otherwise false.","pos":[983651,983705]},{"pos":[983712,983719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A ResultSet is initially positioned before its first row.","pos":[983721,983778]},{"content":"The first call to the next method makes the first row the current row.","pos":[983779,983849]},{"content":"The second call makes the second row the current row, and so on.","pos":[983850,983914]},{"pos":[983920,983934],"content":"Method wasNull","linkify":"Method wasNull","nodes":[{"content":"Method wasNull","pos":[0,14]}]},{"content":"Reports whether the last column read has the value SQL NULL.","pos":[983936,983996]},{"pos":[984045,984055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[984057,984065]},{"content":"The column ID.","pos":[984068,984082]},{"pos":[984089,984101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the last column read has the value SQL nullNothingnullptrunita null reference (Nothing in Visual Basic); otherwise false.","pos":[984103,984232]},{"pos":[984239,984246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must first call a get method, like the ResultSet.getInt method, on a column to try to read its value; then call the wasNull method to find whether the value was the SQL NULL.","pos":[984248,984426]},{"pos":[984432,984444],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"content":"Releases the object's database resources immediately.","pos":[984446,984499]},{"pos":[984529,984552],"content":"Class ResultSetMetaData","linkify":"Class ResultSetMetaData","nodes":[{"content":"Class ResultSetMetaData","pos":[0,23]}]},{"pos":[984601,984608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[984614,984622],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[984628,984635],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[984639,984645]},{"content":"Description","pos":[984687,984698]},{"content":"public int getColumnCount()","pos":[984767,984794]},{"content":"public int getColumnDisplaySize(int ColumnID)","pos":[984831,984876]},{"content":"public str getColumnName(int ColumnID)","pos":[984895,984933]},{"content":"public int getColumnType(int ColumnID)","pos":[984959,984997]},{"content":"public int getPrecision(int ColumnID)","pos":[985023,985060]},{"content":"public int getScale(int ColumnID)","pos":[985087,985120]},{"content":"public int isNullable(int ColumnID)","pos":[985151,985186]},{"pos":[985218,985239],"content":"Method getColumnCount","linkify":"Method getColumnCount","nodes":[{"content":"Method getColumnCount","pos":[0,21]}]},{"pos":[985279,985291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985297,985324],"content":"Method getColumnDisplaySize","linkify":"Method getColumnDisplaySize","nodes":[{"content":"Method getColumnDisplaySize","pos":[0,27]}]},{"pos":[985382,985392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985394,985402]},{"pos":[985411,985423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985429,985449],"content":"Method getColumnName","linkify":"Method getColumnName","nodes":[{"content":"Method getColumnName","pos":[0,20]}]},{"pos":[985500,985510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985512,985520]},{"pos":[985529,985541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985547,985567],"content":"Method getColumnType","linkify":"Method getColumnType","nodes":[{"content":"Method getColumnType","pos":[0,20]}]},{"pos":[985618,985628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985630,985638]},{"pos":[985647,985659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985665,985684],"content":"Method getPrecision","linkify":"Method getPrecision","nodes":[{"content":"Method getPrecision","pos":[0,19]}]},{"pos":[985734,985744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985746,985754]},{"pos":[985763,985775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985781,985796],"content":"Method getScale","linkify":"Method getScale","nodes":[{"content":"Method getScale","pos":[0,15]}]},{"pos":[985842,985852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985854,985862]},{"pos":[985871,985883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[985889,985906],"content":"Method isNullable","linkify":"Method isNullable","nodes":[{"content":"Method isNullable","pos":[0,17]}]},{"pos":[985954,985964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ColumnID","pos":[985966,985974]},{"pos":[985983,985995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[986000,986021],"content":"Class RunAsPermission","linkify":"Class RunAsPermission","nodes":[{"content":"Class RunAsPermission","pos":[0,21]}]},{"content":"The RunAsPermssion class controls the execution of code in the security context of another user.","pos":[986078,986174]},{"pos":[986180,986187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission.demand method is called on before the protected API is executed.","pos":[986189,986372]},{"content":"Call a method on the server tier from one of the following: The RunAsPermission class is designed to check permissions for the runAs function.","pos":[986373,986515]},{"content":"For a list of all APIs protected by permissions, see Secured APIs.","pos":[986516,986582]},{"content":"A server static method –or–","pos":[986588,986615]},{"content":"A class instance method that is set to run on the server by using the RunOn class property","pos":[986620,986710]},{"pos":[986716,986724],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a new instance of the RunAsPermission class.","pos":[986726,986803]},{"content":"The assert method is called to declare that the code can then call the runAs function to run the EventJobDueDate.:runDueDateEventsForUser method in the security context of another user.","pos":[986804,986989]},{"pos":[987548,987555],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[987559,987565]},{"content":"Description","pos":[987616,987627]},{"content":"public CodeAccessPermission copy()","pos":[987913,987947]},{"content":"Creates and returns a copy of a permission class object.","pos":[987970,988026]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[988090,988144]},{"content":"Determines whether a current permission is a subset of the specified permission when overridden by a derived class.","pos":[988147,988262]},{"content":"public void new(UserId userId)","pos":[988267,988297]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[988324,988385]},{"pos":[988447,988458],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of a permission class object.","pos":[988460,988516]},{"pos":[988563,988575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the derived class object.","pos":[988577,988612]},{"pos":[988619,988626],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method as part of the process of making an API more secure.","pos":[988628,988709]},{"pos":[988715,988732],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission when overridden by a derived class.","pos":[988734,988849]},{"pos":[988916,988926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[988928,988934]},{"content":"A CodeAccessPermission class object.","pos":[988937,988973]},{"pos":[988980,988992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise, false.","pos":[988994,989079]},{"pos":[989086,989093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override the method as part of the process of making an API more secure.","pos":[989095,989175]},{"pos":[989181,989191],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[989193,989254]},{"pos":[989297,989307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userId","pos":[989309,989315]},{"content":"A userId system data type that specifies an Finance and Operations user.","pos":[989318,989390]},{"pos":[989397,989405],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a new instance of the RunAsPermission class.","pos":[989407,989479]},{"content":"The SysUserInfo table is used to initialize the userId parameter.","pos":[989480,989545]}]}