<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b508345ab86802e6fa295b20c27165e9751a2550</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\extensibility\NamingGuidelines.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c6b215b59b988cc9d319f4d565e20112376df24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f45b8e9ebe1985dec3af19062d8b50e0c42acd2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Naming guidelines</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Naming Guidelines</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Naming model elements</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Any element in a model must be given a name, which is unique across all models at installation time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Given that all potential models, that your model will be installed together with, are unknown at implementation time, then every element name should include a prefix, which is specific to your solution.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If a model contains multiple solutions, then each solution within the model can be identified by different prefixes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The prefix must be carefully chosen to minimize the risk that other models from other parties have chosen the same prefix for their elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By including the prefix when naming elements in your model, then you have significantly lowered the risk of naming conflicts, when your model is later installed alongside other models.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you extend functionality in other models, then elements being extended already contains a prefix.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instead of adding your prefix to the extension elements resulting in multiple prefixes after each other, then you should rather include your prefix or another term or abbreviation as an infix when naming the extension element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Here are details about the specific naming of extensions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Naming Extensions</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An extension element, i.e. table extension, view extension, form extension, etc.,  must be given a unique name, that minimizes the risk of conflicts with extensions in other models; both now and in the future.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To minimize the risk of conflicts, the name should therefore include a term, abbreviation or infix, that distinguishes the extension from other extension to the same element in other models.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> include either the name of the model in which the extension element resides, or the prefix the extension is associated with.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An extension of the HCMWorker table by a Warehousing module using the WHS prefix to name all other elements, could be named HCMWorker.WHSExtension.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The prefix used to name other elements in the module, is inserted as an infix in the name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An extension of the ContactPerson table in the ApplicationSuite could be named ContactPerson.ApplicationSuiteExtension, if the extension is meant to contain all extensions to the ContactPerson table from the ApplicationSuite model.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> suffix the name with the term Extension.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An extension of the InventLocation table should follow the following pattern InventLocation.<ph id="ph1">&lt;Model&gt;</ph>Extension</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> NOT name the extension simply as <ph id="ph1">&lt;ElementBeingExtended&gt;</ph>.Extension.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An extension of the InventLocation table must not be named InventLocation.Extension, as the risk of conflicts is too high.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Naming Extension classes</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Extension classes used to augment logic on tables, classes, or other elements which can be extended through augmentation, need to be given a name which is unique across all types in all models; both now and in the future.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It is preferable that the extension class includes the name of the type being extended, but at the same time, the name must also include a term, abbreviation or prefix, that distinguishes the class from other types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> start the name of the extension class with the name of the type being augmented, and end it with the term _Extension.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An extension class augmenting the ContactPerson table should start with the name ContactPerson, and end with _Extension, e.g. ContactPersonWHS_Extension</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> include either the name of the model in which the extension element resides, or the prefix the extension is associated with.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An extension class augmenting the ContactPerson table by a Warehousing module using the WHS prefix to name all other elements, could be named ContactPersonWHS_Extension.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The prefix used to name other elements in the module, is inserted as an infix in the name.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An extension class augmenting the ContactPerson table in the ApplicationSuite model could be named ContactPersonApplicationSuite_Extension, if the extension class is meant to contain all extension to the ContactPerson table in the ApplicationSuite model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO NOT<ept id="p1">**</ept> name the extension simply as <ph id="ph1">&lt;ElementBeingExtended&gt;</ph>_Extension.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An extension class augmenting the InventLocation table must not be named InventLocation_Extension, as the risk of conflicts is too high.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Naming Fields, Field groups, Indexes, Relations and other metadata nodes in Extension elements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Fields, indexes, relations and other metadata elements on extension elements also need be unique across both the element being extended as well as other extension elements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These metadata nodes therefore also need to include a term, abbreviation or prefix, that limits the risk of conflicts across models.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> include a prefix, term, or abbreviation in the beginning of the metadata node name.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An approving worker foreign key field added to as part of a table extension could be named WHSApprovingWorker, assuming WHS is one of prefixes dedicated to other elements in the hosting model.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Naming members in extension classes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Class level variables, and methods on extension classes must be provided a name that is unique across the type being augmented, and all other extension classes augmenting the same type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> include a prefix, term, or abbreviation in the beginning of the member name.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An approving worker class level variable could be named WHSApprovingWorker, if WHS is one of the prefixes used by other element in the model.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An approveWork method could be named WHSApproveWork, if WHS is one of the prefixes used by other elements in the hosting model.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>