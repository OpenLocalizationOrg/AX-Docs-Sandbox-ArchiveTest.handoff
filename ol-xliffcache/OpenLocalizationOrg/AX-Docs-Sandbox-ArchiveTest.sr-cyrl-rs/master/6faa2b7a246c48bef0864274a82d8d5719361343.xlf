<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6faa2b7a246c48bef0864274a82d8d5719361343</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\dev-ref\xpp-attribute-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a15c1bccb5795cca854f691ae93d827990c0b394</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37f979b070a7f6f2a1e8b6b033353da6bc3f1307</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>X++ attribute classes</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic describes the use of attributes in X++.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>X++ attribute classes</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes the use of attributes in X++.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An attribute is a non-abstract class that extends (inherits from) the <bpt id="p1">**</bpt>SysAttribute<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Attributes represent or store metadata about types and methods.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An attribute can be attached to a class, an interface, or a method of a class, interface, or table.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating an attribute class</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An attribute class can extend the <bpt id="p1">**</bpt>SysAttribute<ept id="p1">**</ept> class directly, or it can extend any descendant of the <bpt id="p2">**</bpt>SysAttribute<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SysAttribute<ept id="p1">**</ept> class cannot be used as an attribute because it is declared <bpt id="p2">**</bpt>abstract<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows the declaration and design of an ordinary attribute class that you could create.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decorating a class with an attribute</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows a class and a method that are decorated with the <bpt id="p1">**</bpt>PracticeAttribute<ept id="p1">**</ept> given in the previous example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the constructor of the attribute takes no parameters, the parentheses for the parameters are optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The attribute decoration could be <ph id="ph1">`[AnotherAttribute]`</ph> without parentheses.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Attribute constructors</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can enable your attribute class to store tailored metadata each time it is used to decorate a class, by having its constructor take parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The parameters for the constructor must be literals of the primitive types, such as <bpt id="p1">**</bpt>int,<ept id="p1">**</ept> <bpt id="p2">**</bpt>enum,<ept id="p2">**</ept> or <bpt id="p3">**</bpt>str<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The compiler does not construct an instance of the attribute class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It stores the name of the attribute class, plus the literal values for its constructor.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, if the logic in an attribute constructor would throw an exception, the exception would not be found by decorating a class with the attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The exception would be found later when a process looks at a class to see the attribute it is decorated with.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>That is when the attribute is constructed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All attribute classes have the suffix <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept> in their name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept> suffix is the name convention that we recommend, but it is not a system requirement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can determine whether a class <bpt id="p1">**</bpt>extends<ept id="p1">**</ept> directly from <bpt id="p2">**</bpt>SysAttribute<ept id="p2">**</ept> by selecting the class in the <bpt id="p3">**</bpt>Application Explorer<ept id="p3">**</ept> and reviewing the <bpt id="p4">**</bpt>Extends<ept id="p4">**</ept> property in the <bpt id="p5">**</bpt>Properties<ept id="p5">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>SysObsoleteAttribute</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The system provides several attributes, including the <bpt id="p1">**</bpt>SysObsoleteAttribute<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>One use of the <bpt id="p1">**</bpt>SysObsoleteAttribute<ept id="p1">**</ept> class is to notify the compiler that the compile should fail if a particular method is called in the source code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The compiler rejects the compile, and displays the specific message that is stored in this use of the attribute.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SysObsoleteAttribute<ept id="p1">**</ept> class can also be used to notify the compiler to issue warning messages instead of errors.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>SysObsoleteAttribute code example</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Metadata reflection</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You use reflection to find the attribute metadata that is attached to a class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The classes to use for attribute reflection are as follows:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DictClass<ept id="p1">**</ept> class – For classes and interfaces.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DictMethod<ept id="p1">**</ept> class – For methods on classes, interfaces, or tables.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On the previous reflection classes, the methods for reflecting on attribute metadata are as follows:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>getAllAttributes<ept id="p1">**</ept> method</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>getAttribute<ept id="p1">**</ept> method</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>getAttributedClasses<ept id="p1">**</ept> method</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>getAttributes<ept id="p1">**</ept> method</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Metadata reflection code example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>DictMethod<ept id="p1">**</ept> class to find the metadata value of an attribute that is decoration on a method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code example uses the <bpt id="p1">**</bpt>SysEntryPointAttribute<ept id="p1">**</ept> class as the attribute.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It accepts your parameter values for the method name, and for the name of the class that contains the method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>parmChecked<ept id="p1">**</ept> method is particular to the <bpt id="p2">**</bpt>SysEntryPointAttribute<ept id="p2">**</ept> class, and it is not inherited from its base class <bpt id="p3">**</bpt>SysAttribute<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each attribute class can have its own method name for its metadata.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>