<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">458576ec0bea1d5b70d40ef5b5f9aa923a364426</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\user-interface\extensible-control-programming-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">776ec76af8f851310c1840520dda890e4879d4aa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee4ab5b48094104d20881e9348abb95cc75c22b9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Extensible control programming reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic provides reference content for extensible control programming.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Extensible control programming reference</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides reference content for extensible control programming.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document describes the API, HTML, and JavaScript support for creating extensible controls.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document contains small code snippets that show how to use each API that is documented.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>More complete examples of finished controls that leverage many of these APIs can be found on Github.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extensible Control Examples on Github<ept id="p1">](http://github.com/Microsoft/Dynamics-AX-Extensible-Control-Samples)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Control block diagram</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This high-level diagram illustrates the key components of an extensible control and how they interact with each other.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Your extensible control solution will contain two X++ classes that implement your control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The runtime class implements the runtime data, presentation, and behavior of your control.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The build class defines how your control is displayed in Form Designer, Property Window, and Application Explorer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>ExtensibilityArchitecture<ept id="p1">](./media/extensibilityarchitecture.png)](./media/extensibilityarchitecture.png)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>X++</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The X++ API of your control is the Form-developer-facing API.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Be sure to consider the APIs and behaviors you want to provide to the Form developer when designing the X++ APIs for your control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Runtime: The X++ runtime class</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The runtime class defines the public, developer-facing API for your control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It also contains the runtime logic for your control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The job of the runtime class is to maintain the state of the control via the control’s properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Runtime: Class declaration</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declare an X++ class that extends <bpt id="p1">**</bpt>FormTemplateControl<ept id="p1">**</ept> or a type derived from <bpt id="p2">**</bpt>FormTemplateControl<ept id="p2">**</ept>*.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> *</ph><bpt id="p1">**</bpt>FormTemplateControl<ept id="p1">**</ept> contains basic properties that are necessary for every control, such as the Template ID and the Resource Bundle.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example extends the base control class, <bpt id="p1">**</bpt>FormTemplateControl<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Runtime: FormControlAttribute</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You must apply the <bpt id="p1">**</bpt>FormControlAttribute<ept id="p1">**</ept> attribute to the X++ class declaration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must supply the following arguments:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Template ID<ept id="p1">**</ept>: A string that specifies the ID of the template.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Template ID is the JavaScript class name &amp; the HTML element ID of the control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By convention, the TemplateID matches the class name of the control's runtime class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resource Bundle Path<ept id="p1">**</ept>: A string that specifies the path to the resource bundle.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Resource Bundle Path is the web path where the main HTM files are located.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>At runtime, the Client framework will load the HTM file specified by the Resource Bundle Path.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At runtime, the Client framework will search the Resource Bundle for the HTML element with an ID matching the specified Template ID.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At runtime, the Client framework will instantiate the JavaScript class specified by the Template ID.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This path is relative to the root of the web directory.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Build class name<ept id="p1">**</ept>: A string that specifies the name of the build class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The build class name is the X++ class that determines the design-time behavior.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>At design time, the Visual Studio framework reflects over this attribute and loads the specified X++ class as the designer class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>At runtime, the X++ framework will instantiate the specified X++ class as the build class in the super of applyBuild().</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows a typical class and attribute declaration for a control named "MyControl".</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Runtime: FormCommandAttribute</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> is applied to a method in your control class, which allows the method to be called from a control’s JavaScript class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A method with this attribute applied is called a <bpt id="p1">**</bpt>command.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> on only the X++ methods that need to be accessed directly from the control’s JavaScript class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An X++ method serving as a command can only accept string arguments.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The method must perform the necessary operations to serialize or deserialize the string arguments into other types.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> has no effect on the behavior of the X++ method when the method is used from within X++.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> exposes the X++ method as an external endpoint that is accessible from JavaScript.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As such, every command should be threat modeled and tested for exploits, and should perform validation on all of its arguments.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The underlying X++ method should be declared private so that it is not accessible from X++.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If X++ code needs to access this method’s behavior, then a separate X++ method should be declared as public without the <bpt id="p1">**</bpt>FormCommandAttribute.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This public method should contain any shared code that is needed by both X++ and JavaScript.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The private X++ method with the <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> can then call this public method to access the shared code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This practice allows the command to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You supply the following arguments to the <bpt id="p1">**</bpt>FormCommandAttribute<ept id="p1">**</ept> constructor:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept>: A required string that specifies the name of the command.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A few best practices for naming Properties:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Capitalize the first letter, and use PascalCase.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use a verb in the name.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Include the Property name if the Command is used to read/write a FormProperty (ex: Set<ph id="ph1">\_</ph><ph id="ph2">&amp;lt;</ph>PropertyName<ph id="ph3">&amp;gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Do not use any of the names of inherited JavaScript properties.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute immediate<ept id="p1">**</ept>: An optional boolean that specifies whether calls to this command are deferred or require immediate execution.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>By default, commands have <bpt id="p1">**</bpt>Execute immediate<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>true,<ept id="p2">**</ept> so calls are not deferred.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Most commands likely require immediate execution because their X++ logic must run before allowing the user to complete their next action.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, commands that have no side-effects on the user’s ability to take their next action can likely be safely deferred to gain a performance benefit.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For commands that can be deferred, set Execute immediate to <bpt id="p1">**</bpt>false<ept id="p1">**</ept> to reduce network chattiness.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example declares a command with the name of "SetText".</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Runtime: FormPropertyAttribute</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormPropertyAttribute<ept id="p1">**</ept> is applied to a method in your control class, which allows an X++ method to be called as a <bpt id="p2">**</bpt>FormProperty<ept id="p2">**</ept> getter/setter from the control's JavaScript class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A method with this attribute applied is called a <bpt id="p1">**</bpt>property.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Only use the <bpt id="p1">**</bpt>FormPropertyAttribute<ept id="p1">**</ept> on those X++ methods which need to be accessed directly from the control’s JavaScript class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormPropertyAttribute<ept id="p1">**</ept> has no effect on the behavior of the X++ method when the method is used from within X++.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Every property exposes an endpoint to the browser.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As such, every property should be threat modeled and tested for exploits.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The underlying X++ method should be declared private so that it is not accessible from other X++ code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If other X++ code needs to access the property, then declare a separate public X++ method without the <bpt id="p1">**</bpt>FormPropertyAttibute,<ept id="p1">**</ept> and move the shared property logic to this method.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Then call this method from the private X++ method with the <bpt id="p1">**</bpt>FormPropertyAttribute. This practice allows the property to perform logic that is specific to calls coming from JavaScript (such as argument type deserialization, argument validation, security validation, etc.) before executing the core shared X++ logic.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The underlying X++ method must accept and return the desired type of the property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the desired type if an EDT, the property must accept and return the base type of the EDT.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The supported property types are:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>X++ primitive types<ept id="p1">](https://msdn.microsoft.com/en-us/library/aa602290.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>X++ data contracts<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute(v=vs.110).aspx)</ept> (whose members are also supported types)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>X++ List<ept id="p1">](https://msdn.microsoft.com/en-us/library/list.aspx)</ept> (whose items are also supported types)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You supply the following arguments to the <bpt id="p1">**</bpt>FormPropertyAttribute<ept id="p1">**</ept> constructor:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormPropertyKind:<ept id="p1">**</ept> A required <bpt id="p2">**</bpt>FormProperyKind<ept id="p2">**</ept> value that specifies the type of the property.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>FormPropertyKind::Value<ept id="p1">**</ept> for Properties not bound to a data source field, and use <bpt id="p2">**</bpt>FormPropertyKind::BindableValue<ept id="p2">**</ept> for properties that may be bound to a data source field.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name:<ept id="p1">**</ept> A required string that specifies the name of the property.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A few best practices for naming properties:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Capitalize the first letter, and use PascalCase.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Do not use any of the names of inherited JavaScript properties</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Read only<ept id="p1">**</ept>: An optional boolean that specifies whether this property is writable from the control’s JavaScript class.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>By default, properties have <bpt id="p1">**</bpt>Read only<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>false,<ept id="p2">**</ept> so they are writeable.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This argument does not affect the ability to write to this property from X++.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To make the X++ method read only, remove all method arguments from the method declaration.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A majority of properties should not be writable from the control’s JavaScript class.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Because most property values require validation, a command should be used as a setter for the property so that validation logic is can be run before the backing property is set.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Execute immediate<ept id="p1">**</ept>: An optional Boolean that specifies whether writes to this property are deferred or require immediate execution.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>By default, properties have <bpt id="p1">**</bpt>Execute immediate<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>false,<ept id="p2">**</ept> so writes are deferred.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Because the majority of properties should not be writeable form the control’s JavaScript class, the <bpt id="p1">**</bpt>Execute immediate<ept id="p1">**</ept> flag defaults to <bpt id="p2">**</bpt>false<ept id="p2">**</ept> and provides performance benefits.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Even in the case of properties that are writable from the control’s JavaScript class, the performance side effects of immediate execution should be carefully considered before enabling the behavior.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following example shows a typical property declaration.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Most properties share the same boilerplate code for getting/setting, as shown below.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The textProperty variable is the backing FormProperty field for this property.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Runtime: FormProperty</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is an X++ <bpt id="p2">[</bpt>derived type<ept id="p2">](https://msdn.microsoft.com/en-us/library/esd9wew8(v=vs.100).aspx)</ept> used by the control framework for the synchronization of property values between X++ and JavaScript.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> objects are considered the backing fields used internally by properties.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is typically used in 4 places throughout a control’s X++ runtime class:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is declared, usually right below the class declaration</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is instantiated in the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> method of the class</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is initialized in the <bpt id="p2">**</bpt>applyBuild<ept id="p2">**</ept> method of the class</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> is read and written in the X++ method for the property</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following example shows a <bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> being used in a typical controls’ X++ runtime class.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Runtime: new method</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method on a control’s X++ runtime class is called as a part of instantiating the control on a form.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For the details on when the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method is called in the form lifecycle, please see the Control Lifecycle Diagrams.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This method is used for instantiation of a control’s FormProperties and setting the control’s Template ID and Resource Bundle Path.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>See typical use of the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method in the example for FormProperty.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Runtime: applyBuild method</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>applyBuild<ept id="p1">**</ept> method on a control’s X++ runtime class is called as a part of instantiating the control on a form.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For the details on when the <bpt id="p1">**</bpt>applyBuild<ept id="p1">**</ept> method is called in the form lifecycle, please see the Control Lifecycle Diagrams.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This method is used for initialization of a control’s FormProperties to their default values, or to the values specified by the form developer who placed the control on the form.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See typical use of the **applyBuild **method in the example for FormProperty.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Runtime: FormBindingUtil::initbinding method</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormBindingUtil<ept id="p1">**</ept> is an API provided by the control framework.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It is used to bind FormProperties to data fields and data methods on a data source.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example binds the data field with name "Value" on the data source with name "DataSource1" to the textProperty FormProperty of the runtime class.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Design time: The X++ build class</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The build class defines the design time behavior of your control.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This class determines which properties appear in the property sheet, and how the control behaves when it is modeled in the Form designer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The job of the design time class is to capture design time information for the runtime class to access later on.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Design time: Class declaration &amp; FormDesignControlAttribute</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The FormDesignControlAttribute is necessary for the control to appear in the Visual Studio Form designer when right-clicking on the design node of the form.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the FromDesignControlAttribute is missing, then the control can only be added to a form via imperative X++ code (i.e. via the addControlEx method on the form).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Design time: FormDesignPropertyAttribute</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Placing this attribute on a method in the design time class will result in a new property with the name specified by the first argument (and in the section specified by the second argument) appearing the property sheet for this control, with the corresponding X++ method operating as the getter/setter for the property.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Design time: FormDesignProperty** **Attribute</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>There are a number of FormDesignProperty attributes which may be applied alongside the standard FormDesignPropertyAttribute for specialized behavior in the property sheet.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The specialized behavior includes enabling the property as a combobox which allows selecting from a list of a values.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The different types of lists that used are enumerated below.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Whenever the user selects an item from the combobox, the string name of that item is passed into the X++ method getter/setter with the attribute.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyDataSourceAttribute<ph id="ph2">\]</ph> - Shows a list of the data sources on the form.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyDataFieldAttribute(<ph id="ph2">&amp;lt;</ph>data source name<ph id="ph3">&amp;gt;</ph>)<ph id="ph4">\]</ph> - Shows a list of the data fields on the specified data source.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyDataMethodAttribute(<ph id="ph2">&amp;lt;</ph>data source name<ph id="ph3">&amp;gt;</ph>)<ph id="ph4">\]</ph> - Shows a list of the data methods on the specified data source.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyFieldGroupAttribute(<ph id="ph2">&amp;lt;</ph>data source name<ph id="ph3">&amp;gt;</ph>)<ph id="ph4">\]</ph> - Shows a list of the field groups on the specified data source.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyExtendsClassAttribute(<ph id="ph2">&amp;lt;</ph>class name<ph id="ph3">&amp;gt;</ph>)<ph id="ph4">\]</ph> - Shows a list of the classes which extend the specified class.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyImplementsAttribute(<ph id="ph2">&amp;lt;</ph>interface name<ph id="ph3">&amp;gt;</ph>)<ph id="ph4">\]</ph> - Shows a list of the classes which implement the specified interface.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\[</ph>FormDesignPropertyReferenceAttribute(<ph id="ph2">&amp;lt;</ph>FormDesignPropertyReferenceType::<ph id="ph3">&amp;lt;</ph>type<ph id="ph4">&amp;gt;</ph>)<ph id="ph5">\]</ph> - Shows a list of the specified AOT artifacts with the given type.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The supported types are:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Table</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>View</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Map</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>EDT</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>BaseEnum</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Query</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Form</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>MenuItemDisplay</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>MenuItemOuput</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>MenuItemAction</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Tile</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>KPI</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following example shows standard properties used to allow a Form developer to specify the Data Source and Data Field for the design time class.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A control with a design time class like the one above can then bind to the specified data source and data field inside of the applyBuild method, as show below.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If you supply both a data field and data method to FormBindingUtil::initBinding, the data field binding will override the data method binding.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>HTML</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>HTML: Framework attributes</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The following section documents the HTML attributes that are used in the control framework for control development.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>data-dyn-bind</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>data-dyn-bind<ept id="p1">**</ept>, the data binding attribute, standardizes many common DOM manipulations - such as modifying an element’s attributes, properties and CSS, or handling DOM events - through a declarative HTML-based API.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The data binding attribute allows for these behaviors without requiring complex JavaScript.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Using the data binding attribute rather than writing complex JavaScript can save the control developer valuable time by making things such as designing, debugging and maintaining the control much easier.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>However, complex JavaScript is still available when scenarios require its use.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The data binding attribute binds HTML element behaviors to values supplied by the control developer.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The values supplied can be simple JavaScript <bpt id="p1">[</bpt>variables<ept id="p1">](http://www.w3schools.com/js/js_variables.asp)</ept>, JavaScript <bpt id="p2">[</bpt>comparison<ept id="p2">](http://www.w3schools.com/js/js_comparisons.asp)</ept> or <bpt id="p3">[</bpt>arithmetic<ept id="p3">](http://www.w3schools.com/js/js_arithmetic.asp)</ept> expressions, JavaScript <bpt id="p4">[</bpt>functions<ept id="p4">](http://www.w3schools.com/js/js_functions.asp)</ept> and JSON <bpt id="p5">[</bpt>objects<ept id="p5">](https://www.w3schools.com/js/js_json_objects.asp)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The values supplied can also be observable variables, created using the APIs described in this document.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The way in which the supplied value is bound to the HTML element is determined by the binding handler that is used with the data binding attribute.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A list of all supported binding handlers is provided in this document.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The data binding attribute requires the following syntax when used with any binding handler.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The syntax for <bpt id="p1">**</bpt>data-dyn-bind<ept id="p1">**</ept> is:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The data binding attribute accepts a comma-separated list of binding handler-value pairs, so you can supply more than one binding handler to the binding attribute at a time.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The following example binds the <bpt id="p1">**</bpt>visible<ept id="p1">**</ept> property of the div element to true, and binds the <bpt id="p2">**</bpt>textContent<ept id="p2">**</ept> property of the div element to "Hi".</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The data binding attribute is a custom HTML attribute understood by the control framework.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The data binding attribute can be applied to any HTML element.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Some HTML elements may not have the behavior which the binding handler modifies.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For example, using the text binding handler on an <bpt id="p1">**</bpt><ph id="ph1">&amp;lt;</ph>svg<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept> element will not show the text since the <bpt id="p2">**</bpt><ph id="ph3">&amp;lt;</ph>svg<ph id="ph4">&amp;gt;</ph><ept id="p2">**</ept> element does not have a textContent property.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The control framework reads and executes the data bindings specified in the control’s template at runtime.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The lifecycle for the control in the browser can be summarized as follows:</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The control’s HTM file is loaded by the browser.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Any script or resource files referenced in the HTM file are also loaded by the browser.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Steps 1 and 2 are executed only once during a user’s session, even if there are multiple instances of the control.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The JavaScript class's constructor for the control is call and passed with the X++ properties for the control instance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The control’s template is copied from the HTM file and into the browser’s memory.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>HTML elements in the control’s template are processed for data binding in hierarchical order (depth first), and data bindings on each element are executed in order from left-to-right</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The final HTML, including the original data binding attributes as well as any other markup added by the binding handlers or by the framework, is added to the browser’s DOM and rendered for the user to see.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Later, when the value of an observable changes, any binding handlers subscribed to the observable are re-executed and the live DOM is updated in real-time.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>HTML: Binding handlers</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>attr</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>attr<ept id="p1">**</ept> binding handler applies the supplied HTML attribute and value to the element.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For a list of HTML attributes see <bpt id="p1">[</bpt>W3 Schools – HTML Attributes<ept id="p1">](http://www.w3schools.com/html/html_attributes.asp)</ept>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The arguments are passed in as an object array.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Each argument is dual-valued.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The first value is the name of the attribute, and the second value is the value of the attribute.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept>: a string that specifies the desired name of the attribute to create.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Value or Expression:<ept id="p1">**</ept> a string that specifies the value to set on the attribute.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If an expression is supplied, the value returned by evaluating the expression will be used.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The following example creates the title and name attributes and sets their value.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The following example uses expressions and functions.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>However, using JavaScript functions as in-line HTML like the example below is not recommended.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>click</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Subscribes the supplied function to the click event on the element.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For more information on subscribing to the click event see <bpt id="p1">[</bpt>jQuery – click()<ept id="p1">](http://api.jquery.com/click/)</ept>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>EventHandler (function)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The function to call when the event is raised.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The following example shows an alert message “Hello” when the element is clicked.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The following example prevents the click event on child elements from bubbling up to parent elements.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The example below will show only one alert with message “Hello” when the child element is clicked.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The following example prevents the browser default behavior from executing.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For anchor tags, the default hyperlink behavior is prevented, so the browser will not navigate to the link when the element is clicked.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>css</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Adds or removes the specified CSS class name(s) to the element, based on the specified condition(s).</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Note that expressions supplied to the binding handler are only executed once.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The arguments are passed in as an object array.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Each argument is dual-valued.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The first value is the Class name, and the second value is the Condition.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Class name (string)</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The CSS class name to add to the element.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Condition (expression)</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The condition on which to add the CSS class name.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If the condition evaluates to true, the CSS class name is added.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If the condition evaluates to false, the CSS class name is removed.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>If a supplied condition takes a dependency on an observable (via $dyn.value), then the condition will be re-evaluated whenever the observable value changes, and the associated CSS class name will be added/removed based on the new condition.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The following example adds the CSS class names "red", "green", and "yellow".</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Subscribes the supplied event handler to the specified DOM event.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>For a list of supported DOM events, see <bpt id="p1">[</bpt>jQuery - Event<ept id="p1">](http://api.jquery.com/Types/#Event)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For details on the arguments to the event binding handler, see <bpt id="p1">[</bpt>jQuery - .bind()<ept id="p1">](http://api.jquery.com/bind/)</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following example subscribes to the mouseover event and shows an alert when the element is hovered.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>foreach</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Repeats the content of the child element, updating the binding context of each child based on the supplied data.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Supply <bpt id="p1">***</bpt>only one<ept id="p1">***</ept> child element inside of the element with the <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> binding.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This one element is the element that will be cloned and repeated.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Any other additional elements or content will be removed when the binding is applied.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Binding handlers are executed in the order in which they appear on the element.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Since the <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding changes the binding context, it is a best practice to always place the <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> binding after all other bindings on the element.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This will ensure that preceding bindings are not affected by the binding context created by the <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To avoid performance issues, be careful to not create unintentional dependencies on observables inside of your <bpt id="p1">**</bpt>foreach.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Do not access an observable in the array using <bpt id="p1">**</bpt>$dyn.value<ept id="p1">**</ept> from within the child elements of the <bpt id="p2">**</bpt>foreach,<ept id="p2">**</ept> as the <bpt id="p3">**</bpt>foreach<ept id="p3">**</ept> binding has already subscribed to the observables in the array.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Instead, use <bpt id="p1">**</bpt>$dyn.peek<ept id="p1">**</ept> to access an observable’s value once without creating a subscription.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Data (array list or JSON object)</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The list of items to bind the child element to.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If an array list is supplied, the binding context is an item in the array.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If a JSON object array is supplied, the binding context is one of the object’s properties.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Scope variables</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>When inside the scope of the <bpt id="p1">**</bpt>foreach,<ept id="p1">**</ept> the following scope variables are useful and can be used on the repeatable child element: $data, index, control, your own scope variables.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> to render a span element for each color in the array.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The following examples shows a nested <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This example showcases how to use the index framework scope variable and custom scope variables to access the binding context from the parent element.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>if</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Conditionally renders and binds the child elements of the element with this binding.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This binding handler only operates on the child elements.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>It will not show/hide the element with the binding, nor will this binding show/hide the text content of the element with the binding.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Bindings on the child elements will only be executed if the condition evaluates to true.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Once the bindings on child elements have been evaluated once they will remain data bound even if the condition changes to false.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This means that any calculations caused by bindings on child elements will continue to operate even after the child elements are hidden.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Consider this when evaluating the performance of your control.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Condition (expression)</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Determines whether to render the children elements.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The following example conditionally binds the <bpt id="p1">**</bpt>show<ept id="p1">**</ept> and <bpt id="p2">**</bpt>text<ept id="p2">**</ept> elements.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>sizing</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Specifies the height and width of the control.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The sizing binding handler should always be applied to the root element of the template (the element that has the id attribute), and supplied the height and width values from the X++ instance of the control by using the $dyn.layout.sizing helper function.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>See Example 1.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The arguments are passed an object containing height and width properties.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Height (int)</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Determines the height in pixels of the element on which the binding handler is applied.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Width (int)</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Determines the width in pixels of the element on which the binding handler is applied.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The following example specifies the size of <bpt id="p1">**</bpt>MyControl.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The following example makes the control large or small depending on the value of the <bpt id="p1">**</bpt>bigbox<ept id="p1">**</ept> variable.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>text</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Binds to the textContent property of the element.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The text binding handler is meant to be used with UI text.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>It is not meant to bind non-string values (such as numbers, dates or Booleans) to the element.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Convert all values into strings before supplying them to the binding handler, by using the dyn.format function.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The text binding handler will replace all of the content inside of the element with the binding, whether or not the existing content is HTML or simple text.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Text (string)</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The text to bind to.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The following example binds the textContext property of the div element to the text property on the control.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>vars</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Creates an HTML scope variable with the supplied name and value.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The created scope variable is accessible only from bindings in the template.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>In addition, the scope variable is inherited by child elements.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Binding handlers are executed in the order in which they appear on the element.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Since the vars binding adds variables to the binding context, it is a best practice to always place the vars binding before all other bindings on the element.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This will ensure that the subsequent bindings can access scope variables added by the vars binding.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Do not create scope variables with any of the following names, as these names are reserved for framework scope variables: $control, $data, $index, and $value.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Scope variables (object array)</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The object array whose keys are the scope variable names and whose values are the initial values for the scope variables.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The following example creates scope variables named "Hello" and "World" and displays their values.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>For an example, see the foreach binding handler examples.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>visible</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Sets the visibility of the element.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Always supply the visible binding handler on the root element of the template, and bind to the <bpt id="p1">*</bpt>Visible<ept id="p1">*</ept> property from the X++ control.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>This will ensure that the control respects the <bpt id="p1">*</bpt>Visible<ept id="p1">*</ept> property when it is set by a form developer or when it is set by the framework.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If a control is initialized with its <bpt id="p1">*</bpt>Visible<ept id="p1">*</ept> X++ property set to false, then the control will not appear on the form, and it the control’s template will not be loaded in the browser.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>If the control’s <bpt id="p1">*</bpt>Visible<ept id="p1">*</ept> X++ property is set to true at a later time, then the control’s template will be loaded and instantiated in the browser at that time.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A control’s <bpt id="p1">*</bpt>Visible<ept id="p1">*</ept> X++ property can be inherited from its parent controls on the form.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>An element’s visibility may be controlled by its parent elements, controls and containers, regardless of whether the visible binding handler is applied.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The cascading nature of visibility is a standard HTML behavior and is not specific to the control framework.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Visible (boolean)</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Determines whether the element is visible or not.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The following example sets the visibility of the control's outermost div element.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>HTML: Scope variables</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Scope variables can be used when binding values to binding handlers.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Scope variables are only accessible from within the control’s HTML template, and can only be used with the data binding attribute.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Scope variables are neither accessible from other HTML attributes nor from the control’s JavaScript class, but scope variables can be used in inline JavaScript expressions, functions and JSON objects that are passed to binding handlers.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>$control</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>$control<ept id="p1">*</ept> scope variable provides the bindings in the HTML template with access to the properties and functions on the control’s JavaScript instance.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The following example binds visibility of the div element to the of Visible property of the control.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>$data</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>$data<ept id="p1">*</ept> scope variable provides elements with access to their current binding context.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Only variables defined in $data (the binding context) or scope variables, can be used inside of HTML bindings.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Variables that do not exist in the current binding context and do not exist as current scope variable cannot be accessed from an HTML binding.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>In most cases the binding context will be the control’s JavaScript instance, so <bpt id="p1">*</bpt>$data<ept id="p1">*</ept> and <bpt id="p2">*</bpt>$control<ept id="p2">*</ept> will be equivalent.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>However, in some cases the binding context can change.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>For example, for elements inside of a <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding, <bpt id="p2">*</bpt>$data<ept id="p2">*</ept> provides the elements with access to the current array item.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>In cases involving multiple nested <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> bindings, elements in a nested binding may need access to the array item in a parent <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> binding.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To access items in the parent <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding, you may create a scope variable which will be accessible to elements in the nested <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> biding.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>For an example, see the foreach binding handler examples.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>$index</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The $index scope variable provides a 0-based index of the array item when in a <bpt id="p1">**</bpt>foreach<ept id="p1">**</ept> binding.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>For an example, see the foreach binding handler examples.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>JavaScript: Inherited properties</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Visible</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Visible<ept id="p1">**</ept> property is inherited from the base JavaScript class (via <bpt id="p2">**</bpt>$dyn.ui.Controls.apply<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>There is also a <bpt id="p1">**</bpt>Visible<ept id="p1">**</ept> property in X++ that the runtime class in inherits from the base <bpt id="p2">**</bpt>FormControl<ept id="p2">**</ept> X++ class.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Simply bind this property to the visible binding handler and place it on the root element of the HTML template for your control.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The framework takes care of the rest.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the Visible property.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Observable framework</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>$dyn.observe</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Subscribes a function to changes of an observable.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>We recommend that you use dispose.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Observable (observable)</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Instance of an observable.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Or a function, which will become a $dyn.computed.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Observer (function)</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Function is invoked upon registration and also later when the observable is updated.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Function is invoked with one argument, the value of the observable.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>If Observer returns false, then we un-subscribed automatically.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Context (options, optional)</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Context to pass to the Observer.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The Context becomes the <bpt id="p1">***</bpt>this<ept id="p1">***</ept> variable inside of the observer.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>DisposableObserver (options, optional)</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Unsubscribes the supplied DisposableObserver</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Subscription (object)</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Observable, ID, Dispose function (public) used to unsubscribe The following example subscribes to the myObs observable, and executes the supplied function whenever the myObs observable value changes.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The following example shows how a function can automatically subscribe to observables simply by accessing the observable using $dyn.value.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The first function is treated like an observable whose value is dependent upon the value of two other observables (FirstName and LastName).</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Every time one of the observables  (FirstName or LastName) changes its value, then the first function has also changed its value.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>When this happens, the second function (the callback function) will log the concatenation of the observable values to the console.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The following example performs similarly to the previous example.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>However, this example uses a computed observable, named myComp, to handle the concatenation.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>$dyn.observable</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Creates an observable variable.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Initial value (optional)</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The value to initialize the observable to.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Observable (function)</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The newly created observable The following example creates and observable variable named "Hello".</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>$dyn.value</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Accesses the value of an observable variable.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>$dyn.value<ept id="p1">**</ept> is called from inside of an observer function (such as an observer passed to <bpt id="p2">**</bpt>$dyn.observe<ept id="p2">**</ept> or <bpt id="p3">**</bpt>$dyn.computed<ept id="p3">**</ept>, as well as the binding expression passed to a binding handler) a dependency on the observable is created.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>This will cause the binding handler or callback to re-execute whenever the value of the observable changes.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Because this dependency is created automatically when using <bpt id="p1">**</bpt>$dyn.value<ept id="p1">**</ept>, it is important to only use <bpt id="p2">**</bpt>$dyn.value<ept id="p2">**</ept> when you intentionally wish to create such a dependency.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If you wish to access the value of an observable without creating a dependency, you should use $dyn.peek.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Observable</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The observable property whose value to access.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The current value in the observable property The following example returns the value of variable named observable and prints it to the console.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>$dyn.peek</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Accesses the value of an observable variable, without creating a dependency.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For more information about dependency, see the $dyn.value function.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Observable</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The observable whose value to access.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The current value in the observable The following example returns the value of variable named observable and prints it to the console.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>$dyn.computed</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Wraps a function with an observability scope.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If observables are accessed from inside of the function by using the <bpt id="p1">**</bpt>$dyn.value<ept id="p1">**</ept> function, then the function will re-execute whenever the values of those observables change.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Observables that are accessed by using <bpt id="p1">**</bpt>$dyn.peek<ept id="p1">**</ept> will not cause the function to re-execute when their values change.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Observer (function)</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Function is invoked upon registration and can also be invoked later due to an observable value change.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The Observer automatically observes any observables that are accessed using $dyn.value from within the scope of the function.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Context (options, optional)</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Context to pass to the Observer.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The Context becomes the <bpt id="p1">*</bpt>this<ept id="p1">*</ept> variable inside of the observer.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>DisposableObserver (options, optional)</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Unsubscribes the supplied DisposableObserver</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Anything (optional)</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>If the Observer returns a value, then that value will also be returned by the call to <bpt id="p1">**</bpt>$dyn.computed<ept id="p1">**</ept> on the first time <bpt id="p2">**</bpt>$dyn.computed<ept id="p2">**</ept> is called (upon registration) as well every time the observer is invoked.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Framework functions</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>$dyn.callFunction</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Calls the apply method on specified function.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Is cannot be used during an interaction.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Function (function or observable)</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The function to call.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>If an observable is supplied, the current value of the observable will be retrieved and used as the function.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>This (object, optional)</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The object to assign to <bpt id="p1">*</bpt>this<ept id="p1">*</ept> within the scope of the function.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Arguments (array, optional)</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the supplied function.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Callback (function, optional)</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The callback function to call when the supplied Function has returned.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The callback will be passed any values that are returned by the function that is called.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The following example calls the <bpt id="p1">**</bpt>apply<ept id="p1">**</ept> function on the <bpt id="p2">**</bpt>printName<ept id="p2">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The following example calls the <bpt id="p1">**</bpt>getWholeName<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>$dyn.format</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Builds a string using the supplied values according to the supplied format.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Format (string)</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The format in which to build the string.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Use bracket notation for placeholders.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Values (optional)</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The comma separated values to use in the format</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>FormattedString (string)</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The string after formatting has been applied The following example builds a string with the first, middle initial, and the last name.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>$dyn.label</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Usage</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Provides access to any labels stored via the Globalization API.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Identifier (string)</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The label ID, as specified to the Globalization API.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Value (string)</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The label string in the current culture, if the Identifier is found.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Otherwise, returns the supplied Identifier as a string.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The following example returns and prints the label named "greeting".</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>CSS</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Add namespaces to all CSS class names by prepending the class name with the control’s template ID.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>This will prevent your control and its styles from conflicting with other controls in the client.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Flexbox</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>For advanced layout scenarios we encourage using Flexbox.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Flexbox is compatible with the Extensible Control framework.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using CSS flexible boxes (Mozilla Developer Network)<ept id="p1">](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)</ept> Please see the <bpt id="p2">[</bpt>public Flexbox documentation<ept id="p2">](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)</ept> for explanations and examples of the following topics:</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Responsive layouts</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Building columns and rows</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Arranging elements horizontally or vertically</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Arranging nesting elements</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Auto-sizing elements to stretch and shrink</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Locking/Freezing elements</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Building scrollable elements</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Control Lifecycle Diagrams</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Control Instantiation</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>ExtensibilityProcess<ept id="p1">](./media/extensibilityprocess-951x1024.png)](./media/extensibilityprocess.png)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>