<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd6f993e5c5fe343c6484383ff097f87f5dbf894</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scm\pim\expression-constraints-table-constraints-product-configuration-models.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">basic</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab6a58a4b5e8192b21d562ba07d30614c6e71ff5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">555a8ed04f49993303b695d247f391d4ad9bfc59</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Expression constraints and table constraints in product configuration models</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic describes the use of expression constraints and table constraints.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Constraints control the attribute values that you can select when you configure products for a sales order, sales quotation, purchase order, or production order.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>You can use expression constraints or table constraints, depending on how you prefer to build the constraints.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Expression constraints and table constraints in product configuration models</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes the use of expression constraints and table constraints.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Constraints control the attribute values that you can select when you configure products for a sales order, sales quotation, purchase order, or production order.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use expression constraints or table constraints, depending on how you prefer to build the constraints.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Constraints are used to control the attribute values that you can select when you configure products for a sales order, sales quotation, purchase order, or production order.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use expression constraints or table constraints, depending on how you prefer to build the constraints.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>What are expression constraints?</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Expression constraints are characterized by an expression that uses arithmetic and Boolean operators and functions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An expression constraint is written for a specific component in a product configuration model.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It can't be reused by or shared with another component.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the expression constraints for a component can reference attributes of the component's subcomponents.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>What are table constraints?</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Table constraints list the combinations of values that are allowed for attributes when you configure a product.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Table constraint definitions can be used generically.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you create a table constraint for a component in a product configuration model, you select a table constraint definition.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To create the combinations that are allowed, you add attributes of specific types to the components.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each attribute type has a specific value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example of a table constraint</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example shows how you can limit the configuration of a speaker to specific cabinet finishes and fronts.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first table shows the cabinet finishes and fronts that are generally available for configuration.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The values are defined for the <bpt id="p1">**</bpt>Cabinet finish<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Front grill<ept id="p2">**</ept> attribute types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Attribute type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Values</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Cabinet finish</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Black, Oak, Rosewood, White</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Front grill</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Black, Metal, White</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The next table shows the combinations that are defined by the <bpt id="p1">**</bpt>Color and finish<ept id="p1">**</ept> table constraint.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By using this table constraint, you can configure a speaker that has an oak finish and a black grill, a Rosewood finish and a white grill, and so on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Finish</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Grill</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Oak</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Rosewood</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>White</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>White</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>White</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>White</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Metal</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can create system-defined and user-defined table constraints.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>System-defined and user-defined table constraints<ept id="p1">](system-defined-user-defined-table-constraints.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>What syntax should be used to write constraints?</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You must use Optimization Modeling Language (OML) syntax when you write constraints.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The system uses Microsoft Solver Foundation constraint solver to solve the constraints.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Should I use table constraints or expression constraints?</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can use either expression constraints or table constraints, depending on how you prefer to build the constraints.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You build a table constraint as a matrix, whereas an expression constraint is an individual statement.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When you configure a product, it doesn't matter what kind of constraint is used.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example shows how the two methods differ.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you configure a product by using the following constraint setups, these combinations are allowed:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A product in the color Black, and in size 30 or 50</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A product in the color Red and in size 20</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Table constraint setup</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Color</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Size</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>30</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Black</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>50</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Red</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>20</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Expression constraint setup</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>(Color == "Black" &amp; (size == "30" | size == "50")) | (color == "Red" &amp; size = "20")</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Should I use operators or infix notation when I write expression constraints?</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can write an expression constraint by using either the available prefix operators or infix notation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">**</bpt>Min<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Max<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Abs<ept id="p3">**</ept> operators, you can't use infix notation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These operators are included as standard operators in most programming languages.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>What operators and infix notation can I use when I write expression constraints?</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following tables list the operators and infix notation that you can use when you write an expression constraint for a component in a product configuration model.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The examples in the first table show how to write an expression by using either infix notation or operators.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Implies</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is true if the first condition is false, the second condition is true, or both.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Implies[a, b], infix: a -: b</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Implies[x != 0, y <ph id="ph1">&amp;gt;</ph>= 0]</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x != 0 -: y <ph id="ph1">&amp;gt;</ph>= 0</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>And</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This is true only if all conditions are true.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>True<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>And[args], infix: a <ph id="ph1">&amp;amp;</ph> b <ph id="ph2">&amp;amp;</ph> ... <ph id="ph3">&amp;amp;</ph> z</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> And[x == 2, y <ph id="ph1">&amp;lt;</ph>= 2]</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x == 2 <ph id="ph1">&amp;amp;</ph> y <ph id="ph2">&amp;lt;</ph>= 2</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Or</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is true if any condition is true.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>False<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Or[args], infix: a | b | ... | z</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Or[x == 2, y <ph id="ph1">&amp;lt;</ph>= 2]</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x == 2 | y <ph id="ph1">&amp;lt;</ph>= 2</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Plus</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This sums its conditions.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>0<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Plus[args], infix: a + b + ... + z</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Plus[x, y, 2] == z</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x + y + 2 == z</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Minus</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This negates its argument.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It must have exactly one condition.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Minus[expr], infix: -expr</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Minus[x] == y</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> -x == y</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Abs</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This takes the absolute value of its condition.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It must have exactly one condition.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Abs[expr]</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Abs[x]</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Times</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This takes the product of its conditions.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>1<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Times[args], infix: a * b * ... * z</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Times[x, y, 2] == z</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x * y * 2 == z</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Power</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This takes an exponential.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It applies exponentiation from right to left.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>(In other words, it's right-associative.) Therefore, <bpt id="p1">&lt;strong&gt;</bpt>Power[a, b, c]<ept id="p1">&lt;/strong&gt;</ept> is equivalent to <bpt id="p2">&lt;strong&gt;</bpt>Power[a, Power[b, c]]<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Power<ept id="p1">&lt;/strong&gt;</ept> can be used only if the exponent is a positive constant.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Power[args], infix: a ^ b ^ ... ^ z</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Power[x, 2] == y</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> x ^ 2 == y</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Max</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This produces the largest condition.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>Infinity<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Max[args]</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Max[x, y, 2] == z</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Min</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This produces the smallest condition.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If the number of conditions is 0 (zero), it produces <bpt id="p1">&lt;strong&gt;</bpt>Infinity<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Min[args]</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Min[x, y, 2] == z</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Not</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This produces the logical inverse of its condition.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It must have exactly one condition.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Not[expr], infix: !expr</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Operator:<ept id="p1">&lt;/strong&gt;</ept> Not[x] <ph id="ph1">&amp;amp;</ph> Not[y == 3]</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Infix notation:<ept id="p1">&lt;/strong&gt;</ept> !x!(y == 3)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The examples in the next table show how to write infix notation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Infix notation</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>x + y + z</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Addition</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>x <ph id="ph1">\*</ph> y <ph id="ph2">\*</ph> z</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>x - y</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Binary subtraction is translated the same as binary addition where there is a negated second.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>x ^ y ^ z</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Exponentiation that has right associativity</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>!x</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Boolean not</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>x -: y</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Boolean implication</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>z</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Boolean or</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>x &amp; y &amp; z</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Boolean and</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>x == y == z</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Equality</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>x != y != z</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Distinct</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>x <ph id="ph1">&amp;lt;</ph> y <ph id="ph2">&amp;lt;</ph> z</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Less than</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>x <ph id="ph1">&amp;gt;</ph> y <ph id="ph2">&amp;gt;</ph> z</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Greater than</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>x <ph id="ph1">&amp;lt;</ph>= y <ph id="ph2">&amp;lt;</ph>= z</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Less than or equal to</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>x <ph id="ph1">&amp;gt;</ph>= y <ph id="ph2">&amp;gt;</ph>= z</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Greater than or equal to</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>(x)</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Parentheses override default precedence.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Why aren't my expression constraints validated correctly?</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can't use reserved keywords as solver names for attributes, components, or subcomponents in a product configuration model.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Here is a list of the reserved keywords that you can't use:</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Ceiling</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Equal</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Floor</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Less</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Greater</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Implies</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Log</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Max</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Min</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Minus</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Plus</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Power</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Times</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Slot</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Model</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Decision</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Goal</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>[Create an expression constraint (Task guide)(/dynamics365/unified-operations/supply-chain/pim/tasks/add-expression-constraint-product-configuration-model)</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add a calculation to a product configuration model (Task guide)<ept id="p1">](/dynamics365/unified-operations/supply-chain/pim/tasks/add-calculation-product-configuration-model)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>