<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c04bbccf22ab830404206cd54b4cb8e97b6a822</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\analytics\general-electronic-reporting-formula-designer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">basic</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b91867afb14229e83681e843492107a371190c1a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bb34553abaff741ccb38e30cc82f0da6ef5fd44</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Formula designer in Electronic reporting</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic explains how to use the formula designer in Electronic reporting (ER).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>When you design a format for a specific electronic document in ER, you can use Microsoft Excel–like formulas for data transformation to meet the requirements for that document's fulfillment and formatting.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Various types of functions are supported -  text, date and time, mathematical logical, information, data type conversion, and other (business domain–specific functions).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Formula designer in Electronic reporting</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains how to use the formula designer in Electronic reporting (ER).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you design a format for a specific electronic document in ER, you can use Microsoft Excel–like formulas for data transformation to meet the requirements for that document's fulfillment and formatting.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Various types of functions are supported -  text, date and time, mathematical, logical, information, data type conversion, and other (business domain–specific functions).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Formula designer overview</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Electronic reporting (ER) supports the formula designer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, at design time, you can configure expressions that can be used for the following tasks at run time:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Transforming data that is received from a Microsoft Dynamics 365 for Finance and Operations database, and that should be populated in an ER data model that is designed to be a data source for ER formats (filtering, grouping, data type conversion, etc.).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Formatting data that must be sent to a generating electronic document in accordance with the layout and conditions of a specific ER format (in accordance with the requested language or culture, encoding, etc.).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Controlling the process of electronic document generation (enabling/disabling output of specific elements of the format, depending on processing data, interrupting document creation, throwing messages for end users, etc.).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The formula designer page can be opened when you do any of the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Bind data source items to data model components.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Bind data source items to format components.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Complete maintenance of calculated fields as part of data sources.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Define the visibility conditions for user input parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Design a format's transformations.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Define the enabling conditions for the format's components.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Define the file names for the format's FILE components.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Define the conditions for process control validations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Define the message text for process control validations.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Designing ER formulas</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Data binding</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The ER formula designer can be used to define an expression that transforms data that is received from data sources, so that the data can be populated in the data consumer at run time:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>From Finance and Operations data sources and run-time parameters to an ER data model.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>From an ER data model to an ER format.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>From Finance and Operations data sources and run-time parameters to an ER format.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following illustration shows the design of an expression of this type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, the expression returns the value of the <bpt id="p1">**</bpt>Intrastat.AmountMST<ept id="p1">**</ept> field of the Finance and Operations <bpt id="p2">**</bpt>Intrastat<ept id="p2">**</ept> table, after that value has been rounded to two decimal places.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-expression-binding<ept id="p1">](./media/picture-expression-binding.jpg)](./media/picture-expression-binding.jpg)</ept> The following illustration shows how an expression of this type can be used.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this example, the result of the designed expression is populated in the <bpt id="p1">**</bpt>Transaction.InvoicedAmount<ept id="p1">**</ept> component of the <bpt id="p2">**</bpt>Tax reporting model<ept id="p2">**</ept> data model.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-expression-binding2<ept id="p1">](./media/picture-expression-binding2.jpg)](./media/picture-expression-binding2.jpg)</ept> At run time, the designed formula, <bpt id="p2">**</bpt>ROUND (Intrastat.AmountMST, 2)<ept id="p2">**</ept>, will round the value of the <bpt id="p3">**</bpt>AmountMST<ept id="p3">**</ept> field for each record of the <bpt id="p4">**</bpt>Intrastat<ept id="p4">**</ept> table to two decimal places, and populate the rounded value to the <bpt id="p5">**</bpt>Transaction.InvoicedAmount<ept id="p5">**</ept> component of the <bpt id="p6">**</bpt>Tax reporting<ept id="p6">**</ept> data model.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Data formatting</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The ER formula designer can be used to define an expression that formats data that is received from data sources, so that the data can be sent as part of the generating electronic document.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you have formatting that must be applied as a typical rule that should be reused for a format, you can introduce that formatting one time in a format configuration as a named transformation that has a formatting expression.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This named transformation can then be linked with many format components for which the output must be formatted according to the expression that was created.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following illustration shows the design of a transformation of this type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In this example, the <bpt id="p1">**</bpt>TrimmedString<ept id="p1">**</ept> transformation takes incoming data of the <bpt id="p2">**</bpt>String<ept id="p2">**</ept> data type, and truncates leading and trailing spaces when it returns the string value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-transformation-design<ept id="p1">](./media/picture-transformation-design.jpg)](./media/picture-transformation-design.jpg)</ept> The following illustration shows how a transformation of this type can be used.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, several format components that send text as output to the generating electronic document at run time refer to the <bpt id="p1">**</bpt>TrimmedString<ept id="p1">**</ept> transformation by name.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-transformation-usage<ept id="p1">](./media/picture-transformation-usage.jpg)](./media/picture-transformation-usage.jpg)</ept> When format components refer to the **TrimmedString **transformation (for example, the <bpt id="p2">**</bpt>partyName<ept id="p2">**</ept> component in the preceding illustration) this sends text as output to the generating document.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The text does not include leading and trailing spaces.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you have formatting that must be applied individually, you can introduce that formatting as an individual expression of a binding of a specific format component.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following illustration shows an expression of this type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this example, the <bpt id="p1">**</bpt>partyType<ept id="p1">**</ept> format component is bound to the data source via an expression that converts incoming data from the <bpt id="p2">**</bpt>Model.Company.RegistrationType<ept id="p2">**</ept> field in the data source to uppercase text and sends that text as output to the electronic document.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-binding-with-formula<ept id="p1">](./media/picture-binding-with-formula.jpg)](./media/picture-binding-with-formula.jpg)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Process flow control</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The ER formula designer can be used to define expressions that control the process flow of generating documents.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Define conditions that determine when a document creation process must be stopped.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specify expressions that either create messages for the end user about stopped processes or throw execution log messages about the continuing process of report generation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specify the file names of generating documents, and control conditions of their creation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each rule of the process flow control is designed as an individual validation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following illustration shows a validation of this type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Here is an explanation of the configuration in this example:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The validation is evaluated when the <bpt id="p1">**</bpt>INSTAT<ept id="p1">**</ept> node is created in the generating XML file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the list of transactions is empty, the validation stops the execution process and returns <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The validation returns an error message that includes the text of label SYS70894 in the user's preferred language.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-validation<ept id="p1">](./media/picture-validation.jpg)](./media/picture-validation.jpg)</ept> The ER formula designer can also be used to specify a file name for a generating electronic document and control the file creation process.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following illustration shows the design of a process flow control of this type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Here is an explanation of the configuration in this example:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The list of records from the <bpt id="p1">**</bpt>model.Intrastat<ept id="p1">**</ept> data source is divided into batches, each of which contains up to 1,000 records.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The output creates a zip file that contains one file in XML format for every batch that was created.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An expression returns a file name for generating electronic documents by concatenating the file name and file extension.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For the second batch and all subsequent batches, the file name contains the batch ID as a suffix.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An expression enables (by returning <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>) the process of file creation for batches that contain at least one record.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>picture-file-control<ept id="p1">](./media/picture-file-control.jpg)](./media/picture-file-control.jpg)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Basic syntax</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>ER expressions can contain any or all of the following elements:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Constants</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>References</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Paths</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Constants</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can use text and numeric constants (values that aren't calculated) when you design expressions.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, the expression **VALUE ("100") + 20 **uses the numeric constant 20 and the string constant “100”, and returns the numeric value <bpt id="p1">**</bpt>120<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The ER formula designer supports escape sequences, which means that you can specify the expression string that should be handled differently.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the expression <bpt id="p1">**</bpt>"Leo Tolstoy ""War and Peace"" Volume 1"<ept id="p1">**</ept> returns the text string <bpt id="p2">**</bpt>Leo Tolstoy "War and Peace" Volume 1<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following table shows the arithmetic operators that you can use to perform basic mathematical operations, such as addition, subtraction, division, and multiplication.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Addition</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>1+2</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Subtraction Negation</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>5-2 -1</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>7<ph id="ph1">\*</ph>8</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Division</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>9/3</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following table shows the comparison operators that are supported, and that you can use to compare two values.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Equal</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>X=Y</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Greater than</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>X<ph id="ph1">&amp;gt;</ph>Y</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Less than</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>X<ph id="ph1">&amp;lt;</ph>Y</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Greater than or equal to</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>X<ph id="ph1">&amp;gt;</ph>=Y</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Less than or equal to</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>X<ph id="ph1">&amp;lt;</ph>=Y</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Not equal to</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>X<ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph>Y</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Additionally, you can use an ampersand (&amp;) as a text concatenation operator to join, or concatenate, one or more text strings into a single piece of text.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Concatenate</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>"Nothing to print" &amp; ": " &amp; "no records found"</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Operator precedence</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The order in which the parts of a compound expression are evaluated is important.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For example, the result of the expression** 1 + 4 / 2** differs, depending on whether the addition operation or the division operation is performed first.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can use parentheses to explicitly define how an expression is evaluated.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, to indicate that the addition operation should be performed first, you can modify the preceding expression to <bpt id="p1">**</bpt>(1 + 4) / 2<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the order of operations that must be performed in an expression isn't explicitly defined, the order is based on the default precedence that is assigned to the supported operators.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following tables shows the operators and the precedence that is assigned to each.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Operators that have higher precedence (for example, 7) are evaluated before operators that have lower precedence (for example, 1).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Precedence</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>7</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Grouping</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>( …</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>)</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>6</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Member access</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Function call</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>( …</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>)</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Multiplicative</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph> …</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>/ …</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Additive</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>+ …</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>- …</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Comparison</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph> …</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>= …</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> =</ph><ph id="ph2">&amp;gt;</ph> …</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;gt;</ph> …</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>= …</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph><ph id="ph2">&amp;gt;</ph> …</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Separation</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>…</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>, …</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Operators on the same line have equal precedence.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If an expression includes more than one of these operators, the expression is evaluated from left to right.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example, the expression <bpt id="p1">**</bpt>1 + 6 / 2 <ph id="ph1">\*</ph> 3 <ph id="ph2">&amp;gt;</ph> 5<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>We recommend that you use parentheses to explicitly indicate the desired order of evaluation for expressions, to make the expressions easier to read and maintain.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>References</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>All data sources of the current ER component (either a model or a format) that are available during the design of an expression can be used as named references.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, the current ER data model contains the <bpt id="p1">**</bpt>ReportingDate<ept id="p1">**</ept> data source, which returns a value of the <bpt id="p2">**</bpt>DATETIME<ept id="p2">**</ept> data type.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To properly format that value in the generating document, you can reference the data source in the expression as follows: <bpt id="p1">**</bpt>DATETIMEFORMAT (ReportingDate, "dd-MM-yyyy")<ept id="p1">**</ept> All characters in the name of a referencing data source that don't represent a letter of the alphabet must be preceded by a single quotation mark (').</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the name of a referencing data source contains at least one symbol that doesn't represent a letter of the alphabet (for example, punctuation marks or other written symbols), the name must be enclosed in single quotation marks.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Today's date &amp; time<ept id="p1">**</ept> data source must be referred to in an ER expression as follows: <bpt id="p2">**</bpt>'Today''s date &amp; time'<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>name()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Customers<ept id="p2">**</ept> data source must be referred to in an ER expression as follows: <bpt id="p3">**</bpt>Customers.'name()'<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Note that the following syntax is used to call methods of the Dynamics 365 for Operation data sources with parameters:</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The isLanguageRTL method of the System data source with a parameter EN-US of the string data type must be referred to in an ER expression as follows: System.’isLanguageRTL’(“EN-US”).</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Quotation marks are not mandatory when a method name contains only alphanumeric symbols.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>They are mandatory for a method of a table when the name includes brackets.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When the System data source is added to an ER mapping which refers to the Dynamics 365 for Operation application class Global, the expression returns boolean value, FALSE.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The modified expression, System.’</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>isLanguageRTL’(“AR”) returns boolean value, TRUE.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Note that the passing to such methods parameters can be defined with the following limitations:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Only constants can be passed to such methods, the value of which are defined at design time.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Only primitive (basic) data types are supported for such parameters (integer, real, boolean, string, etc.).</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Path</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>When an expression references a structured data source, you can use the path definition to select a specific primitive element of that data source.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A dot character (.) is used to separate individual elements of a structured data source.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For example, the current ER data model contains the <bpt id="p1">**</bpt>InvoiceTransactions<ept id="p1">**</ept> data source, which returns a list of records.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>InvoiceTransactions<ept id="p1">**</ept> record structure contain the <bpt id="p2">**</bpt>AmountDebit<ept id="p2">**</ept> and <bpt id="p3">**</bpt>AmountCredit<ept id="p3">**</ept> fields, which return numeric values.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Therefore, you can design the following expression to calculate the invoiced amount: <bpt id="p1">**</bpt>InvoiceTransactions.AmountDebit - InvoiceTransactions.AmountCredit<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The next section describes the functions that can be used in ER expressions.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>All data sources of the expression context (the current ER data model or ER format), and also constants, can be used as parameters of calling functions, in accordance with the list of calling function arguments.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, the current ER data model contains the <bpt id="p1">**</bpt>InvoiceTransactions<ept id="p1">**</ept> data source, which returns a list of records.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>InvoiceTransactions<ept id="p1">**</ept> record structure contain the <bpt id="p2">**</bpt>AmountDebit<ept id="p2">**</ept> and <bpt id="p3">**</bpt>AmountCredit<ept id="p3">**</ept> fields, which return numeric values.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Therefore, to calculate the invoiced amount, you can design the following expression that uses the built-in ER rounding function: <bpt id="p1">**</bpt>ROUND (InvoiceTransactions.AmountDebit - InvoiceTransactions.AmountCredit, 2)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Supported functions</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following tables describe the data manipulation functions that you can use to design ER data models and ER reports.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The list of functions isn't fixed and can be extended by developers.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>To see the list of functions that you can use, access the functions pane in the ER formula designer.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Date and time functions</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>ADDDAYS (datetime, days)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Add the specified number of days to the specified datetime value.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ADDDAYS (NOW(), 7)<ept id="p1">**</ept> returns the date and time seven days in the future.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>DATETODATETIME (date)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Convert the specified date value to a datetime value.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETODATETIME (CompInfo. 'getCurrentDate()')<ept id="p1">**</ept> returns the current Finance and Operations session date, 12/24/2015, as <bpt id="p2">**</bpt>12/24/2015 12:00:00 AM<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">**</bpt>CompInfo<ept id="p1">**</ept> is an ER data source of the <bpt id="p2">**</bpt>Finance and Operations/Table<ept id="p2">**</ept> type that refers to the CompanyInfo table.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>NOW ()</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Return the current Finance and Operations application server date and time as a datetime value.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>TODAY ()</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Return the current Finance and Operations application server date as a date value.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>NULLDATE ()</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> date value.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>NULLDATETIME ()</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Return a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> datetime value.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>DATETIMEFORMAT (datetime, format)</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Convert the specified datetime value to a string in the specified format.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>(For information about the supported formats, see <bpt id="p1">[</bpt>standard<ept id="p1">](https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx)</ept> and <bpt id="p2">[</bpt>custom<ept id="p2">](https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx)</ept>.)</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETIMEFORMAT (NOW(), "dd-MM-yyyy")<ept id="p1">**</ept> returns the current Finance and Operations application server date, 12/24/2015, as <bpt id="p2">**</bpt>"24-12-2015"<ept id="p2">**</ept>, according to the specified custom format.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>DATETIMEFORMAT (datetime, format, culture)</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Convert the specified datetime value to a string in the specified format and <bpt id="p1">[</bpt>culture<ept id="p1">](https://msdn.microsoft.com/en-us/goglobal/bb896001.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>(For information about the supported formats, see <bpt id="p1">[</bpt>standard<ept id="p1">](https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx)</ept> and <bpt id="p2">[</bpt>custom<ept id="p2">](https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx)</ept>).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETIMEFORMAT (NOW(), "d", "de")<ept id="p1">**</ept> returns the current Finance and Operations application server date, 12/24/2015, as <bpt id="p2">**</bpt>"24.12.2015"<ept id="p2">**</ept>, according to the selected German culture.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>SESSIONTODAY ()</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Returns the current Dynamics 365 for Finance and Operations session date as date value.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>SESSIONNOW ()</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Returns the current Dynamics 365 for Finance and Operations session date and time as datetime value.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>DATEFORMAT (date, format)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Returns string representation of date using specified format.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATEFORMAT (SESSIONTODAY (), "dd-MM-yyyy")<ept id="p1">**</ept> returns the current Dynamics 365 for Finance and Operations session date 12/24/2015 as “<bpt id="p2">**</bpt>24-12-2015<ept id="p2">**</ept>” according to specified custom format.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>DATEFORMAT (date, format, culture)</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Convert the specified date value to a string in the specified format and <bpt id="p1">[</bpt>culture<ept id="p1">](https://msdn.microsoft.com/en-us/goglobal/bb896001.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>(For information about the supported formats, see <bpt id="p1">[</bpt>standard<ept id="p1">](https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx)</ept> and <bpt id="p2">[</bpt>custom<ept id="p2">](https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx)</ept>).</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETIMEFORMAT (SESSIONNOW (), "d", "de")<ept id="p1">**</ept> returns the current Finance and Operations session date 12/24/2015 as <bpt id="p2">**</bpt>“24.12.2015”<ept id="p2">**</ept> according to selected German culture.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>DAYOFYEAR (date)</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Returns integer representation of the number of days between January 1st and the specified date.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DAYOFYEAR (DATEVALUE ("01-03-2016", "dd-MM-yyyy"))<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>61<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DAYOFYEAR (DATEVALUE ("01-01-2016", "dd-MM-yyyy"))<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data conversion functions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>DATETODATETIME (date)</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Convert the specified date value to a datetime value.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETODATETIME (CompInfo. 'getCurrentDate()')<ept id="p1">**</ept> returns the current Finance and Operations session date, 12/24/2015, as <bpt id="p2">**</bpt>12/24/2015 12:00:00 AM<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">**</bpt>CompInfo<ept id="p1">**</ept> is an ER data source of the <bpt id="p2">**</bpt>Finance and Operations/Table<ept id="p2">**</ept> type that refers to the <bpt id="p3">**</bpt>CompanyInfo<ept id="p3">**</ept> table.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>DATEVALUE (string, format)</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns date representation of a string using a specified format.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATEVALUE ("21-Dec-2016", "dd-MMM-yyyy")<ept id="p1">**</ept> returns the date 12/21/2016 according to specified custom format and the default application’s <bpt id="p2">**</bpt>EN-US<ept id="p2">**</ept> culture.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>DATEVALUE (string, format, culture)</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Returns date representation of a string using a specified format and culture.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATEVALUE ("21-Gen-2016", "dd-MMM-yyyy", “IT”)<ept id="p1">**</ept> returns the date 01/21/2016 according to specified custom format and culture.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>An exception will be thrown for this function’s call, <bpt id="p1">**</bpt>DATEVALUE ("21-Gen-2016", "dd-MMM-yyyy", “EN-US”)<ept id="p1">**</ept> informing that a given string is not recognized as a valid date.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>DATETIMEVALUE (string, format)</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns datetime representation of a string using a specified format.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETIMEVALUE ("21-Dec-2016 02:55:00", "dd-MMM-yyyy hh:mm:ss")<ept id="p1">**</ept> returns the 2:55:00 AM of Dec 21st, 2016 according to specified custom format and the default application’s <bpt id="p2">**</bpt>EN-US<ept id="p2">**</ept> culture.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>DATETIMEVALUE (string, format, culture)</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returns datetime representation of a string using a specified format and culture.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DATETIMEVALUE ("21-Gen-2016 02:55:00", "dd-MMM-yyyy hh:mm:ss", “IT”)<ept id="p1">**</ept> returns the 2:55:00 AM of Dec 21st, 2016 according to a specified custom format and culture.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>An exception will be thrown for this function’s call, <bpt id="p1">**</bpt>DATETIMEVALUE ("21-Gen-2016 02:55:00", "dd-MMM-yyyy hh:mm:ss", “EN-US”)<ept id="p1">**</ept> informing that a given string is not recognized as a valid datetime.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>List functions</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>SPLIT (input, length)</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Split the specified input string into substrings, each of which has the specified length.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return the result as a new list.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>SPLIT (<ph id="ph1">&amp;quot;</ph>abcd<ph id="ph2">&amp;quot;</ph>, 3)<ept id="p1">&lt;/strong&gt;</ept> returns a new list that consists of two records that have a <bpt id="p2">&lt;strong&gt;</bpt>STRING<ept id="p2">&lt;/strong&gt;</ept> field.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The field in the first record contains the text <bpt id="p1">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>abc<ph id="ph2">&amp;quot;</ph><ept id="p1">&lt;/strong&gt;</ept>, and the field in the second record contains the text <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>d<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>SPLITLIST (list, number)</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Split the specified list into batches, each of which contains the specified number of records.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Return the result as a new list of batches that contains the following elements:</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Batches as regular lists (<bpt id="p1">&lt;strong&gt;</bpt>Value<ept id="p1">&lt;/strong&gt;</ept> component)</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The current batch number (<bpt id="p1">&lt;strong&gt;</bpt>BatchNumber<ept id="p1">&lt;/strong&gt;</ept> component)</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>In the following example, the <bpt id="p1">&lt;strong&gt;</bpt>Lines<ept id="p1">&lt;/strong&gt;</ept> data source is created as a record list of three records, which is divided into batches, each of which contains up to two records.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>This shows the designed format layout, where bindings to the <bpt id="p1">&lt;strong&gt;</bpt>Lines<ept id="p1">&lt;/strong&gt;</ept> data source are created to generate output in XML format that presents individual nodes for each batch and the records in it.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following is the result of running the designed format.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>LIST (record 1 [, record 2, ...])</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Return a new list that is created from the specified arguments.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>LIST (model.MainData, model.OtherData)<ept id="p1">&lt;/strong&gt;</ept> returns an empty record, where the list of fields contains all fields of the <bpt id="p2">&lt;strong&gt;</bpt>MainData<ept id="p2">&lt;/strong&gt;</ept> and <bpt id="p3">&lt;strong&gt;</bpt>OtherData<ept id="p3">&lt;/strong&gt;</ept> record lists.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>LISTJOIN (list 1, list 2, ...)</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Return a joined list that is created from lists of specified arguments.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>LISTJOIN (SPLIT (<ph id="ph1">&amp;quot;</ph>abc<ph id="ph2">&amp;quot;</ph>, 1), SPLIT (<ph id="ph3">&amp;quot;</ph>def<ph id="ph4">&amp;quot;</ph>, 1))<ept id="p1">&lt;/strong&gt;</ept> returns the list of six records, where one field of the <bpt id="p2">&lt;strong&gt;</bpt>STRING<ept id="p2">&lt;/strong&gt;</ept> data type contains single letters.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>ISEMPTY (list)</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Return <bpt id="p1">&lt;strong&gt;</bpt>TRUE<ept id="p1">&lt;/strong&gt;</ept> if the specified list doesn't contain any elements.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Otherwise, return <bpt id="p1">&lt;strong&gt;</bpt>FALSE<ept id="p1">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>EMPTYLIST (list)</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return an empty list by using the specified list as a source for the list structure.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>EMPTYLIST (SPLIT (<ph id="ph1">&amp;quot;</ph>abc<ph id="ph2">&amp;quot;</ph>, 1))<ept id="p1">&lt;/strong&gt;</ept> returns a new empty list that has the same structure as the list that is returned by <bpt id="p2">&lt;strong&gt;</bpt>SPLIT<ept id="p2">&lt;/strong&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>FIRST (list)</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return the first record of the specified list, if that record isn't empty.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Otherwise, throw an exception.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>FIRSTORNULL (list)</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Return the first record of the specified list, if that record isn't empty.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Otherwise, return a <bpt id="p1">&lt;strong&gt;</bpt>null<ept id="p1">&lt;/strong&gt;</ept> record.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>LISTOFFIRSTITEM (list)</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Return a list that contains only the first item of the specified list.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>ALLITEMS (path)</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return a new flattened list that represents all items that match the specified path.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The path must be defined as a valid data source path to a data source element of a record list data type.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The path to string, date, etc. data elements should raise an error at design time in ER expression builder.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If you enter <bpt id="p1">&lt;strong&gt;</bpt>SPLIT(<ph id="ph1">&amp;quot;</ph>abcdef<ph id="ph2">&amp;quot;</ph> , 2)<ept id="p1">&lt;/strong&gt;</ept> as a data source (DS), <bpt id="p2">&lt;strong&gt;</bpt>COUNT( ALLITEMS (DS.Value))<ept id="p2">&lt;/strong&gt;</ept> returns <bpt id="p3">&lt;strong&gt;</bpt>3<ept id="p3">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>ORDERBY (list [, expression 1, expression 2, …])</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Return the specified list, which is sorted according to the specified arguments that can be defined as expressions.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;strong&gt;</bpt>Vendor<ept id="p1">&lt;/strong&gt;</ept> is configured as an ER data source that refers to the VendTable table, <bpt id="p2">&lt;strong&gt;</bpt>ORDERBY (Vendors, Vendors.'name()')<ept id="p2">&lt;/strong&gt;</ept> returns the list of vendors that is sorted by name in ascending order.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>REVERSE (list)</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return the specified list in reversed sort order.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;strong&gt;</bpt>Vendor<ept id="p1">&lt;/strong&gt;</ept> is configured as an ER data source that refers to the VendTable table, <bpt id="p2">&lt;strong&gt;</bpt>REVERSE (ORDERBY (Vendors, Vendors.'name()')) )<ept id="p2">&lt;/strong&gt;</ept> returns the list of vendors that is sorted by name in descending order.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>WHERE (list, condition)</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Return the specified list, which is filtered according to the specified condition.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">&lt;strong&gt;</bpt>FILTER<ept id="p1">&lt;/strong&gt;</ept> function, the specified condition is applied to the list in the memory.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;strong&gt;</bpt>Vendor<ept id="p1">&lt;/strong&gt;</ept> is configured as an ER data source that refers to the VendTable table, <bpt id="p2">&lt;strong&gt;</bpt>WHERE(Vendors, Vendors.VendGroup = <ph id="ph1">&amp;quot;</ph>40<ph id="ph2">&amp;quot;</ph>)<ept id="p2">&lt;/strong&gt;</ept> returns the list of vendors that belong to the vendor group 40.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>ENUMERATE (list)</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Return a new list that consists of enumerated records of the specified list, and that exposes the following elements:</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Specified list records as regular lists (<bpt id="p1">&lt;strong&gt;</bpt>Value<ept id="p1">&lt;/strong&gt;</ept> component)</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The current record index (<bpt id="p1">&lt;strong&gt;</bpt>Number<ept id="p1">&lt;/strong&gt;</ept> component)</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>In the following example, the <bpt id="p1">&lt;strong&gt;</bpt>Enumerated<ept id="p1">&lt;/strong&gt;</ept> data source is created as an enumerated list of vendor records from the <bpt id="p2">&lt;strong&gt;</bpt>Vendors<ept id="p2">&lt;/strong&gt;</ept> data source that refers to the <bpt id="p3">&lt;strong&gt;</bpt>VendTable<ept id="p3">&lt;/strong&gt;</ept> table.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Here is the format, where data bindings are created to generate output in XML format that presents individual vendors as enumerated nodes.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This is the result of running the designed format.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>COUNT (list)</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Return the number of records in the specified list, if the list isn't empty.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Otherwise, return <bpt id="p1">&lt;strong&gt;</bpt>0<ept id="p1">&lt;/strong&gt;</ept> (zero).</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>COUNT (SPLIT(<ph id="ph1">&amp;quot;</ph>abcd<ph id="ph2">&amp;quot;</ph> , 3))<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt>2<ept id="p2">&lt;/strong&gt;</ept>, because the <bpt id="p3">&lt;strong&gt;</bpt>SPLIT<ept id="p3">&lt;/strong&gt;</ept> function creates a list that consists of two records.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>LISTOFFIELDS (path)</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns a records list created from an argument of one of the following types:</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Model enumeration</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Format enumeration</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Container</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The created list will consist of records with the following fields:</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Label</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The Label and Description fields will return at run-time values based on format’s language settings.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The following example shows the enumeration introduced in a data model.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The following example shows:</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Model enumeration inserted into a report as a data source.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>ER expression designed to use model enumeration as parameter of this function.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Data source of the record list type inserted into a report using the created ER expression.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The following example shows the ER format elements that are bound to the data source of record list type that was created using the LISTOFFIELDS function.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This is the result of the designed format execution.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Note:<ph id="ph1">&lt;/strong&gt;</ph> Translated text for labels and descriptions is populated to ER format output in accordance with the language settings configured for parent FILE and FOLDER format elements.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>STRINGJOIN (list, field name, delimiter)</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Returns the string of concatenated values of a field from a list separated with a selected delimiter.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>If you entered SPLIT(“abc” , 1) as a data source DS, expression STRINGJOIN (DS, DS.Value, “:”) returns “a:b:c”</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>SPLITLISTBYLIMIT (list, limit value, limit source)</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Splits the given list into a new list of sub-lists and returns the result in record list content.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The limit value parameter specifies the value of the limit to split the origin list.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The limit source parameter specifies the step which the total sum is increased on.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The limit is not applied to a single item of the given list when the limit source exceeds the defined limit.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The following example shows the sample format using data sources.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>This is the result format execution that presents the flat list of commodity items.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The following example shows the same format that was adjusted to present the list of commodity items in batches when a single batch must include commodities with the total weight that should not exceed the limit of 9.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This is the result of the adjusted format execution.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> The limit is not applied to the last item of the origin list as the value (11) of its limit’s source (weight) exceeds the defined limit (9).</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Use either the function <bpt id="p1">&lt;strong&gt;</bpt>WHERE<ept id="p1">&lt;/strong&gt;</ept> or the <bpt id="p2">&lt;strong&gt;</bpt>Enabled<ept id="p2">&lt;/strong&gt;</ept> expression of the corresponding format element to ignore (skip) sub-lists during the report generation (if needed).</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>FILTER (list, condition)</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Returns the given list filtered for the specified condition by modifying the query.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">&lt;strong&gt;</bpt>WHERE<ept id="p1">&lt;/strong&gt;</ept> function, the specified condition is applied at the database level to any ER data source of the Table records type.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>FILTER (Vendors, Vendors.VendGroup = <ph id="ph1">&amp;quot;</ph>40<ph id="ph2">&amp;quot;</ph>) returns the list of only vendors belonging to the vendors’ group “40” when <bpt id="p1">&lt;strong&gt;</bpt>Vendor<ept id="p1">&lt;/strong&gt;</ept> is configured as ER data source referring to the <bpt id="p2">&lt;strong&gt;</bpt>VendTable<ept id="p2">&lt;/strong&gt;</ept> table</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Logical functions</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>CASE (expression, option 1, result 1 <ph id="ph1">\[</ph>, option 2, result 2<ph id="ph2">\]</ph> ... <ph id="ph3">\[</ph>, default result<ph id="ph4">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Evaluate the specified expression value against the specified alternative options.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Return the result of the option that is equal to the value of the expression.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Otherwise, return the optionally entered default result (the last parameter that isn't preceded by an option).</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CASE( DATETIMEFORMAT( NOW(), "MM"), "10", "WINTER", "11", "WINTER", "12", "WINTER", "")<ept id="p1">**</ept> returns the string <bpt id="p2">**</bpt>"WINTER"<ept id="p2">**</ept> when the current Finance and Operations session date is between October and December.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns a blank string.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>IF (condition, value 1, value 2)</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Return the specified value 1 when the given condition is met.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Otherwise, return value 2.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>If value 1 and value 2 are records or record lists, the result will have only the fields that exist in both lists.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IF (1=2, "condition is met", "condition is not met")<ept id="p1">**</ept> returns the string <bpt id="p2">**</bpt>"condition is not met"<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>NOT (condition)</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Return the reversed logical value of the specified condition.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOT (TRUE)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>AND (condition 1<ph id="ph1">\[</ph>, condition 2, ...<ph id="ph2">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if <bpt id="p2">*</bpt>all<ept id="p2">*</ept> specified conditions are true.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Otherwise, return <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AND (1=1, "a"="a")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AND (1=2, "a"="a")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>OR (condition 1<ph id="ph1">\[</ph>, condition 2, ...<ph id="ph2">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Return <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> if <bpt id="p2">*</bpt>all<ept id="p2">*</ept> specified conditions are false.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if <bpt id="p2">*</bpt>any<ept id="p2">*</ept> specified condition is true.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OR (1=2, "a"="a")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Mathematical functions</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>ABS (number)</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the specified number (the number without its sign).</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ABS (-1)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt>1<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>POWER (number, power)</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Return the result of raising the specified positive number to the specified power.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>POWER (10, 2)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt>100<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>NUMBERVALUE (string, decimal separator, digit grouping separator)</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Convert the specified string to a number.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The specified symbol is used to separate the integer and fractional parts of a decimal number, and the specified thousands separator is also used.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>NUMBERVALUE(<ph id="ph1">&amp;quot;</ph>1 234,56<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>,<ph id="ph4">&amp;quot;</ph>, <ph id="ph5">&amp;quot;</ph> <ph id="ph6">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns the value <bpt id="p2">&lt;strong&gt;</bpt>1234.56<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>VALUE (string)</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Convert the specified string to a number.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Commas and dot characters (.) are considered decimal separators, and a leading hyphen (-) is used as negative sign.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Throw an exception if other non-numeric characters are encountered in the specified string.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>VALUE (<ph id="ph1">&amp;quot;</ph>1 234,56<ph id="ph2">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> throws an exception.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>ROUND (number, decimals)</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Return the specified number, which is rounded to the specified number of decimal places:</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>If the specified decimals value is more than 0 (zero), the specified number is rounded to the specified number of decimal places.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>If the specified decimals value is 0 (zero), the specified number is rounded to the nearest integer.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>If the specified decimals value is less than 0 (zero), the specified number is rounded to the left of the decimal point.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUND (1200.767, 2)<ept id="p1">&lt;/strong&gt;</ept> rounds to two decimal places and returns <bpt id="p2">&lt;strong&gt;</bpt>1200.77<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUND (1200.767, -3)<ept id="p1">&lt;/strong&gt;</ept> rounds to the nearest multiple of 1,000 and returns <bpt id="p2">&lt;strong&gt;</bpt>1000<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>ROUNDDOWN (number, decimals)</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Return the specified number, which is rounded down (toward zero) to the specified number of decimal places.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> This function behaves like <bpt id="p2">&lt;strong&gt;</bpt>ROUND<ept id="p2">&lt;/strong&gt;</ept>, but it always rounds the specified number down.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUNDDOWN (1200.767, 2)<ept id="p1">&lt;/strong&gt;</ept> rounds down to two decimal places and returns <bpt id="p2">&lt;strong&gt;</bpt>1200.76<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUNDDOWN (1700.767, -3)<ept id="p1">&lt;/strong&gt;</ept> rounds down to the nearest multiple of 1,000 and returns <bpt id="p2">&lt;strong&gt;</bpt>1000<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>ROUNDUP (number, decimals)</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Return the specified number, which is rounded up (away from zero) to the specified number of decimal places.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> This function behaves like <bpt id="p2">&lt;strong&gt;</bpt>ROUND<ept id="p2">&lt;/strong&gt;</ept>, but it always rounds the specified number up.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUNDUP (1200.763, 2)<ept id="p1">&lt;/strong&gt;</ept> rounds up to two decimal places and returns <bpt id="p2">&lt;strong&gt;</bpt>1200.77<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>ROUNDUP (1200.767, -3)<ept id="p1">&lt;/strong&gt;</ept> rounds up to the nearest multiple of 1,000 and returns <bpt id="p2">&lt;strong&gt;</bpt>2000<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data conversion functions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>VALUE (string)</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Convert the specified string to a number.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Commas and dot characters (.) are considered decimal separators, and a leading hyphen (-) is used as a negative sign.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>If other non-numeric characters are encountered in the specified string, an error occurs.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VALUE ("1 234,56")<ept id="p1">**</ept> throws an exception.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>NUMBERVALUE (string, decimal separator, digit grouping separator)</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Convert the specified string to a number.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The specified symbol is used to separate the integer and fractional parts of a decimal number, and the specified thousands separator is also used.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NUMBERVALUE("1 234,56", ",", " ")<ept id="p1">**</ept> returns the value <bpt id="p2">**</bpt>1234.56<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>INTVALUE (string)</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Returns integer representation of a string.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Any available decimal parts will be truncated.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTVALUE (“100.77”)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>100<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>INTVALUE (number)</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Returns integer representation of a number.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Any available decimal parts will be truncated.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INTVALUE (-100.77)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>-100<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>INT64VALUE (string)</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Returns int64 representation of a string.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Any available decimal parts will be truncated.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT64VALUE (“22565422744”)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>22565422744<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>INT64VALUE (number)</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Returns int64 representation of a number.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Any available decimal parts will be truncated.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INT64VALUE (22565422744.00)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>22565422744<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Record functions</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>NULLCONTAINER (list)</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Return a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> record that has the same structure as the specified record list or record.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> This function is obsolete.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>EMPTYRECORD<ept id="p1">**</ept> instead.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NULLCONTAINER (SPLIT ("abc", 1))<ept id="p1">**</ept> returns a new empty record that has the same structure as the list that is returned by the <bpt id="p2">**</bpt>SPLIT<ept id="p2">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>EMPTYRECORD (record)</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Return a <bpt id="p1">**</bpt>null<ept id="p1">**</ept> record that has the same structure as the specified record list or record.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> A <bpt id="p2">**</bpt>null<ept id="p2">**</ept> record is a record where all fields have an empty value (<bpt id="p3">**</bpt>0<ept id="p3">**</ept> <ph id="ph1">\[</ph>zero<ph id="ph2">\]</ph> for numbers, an empty string for strings, and so on).</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EMPTYRECORD (SPLIT ("abc", 1))<ept id="p1">**</ept> returns a new empty record that has the same structure as the list that is returned by the <bpt id="p2">**</bpt>SPLIT<ept id="p2">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Text functions</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>UPPER (string)</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Return the specified string, which is converted to uppercase letters.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>UPPER(<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>SAMPLE<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>LOWER (string)</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Return the specified string, which is converted to lowercase letters.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>LOWER (<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>sample<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>LEFT (string, number of characters)</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Return the specified number of characters from the start of the specified string.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>LEFT (<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>, 3)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>Sam<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>RIGHT (string, number of characters)</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Return the specified number of characters from the end of the specified string.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>RIGHT (<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>, 3)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>ple<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>MID (string, starting position, number of characters)</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Return the specified number of characters from the specified string, starting at the specified position.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>MID (<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>, 2, 3)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>amp<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>LEN (string)</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Return the number of characters in the specified string.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>LEN (<ph id="ph1">&amp;quot;</ph>Sample<ph id="ph2">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt>6<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>CHAR (number)</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Return the string of characters that is referenced by the specified Unicode number.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>CHAR (255)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>ÿ<ph id="ph2">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> The returned string depends on the encoding that is selected in the parent FILE format element.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The list of supported encodings can be found in the <bpt id="p1">&lt;a href="https://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx"&gt;</bpt>Encoding Class<ept id="p1">&lt;/a&gt;</ept> topic.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>CONCATENATE (string 1 [, string 2, …])</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Return all specified text strings, which are joined into one string.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>CONCATENATE (<ph id="ph1">&amp;quot;</ph>abc<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>def<ph id="ph4">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph5">&amp;quot;</ph>abcdef<ph id="ph6">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> The expression <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>abc<ph id="ph2">&amp;quot;</ph> <ph id="ph3">&amp;amp;</ph> <ph id="ph4">&amp;quot;</ph>def<ph id="ph5">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept> also returns <bpt id="p3">&lt;strong&gt;</bpt><ph id="ph6">&amp;quot;</ph>abcdef<ph id="ph7">&amp;quot;</ph><ept id="p3">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>TRANSLATE (string, pattern, replacement)</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Return the specified string, in which all occurrences of the characters in the specified pattern string are replaced by the characters at the corresponding position of the specified replacement string.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>TRANSLATE (<ph id="ph1">&amp;quot;</ph>abcdef<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>cd<ph id="ph4">&amp;quot;</ph>, <ph id="ph5">&amp;quot;</ph>GH<ph id="ph6">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> replaces the pattern <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph7">&amp;quot;</ph>cd<ph id="ph8">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept> with the string <bpt id="p3">&lt;strong&gt;</bpt><ph id="ph9">&amp;quot;</ph>GH<ph id="ph10">&amp;quot;</ph><ept id="p3">&lt;/strong&gt;</ept> and returns <bpt id="p4">&lt;strong&gt;</bpt><ph id="ph11">&amp;quot;</ph>abGHef<ph id="ph12">&amp;quot;</ph><ept id="p4">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>REPLACE (string, pattern, replacement, regular expression flag)</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>When the specified regular expression flag is <bpt id="p1">&lt;strong&gt;</bpt>true<ept id="p1">&lt;/strong&gt;</ept>, return the specified string, which is modified by applying the regular expression that is specified as a pattern argument for this function.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>This expression is used to find characters that must be replaced.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Characters of the specified replacement argument are used to replace characters that are found.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>When the specified regular expression flag is <bpt id="p1">&lt;strong&gt;</bpt>false<ept id="p1">&lt;/strong&gt;</ept>, this function behaves like <bpt id="p2">&lt;strong&gt;</bpt>TRANSLATE<ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>REPLACE (<ph id="ph1">&amp;quot;</ph>+1 923 456 4971<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>[^0-9]<ph id="ph4">&amp;quot;</ph>, <ph id="ph5">&amp;quot;</ph><ph id="ph6">&amp;quot;</ph>, true)<ept id="p1">&lt;/strong&gt;</ept> applies a regular expression that removes all non-numeric symbols, and returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph7">&amp;quot;</ph>19234564971<ph id="ph8">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>REPLACE (<ph id="ph1">&amp;quot;</ph>abcdef<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>cd<ph id="ph4">&amp;quot;</ph>, <ph id="ph5">&amp;quot;</ph>GH<ph id="ph6">&amp;quot;</ph>, false)<ept id="p1">&lt;/strong&gt;</ept> replaces the pattern <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph7">&amp;quot;</ph>cd<ph id="ph8">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept> with the string <bpt id="p3">&lt;strong&gt;</bpt><ph id="ph9">&amp;quot;</ph>GH<ph id="ph10">&amp;quot;</ph><ept id="p3">&lt;/strong&gt;</ept> and returns <bpt id="p4">&lt;strong&gt;</bpt><ph id="ph11">&amp;quot;</ph>abGHef<ph id="ph12">&amp;quot;</ph><ept id="p4">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>TEXT (input)</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Return the specified input, which is converted to a text string that is formatted according to the server locale settings of the current Finance and Operations instance.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>For values of the <bpt id="p1">&lt;strong&gt;</bpt>real<ept id="p1">&lt;/strong&gt;</ept> type, the string conversion is limited to two decimal places.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>If the Finance and Operations instance server locale is defined as <bpt id="p1">&lt;strong&gt;</bpt>EN-US<ept id="p1">&lt;/strong&gt;</ept>, <bpt id="p2">&lt;strong&gt;</bpt>TEXT (NOW ())<ept id="p2">&lt;/strong&gt;</ept> returns the current Finance and Operations session date, 12/17/2015, as the text string <bpt id="p3">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>12/17/2015 07:59:23 AM<ph id="ph2">&amp;quot;</ph><ept id="p3">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>TEXT (1/3)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>0.33<ph id="ph2">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>FORMAT (string 1, string 2[, string 3, ...])</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Return the specified string, which is formatted by substituting any occurrences of <bpt id="p1">&lt;strong&gt;</bpt>%N<ept id="p1">&lt;/strong&gt;</ept> with the <bpt id="p2">&lt;em&gt;</bpt><ph id="ph1">n</ph><ept id="p2">&lt;/em&gt;</ept>th argument.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The arguments are strings.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>If an argument isn't provided for a parameter, the parameter is returned as <bpt id="p1">&lt;strong&gt;</bpt><ph id="ph1">&amp;quot;</ph>%N<ph id="ph2">&amp;quot;</ph><ept id="p1">&lt;/strong&gt;</ept> in the string.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>For values of the <bpt id="p1">&lt;strong&gt;</bpt>real<ept id="p1">&lt;/strong&gt;</ept> type, the string conversion is limited to two decimal places.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>In this example, the <bpt id="p1">&lt;strong&gt;</bpt>PaymentModel<ept id="p1">&lt;/strong&gt;</ept> data source returns the list of customer records via the <bpt id="p2">&lt;strong&gt;</bpt>Customer<ept id="p2">&lt;/strong&gt;</ept> component and the processing date value via the <bpt id="p3">&lt;strong&gt;</bpt>ProcessingDate<ept id="p3">&lt;/strong&gt;</ept> field.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>In the ER format that is designed to generate an electronic file for selected customers, <bpt id="p1">&lt;strong&gt;</bpt>PaymentModel<ept id="p1">&lt;/strong&gt;</ept> is selected as a data source and controls the process flow.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>An exception is thrown for end users when a selected customer is stopped for the date when the report is processed.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The formula that is designed for this type of processing control can use the following resources:</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Finance and Operations label SYS70894, which has the following text:</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For the EN-US language:<ept id="p1">&lt;/strong&gt;</ept> <ph id="ph1">&amp;quot;</ph>Nothing to print<ph id="ph2">&amp;quot;</ph></source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For the DE language:<ept id="p1">&lt;/strong&gt;</ept> <ph id="ph1">&amp;quot;</ph>Nichts zu drucken<ph id="ph2">&amp;quot;</ph></source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Finance and Operations label SYS18389, which has the following text:</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For the EN-US language:<ept id="p1">&lt;/strong&gt;</ept> <ph id="ph1">&amp;quot;</ph>Customer %1 is stopped for %2.<ph id="ph2">&amp;quot;</ph></source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For the DE language:<ept id="p1">&lt;/strong&gt;</ept> <ph id="ph1">&amp;quot;</ph>Debitor '%1' wird für %2 gesperrt.<ph id="ph2">&amp;quot;</ph></source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Here is the formula that can be designed: FORMAT (CONCATENATE (@<ph id="ph1">&amp;quot;</ph>SYS70894<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;quot;</ph>, @<ph id="ph2">&amp;quot;</ph>SYS18389<ph id="ph3">&amp;quot;</ph>), model.Customer.Name, DATETIMEFORMAT (model.ProcessingDate, <ph id="ph4">&amp;quot;</ph>d<ph id="ph5">&amp;quot;</ph>)) If a report is processed for the <bpt id="p1">&lt;strong&gt;</bpt>Litware Retail customer<ept id="p1">&lt;/strong&gt;</ept> on December 17, 2015, in the <bpt id="p2">&lt;strong&gt;</bpt>EN-US<ept id="p2">&lt;/strong&gt;</ept> culture and the <bpt id="p3">&lt;strong&gt;</bpt>EN-US<ept id="p3">&lt;/strong&gt;</ept> language, this formula returns the following text, which can be presented as an exception message for the end user: <ph id="ph6">&amp;quot;</ph>Nothing to print.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Customer Litware Retail is stopped for 12/17/2015.<ph id="ph1">&amp;quot;</ph> If the same report is processed for the<bpt id="p1">&lt;strong&gt;</bpt> Litware Retail customer<ept id="p1">&lt;/strong&gt;</ept> on December 17, 2015, in the <bpt id="p2">&lt;strong&gt;</bpt>DE<ept id="p2">&lt;/strong&gt;</ept> culture and the <bpt id="p3">&lt;strong&gt;</bpt>DE<ept id="p3">&lt;/strong&gt;</ept> language, this formula returns the following text, which uses a different date format: <ph id="ph2">&amp;quot;</ph>Nichts zu drucken.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Debitor 'Litware Retail' wird für 17.12.2015 gesperrt.<ph id="ph1">&amp;quot;</ph> <bpt id="p1">&lt;strong&gt;</bpt>Note:<ept id="p1">&lt;/strong&gt;</ept> The following syntax is applied in ER formulas for labels:</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For labels from Finance and Operations resources:<ept id="p1">&lt;/strong&gt;</ept> <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph1">@</ph><ph id="ph2">&amp;quot;</ph>X<ph id="ph3">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>, where X is the label ID in the Application Object Tree (AOT)</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>For labels that reside in ER configurations:<ept id="p1">&lt;/strong&gt;</ept> <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph1">@</ph><ph id="ph2">&amp;quot;</ph>GER_LABEL:X<ph id="ph3">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>, where X is the label ID in the ER configuration</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>NUMBERFORMAT (number, format)</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Return the string representation of the specified number in the specified format.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>(For information about the supported formats, see <bpt id="p1">&lt;a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx"&gt;</bpt>standard<ept id="p1">&lt;/a&gt;</ept> and <bpt id="p2">&lt;a href="https://msdn.microsoft.com/en-us/library/0c899ak8(v=vs.110).aspx"&gt;</bpt>custom<ept id="p2">&lt;/a&gt;</ept>.) The context that this function is run in determines the culture that is used to format numbers.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>For the EN-US culture, <bpt id="p1">&lt;strong&gt;</bpt>NUMBERFORMAT (0.45, <ph id="ph1">&amp;quot;</ph>p<ph id="ph2">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph3">&amp;quot;</ph>45.00 %<ph id="ph4">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>NUMBERFORMAT (10.45, <ph id="ph1">&amp;quot;</ph><ph id="ph2">#</ph><ph id="ph3">&amp;quot;</ph>)<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt><ph id="ph4">&amp;quot;</ph>10<ph id="ph5">&amp;quot;</ph><ept id="p2">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>NUMERALSTOTEXT (number, language, currency, print currency name flag, decimal points)</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Returns the number spelled out (converted) to text strings in the defined language.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The language code is optional: when it is defined as empty string, the running context language code (defined for a generating folder or file) will be used instead.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The currency code is optional.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>When it is defined as empty string, the company currency is taken.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Note, the <bpt id="p1">&lt;strong&gt;</bpt>Print currency name<ept id="p1">&lt;/strong&gt;</ept> parameter and the <bpt id="p2">&lt;strong&gt;</bpt>Decimal points<ept id="p2">&lt;/strong&gt;</ept> parameter are analyzed for the following language codes only: <bpt id="p3">&lt;strong&gt;</bpt>CS<ept id="p3">&lt;/strong&gt;</ept>, <bpt id="p4">&lt;strong&gt;</bpt>ET<ept id="p4">&lt;/strong&gt;</ept>, <bpt id="p5">&lt;strong&gt;</bpt>HU<ept id="p5">&lt;/strong&gt;</ept>, <bpt id="p6">&lt;strong&gt;</bpt>LT<ept id="p6">&lt;/strong&gt;</ept>, <bpt id="p7">&lt;strong&gt;</bpt>LV<ept id="p7">&lt;/strong&gt;</ept>, <bpt id="p8">&lt;strong&gt;</bpt>PL<ept id="p8">&lt;/strong&gt;</ept>, <bpt id="p9">&lt;strong&gt;</bpt>RU<ept id="p9">&lt;/strong&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Note, the <bpt id="p1">&lt;strong&gt;</bpt>Print currency name<ept id="p1">&lt;/strong&gt;</ept> parameter is analyzed for only Finance and Operations companies with country's context that supports currency's declension.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>NUMERALSTOTEXT (1234.56, <ph id="ph1">&amp;quot;</ph>EN<ph id="ph2">&amp;quot;</ph>, <ph id="ph3">&amp;quot;</ph><ph id="ph4">&amp;quot;</ph>, false, 2) returns “One Thousand Two Hundred Thirty Four and 56” NUMERALSTOTEXT (120, <ph id="ph5">&amp;quot;</ph>PL<ph id="ph6">&amp;quot;</ph>, <ph id="ph7">&amp;quot;</ph><ph id="ph8">&amp;quot;</ph>, false, 0) returns “Sto dwadzieścia” NUMERALSTOTEXT (120.21, <ph id="ph9">&amp;quot;</ph>RU<ph id="ph10">&amp;quot;</ph>, <ph id="ph11">&amp;quot;</ph>EUR<ph id="ph12">&amp;quot;</ph>, true, 2) returns “Сто двадцать евро 21 евроцент”</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>PADLEFT (string, length, padding chars)</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Returns a string of a specified length in which the beginning of the current string is padded with specified characters.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>PADLEFT (“1234”, 10, “ “) returns the text string “      1234”</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>TRIM (string)</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Returns given text after truncating leading and trailing spaces, and removes multiple spaces between words.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;strong&gt;</bpt>TRIM ("     Sample     text     ")<ept id="p1">&lt;/strong&gt;</ept> returns <bpt id="p2">&lt;strong&gt;</bpt>"Sample text".<ept id="p2">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>GETENUMVALUEBYNAME (enumeration data source path, enumeration value label text)</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Returns a value of a specified enumeration data source by specified text of this enumeration label.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The following example shows the enumeration ReportDirection introduced in a data model.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Note that labels are defined for enumeration values.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The following examples show:</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Model enumeration <bpt id="p1">&lt;strong&gt;</bpt>ReportDirection<ept id="p1">&lt;/strong&gt;</ept> inserted into a report as a data source <bpt id="p2">&lt;strong&gt;</bpt>$Direction<ept id="p2">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>ER expression <bpt id="p1">&lt;strong&gt;</bpt>$IsArrivals<ept id="p1">&lt;/strong&gt;</ept> designed to use model enumeration as parameter of this function.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The value of this expression is <bpt id="p1">&lt;strong&gt;</bpt>TRUE<ept id="p1">&lt;/strong&gt;</ept></source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data conversion functions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>TEXT (input)</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Return the specified input, which is converted to a text string that is formatted according to the server locale settings of the current Finance and Operations instance.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>For values of the real type, the string conversion is limited to two decimal places.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>If the Finance and Operations instance server locale is defined as <bpt id="p1">**</bpt>EN-US, TEXT (NOW ())<ept id="p1">**</ept>, the current Finance and Operations session date, 12/17/2015, is returned as the text string <bpt id="p2">**</bpt>"12/17/2015 07:59:23 AM"<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TEXT (1/3) returns "0.33"<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>QRCODE (string)</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Returns QR code image in base64 binary format for a given string.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QRCODE (“Sample text”)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>U2FtcGxlIHRleHQ=<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Data collection functions</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>FORMATELEMENTNAME ()</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Returns the name of the current format’s element.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Returns empty string when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">**</bpt>ER Use data of format output for counting and summing<ept id="p1">**</ept> (part of the <bpt id="p2">**</bpt>Acquire/Develop IT service/solution components<ept id="p2">**</ept> business process) Task guide to learn more about these functions' usage.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>SUMIFS (key string for summing, criteria range1 string, criteria value1 string <ph id="ph1">\[</ph>, criteria range2 string, criteria value2 string, …<ph id="ph2">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Returns a sum of values of nodes (with name defined as a key) of XML, which has been collected during this format execution and satisfies the entered conditions (pairs of range and value).</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Returns zero value when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>SUMIF (key string for summing, criteria range string, criteria value string)</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Returns a sum of values of nodes (with name defined as a key) of XML, which has been collected during this format execution and satisfies the entered condition (range and value).</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Returns zero value when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>COUNTIFS (criteria range1 string, criteria value1 string <ph id="ph1">\[</ph>, criteria range2 string, criteria value2 string, …<ph id="ph2">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Returns number of nodes of XML, which has been collected during this format execution and satisfies the entered conditions (pairs of range and value).</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Returns zero value when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>COUNTIF (criteria range string, criteria value string)</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Returns number of nodes of XML, which has been collected during this format execution and satisfies the entered condition (range and value).</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Returns zero value when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>COLLECTEDLIST (criteria range1 string, criteria value1 string <ph id="ph1">\[</ph>, criteria range2 string, criteria value2 string, …<ph id="ph2">\]</ph>)</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Returns a list of values of nodes of XML, which has been collected during this format execution and satisfies the entered conditions (range and value).</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Returns an empty list when the flag <bpt id="p1">**</bpt>Collect output details<ept id="p1">**</ept> of the current files is turned off.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Other (business domain–specific) functions</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>CONVERTCURRENCY (amount, source currency, target currency, date, company)</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Convert the specified monetary amount from the source currency to the target currency by using the settings of the specified Finance and Operations company on the specified date.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CONVERTCURRENCY (1, "EUR", "USD", TODAY(), "DEMF")<ept id="p1">**</ept> returns the equivalent of one euro in US dollars on the current session date, based on settings for the DEMF company.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>ROUNDAMOUNT (number, decimals, round rule)</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Round the specified amount according to the specified rounding rule and the specified number of decimal places.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The rounding rule must be specified as a value of the Finance and Operations <bpt id="p2">**</bpt>RoundOffType<ept id="p2">**</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>model.RoundOff<ept id="p1">**</ept> parameter is set to ****Downward****, <bpt id="p2">**</bpt>ROUNDAMOUNT (1000.787, 2, model.RoundOff)<ept id="p2">**</ept> returns the value <bpt id="p3">**</bpt>1000.78<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>model.RoundOff<ept id="p1">**</ept> parameter is set to either <bpt id="p2">**</bpt>Normal<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Rounding-up<ept id="p3">**</ept>, <bpt id="p4">**</bpt>ROUNDAMOUNT (1000.787, 2, model.RoundOff)<ept id="p4">**</ept> returns the value <bpt id="p5">**</bpt>1000.79<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>CURCredRef (digits)</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Return a creditor reference, based on the digits of the specified invoice number.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CURCredRef ("VEND-200002")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>"2200002"<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>MOD<ph id="ph1">\_</ph>97 (digits)</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Return a creditor reference as a MOD97 expression, based on the digits of the specified invoice number.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MOD<ph id="ph1">\_</ph>97 ("VEND-200002")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>"20000285"<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>ISOCredRef (digits)</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Return an ISO creditor reference, based on the digits and alphabetic symbols of the specified invoice number.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> To eliminate symbols from alphabets that aren't ISO-compliant, the input parameter must be translated before it's passed to this function.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISOCredRef ("VEND-200002")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>"RF23VEND-200002"<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>CN<ph id="ph1">\_</ph>GBT<ph id="ph2">\_</ph>AdditionalDimensionID (string, number)</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Get the additional financial dimension ID.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Dimensions are represented in this string as IDs separated by commas.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Numbers define the requested dimension’s sequence code in this string.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>CN<ph id="ph1">\_</ph>GBT<ph id="ph2">\_</ph>AdditionalDimensionID ("AA,BB,CC,DD,EE,FF,GG,HH",3) return “CC”</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>GetCurrentCompany ()</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Returns text representation of a code of a legal entity (company) in to which a user currently logged.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GETCURRENTCOMPANY ()<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>USMF<ept id="p2">**</ept> for a user logged in to the Finance and Operations company <bpt id="p3">**</bpt>Contoso Entertainment System USA<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>CH<ph id="ph1">\_</ph>BANK<ph id="ph2">\_</ph>MOD<ph id="ph3">\_</ph>10 (digits)</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Returns a creditor reference as MOD10 expression based on digits of the given invoice number.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>CH<ph id="ph1">\_</ph>BANK<ph id="ph2">\_</ph>MOD<ph id="ph3">\_</ph>10 ("VEND-200002") returns 3</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>FA<ph id="ph1">\_</ph>SUM (fixed asset code, value model code, start date, end date)</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Returns the prepared data container of a fixed asset amounts for a period.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>FA<ph id="ph1">\_</ph>SUM ("COMP-000001", “Current”, Date1, Date2) returns the prepared data container of the fixed asset "COMP-000001" with the value model “Current” for a period from Date1 to Date2.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>FA<ph id="ph1">\_</ph>BALANCE (fixed asset code, value model code, reporting year, reporting date)</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Returns the prepared data container of a fixed asset balances.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Reporting year must be specified as a value of the Finance and Operations enumeration <bpt id="p1">**</bpt>AssetYear<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>FA<ph id="ph1">\_</ph>SUM ("COMP-000001", “Current”, AxEnumAssetYear.ThisYear, SESSIONTODAY ()) returns the prepared data container of balances for the fixed asset "COMP-000001" with the value model “Current” on the current 365 for Finance and Operations session date.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>TABLENAME2ID (string)</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Returns integer representation of a Table Id for a given Table Name.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TABLENAME2ID (“Intrastat”)<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>1510<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>ISVALIDCHARACTERISO7064 (string)</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Returns boolean <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> when a given string represents a valid international bank account number (IBAN).</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Returns boolean <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISVALIDCHARACTERISO7064 ("AT61 1904 3002 3457 3201")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISVALIDCHARACTERISO7064 ("AT61")<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Functions list extension</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>ER lets you extend the list of functions that are used in ER expressions.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Some engineering efforts are required.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>For detailed information, see <bpt id="p1">[</bpt>Extending the list of Electronic reporting functions<ept id="p1">](general-electronic-reporting-formulas-list-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Electronic Reporting overview<ept id="p1">](general-electronic-reporting.md)</ept></source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extend the list of Electronic reporting (ER) functions<ept id="p1">](general-electronic-reporting-formulas-list-extension.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>