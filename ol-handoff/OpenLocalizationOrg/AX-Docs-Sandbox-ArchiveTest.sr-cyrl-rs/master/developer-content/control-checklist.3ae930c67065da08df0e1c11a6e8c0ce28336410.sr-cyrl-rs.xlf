<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecdf46c06a28d9cc55ff1e8f0b5d7d79e938a1b1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\user-interface\control-checklist.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82edd1262c97ae4af435a04549013fb3b0694085</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">970f5307c8828462e68e99bd8eb3d799716d7ea8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Control checklist</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article categorizes and describes all the release criteria for controls.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Control checklist</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article categorizes and describes all the release criteria for controls.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Typically, when you author a new control, the primary focus is on scenario functionality and technical implementation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, before a control can be considered ready for shipment, it should conform to a set of best practice, quality, and development release criteria, as outlined in this article.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Control criteria checklist</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This checklist assumes that you're familiar with the basics of control development.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following items highlight important implementation requirements that should be met by all controls.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Basic usage ready</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A control must meet these requirements to be considered a functionally compatible and complete control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These naming conventions are best practices but aren't functional requirements of a control:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Runtime class is named <bpt id="p1">**</bpt><ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph>Control<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Design-time class is named <bpt id="p1">**</bpt>Build<ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph>Control<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Any control-specific Component classes are named <bpt id="p1">**</bpt><ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph><ph id="ph3">\[</ph>Name of component<ph id="ph4">\]</ph>Component<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Any generic Component classes are named <bpt id="p1">**</bpt>Build<ph id="ph1">\[</ph>Name of component<ph id="ph2">\]</ph>Component<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Resources</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These naming conventions are best practices but aren't functional requirements of a control:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The HTML Resource is named <bpt id="p1">**</bpt><ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph>HTM<ept id="p1">**</ept>, and the physical file is named <bpt id="p2">**</bpt><ph id="ph3">\[</ph>Name of control<ph id="ph4">\]</ph>.htm<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The JavaScript Resource is named <bpt id="p1">**</bpt><ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph>JS<ept id="p1">**</ept>, and the physical file is named <bpt id="p2">**</bpt><ph id="ph3">\[</ph>Name of control<ph id="ph4">\]</ph>.js<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>X++ Runtime</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These items apply to the "Runtime" X++ class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>FormControlAttribute is supplied with the build class name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The FormControlAttribute is supplied with the template ID.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>FormControlAttribute is supplied with the resource bundle path.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FormTemplateControl<ept id="p1">**</ept> class is extended (directly or through inheritance).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A FormProperty exists for each change-tracked property (that is, each property that must be read in the client JavaScript).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New<ept id="p1">**</ept> method initializes each FormProperty instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>setTemplateId<ept id="p1">**</ept> and <bpt id="p2">**</bpt>setResourceBundleName<ept id="p2">**</ept> inherited methods are called with the same values that are supplied in the FormControlAttribute.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ApplyBuild<ept id="p1">**</ept> method is used to interpret any design-time properties, and to apply design-time properties to the run-time properties as appropriate for the control.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A Property getter/setter method exists for each FormProperty.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A FormPropertyAttribute is supplied on each FormProperty's getter/setter method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Anytype<ept id="p1">**</ept> is used as the argument type for FormProperties that have <bpt id="p2">**</bpt>FormPropertyKind::BindableValue<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>All FormProperties are specified as <bpt id="p1">**</bpt>ReadOnly<ept id="p1">**</ept> to the JS class, via the third argument to the FormPropertyAttribute.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This argument affects only the read/write behavior that is seen by JavaScript, not by X++.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We don't recommend that you allow JavaScript to write directly to properties, because every property state change should be validated.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We recommend that you use FormCommands for this purpose, instead of writeable properties.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>FormCommands that allow the state of FormProperties to be changed must validate that the control is in a valid state to allow for the property change.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Controls that are disabled, read-only, invisible, and so on, should prevent inappropriate state changes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>X++ Design time</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These items apply to the "Design/Build" X++ class:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The FormDesignControlAttribute is supplied with the control common name, <bpt id="p1">**</bpt><ph id="ph1">\[</ph>Name of control<ph id="ph2">\]</ph><ept id="p1">**</ept>, without “Control” appended at the end.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name that is supplied here will appear in Microsoft Visual Studio when the control is added to a form.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A backing field exists for each design-time property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A Property getter/setter exists for each design-time property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A FormDesignPropertyAttribute is supplied to each design-time property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>No code outside of the Design property getters/setters should exist in this class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(In other words, there should be no <bpt id="p1">**</bpt>new()<ept id="p1">**</ept> methods, and so on.)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>HTML</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These items apply to the .htm file, which is also referred to as the resource bundle:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>External resources, such as scripts, style sheets, and other HTM files, are loaded by using HTML standard <ph id="ph1">&amp;lt;</ph>script<ph id="ph2">&amp;gt;</ph> and <ph id="ph3">&amp;lt;</ph>link<ph id="ph4">&amp;gt;</ph> tags.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>All external resource loading tags are placed above the outermost HTML element in the file, so that they are loaded and processed first.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The template ID is supplied via the <bpt id="p1">**</bpt>id<ept id="p1">**</ept> attribute on the outermost HTML element.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The visibility of the outermost HTML element is bound to the <bpt id="p1">**</bpt>Visible<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The sizing of the outermost HTML element is bound to the sizing binding handler.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Binding handlers are used to programmatically modify HTML.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(APIs such as getElementById in the JavaScript constructor aren't used.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The whole JavaScript code is wrapped in an anonymous function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Localizable strings are stored in the Globalize culture info object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Localizable strings are also stored in a label file, according to the instructions in <bpt id="p1">[</bpt>Create and use localizable labels in the client<ept id="p1">](create-localizable-labels-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Default values are provided for all properties that aren't initialized inside the constructor.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The JavaScript constructor is added to the control JavaScript namespace.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A reference to <bpt id="p1">**</bpt>this<ept id="p1">**</ept> is stored in an object that is named <bpt id="p2">**</bpt>self<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>self<ept id="p3">**</ept> is used instead of <bpt id="p4">**</bpt>this<ept id="p4">**</ept> throughout the constructor.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The base JavaScript control behaviors are inherited.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Default values are applied by using a framework utility function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Client-side properties are defined in the scope of the constructor and are added to <bpt id="p1">**</bpt>self<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Observable and computed properties are used only for UI-bound behaviors.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A prototype exists and contains all static methods that are specific to the control.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Binding handlers that are specific to the control are stored in the control’s namespace (not in the global control namespace).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The control doesn't use or load external plug-ins (Microsoft ActiveX, Flash, Java, and so on).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Interactivity</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CSS/LESS</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Prefix all class names with the template ID to prevent conflicts with other controls.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Don't use class names that are defined on other controls, because those classes can change.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Layout and resizing</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The control uses the Sizing API for its outermost element.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This requirement helps guarantee that the framework can correctly size and arrange the outermost element of the control.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For advanced layout scenarios for elements that are contained in the control, use <bpt id="p1">[</bpt>CSS Flexible Boxes<ept id="p1">](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)</ept>, which are supported by the HTML standard.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Browser support</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The control correctly renders and supports all intended user interaction patterns on all supported browsers:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Microsoft Edge/Internet Explorer 11</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The latest version Chrome</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The latest version of iPad/MacOS Safari</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Tab sequence</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Make sure that the control meets the W3C standards for tab sequence.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Globalization</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Right-to-left languages</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Full RTL support will arrive after RTW.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Localizable labels</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The control uses a label file for UI text that is used only on the client side (not used in X++).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For instructions about how to create and use these labels, see <bpt id="p1">[</bpt>How to create and use localizable labels in the client<ept id="p1">](create-localizable-labels-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Task Recorder compatibility</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Basic recording support</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For any control that accepts user input, or that a user can interact with, input/actions must be recordable by Task Recorder.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For Task Recorder to record the input, the control must use the SysTaskRecorder X++ API to specify the properties that should be recorded.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Basic task guide support</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For any control that can be recorded by using Task Recorder, the control should have task guide support.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This support includes verifying that the task guide pop-up prompt points to the correct UI elements of the control, based on the input/action that was recorded.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In addition, validate that, when the task guide is locked (“on-rails”), the user can interact with the expected parts of the control.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, for a combo box control, the user should be able to open the drop-down box to select a value, in addition to typing the value directly.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Advanced recording support</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Support for Cut, Copy, Paste, and Validate can be evaluated on a per-control basis.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There are JavaScript and X++ methods that controls can implement to enable these features.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Threat modeling the control</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Vulnerabilities in the logical control (X++/C++) that are related to serialization/deserialization of data types, and command/property execution, should be reviewed and fixed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Serialization threats are related to the way that the control parses or interprets data types.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Any serializer for data types (except the built-in X++ Data Contracts and primitive type serialization) must be reviewed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Any parser must be reviewed to verify that it doesn't allow for arbitrary code execution or other exploitation.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Any data access queries that are executed by the control (or by any helper classes that the control uses) must be evaluated and reviewed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Command/property execution threats are related to the way that the logical control handles an action that the control determines to be invalid.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Example of a command threat: A click command is executed when the control is in a disabled state.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You must make sure that the click command is handled appropriately, based on the control state.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example of a property thread: A property change is executed when the control is ready-only.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You must make sure that the property change is handled appropriately, based on the control state.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You must review the use of any .NET libraries to make sure that the .NET library is also secure.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Vulnerabilities that are related to the client-side parts of the control (HTML, JavaScript, CSS, third-party libraries) should follow general secure web development principles.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Specific examples include XSS vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Any control that renders user data as HTML/JavaScript/CSS exposes an XSS vulnerability that must have mitigations identified.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Any control that renders external content in an iFrame exposes an XSS vulnerability that must have mitigations identified.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Any control that makes calls to third-party services must have mitigations identified and requires direct review by the client team.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Any control that handles authentication must have mitigations identified.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Control criteria details</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This section explores the control criteria in more detail.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Basic usage ready</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>X++ Runtime</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormControlAttribute<ept id="p1">**</ept> **** Each control must supply the FormControlAttribute to the class declaration.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The attribute must specify the build/design-time class that accompanies the control.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The attribute must also specify the HTML template ID and the physical HTML file name (the resource bundle name).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormTemplateControl<ept id="p1">**</ept> Each control must extend FormTemplateControl to participate in the control lifecycle.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FormProperty<ept id="p1">**</ept> Each control must declare FormProperties for every statically defined property that must participate in the change tracking system.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For properties that are used only on the server side, no FormProperty is required.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New<ept id="p1">**</ept> Each control must implement the <bpt id="p2">**</bpt>New<ept id="p2">**</ept> method in order for its properties to participate in the change tracking system that propagates value changes between the client and server parts of the control.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Inside the <bpt id="p1">**</bpt>New<ept id="p1">**</ept> method, each FormProperty</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ApplyBuild<ept id="p1">**</ept> Each control must implement the <bpt id="p2">**</bpt>ApplyBuild<ept id="p2">**</ept> method in order for the control to be initialized based on the values that are set on it at design time.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This method is primarily used to copy or transform design-time values into their Runtime equivalents.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, not all design-time properties must have Runtime equivalents, and not all Runtime properties must source their initial values from design-time properties.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Property getter/setter<ept id="p1">**</ept> Each control must implement property getters/setters for every FormProperty that is used by the control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>These methods should be parm methods.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Therefore, the names should begin with “parm” for methods that are getters/setters, “get” for methods that are only getters, and “set” for methods that are only setters.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>At a minimum, a FormPropertyAttribute must be supplied to each method, together with a FormPropertyKind and the name of the property as it should be made accessible to the HTML and JavaScript in the client.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>HTML</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Template ID<ept id="p1">**</ept> Each control must provide an HTML <bpt id="p2">**</bpt>id<ept id="p2">**</ept> attribute on the outermost HTML element of the control’s markup.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In order for the control to be loaded at run time, this ID must match the ID that is supplied to the FormControlAttribute.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Scripts and style sheets<ept id="p1">**</ept> Each control must use HTML standard <ph id="ph1">&amp;lt;</ph>script<ph id="ph2">&amp;gt;</ph> and <ph id="ph3">&amp;lt;</ph>link<ph id="ph4">&amp;gt;</ph> tags to consume other JavaScript or CSS files.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>These tags should be placed at the beginning of the HTML file for the control, before the HTML definition element for the control.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If the files that must be loaded have dependencies, make sure that the order of the <ph id="ph1">&amp;lt;</ph>script<ph id="ph2">&amp;gt;</ph> or <ph id="ph3">&amp;lt;</ph>link<ph id="ph4">&amp;gt;</ph> loading tags is appropriate.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Tags that appear first are loaded first.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To load JavaScript or CSS from AOT Resources, use a site root–relative path (/Resource/Scripts or /Resources/Styles).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data binding<ept id="p1">**</ept> Each control can participate in the HTML binding framework through use of the <bpt id="p2">**</bpt>data-dyn-bind<ept id="p2">**</ept> attribute on HTML elements that are contained in the control.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The binding attribute enables HTML element properties to be bound to observable or computed properties that are located in the current data context.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script encapsulation<ept id="p1">**</ept> Each control must wrap all its JavaScript in an anonymous function.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This requirement helps prevent the framework’s global JavaScript namespace from being populated with control-specific logic.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Localizable strings<ept id="p1">**</ept> Each control must use the Globalization API to store any string messages that are used by the control’s JavaScript.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Therefore, the control’s JavaScript should not hard-code any strings that are displayed in the UI.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Instead, the JavaScript should reference the string messages that are stored via the Globalization API.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>To load strings in the globalization object in HTML and JavaScript, you can use the $dyn.label API and pass in the identifier of the label.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Create and use localizable labels in the client<ept id="p1">](create-localizable-labels-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default values<ept id="p1">**</ept> Each control must provide default values for any properties that aren't initialized in the JavaScript.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Therefore, any properties for which values are passed in to the JavaScript constructor on initialization (that is, the FormProperties in the X++ Runtime class) must provide a default-value dictionary for these properties.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JavaScript constructor<ept id="p1">**</ept> Each control must implement a constructor in the controls namespace.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This constructor is the first line of code that will be executed when the control is loaded in the client.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>After the constructor is completed, the constructor’s associated object, <bpt id="p1">*</bpt>this<ept id="p1">*</ept>, is passed in to the HTML as the default data context.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Inheriting base control<ept id="p1">**</ept> Each control’s constructor must “inherit” from the base JavaScript control class.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The base JavaScript control class contains behaviors that are required by each control.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applying default values<ept id="p1">**</ept> Each control must use the provided framework function to apply the default values to the control’s properties.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Adding client-side properties/functions<ept id="p1">**</ept> Each control can add client-side-only properties and functions to the JavaScript class, in addition to the server-side FormProperties and Commands that are passed in to the control constructor.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The pattern for adding client-side-only properties/functions is to maintain a local copy of the <bpt id="p1">*</bpt>this<ept id="p1">*</ept> object and add the functions/properties to the local copy.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>After the control constructor is completed, all properties, functions, FormProperties, and Commands that have been added will be available in the HTML as the default data context.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Adding observable and computed properties<ept id="p1">**</ept> Each control can add client-side-only properties that participate in the observability patterns of the client.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An observable property is initialized by using the $dyn.observable(<ph id="ph1">\[</ph>initial value<ph id="ph2">\]</ph>) function.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A computed property is initialized by using the $dyn.computed(<ph id="ph1">\[</ph>function(){}<ph id="ph2">\]</ph>) function.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Controls should use observable/computed properties sparingly, because these property can significantly harm performance if they are used incorrectly.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Control JavaScript prototype<ept id="p1">**</ept> Each control must implement a JavaScript prototype that extends the base control prototype.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The prototype should contain any “static” JavaScript methods (methods that require no references to local variables) that are used by the control.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Interactivity</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Layout and resizing</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To enable the form developer to determine the control layout and size, set the width and height that are specified by the form developer on the control by using the $dyn.layout.sizing API, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This is standard code that should be applied to all HTML control templates.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Task Recorder recording support</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Controls must use the SysTaskRecorder X++ API to indicate which actions on the control are “recordable.”</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For controls that enable values to be set via properties, <bpt id="p1">**</bpt>SysTaskRecorder::addPropertyUserAction<ept id="p1">**</ept> should be called when the value is being set in X++.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This method call tells Task Recorder to record the setting of the property.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A similar method exists for commands (<bpt id="p1">**</bpt>SysTaskRecorder::addCommandUserAction<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Determine the text that Task recorder generates for a control<ept id="p1">](task-recorder-control-text.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Task Recorder playback support</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Task Recorder uses the control’s properties and commands to play back the control.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The control must make sure that the commands and properties that it instructs Task Recorder to record can also be executed by Task Recorder when the control is played back.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Task Recorder will rely on the interactable names for the properties and commands.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The interactable name for a method is the name that is specified in the FormPropertyAttribute or the FormCommandAttribute.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Task guide support</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The task guide will ask the JavaScript part of the control for the DOM element that the task guide should point to.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>All controls inherit basic task guide support, where the default DOM element is the outermost element of the control.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A control can provide finer-grained details about where the task guide should point by implementing the getTaskGuideParams function in the JavaScript prototype for the control.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This function accepts an argument (which is frequently named <bpt id="p1">**</bpt>options<ept id="p1">**</ept>), and this argument has a property that is named <bpt id="p2">**</bpt>target<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This <bpt id="p1">**</bpt>target<ept id="p1">**</ept> property accepts the jQuery element that the task guide should point to.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In addition, the argument will contain information about the action that was originally recorded for the control, such as the property/command name and any arguments.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The control can react to the various properties/commands that it supports by supplying the target with the DOM element that corresponds to the property/command that the user recorded.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For some advanced scenarios, the target can also be supplied with an observable.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The control can then update this observable with various DOM elements, based on events that the control exposes.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This can be done by initializing the target with the observable (which contains a DOM element), and then observing an event and updating the DOM element via code in the event handler.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Task Recorder copy/paste/validate support</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For controls that need to support either Copy, Paste, or Validate (mainly for advanced X++ testing purposes), the SysTaskRecorder API exposes static methods that enable the control to inform Task Recorder when a value has been copied, pasted, or validated.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>