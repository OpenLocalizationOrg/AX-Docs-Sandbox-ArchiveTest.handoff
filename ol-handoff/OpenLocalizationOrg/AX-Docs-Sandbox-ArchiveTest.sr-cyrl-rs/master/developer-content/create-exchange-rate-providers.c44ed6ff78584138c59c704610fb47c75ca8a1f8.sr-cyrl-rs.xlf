<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2350538475caf9c0d82c1f55d559632c85783d36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\financial\create-exchange-rate-providers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41fa0da6d6654d948b8cf800a9f0ceef922eba65</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa3f09a35c564cc7a178000cee1ede90fdbc1f8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Create exchange rate providers</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article describes how to set up an exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create exchange rate providers</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article describes how to set up an exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article describes the steps that are required in order to set up an exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the purpose of illustration, the OANDA exchange rate service is used throughout this article.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By following the steps that are described in this article, you will create a functional exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code is production code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can find the source in the <bpt id="p1">**</bpt>ExchangeRateProviderOanda<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can reference this class as you read through this article.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To request an OANDA test account and receive information about the OANDA exchange rate service, go to <bpt id="p1">&lt;</bpt>http://developer.oanda.com/exchange-rates-api/<ept id="p1">&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Terminology</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import currency exchange rates<ept id="p1">**</ept> – The process that retrieves exchange rates from exchange rate providers and imports them.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This process is a system operation that supports batch processing.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exchange rate provider<ept id="p1">**</ept> – An X++ class that is responsible for retrieving exchange rates from external sources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exchange rate provider registration<ept id="p1">**</ept> – The process of enabling an exchange rate provider so that it can be used.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, exchange rate providers aren't registered when they are deployed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exchange rate provider configuration<ept id="p1">**</ept> – The configuration settings of an exchange rate provider that determine how it will be used.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exchange rate service<ept id="p1">**</ept> – A free or paid subscription service that provides a list of exchange rates that have been published.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Foreign Exchange Rates Powered by OANDA is an example of a service that provides exchange rates.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The framework<ept id="p1">**</ept> – The import currency exchange rates framework that coordinates the retrieval of exchange rates from providers and appropriate storage of the exchange rates.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Conceptual/class model</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following illustration shows the main interfaces and classes that make up the exchange rate provider framework, and the relationships among them.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>New exchange rate providers should be derived from the <bpt id="p1">**</bpt>IExchangeRateProvider<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Exchange rate providers are written in X++.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because X++ is a .NET language, it's easy to use the Microsoft .NET Framework in our provider.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>Conceptual/class model of the exchange rate provider framework<ept id="p1">](./media/exchangerates.png)](./media/exchangerates.png)</ept> Here are the interfaces and classes that are shown in the illustration:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateProvider<ept id="p1">**</ept> – By implementing this interface, you enable the exchange rate provider framework to recognize a class as an exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateProviderFrameworkFactory<ept id="p1">**</ept> – This interface enables the exchange rate provider to construct various types of provider framework classes that represent some of the interfaces in the illustration.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateProviderSupportedOptions<ept id="p1">**</ept> – The exchange rate provider supports several options when rates are imported.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The exchange rate provider uses this interface to inform the framework about the options that it supports.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateProviderConfig<ept id="p1">**</ept> – Each exchange rate provider can have a unique configuration.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This interface enables the provider to retrieve this configuration.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateProviderConfigDefaults<ept id="p1">**</ept> – The exchange rate provider can create and provide default values for its configuration.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The user can change these values on the <bpt id="p1">**</bpt>Configure exchange rate providers<ept id="p1">**</ept> page (<bpt id="p2">**</bpt>General ledger<ept id="p2">**</ept> <ph id="ph1">&amp;gt;</ph> **Currencies **<ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Configure exchange rate providers<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> – This interface represents data that is specific to a request to import exchange rates.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This data includes the date range, options, and the currency pairs to retrieve rates for.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateCalendar<ept id="p1">**</ept> – This interface represents an exchange rate calendar that is used to retrieve the next working day (Monday through Friday).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateResponse<ept id="p1">**</ept> – The exchange rate provider uses this interface to store the currency pairs and the exchange rates that are returned from the service.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateResponseCurrencyPair<ept id="p1">**</ept> – The exchange rate provider uses this interface to store the details for a specific currency pair that is returned from the service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IExchangeRateResponseExchangeRate<ept id="p1">**</ept> – The exchange rate provider uses this interface to store a specific exchange rate for a specific currency pair.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExchangeRateProviderOanda<ept id="p1">**</ept> – This example of an exchange rate provider that is implemented by Microsoft connects to the OANDA service to return exchange rates.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Writing an exchange rate provider</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Code examples are taken from the <bpt id="p1">**</bpt>ExchangeRateProviderOanda<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Follow these steps to create an exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Currency<ept id="p1">**</ept> model, create a class that implements the <bpt id="p2">**</bpt>IExchangeRateProvider<ept id="p2">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the following constants and variable declarations to the class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Name<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A label should be used to enable proper translation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A user can change the name that is provided here when that user sets up the provider’s configuration information.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>get<ph id="ph1">\_</ph>Id<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method returns a globally unique identifier (GUID) that is used to uniquely identify this provider.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>set<ph id="ph1">\_</ph>Factory<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The exchange rate provider framework will invoke this method to set an object that implements the <bpt id="p1">**</bpt>IExchangeRateProviderFrameworkFactory<ept id="p1">**</ept> interface on your provider.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This factory can be used to instantiate new objects that represent some of the interfaces from the previous illustration.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>GetSupportedOptions<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method indicates whether the exchange rate provider supports some framework features:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>doesSupportSpecificCurrencyPairs<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> only if the exchange rate service requires that a source and destination currency be passed to get an exchange rate.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Many exchange rate services return rates for a fixed currency or a given set of currency pairs.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For these services, the value of this option should be set to <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If prices that a service charges are based on quotas on the number of rates, a value of <bpt id="p1">**</bpt>true<ept id="p1">**</ept> will cause the <bpt id="p2">**</bpt>IExchangeRateRequest<ept id="p2">**</ept> interface to contain only those currency pairs that are configured for an exchange rate type on the <bpt id="p3">**</bpt>Exchange rate<ept id="p3">**</ept> page (<bpt id="p4">**</bpt>General ledger<ept id="p4">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p5">**</bpt>Currencies<ept id="p5">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p6">**</bpt>Exchange rates<ept id="p6">**</ept>).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The provider can then specifically request these rates from the service and therefore lower the cost.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>fixedBaseIsoCurrency<ept id="p1">**</ept> property to the three-character International Organization for Standardization (ISO) currency code that represents the fixed base currency of the exchange rates that are returned from the exchange rate service.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the exchange rate service doesn't support a fixed base currency, return an empty string.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, the euro is often used as a fixed base currency.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When you create a new provider, be sure to research the exchange rate service so that you can select the correct value.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>singleRateForDateRange<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> if the service can return a single rate that represents the whole date range.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, you can use this setting to return a single exchange rate that represents the average exchange rate for a month.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the service doesn’t support this functionality, set this property to <bpt id="p1">**</bpt>false<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>GetConfigurationDefaults<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Configuration defaults are name-value pairs that represent the default configuration settings for the exchange rate provider.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These settings are automatically loaded when the provider is registered, but the user can change them.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Take the required precautions when you convert these strings into usable values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The value field is stored as an encrypted field in SQL.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Therefore, sensitive data such as an application programming interface (API) key will be more secure.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>ValidateConfigurationDetail<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method enables the exchange rate provider to validate the configuration information that the user modified on the <bpt id="p1">**</bpt>Configure exchange rate providers<ept id="p1">**</ept> page.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>EnumNameForLookup<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This method enables the exchange rate provider to enable a lookup for a specific <bpt id="p1">**</bpt>ExchangeRateProviderPropertyKey<ept id="p1">**</ept> key.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Just return the name of an existing enumerated type for the appropriate key.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If this feature isn't required, return an empty string.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>GetExchangeRates<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method uses the configuration information and the <bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> interface that is provided to call out to the exchange rate service and return the appropriate instance of the <bpt id="p2">**</bpt>IExchangeRateResponse<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you write this method, consider these important points:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Any configuration information that is required should be retrieved from the <bpt id="p1">**</bpt>IExchangeRateProviderConfig<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A call to the <bpt id="p1">**</bpt>GetPropertyValue<ept id="p1">**</ept> method on that interface will provide the string representation of the property value for the property key that is provided.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Take the required precautions when you convert this string value to another type.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Do any required validation up front.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, OANDA requires that an API key be supplied on every service call.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If this API key isn't set, the service will fail.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Verify that the API key isn't set, and exit early to receive an appropriate error message.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Some providers require explicit currency pairs when exchange rates are requested.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>These providers are the same providers that set the <bpt id="p1">**</bpt>IExchangeRateProviderSupportedOptions.doesSupportSpecificCurrencyPairs<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In this case, you must use the currency pairs that the <bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> interface provides to drive the retrieval process.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The OANDA provider implementation that follows shows a good example of this type of provider.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Typically, providers that don't support specific currency pairs return data for a fixed set of currency pairs.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In this case, the currency pairs that the <bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> interface provides can be ignored.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Providers should return all the rates that are available, and the framework will then import the correct rates, based on the user’s decision about whether to automatically create the required currency pairs.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The CentralBankOfEuropeProvider provider is a good example of this type of provider.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> interface has a property that is named <bpt id="p2">**</bpt>ImportDateType<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This property indicates the dates that should be used to retrieve exchange rates from the service.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The two values that are available are <bpt id="p1">**</bpt>CurrentDate<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DateRange<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CurrentDate<ept id="p1">**</ept> retrieves the most current exchange rate from the exchange rate service.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When this value is passed to the provider, the framework also sets <bpt id="p1">**</bpt>IExchangeRateRequest.FromDate<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IExchangeRateRequest.ToDate<ept id="p2">**</ept> to the system date of the Application Object Server (AOS) computer that is making the request.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If exchange rate services support the retrieval of exchange rates for specific dates, the date that the framework provides should be passed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>However, if the exchange rate service instead provides a call to get the most current exchange rate (regardless of the date), the date that is returned must be validated to make sure that it's less than or equal to the requested date.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DateRange<ept id="p1">**</ept> retrieves the exchange rates for a specific date range.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Only exchange rates in the specified date range should be allowed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If an exchange rate service requires that specific dates be included in the request, this process is straightforward.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, if an exchange rate service instead returns a group of historical dates that might be outside the valid range of dates, the provider must filter out the dates that aren't relevant before it passes the dates back to the framework.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When exchange rates are returned, always use the date that the exchange rate service provides instead of the dates that the instance of the <bpt id="p1">**</bpt>IExchangeRateRequest<ept id="p1">**</ept> class supplies.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In this manner, you help guarantee that the exchange rate that is returned is associated with the correct date, because an exchange rate service might occasionally return rates for dates that weren't expected.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, if an exchange rate is requested for a date in the future, some providers return the most recent exchange rate instead of throwing an error or returning nothing.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you encounter errors when you try to retrieve exchange rates from the exchange rate service, don't throw custom error messages.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The framework will alert the user that there is an issue by throwing generic error messages that state that the expected currency pairs could not be retrieved from the provider.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If you must log additional errors, use <bpt id="p1">**</bpt>CurrencyEventSource<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement and the <bpt id="p2">**</bpt>if<ept id="p2">**</ept> condition for the <bpt id="p3">**</bpt>oandaKey<ept id="p3">**</ept> variable in the following code.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Implement the following helper methods.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>These methods are specific to this example and aren't required for every provider.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Compile the <bpt id="p1">**</bpt>ExchangeRateProviderOanda<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The provider will be run as part of a SysOperation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>It's helpful to understand the following framework classes and methods when you debug issues:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExchangeRateProviderFactory.initialize()<ept id="p1">**</ept> – This method creates instances of the exchange rate providers, and is called when exchange rates are registered or imported.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If your provider isn't instantiated, start to debug here.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExchangeRateProviderRegistration.initialize()<ept id="p1">**</ept> – This method searches for providers, so that they can be registered.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If you can't see your provider on the registration page, start to debug here.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExchangeRateImportOperation.import()<ept id="p1">**</ept> – This method drives the import process by calling the necessary provider and storing the exchange rates.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExchangeRateProviderConfig<ept id="p1">**</ept> – This class provides access to configuration information for the providers.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Things to consider</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Because there are no limits to the method that the exchange rate providers use to get exchange rates, the framework enables some interesting scenarios.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Here are some ideas that you might want to explore:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Providers that retrieve exchange rates from other exchange rate types<ept id="p1">**</ept> – This scenario would enable synchronization of exchange rates among various exchange rate types.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This functionality could be useful in situations where many exchange rate types exist, to maintain isolation between different ledgers.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Providers that use Extensible Stylesheet Language Transformations (XSLT) to transform any format for an exchange rate service into an instance of the ExchangeRateResponse class<ept id="p1">**</ept> – If this scenario were implemented, users could add the XSLT transform that is required for their exchange rate service, and the application would support the service.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Provider-specific code wouldn't be required.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Some exchange rate provider services charge for every rate that is consumed<ept id="p1">**</ept> – Consider combining the first idea in this list with a limit on the number of rates that you retrieve from the service, for scenarios where you're charged for each rate that is consumed from the service.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>