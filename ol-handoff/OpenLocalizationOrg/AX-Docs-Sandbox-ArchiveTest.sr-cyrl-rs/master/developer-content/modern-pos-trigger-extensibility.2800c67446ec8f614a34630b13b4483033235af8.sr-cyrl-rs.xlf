<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b0efb54252e2220a275c1cca3cf1d520720083b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">retail\dev-itpro\modern-pos-trigger-extensibility.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">436e599b7a571f8ca24fd97a66c19f2341d885bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50b84d56504078a0da06a95bb2ce1d52a7b06ba0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Modern POS and Cloud POS trigger extensibility</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article explains the client-side trigger functionality in Modern POS and Cloud POS.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Modern POS and Cloud POS trigger extensibility</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article explains the client-side trigger functionality in Modern POS and Cloud POS.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Trigger overview</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Triggers are events that are raised by Microsoft Dynamics 365 for Retail for Retail POS.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Triggers let you insert custom code before or after operations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are two kinds of triggers: pre-triggers and post-triggers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pre-triggers</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Post-triggers</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pre-triggers can be used to insert custom code before an operation is run.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if a customer uses a coupon for a purchase, you can use a pre-trigger to insert custom code to validate that the coupon hasn't expired and hasn't previously been used.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Post-triggers can be used to insert custom code that responds to a completed operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, you can write code that runs after the <bpt id="p1">**</bpt>CustomerAdd<ept id="p1">**</ept> operation and prompts the cashier to wish the customer a happy birthday if it's the customer’s birthday.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Trigger types</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In Modern POS and Cloud POS, triggers are either cancelable or non-cancelable.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Trigger implementations that extend <bpt id="p1">**</bpt>ICancelableTriggerCancelable<ept id="p1">**</ept> triggers can succeed, fail, or be canceled.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Execution of the workflow is canceled without displaying an error.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An example is a trigger to confirm that the user wants to use his or her loyalty points for tender.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the user selects <bpt id="p1">**</bpt>No<ept id="p1">**</ept>, the workflow to enter loyalty information is canceled without showing an error message to the user.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Trigger implementations that extend <bpt id="p1">**</bpt>ITriggerNon-cancelable<ept id="p1">**</ept> triggers can either succeed or fail.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the trigger succeeds, the workflow continues.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the trigger fails, a message appears in the UI.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An example is a trigger to support Swedish localization requirements by guiding the cashier to create separate transactions for sales and returns.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Trigger registration<ept id="p1">**</ept> – All triggers should be registered by using the <bpt id="p2">**</bpt>TriggerManager::register<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ApplicationStart<ept id="p1">**</ept>, <bpt id="p2">**</bpt>PreLogOn<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>PostLogOn<ept id="p3">**</ept> triggers must be registered inside a function that is called when the <bpt id="p4">**</bpt>DOMContentLoaded<ept id="p4">**</ept> event is raised.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Other triggers can be registered in the same manner, but they can also be registered conditionally.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Conditional registration<ept id="p1">**</ept> – If the decision about whether to register a trigger is based on information in the channel, the trigger can be registered conditionally.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Conditional registration should be performed inside a <bpt id="p1">**</bpt>PostLogOn<ept id="p1">**</ept> trigger.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> It's important that the conditional registration be performed only during the first sign-in after the app has been loaded.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For an example implementation, see the sample code later in this article.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Trigger implementation<ept id="p1">**</ept> – Each trigger event that is listed in the "Supported trigger events" section has a trigger interface that is associated with it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These trigger interfaces define the contract between the application and the trigger implementations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each trigger should implement the predefined interface that is associated with the trigger event type that it's registered for.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Triggers execution workflow</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following diagram shows the execution workflow for both pre-triggers and post-triggers for the <bpt id="p1">**</bpt>ItemSaleOperation<ept id="p1">**</ept> workflow/operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>Trigger Execution Flow<ept id="p1">](./media/trigger-execution-flow.png)](./media/trigger-execution-flow.png)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Supported trigger events</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Together with pre-operation and post-operation triggers that are triggered for every operation, the following triggers are supported out of the box:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Application triggers</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreLogOn<ept id="p1">**</ept> – Called before sign-in to Modern POS</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>operatorId</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ApplicationStart<ept id="p1">**</ept> – Called when the application is launched</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ApplicationSuspend<ept id="p1">**</ept> – Called when the application is suspended</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostLogOff<ept id="p1">**</ept> – Called after the sign-out operation is completed</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostLogOn<ept id="p1">**</ept> – Called after the sign-in operation is completed</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Cash management triggers</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreTenderDeclaration<ept id="p1">**</ept> – Called before the tender declaration operation is run</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostTenderDeclaration<ept id="p1">**</ept> – Called as the last step in the tender declaration workflow</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Customer triggers</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreCustomerAdd<ept id="p1">**</ept> – Called before a new customer is created</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreCustomerClear<ept id="p1">**</ept> – Called before the customer is cleared from the current transaction</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreCustomerSearch<ept id="p1">**</ept> – Called before a search for a customer</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreCustomerSet<ept id="p1">**</ept> – Called before the customer is set on the transaction</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostCustomerAdd<ept id="p1">**</ept> – Called after a new customer is created</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostCustomerClear<ept id="p1">**</ept> – Called after the customer is cleared from the transaction</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostCustomerSearch<ept id="p1">**</ept> – Called after a search for a customer</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Discount triggers</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreLineDiscountAmount<ept id="p1">**</ept> – Called during the line discount amount operation, after validation determines whether a discount can be applied</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreLineDiscountPercent<ept id="p1">**</ept> – Called during the line discount percent operation, after validation determines whether a discount can be applied</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreTotalDiscountAmount<ept id="p1">**</ept> – Called during the total discount amount operation, after validation determines whether a discount can be applied</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreTotalDiscountPercent<ept id="p1">**</ept> – Called during the total discount percent operation, after validation determines whether a discount can be applied</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostLineDiscountAmount<ept id="p1">**</ept> - Called as the last step in the line discount amount workflow</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostLineDiscountPercent<ept id="p1">**</ept> – Called as the last step in the line discount percent workflow</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostTotalDiscountAmount<ept id="p1">**</ept> – Called as the last step in the total discount amount workflow</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostTotalDiscountPercent<ept id="p1">**</ept> – Called as the last step in the total discount percent workflow</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Operation triggers</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreOperation<ept id="p1">**</ept> – Called before every operation is run, before the prehandler and operation validators</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OperationFailure<ept id="p1">**</ept> – Called when an operation fails, and can be used to perform recovery actions</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostOperation<ept id="p1">**</ept> – Called when an operation is completed successfully</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Payment triggers</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreAddTenderLine<ept id="p1">**</ept> – Called before a tender line is added to the transaction</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PrePayment<ept id="p1">**</ept> – Called before any payment operation is started</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreVoidPayment<ept id="p1">**</ept> – Called before the void payment operation is started</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostPayment<ept id="p1">**</ept> – Called after the payment has been added</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostVoidPayment<ept id="p1">**</ept> – Called after the payment has been voided</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Printing triggers</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PrePrintReceiptCopy<ept id="p1">**</ept> – Called before a copy of the receipt is printed</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Product Triggers</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreClearQuantity<ept id="p1">**</ept> – Called before the clear quantity operation</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PrePriceOverride<ept id="p1">**</ept> – Called before the price override operation</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreProductSale<ept id="p1">**</ept> – Called before the item sale operation</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreReturnProduct<ept id="p1">**</ept> – Called before the return product operation</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreSetQuantity<ept id="p1">**</ept> – Called before the set quantity operation</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreVoidProducts<ept id="p1">**</ept> – Called after the user confirms that he or she wants to void the transaction, but before the transaction is voided</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostClearQuantity<ept id="p1">**</ept> – Called after the clear quantity operation</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostPriceOverride<ept id="p1">**</ept> – Called after the price override operation</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostProductSale<ept id="p1">**</ept> – Called after the item sale operation</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostReturnProduct<ept id="p1">**</ept> – Called after the return product operation</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostSetQuantity<ept id="p1">**</ept> – Called after the set quantity operation</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostVoidProducts<ept id="p1">**</ept> – Called after the void products operation</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Transaction triggers</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Cancelable</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreConfirmReturnTransaction<ept id="p1">**</ept> – Called after a search for a transaction to return, but before the cart lines appear as available for return</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreEndTransaction<ept id="p1">**</ept> – Called before a sales transaction is completed</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreRecallTransaction<ept id="p1">**</ept> – Called before a transaction is recalled</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreReturnTransaction<ept id="p1">**</ept> – Called before a transaction is returned</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreSuspendTransaction<ept id="p1">**</ept> – Called before a transaction is suspended</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PreVoidTransaction<ept id="p1">**</ept> – Called before a transaction is voided</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Non-cancelable</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BeginTransaction<ept id="p1">**</ept> – Called before a cart is created and a transaction is started</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostEndTransaction<ept id="p1">**</ept> – Called after a sales transaction is completed</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostRecallTransaction<ept id="p1">**</ept> – Called after a transaction is recalled</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostReturnTransaction<ept id="p1">**</ept> – Called after items from a transaction are added to the cart for return</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostSuspendTransaction<ept id="p1">**</ept> – Called after suspending a transaction</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PostVoidTransaction<ept id="p1">**</ept> – Called after a transaction is voided</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Trigger example implementation</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The best way to understand triggers is to look at a sample implementation scenario.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Modern POS/Cloud POS changes to support Swedish localization requirements by using POS triggers</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Transactions can't have both return and sale operations if a fiscal register is connected.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IPreProductSaleTrigger<ept id="p1">**</ept> trigger is implemented to detect this situation if it occurs and to show a message to prompt the cashier.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This is a requirement in Sweden.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Implement an <bpt id="p1">**</bpt>IPreProductSaleTrigger<ept id="p1">**</ept> trigger to detect the situation and show a message to prompt the cashier.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Write trigger business logic in the <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> method in the implementation class.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Register the trigger as part of the <bpt id="p1">**</bpt>PostLogonTrigger<ept id="p1">**</ept> implementation on the <bpt id="p2">**</bpt>DOMContentLoad<ept id="p2">**</ept> event.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>Trigger01<ept id="p1">](./media/trigger01.png)](./media/trigger01.png)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Purpose:<ept id="p1">**</ept> To customize Modern POS/Cloud POS to implement the Swedish localization requirement that the same transaction not include both sale and return lines when a fiscal register is connected.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Open a Modern POS project, and add a new TypeScript (.ts) file to add the trigger implementation.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>We are creating a new TypeScript file for our customization to keep our customization separate from the product code and make upgrades easier to manage.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Start Microsoft Visual Studio 2015 as an administrator.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Open the Modern POS solution from the Retail SDK directory:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If you're using a cloud-hosted computer, the path is I:/RetailSDK.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If you're using a locally downloaded machine, the path is C:<ph id="ph1">\\</ph>Microsoft Dynamics AX<ph id="ph2">\\</ph>70<ph id="ph3">\\</ph>Retail SDK.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In POS.Core<ph id="ph1">\\</ph>Triggers<ph id="ph2">\\</ph>, create a new TypeScript file that is named <bpt id="p1">**</bpt>TriggerSample.ts<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>Trigger02<ept id="p1">](./media/trigger02-1024x411.png)](./media/trigger02.png)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Add the following code to the TriggerSample.ts file.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Inspect the TriggerSample.ts file to see the implementation of <bpt id="p1">**</bpt>IPreProductSaleTrigger<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Inspect the registration of <bpt id="p1">**</bpt>ValidateProductSalePreProductSaleTrigger<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Inspect the <bpt id="p1">**</bpt>performRegistration<ept id="p1">**</ept> method where the trigger is registered.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Inspect the registration of <bpt id="p1">**</bpt>PostLogonTrigger<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>DOMContentLoad<ept id="p2">**</ept> event.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Compile and rebuild Modern POS to verify the implementation:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Go to <bpt id="p1">**</bpt>Show Journal<ept id="p1">**</ept>, and select a transaction to return.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the transaction has multiple lines, return one line.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A return line should be added in the cart.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In the left navigation pane, use product search (the search icon) to search for the text "shirt."</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Select one of the shirt products, and then, on the app bar, click <bpt id="p1">**</bpt>Sell now<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Observe that <bpt id="p1">**</bpt>IPreProductSaleTrigger<ept id="p1">**</ept> trigger is run.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You should receive a message that states that you can't perform a sale and a return in same transaction.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>