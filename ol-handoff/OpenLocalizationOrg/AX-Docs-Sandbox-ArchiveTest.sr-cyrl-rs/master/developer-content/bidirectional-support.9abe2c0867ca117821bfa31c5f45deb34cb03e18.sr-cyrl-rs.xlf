<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e80b6477ebe1d5204d8db532cc2589dceff25fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\user-interface\bidirectional-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bcafdcbdfacbaa62a25af726d727e1918daa9db</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2797aebac0f4b92c26f28ee4006deec076e805c1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Right-to-left language support and bidirectional text</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>In the area of right-to-left (RTL) language support, one consideration is the combination of RTL text and left-to-right (LTR) text in the same string.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article discusses the issue of bidirectional text and how it's handled.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Right-to-left language support and bidirectional text</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the area of right-to-left (RTL) language support, one consideration is the combination of RTL text and left-to-right (LTR) text in the same string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article discusses the issue of bidirectional text and how it's handled.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A great example of right-to-left language support: Microsoft Word</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the area of right-to-left (RTL) language support, one consideration is the combination of RTL text and left-to-right (LTR) text in the same string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One example of a program that implements this functionality correctly is Microsoft Word.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you're trying to understand the correct behavior of mixed language presentation, you can use Word for validation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The problem is that most software just implements the Unicode standard to display bidirectional data, without evaluating how that data is actually used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Additionally, there's no attempt to provide the interactive experience that the user actually requires.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To understand how Word “gets it right” and provides a great experience, you can inspect the XML of a Word document.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There, you will see that Word tracks (and stores together with the run of characters) the keyboard that is used to enter each character, and that it treats each character as a member of the language that is associated with the keyboard.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, the character is given the behavioral aspects of that language.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Keeping track of character orientation in a financial program that might record billions of transactions and multi-billions of characters would produce significant transnational and spatial overhead if we stored contextual information for each character.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, this behavior would be considered only for special conditions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Bidirectional text</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To support Arabic and Hebrew, both of which are RTL languages, there is an RTL orientation for the controls in each form, so that an RTL reader can interact with the form in a natural reading manner.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the most part, RTL orientation of the controls works as expected and provides RTL users with the experience that they expect.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finance and Operations and modern browsers support RTL orientation, and Finance and Operations conforms to that functionality.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, in some cases, extensible controls (custom controls) require special code to orient their elements correctly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A point of reference in this article is the Win32 CEdit control, which is used primarily for standard text entry (account name, description, user name, and so on, in Microsoft Dynamics AX 2012).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The behavior of the HTML Input control mimics the functionality of the CEdit control.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, the same behavior applies to Finance and Operations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The CEdit control is a Win32 control that is governed by the rules for bidirectional text management that are defined by the Unicode standard.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Bidirectional text occurs when the control hosts both RTL text (such as Arabic or Hebrew) and LTR text within the same string of characters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you evaluate the examples in this article, remember that, regardless of the orientation of the form (RTL or LTR), the actual text that is presented is never reversed or “mirrored.”</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>English text is always read LTR and Arabic/Hebrew text is always read RTL.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When LTR and RTL text are combined, the reader must jump to the beginning of the run of characters in a given orientation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, when a mixed string is read from right to left, the individual words might be read like this:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>–––––<ph id="ph1">&amp;gt;</ph>  <ph id="ph2">&amp;lt;</ph>–––––  –––––<ph id="ph3">&amp;gt;</ph>  <ph id="ph4">&amp;lt;</ph>–––––<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>English  Arabic  English  Arabic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>English and Arabic/Hebrew text together: Bidirectional issues</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The visual presentation (glyphs) of English, Arabic, and Hebrew characters on the corresponding keyboards clearly differ.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, those three keyboards also share some symbols.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These symbols include numerals, and formatting characters such as parentheses, brackets, and underscores.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>According to the Unicode bidirectional algorithm, when these characters are used in a bidirectional string, their RTL/LTR orientation depends on <bpt id="p1">**</bpt>the context of the characters that surround them<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>From the Unicode standard (<bpt id="p1">&lt;</bpt>http://www.unicode.org/versions/Unicode5.1.0/<ept id="p1">&gt;</ept>):</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can find the Unicode display algorithm at <bpt id="p1">&lt;</bpt>http://www.unicode.org/reports/tr9/<ept id="p1">&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>(Section 3.3.4 of the algorithm describes how to position neutrals.)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Characters that have a weak bidirectional type determine their directionality according to their proximity to other characters that have strong directionality.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Characters that have a neutral bidirectional type determine their directionality from either the surrounding strong text or the embedding level.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following table describes the bidirectional character types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Category</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>General scope</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>L</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Left-to-Right</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>LRM, most alphabetic, syllabic, Han ideographs, non-European or non-Arabic digits, …</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>LRE</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Left-to-Right Embedding</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>LRE</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>LRO</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Left-to-Right Override</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>LRO</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>R</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Right-to-Left</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>RLM, Hebrew alphabet, and related punctuation</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>AL</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Right-to-Left Arabic</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Arabic, Thaana, and Syriac alphabets, most punctuation specific to those scripts, …</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>RLE</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Right-to-Left Embedding</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>RLE</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>RLO</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Right-to-Left Override</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>RLO</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>PDF</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Pop Directional Format</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>PDF</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>EN</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>European Number</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>European digits, Eastern Arabic-Indic digits, …</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ES</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>European Number Separator</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Plus sign, minus sign</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ET</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>European Number Terminator</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Degree sign, currency symbols, …</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>AN</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Arabic Number</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Arabic-Indic digits, Arabic decimal and thousands separators, …</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CS</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Common Number Separator</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Colon, comma, full stop (period), Non-breaking space, …</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>NSM</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Nonspacing Mark</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Characters marked Mn (Nonspacing_Mark) and Me (Enclosing_Mark) in the Unicode Character Database</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Weak</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>BN</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Boundary Neutral</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Default ignorables, non-characters, and control characters, other than those that are explicitly given other types</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Neutral</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>B</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Paragraph Separator</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Paragraph separator, appropriate Newline Functions, higher-level protocol paragraph determination</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Neutral</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>S</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Segment Separator</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Tab</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Neutral</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>WS</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Whitespace</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Space, figure space, line separator, form feed, General Punctuation spaces, …</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Neutral</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>ON</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Other Neutrals</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>All other characters, including OBJECT REPLACEMENT CHARACTER</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The fundamental problem with the Unicode standard for bidirectional text is that it fails to capture the user’s intent.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Therefore, the algorithm will move characters around within the same string, and put them in a location that the user didn't specify or doesn't want.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This issue is troublesome for accounting and financial systems, because the data that users enter into the system might not match the corresponding source documents.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>As we mentioned, Arabic, English, and Hebrew keyboards share some of the same characters.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>However, in some cases, those characters are positioned differently, depending on the keyboard that was used to type them, and/or the context of the surrounding characters and the orientation of the input control.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>These language-neutral characters include commas, periods, parentheses, hyphens, and underscore characters.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In some cases, the rules for displaying the same characters varies between languages.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Additionally, those rules can change, depending on the kind of data that is displayed.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information about this issue, see the "Issue: The hyphen used together with numbers: Language-specific behavior" section, later in this article.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Some people expect that characters that are entered in RTL mode will appear the same when the form is viewed in LTR mode.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In other words, the expectation is that a customer can have some users who use Hebrew and others who use English on the same installation or in the same company.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Issue: The underscore character used together with numbers</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept> 123<ph id="ph1">\_</ph>456 appears as 456<ph id="ph2">\_</ph>123, although the user wants it to appear as 123<ph id="ph3">\_</ph>456.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept> The user wants to enter an item number (such as 123<ph id="ph1">\_</ph>456) or a journal name (such as BA<ph id="ph2">\_</ph>Chk<ph id="ph3">\_</ph>Rev) that includes underscore characters for grouping purposes.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>There is a difference between the Unicode standard and what our users want to see in a financial program.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Even Word presents 123<ph id="ph1">\_</ph>456 as 456<ph id="ph2">\_</ph>123 for both Arabic and Hebrew.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This behavior occurs because the underscore character is a grouping mechanism.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>It splits the number into groups of numbers that can be read from right to left.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Numbers are read from left to right in Arabic and Hebrew.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>“Item” numbers, regardless of the combination (RTL<ph id="ph1">\_</ph>LTR<ph id="ph2">\_</ph>RTL, LTR<ph id="ph3">\_</ph>RTL<ph id="ph4">\_</ph>LTR, Neutral<ph id="ph5">\_</ph>RTL, and so), should appear exactly the same in a paragraph of any direction or alignment.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This issue isn't easy to resolve for plain text programs.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>All the customer knows is that the physical item number is (from left to right) 123<ph id="ph1">\_</ph>456, and that the string should appear as 123<ph id="ph2">\_</ph>456 in every language, so that the number that users see always matches what they know the physical number is.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Control behavior:<ept id="p1">**</ept> None of the off-the-shelf controls provide the desired behavior.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Word fails too.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>WPF RichTxt</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Win32 CEdit</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Win32 RichTxt</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Word</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Workarounds:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When you're using an English keyboard, use a different delimiter.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For example, enter <bpt id="p1">**</bpt>123.456<ept id="p1">**</ept> or <bpt id="p2">**</bpt>123/456<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When you're using a Hebrew keyboard, use a different delimiter.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, enter <bpt id="p1">**</bpt>123.456<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The slash character (/) on a Hebrew keyboard produces a period (.).</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> None of the off-the-shelf controls provide the requested behavior.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>One alternative is to identify fields that must allow for this directional formatting and flag those fields as LTR for data input (right-aligned for display purposes).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The program can't automatically determine that a field must have this behavior.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Therefore, if we expose an RTL/LTR flag, a customizer can modify targeted fields for the desired behavior.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Although this approach enables this specific scenario, it's important to understand that, if you extend the scenario by using characters in a combination of RTL and LTR languages, you will introduce other issues.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Another alternative is to educate users about the fundamental behavior when underscore characters and numbers are used together.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When underscore characters and numbers are required, users can then use a workaround to obtain the desired display behavior.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The underscore character doesn't present an issue when you combine English and RTL languages (pattern: RTL<ph id="ph1">\_</ph>LTR<ph id="ph2">\_</ph>RTL).</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Therefore, if you force a control to LTR when the input includes numbers/text/underscore characters, the behavior won't be as expected.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Users will have to manually reposition the cursor after each use of an underscore when they type RTL text.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>However, the behavior will be as expected for the use of numbers/text/underscore characters.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hebrew:<ept id="p1">**</ept> קשגכ<ph id="ph1">\_</ph>english<ph id="ph2">\_</ph>יקנקרק</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arabic:<ept id="p1">**</ept> شقلاهؤ<ph id="ph1">\_</ph>english<ph id="ph2">\_</ph>شقشلاهؤ</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Issue: The hyphen used together with numbers: Language-specific behavior</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept> LTR is expected for Hebrew, whereas RTL is expected for Arabic.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept> Item names that include numbers Arabic and Hebrew treat the hyphen differently when it's used together with numbers.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An Arabic keyboard treats the hyphen as an RTL character, whereas a Hebrew keyboard treats it as an LTR character.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Therefore, similar typed strings should be presented differently, depending upon the keyboard that was used.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Some readers will be familiar with this example from a meeting of interested parties: 1-2-3-a-b-c</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arabic:<ept id="p1">**</ept> The desired behavior is correct in Dynamics AX 2012.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>1-2-3-ش-لال-ؤ</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hebrew:<ept id="p1">**</ept> The desired behavior is incorrect in Dynamics AX 2012.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>1-2-3-ש-נ-ב</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The Unicode standard doesn’t provide for language-specific or keyboard-specific behavior.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Instead, it supplies fundamental bidirectional behavior and treats the hyphen as an RTL character.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Therefore, it presents the Arabic string correctly but the Hebrew string incorrectly.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Control behavior:<ept id="p1">**</ept> The WPF RichTxt control produces the correct/desired behavior for each language.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>WPF RichTxt</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Win32 CEdit</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Win32 RichTxt</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Word</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Workarounds for the Hebrew user:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Don't type hyphens between the numbers.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For example, if you type 1 2 3-A-B-C on a Hebrew keyboard, it appears in RTL as C-B-A-3 2 1.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You should assume that the ABC order is correct for Hebrew, which is an RTL language.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The English ABC text is reversed here for demonstrative purposes.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Use a different delimiter between the numbers.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, the slash character (/)  on a Hebrew keyboard produces a period (.).</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> This pattern is an issue for Hebrew users who want to use numbers or hyphens in item names.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Therefore, a global solution might not be appropriate, because there are exceptions.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Phone numbers, Social Security numbers, and other source document identification numbers are always read LTR.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The WPF RichTxt control provides the desired behavior according to the strict guidance.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>However, it isn't clear that this behavior is always the desired behavior.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>That is, phone numbers, US Social Security numbers, and so on, should always be read and appear in LTR order, regardless of the language orientation.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The alternative is to identify fields that must enable this behavior.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The program can't automatically determine that a field must have this behavior.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Therefore, you might have to use a descriptive property on the control, so that users can specify “Structured Formatting.”</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If none of these approaches can be achieved, you must educate Hebrew users about the fundamental behavior when hyphens are used together with numbers.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Users can then use one of the preceding workarounds to get the desired display behavior, by omitting the hyphens between numbers.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hebrew example:<ept id="p1">**</ept> (Desired and correct Operations for both Arabic and the Hebrew example in Hebrew)</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Pattern:<ept id="p1">**</ept> First (עברית) hyphen second (English) hyphen third (שלום) hyphen forth (Hello)</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct:<ept id="p1">**</ept> עברית-English-שלום-Hello</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Pattern:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>First (English letter) hyphen second (Hebrew letter) hyphen</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>First (Hebrew letter) hyphen second (English letter) hyphen</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A RTL form appears as desired:</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>ש-<bpt id="p1">**</bpt>-a<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-a<ept id="p1">**</ept>ש-</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exception for phone numbers:<ept id="p1">**</ept> Often, Arabic users don't have to use hyphens in phone numbers, because international phone numbers rarely use hyphens to separate digits.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Any fundamental changes in the behavior of hyphens (for example, if you introduce use of the WPF RichTxt control) will cause phone numbers to appear incorrectly for Arabic users.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Phone numbers are always read LTR and often include hyphens.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Phone numbers sometimes appear correctly, when they are shown in a grid through a display method that presents the string as LTR.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Currently, the input of phone numbers by using numbers and hyphens produces the correct display, such as 701-225-2188.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>There is an issue with phone numbers if you try to use a US pattern that includes parentheses.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arabic/Hebrew/English (desired):<ept id="p1">**</ept> (701)225-2188</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arabic (actual):<ept id="p1">**</ept> )701(225-2188</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hebrew (actual):<ept id="p1">**</ept> )701(225-2188</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> Expose an RTL flag for controls or an extended data type for phone numbers.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A customizer can force the control into LTR mode.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This approach will let users enter values in the order that they want.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Issue: LTR text combined with neutral characters in RTL input</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept> English text is combined with parentheses or other neutral characters.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept> A company name together with the company abbreviation, such as "Dynamics (DAT)"</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>In a typical example, the company name is followed by the company abbreviation, which is enclosed in parentheses.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>In this case, "Dynamics (DAT)" is shown as "(Dynamics(DAT".</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This behavior occurs because the closing parenthesis isn't surrounded by two English characters.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Therefore, the parenthesis is treated as an RTL character.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>It's changed to the RTL closing parenthesis and moved to the end of the string (in RTL orientation).</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Control behavior:<ept id="p1">**</ept> None of the controls provide the desired behavior.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>WPF RichTxt</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Win32 CEdit</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Win32 RichTxt</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Word</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The WPF RichTxt control has a flag that tries to format text according the first character in the string.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Although the algorithm <bpt id="p1">**</bpt>should<ept id="p1">**</ept> fix this issue, it doesn't.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Workarounds:<ept id="p1">**</ept> Don't use weak or neutral characters for grouping when you use English.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>For example, use "Dynamics DAT".</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Recommendation:<ept id="p1">**</ept> None of the controls provide the desired behavior.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>You must educate users about the fundamental behavior when weak or neutral characters are used together with English text.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Don't use weak or neutral characters unless English characters appear on each side.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>