<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc7be52524e6721411f245c59d514e3d41c226af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\user-interface\lookups-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38f975eaf8139009215b46980e4cc47f394b4c9a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">410f492b644f0557414ebfad38c6e58ffcd173af</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Lookup controls</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article discusses how to enable lookup behavior on controls.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>It also discusses how to create multi-select lookups and outlines lookup scenarios that are no longer supported.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Lookup controls</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article discusses how to enable lookup behavior on controls.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It also discusses how to create multi-select lookups and outlines lookup scenarios that are no longer supported.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Enabling lookup behavior in controls</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Controls bound to an Extended Data Type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Controls with their Extended Data Type property set (no FormDataSource in play) will have a lookup under the following conditions:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the EDT has its Table Relations or Table References node populated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the FormHelp property is set (custom lookup); doesn’t require rule <ph id="ph1">\#</ph>1 to be true.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the control has lookup or lookupReference overridden.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Note, this rule also applies to fully unbound controls (no EDT, field, or data method).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This includes overrides via registerOverrideMethod and others.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Controls bound to a form data source</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Controls that are bound to a data source will have a lookup under the following conditions: <bpt id="p1">**</bpt>Field bound<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>“lookup” or “lookupReference” (Reference Controls) methods are overridden.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the FormDataSource field has lookup or lookupReference overridden.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the control has lookup or lookupReference overridden.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This includes overrides via registerOverrideMethod and others.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the field has an EDT, then rule <ph id="ph1">\#</ph>2 from the "Controls bound to an Extended Data Type" section applies.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the bound field maps to a relation per DBFGetRef rules.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>High level rules:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If there is an EDT relation backing the field, with the Table Relations node populated and Ignore EDT Relations is false on the field, the relation is used (has a lookup).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If there is a relation mapping to the field and any fixed field link conditions are satisfied, the relation is used (has a lookup).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Validate must be “Yes”.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note the special case of migrated EDT relations which occur when:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Field is backed by an EDT with the Relations node populated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Field is backed by a TABLE relation with the “EDTRelation” set to Yes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The table relation link has the SourceEDT set to the appropriate EDT.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can also have cases where IgnoreEDTRelation is set to true on a field, in which case a lookup will occur only if rule <ph id="ph1">\#</ph>3.1.2 of this section is true.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data method bound<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the return type of the data method is an EDT, then rules <ph id="ph1">\#</ph>1 and <ph id="ph2">\#</ph>2 from the "Controls bound to an Extended Data Type" section apply.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the control has lookup or lookupReference overridden.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This includes overrides by using registerOverrideMethod.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Multiselect lookups</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Available system forms for building multi-select lookups</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are currently two system forms for creating multi-select lookups:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>SysLookup – Multiselect based on an Enum.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>SysLookupMultiselectGrid – Multiselect based on a collection of data.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>What happened to the SysLookupMultiselect form?</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SysLookupMultiselect was marked for deprecation in Microsoft Dynamics AX 2012 and has been removed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Any use of this form for multiselect lookup scenarios should be migrated to use SysLookupMultiselectGrid.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For an example, see the form tutorial<ph id="ph1">\_</ph>LookupMultiSelectGrid.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unsupported lookup scenarios</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Creating multiple lookup forms when the lookup button is used</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An error may occur if you create multiple lookup forms when the lookup button is used.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, overriding the ‘lookup’ method and creating a new lookup form, but also calling ‘super’ (which will create another lookup form).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Using SelectedControl() to determine which control is hosting a lookup</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using SelectedControl() to determine which control is hosting a lookup is unsupported.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>While it may work in some cases, it will fail in others.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, in disambiguation lookups, no control is selected on the parent form since the act of leaving the control is what triggers a disambiguation lookup.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As an alternative to using SelectedControl(), there are a few other ways to retrieve the control that is hosting the lookup:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Check the ‘selectTarget’ of the lookup form.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Check the ‘callerFormControl’ on the lookup form args.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that SysTableLookup::getCallerControl(Args args) encapsulates that call.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Note that the selectTarget and callerFormControl will be set automatically if the lookup form instance is spun up automatically by the kernel.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the form instance is created in app code, these can be set manually as shown below.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>public void lookup() { Args args = new Args(formStr(<ph id="ph1">&lt;formName&gt;</ph>)); args.caller(element); args.callerFormControl(this); FormRun formRun = classfactory.formRunClass(args); formRun.init(); this.performFormLookup(formRun); }</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creating a slider dialog (instead of a lookup form) when the lookup button is used</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Lookup controls should open lookup forms when the lookup button is used (not slider dialogs or other kinds of forms).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first reason for this is product consistency.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The second and more important reason is that opening a slider dialog from a lookup is incompatible with the new type-ahead feature in lookups.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>