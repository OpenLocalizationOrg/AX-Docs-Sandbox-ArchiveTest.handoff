<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cafac227b79a7586440819464d0eef347a34d2b0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">retail\dev-itpro\retail-sdk\retail-sdk-packaging.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f6ccf9cbc48534d09910ce22ddcec5b15faef53</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1cd79c4ca160ad3d080fcf333a05b1b795dc27e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Retail SDK packaging</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This topic explains how to create a Retail deployable package for Microsoft Dynamics 365 for Finance and Operations.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Retail SDK packaging</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic explains how to create a retail deployable package for Microsoft Dynamics 365 for Finance and Operations manually.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Retail deployable package is a bundle package which includes all the below retail componetst:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Commerce runtime (CRT)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Retail Server</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Modern POS</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Cloud POS</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hardware station</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Channel database scripts</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For detailed information about the Retail software development kit (SDK), see <bpt id="p1">[</bpt>Retail SDK overview<ept id="p1">](retail-sdk-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Retail Deployable Package</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Retail deployable package is an asset that can be consumed by the LCS deployment service or it can be deployed manually to service or install a customization.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Retail SDK generates the same package that is developed for Microsoft hotfixes or updates, so that there is one way to install or deploy updates and customizations to the existing solution.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Steps to create a Retail deployable package</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are two ways to generate the Retail deployable package.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One is using the Retail build automation or manually using the build tools in Retail SDK.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this topic we will focus on the manual way.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Customize or add functionality to the Retail stack.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the build tools to give an identity to the customized installation package, code-sign it, and specify the customized CRT, Retail Server, customized Hardware station assemblies, and customized database scripts.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After all the settings have been specified on Customization.settings file under Retail SDK\BuildTools folder, run <bpt id="p1">**</bpt>msbuild /t:rebuild<ept id="p1">**</ept> on the root of the Retail SDK folde using the VS dev command prompt tool to generate the retail deployable packages.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Before building the package place all the customized assemblies to Retail SDK\Refernces folder and also place the modified config files like commerceruntime.config, CommerceRuntime.MPOSOffline.config, dllhost.exe.config to the Retail SDk\Assets folder.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Retail SDK build tools – Customization settings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>BuildTools\Customization.setting files is where most of the configuration values for the Retail SDK are set for build and packaging.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These values control how binaries, components, and packages are named, versioned, and code-signed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After you define this metadata, The Retail SDK build system uses it to give an identity to the assets, and to package the customization assets for all the Retail components.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Below are the list fo configurations available in Customization.Settings file:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AssemblyNamePrefix<ept id="p1">**</ept> – Specify the prefix name for the assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you build the Retail SDK, all the assemblies are prefixed with this name.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomAssemblyVersion<ept id="p1">**</ept> – Specify the custom assembly version for all assemblies that are built by using the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomVersion<ept id="p1">**</ept> – Specify the custom file version for all assemblies that are built by using the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomName<ept id="p1">**</ept> – Specify the custom name for the assembly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomDescription<ept id="p1">**</ept> – Specify the description for the assembly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomDescription<ept id="p1">**</ept> – Specify the publisher for the assembly.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustomDescription<ept id="p1">**</ept> – Specify the copyright for the assembly.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SignAssembly<ept id="p1">**</ept> – Specify <bpt id="p2">**</bpt>True<ept id="p2">**</ept> if you want to sign the assembly during the build.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DelaySign<ept id="p1">**</ept> – Specify <bpt id="p2">**</bpt>True<ept id="p2">**</ept> if you want to delay signing of the assets during the build.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AssemblyOriginatorKeyFile<ept id="p1">**</ept> – Specify the strong name key to use to sign the assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ModernPOSPackageCertificateKeyFile<ept id="p1">**</ept> – Specify the PFX file to use to sign Modern POS and Hardware station.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RetailServerLibraryPathForProxyGeneration<ept id="p1">**</ept> – Specify the customized Retail Server assembly to use for proxy generation (both TypeScript and C<ph id="ph1">\#</ph> proxy).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>ItemGroup<ept id="p1">**</ept> section:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISV<ph id="ph1">\_</ph>CommerceRuntime<ph id="ph2">\_</ph>CustomizableFile<ept id="p1">**</ept> – Specify all the customized CRT assembly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can have multiple entries, one for each customized CRT assembly.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISV<ph id="ph1">\_</ph>RetailServer<ph id="ph2">\_</ph>CustomizableFile<ept id="p1">**</ept> – Specify all the customized Retail Server assembly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can have multiple entries, one for each customized Retail Server assembly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISV<ph id="ph1">\_</ph>HardwareStation<ph id="ph2">\_</ph>CustomizableFile<ept id="p1">**</ept> – Specify all the customized Hardware station assembly.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can have multiple entries, one for each customized Hardware station assembly.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ISV<ph id="ph1">\_</ph>CustomDatabaseFile<ph id="ph2">\_</ph>Upgrade<ph id="ph3">\_</ph>Custom<ept id="p1">**</ept> – Specify all the customized database scripts.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Retail Deployable package</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CRT extension assemblies</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>By default, there is no separate package for invidual retail componetst, because CRT isn't deployed individually, instead, CRT assets are packaged together with other application components, such as Modern POS, Retail Server, and Microsoft Dynamics 365 for Operations HQ.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In order for the Retail SDK build tools to package CRT in all the components where it's used, you must make the following configuration entries:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CRT extension assemblies<ept id="p1">**</ept> – These will be the new assemblies where you've written CRT extensions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specify an entry for CRT extension assemblies in Retail SDK<ph id="ph1">\\</ph>BuildTools<ph id="ph2">\\</ph>Customization.settings.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>crt-customization settings<ept id="p1">](./media/crt-customization-settings.png)](./media/crt-customization-settings.png)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CRT commerceruntime.config file<ept id="p1">**</ept> – If you have a new CRT assembly, you must add it to the CRT configuration file so that the runtime can load it.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specify an entry for CRT extension assemblies in Retail SDK<ph id="ph1">\\</ph>References<ph id="ph2">\\</ph>commerceruntime.config.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>crt-config<ept id="p1">](./media/crt-config.png)](./media/crt-config.png)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retail Server extension assemblies</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>**Retail Server extension assemblies **– These will be the new assemblies where you've written Retail Server customizations.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specify an entry for CRT extension assemblies in Retail SDK<ph id="ph1">\\</ph>BuildTools<ph id="ph2">\\</ph>Customization.settings.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>retail server customization setting<ept id="p1">](./media/retail-server-customization-setting.png)](./media/retail-server-customization-setting.png)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Retail Server web.config file<ept id="p1">**</ept> – You must add an entry for Retail Server extension assemblies to the Retail Server web.config file, so that they are loaded and used.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Specify an entry for Retail Server Extension assemblies in Retail SDK<ph id="ph1">\\</ph>Packages<ph id="ph2">\\</ph>RetailServer<ph id="ph3">\\</ph>Code<ph id="ph4">\\</ph>web.config.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>retail server web config<ept id="p1">](./media/retail-server-web-config.png)](./media/retail-server-web-config.png)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Database scripts</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>As a part of a customization, you might have to upgrade a channel database in addition to a Modern POS offline database.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Currently, you use upgrade SQL scripts to upgrade the channel and Modern POS offline databases.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can write an upgrade SQL script and put it at Retail SDK\Database\Upgrade\Custom, so that packaging tools can pick it up and include it in the deployable package for the correct components (Retail Server and Modern POS Offline).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>custom db script<ept id="p1">](./media/custom-db-script.png)](./media/custom-db-script.png)</ept> You must also update Retail SDK<ph id="ph2">\\</ph>BuildTools<ph id="ph3">\\</ph>Customization.settings to instruct the build tools which files to package for the database.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>database upgrade customization setting<ept id="p1">](./media/database-upgrade-customization-setting-1024x311.png)](./media/database-upgrade-customization-setting.png)</ept> Database scripts are packaged together with the Retail Server and Modern POS Offline packages, and are run when Retail Server and Modern POS are installed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If there are multiple custom database scripts, they are run in alphabetical order.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Therefore, if you want to run the scripts in a specific order, you must name them accordingly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The CRT.RETAILUPGRADEHISTORY table keeps track of which scripts are already applied to the database.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Therefore, the next database upgrade will run only those upgrade scripts that don't have an entry in the CRT.RETAILUPGRADEHISTORY table.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Generate a retail deployable package</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The Retail SDK fully supports msbuild.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To build the Retail SDK and , open a <bpt id="p1">**</bpt>Visual studio 2015 developer Command Prompt tool<ept id="p1">**</ept> window as an administrator, and run <bpt id="p2">**</bpt>msbuild<ept id="p2">**</ept> (or, for a non-debug version, run <bpt id="p3">**</bpt>msbuild /p:Configuration=Release<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Packages</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>After the build is completed, retail deployable packages(RetailDeployablePackage.zip) is generated in the Retail SDK\Packages\RetailDeployablePackage folder.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Note: There will not be any seperate packages for retail, all will be combined and created as one bundle package called RetailDeployablePackage</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Deploy the Retail Deployable packages:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To deploy the packages either manually or using the LCS automated flow, please follow the below link: <bpt id="p1">[</bpt>Apply a deployable package<ept id="p1">](https://docs.microsoft.com/en-us/dynamics365/operations/dev-itpro/deployment/apply-deployable-package-system)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Install a deployable package<ept id="p1">](https://docs.microsoft.com/en-us/dynamics365/operations/dev-itpro/deployment/install-deployable-package)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>