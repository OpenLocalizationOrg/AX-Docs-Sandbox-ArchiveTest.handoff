<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8959bae000ba731a174a09215dde4fb6a02ed309</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">retail\dev-itpro\retail-sdk\retail-sdk-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb02971df8394bc10a365a791afe870d96893549</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1db79e84a1b3875ce51b628ff3329477abef5326</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Retail SDK overview</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>This article provides general information about the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>The Retail SDK includes code, code samples, templates, and tools that you can use to customize retail functionality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Retail SDK overview</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article provides general information about the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Retail SDK includes code, code samples, templates, and tools that you can use to customize retail functionality.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Retail software development kit (SDK) includes code, code samples, templates, and tools that you can use to customize retail functionality.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The SDK supports rapid development, full MSBuild integration, package generation, and code separation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Download the Retail SDK</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Retail SDK is available in development environments, and in hotfix packages in a Retail SDK folder.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information see:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you get the SDK from a development instance, it is immediately ready for configuration and use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access instances<ept id="p1">](/dynamics365/unified-operations/dev-itpro/dev-tools/access-instances)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you get the SDK from a hotfix, it is included in the hotfix package as a zipped folder.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Retail hotfixes are cumulative and includes all other fixes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>We recommend that you put the SDK in a source control system such as Visual Studio Online.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Rapid development</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The main focus of the Retail SDK is to help you write customizations efficiently and correctly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The SDK lets you run applications directly in a single-computer demo environment by using the F5 functionality (run and debug) in Microsoft Visual Studio.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All the required “deployment chores” are done for you.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, you don't have to copy any files.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Full MSBuild integration</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Retail SDK is a build system.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A simple MSBuild command from the root of the SDK builds everything.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This behavior eliminates guesswork about how and where to build from, and guarantees consistency and reproducibility.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, the Retail SDK can easily be used together with any application lifecycle management (ALM) system, even Microsoft Visual Studio Online.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This integration includes automation of the build.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creation of final update packages, and better and explicit control over the customization</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The Retail SDK includes tools that generate new packages that include everything that is required in order to deploy a service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if the commerce runtime is extended with a new custom service dynamic-link library (DLL), the SDK automatically includes the new DLL in all appropriate packages (RetailServer and MPOSOffline).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Or, if the database is extended, the upgrade script is automatically included in both RetailServer and MPOSOffline packages, because these are the packages that must (potentially) run the channel database update.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Files that are shared exist only one time in the SDK.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The packaging projects are set up in such a way that they pull in the right files for the package.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, you edit a commerceruntime.config file in only one place.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The same applies for deployment-related script files, even though these files rarely require customization.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Better code separation</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Whenever the Retail SDK must be updated, a potential code merge is required.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This requirement applies if existing code was changed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Some features in the implementation and in the folder structure of the SDK help provide better separation of customization code from sample code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, these features eliminate much of this issue.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can expect more improvements in this area in the future.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Real-world implementation samples</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In addition to the source code of some of the Retail implementations, the Retail SDK includes sample code that illustrates how certain scenarios should be implemented.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retail SDK deep dive</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To <bpt id="p1">**</bpt>code<ept id="p1">**</ept> or <bpt id="p2">**</bpt>build<ept id="p2">**</ept> your customization, you must have the following tools:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio 2015 with Typescript 1.5 (an LCS developer topology is acceptable)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC 4.0 (an LCS developer topology acceptable) (required only by StoreFront)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A minimum of 150 MB of available disk space (an LCS developer topology is acceptable)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This list of requirement is very short and lets developers to be productive on simple laptops.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There is no longer a prerequisite for a validation utility.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To <bpt id="p1">**</bpt>run<ept id="p1">**</ept> your customization, the normal prerequisites to run Retail apply.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>We recommend that you run the customizations on a single-box developer topology (either LCS cloud-hosted or downloaded) during development.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retail SDK contents</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following folders and files are part of the Retail SDK at the top level.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK01<ept id="p1">](./media/retailsdk01.png)](./media/retailsdk01.png)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Folder/file</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Assets</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Contains shared items such as scripts and configuration files (commerceRuntime.config, dllhost.exe.config, and so on).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The configuration files should be customized and edited in this location.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The projects that use them will pick them up appropriately.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>BuildTools</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Contains anything that is related to the MSBuild and global configurations.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Customization.settings is the main file that is used to set up the build system.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following list shows the items that this file controls and that customizers will likely change:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Prefix for all built assemblies (AssemblyNamePrefix)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Assembly version for all binaries (CustomAssemblyVersion)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>File version for all binaries (CustomVersion)</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Name of the customization (CustomName)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Description of the customization (CustomDescription)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Publisher (CustomPublisher)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Code signing (SignAssembly, AssemblyOriginatorKeyFile)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Modern POS certificate path (ModernPOSPackageCertificateKeyFile)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Files that are related to the customization (RetailServerLibraryPathForProxyGeneration, ISV_*)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CommerceRuntime</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Contains a Visual Studio solution file (CommerceRuntime.sln) and related C# projects (CommerceRuntime, PricingEngine).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Database</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Contains shared database scripts.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The full script CommerceRuntimeScripts_Create.sql is used only to create a new base database.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The Upgrade folder includes incremental scripts from both Microsoft and the customizer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The existence of the database or the version in the database during a deployment controls which full or incremental scripts will be run.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Only scripts that haven't been run before will be run.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>HardwareStation</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Contains a Visual Studio solution file (HardwareStation.sln) and related C# projects (HardwareStation libraries and Webhost).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>OnlineStore</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Contains a Visual Studio solution file (OnlineStore.sln) and related C# projects (Ecommerce SDK).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Packages</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Contains multiple projects for package creation.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These packages are used to deploy via LCS.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These packages also include the final web.config files.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Payments</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Contains a Visual Studio solution file (PaymentSDK.sln) and related C# projects (PaymentSDK connectors, samples and functional test).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>POS</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Contains files for POS:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CloudPos.sln</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>ModernPos.sln</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Folder Core – Low-level shared POS code</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Folder ViewModels – Shared POS view models</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Folder SharedApp – Shared POS views</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Folder App – Modern POS–specific views and other items</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Folder Web – Cloud POS–specific views and other items</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Proxies</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Contains two Visual Studio projects that are referenced by others.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>These projects contain interfaces and generated code that serves as a proxy client of Retail Server.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Proxies.Retail.TypeScript is the TypeScript proxy, and RetailProxy is the C# proxy.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>They are used by Modern POS/Cloud POS and the ECommerce SDK.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>References</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The single place where all binaries live.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The location is used to resolve any project’s binary references.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The list of files includes external non-Retail binaries and also Microsoft Retail binaries.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Additionally, this directory serves as the global drop location for any binaries that are built from the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>SampleExtensions</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Contains sample extensions.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>dirs.proj</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The top-level MSBuild file that directs the build order.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Microsoft-version.txt</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A file that includes the Microsoft version of the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Don't edit this file.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The C<ph id="ph1">\#</ph> source code in the SDK uses the Contoso namespace.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Therefore, it's easier to distinguish Microsoft types and your own types, because Microsoft uses Microsoft.Dynamics.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If you're referencing a type from the Microsoft binary, reference it by using Microsoft.Dynamics.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>That way, you'll know that it's not from the Retail SDK but from a referenced binary.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK02<ept id="p1">](./media/retailsdk02.png)](./media/retailsdk02.png)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Dependencies, build order, and full build</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following illustration shows a high-level logical dependency tree within the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It doesn't show the references to all Microsoft files or assets.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To see these, look at the Visual Studio project and solution files in more detail.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK03<ept id="p1">](./media/retailsdk03.png)](./media/retailsdk03.png)</ept> Note the following important points:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The RetailServer API is consumed by a few projects by means of automatically generated client proxy code.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This behavior allows for more rapid development, and reduces opportunities for errors and bugs.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>By default, the Retail SDK uses the official Microsoft DLL to generate the client code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Customizers can switch to their own DLL (in Customization.settings) and therefore automatically generate the proxy code for their customized RetailServer API.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>After switching the DLL, a developer might have to change some implementations inside the RetailProxy project.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The reason is that Modern POS in offline mode must communicate directly with the commerce runtime, and that code must be implemented.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>However, no guesswork is required.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The C<ph id="ph1">\#</ph> compiler will force it.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The packaging projects generate the deployment packages in the way that LCS expects them.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>By default, these project will ship only the Microsoft assets (non-customized) and the proxy DLLs.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Anything else that should be included must be explicitly named in Customization.settings.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This behavior is by design.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It reduces the deployed custom code and allows for binary patches.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For example, a customization adds a new CommerceRuntime service and a new RetailServer controller.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In this case, two new DLLs are registered for inclusion in the packages and are automatically included in all relevant places.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The packages will <bpt id="p1">**</bpt>not<ept id="p1">**</ept> have all recompiled binaries from the SDK.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>There is no single Visual Studio solution that includes all projects.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Because there are few couplings between the various Visual Studio projects, you can open multiple projects or solutions side by side, and can compile the appropriate project after a change.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Even if you didn't customize every component, the easiest way to get the final deployment packages is by building the whole Retail SDK.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To do this, open an <bpt id="p1">**</bpt>MSBuild Command Prompt for VS2015<ept id="p1">**</ept> window, and enter <bpt id="p2">**</bpt>msbuild<ept id="p2">**</ept> (or <bpt id="p3">**</bpt>msbuild /p:Configuration=Release<ept id="p3">**</ept> for a non-debug version).</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK04<ept id="p1">](./media/retailsdk04.png)](./media/retailsdk04.png)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This command will build all projects.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This approach also provides a great way to verify that there are no implementation or code bugs.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If there are any bugs, the build will fail, and the Command Prompt window will show what failed (this output resembles what Visual Studio would show).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK05<ept id="p1">](./media/retailsdk05.png)](./media/retailsdk05.png)</ept> For detailed help for MSBuild, see <bpt id="p2">[</bpt>https://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx<ept id="p2">](https://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The binaries that the build creates are automatically copied to the SDK’s References folder.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The References folder also includes all the other binaries.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Notice that no DLLs are overwritten, because they are all prefixed with a name (in this case, "Contoso") that you can define in Customization.settings.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK06<ept id="p1">](./media/retailsdk06.png)](./media/retailsdk06.png)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Minimal required configuration</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Do you just want to quickly build the Retail SDK, or to run POS in the debugger on a demo machine?</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For Modern POS only, you must create an app package signing certificate in order to build correctly.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use Cloud POS.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Follow the instructions at <bpt id="p1">[</bpt>https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85).aspx<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85).aspx)</ept> to create a PFX file.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Then copy the PFX file to the BuildTools folder, and update the BuildTools<ph id="ph1">\\</ph>Customization.settings file with the correct name (ModernPOSPackageCertificateKeyFile).</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>At this point you have everything that you require in order to build individual solutions, projects, or the whole Retail SDK (by using MSBuild).</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Normal configuration/code signing</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>BuildTools<ph id="ph1">\\</ph>Customization.settings holds most of the configuration values for the SDK.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The highlighted items in the following illustration are the global values.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>These values control how built binaries, components, and packages are named, versioned, and code-signed.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK07<ept id="p1">](./media/retailsdk07.png)](./media/retailsdk07.png)</ept> It's good practice to sign your assemblies with a strong name, even though this isn't required.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To learn how to create your own key file if you don't already have one, see <bpt id="p1">[</bpt>https://msdn.microsoft.com/en-us/library/6f05ezxy(v=vs.110).aspx<ept id="p1">](https://msdn.microsoft.com/en-us/library/6f05ezxy(v=vs.110).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To build correctly, you must create an app package signing certificate.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Follow these instructions at <bpt id="p1">[</bpt>https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85).aspx<ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/desktop/jj835832(v=vs.85).aspx)</ept> to create a PFX file.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Both the strong name key file and the app package signing certificate can be stored inside the BuildTools folder.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RetailServerLibraryPathForProxyGeneration<ept id="p1">**</ept> property can be used to set a different RetailServer DLL for proxy generation.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Customization.settings is also the place to define your new customization assets, such as binaries, configuration files, and SQL update scripts.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>After you specify your extensions, binaries, and assets here, the files will be added in the deployable package that is created.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK08<ept id="p1">](./media/retailsdk08.png)](./media/retailsdk08.png)</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Customizing the build</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Adding new projects</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>It's easy to adding new projects to the Retail SDK’s build system.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can either clone one of the many existing projects or start a new project.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You just have to make some adjustments in a text editor, as shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The relative path of the <bpt id="p1">**</bpt>Import<ept id="p1">**</ept> elements should be adjusted, and the <bpt id="p2">**</bpt>AssemblyName<ept id="p2">**</ept> element should use the predefined <bpt id="p3">**</bpt>AssemblyNamePrefix<ept id="p3">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>These adjustments are required in order to get versioning, code signing, uniform assembly naming, automatic dropping to the References folder, and other tasks for free.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK09<ept id="p1">](./media/retailsdk09.png)](./media/retailsdk09.png)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Changing the build order or adding to the build</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The whole directory tree of the Retail SDK is built with the help of MSBuild traversal files (dirs.proj files).</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The following illustration shows the main traversal file of the Retail SDK.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Similar files might also exist in subdirectories.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Notice that Visual Studio solution files (.sln files) are very similar to traversal files.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Both “direct” the MSBuild engine to process other build scripts.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK10<ept id="p1">](./media/retailsdk10.png)](./media/retailsdk10.png)</ept> After new code is added, most of it should be located in a new folder (for details, see "Best practices of code implementation"), and you must add it to the traversal structure by adding to one or multiple dirs.proj files.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The Extensions folder appears highlighted on line 10 in the previous illustration.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The quickest way to get started with a new dirs.proj file is to copy an existing file, correct the paths in the <bpt id="p1">**</bpt>Import<ept id="p1">**</ept> elements, and update the <bpt id="p2">**</bpt>ProjectFiles<ept id="p2">**</ept> elements in the <bpt id="p3">**</bpt>ItemGroup<ept id="p3">**</ept> element.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Build script customization</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When you must implement new build steps, keep in mind that the existing scripts might be updated by a Retail SDK update later.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Best practice is to minimize the editing of any file, or add new files instead.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you require new global MSBuild properties, BuildTools<ph id="ph1">\\</ph>Microsoft.Dynamics.RetailSDK.Build.props is a good place to add them.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Likewise, BuildTools<ph id="ph1">\\</ph>Microsoft.Dynamics.RetailSDK.Build.targets can be used to add new build processing targets.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If only one project requires special handling, it is better to explicitly make the change there.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If you require new local MSBuild properties, add a new file that is named local.props in the same directory.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Alternatively, add a local.targets file if you require local build processing targets.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Developer productivity</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>As shown in the architecture diagram earlier in this article, several things depend on the RetailServer interface.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>It is likely that someone will change this interface.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>On a developer topology machine, someone might want to immediately try out a change.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>In this case, any CommerceRuntime and RetailServer extension DLLs must be copied into the bin folder of the locally installed RetailServer web application.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A user can configure the Customization.setting file so that the DLLs are automatically copied into the bin folder of the local RetailServer web application whenever new versions of these files are built.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK11<ept id="p1">](./media/retailsdk11.png)](./media/retailsdk11.png)</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Application lifecycle management</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A good ALM solution provides version control, builds, automated builds, planning tools, tracking tools, dashboards, customization, and more.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>https://msdn.microsoft.com/en-us/library/fda2bad5.aspx<ept id="p1">](https://msdn.microsoft.com/en-us/library/fda2bad5.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The Retail SDK is organized in such a way that it aligns well with these capabilities.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Visual Studio Online is a great tool and is recommended.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Branching and versioning</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>To work efficiently in a team, or even just to be able to go back and look at some changes that were done in the past, you must have good branching strategy and versioning discipline.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The following illustration shows a simple branching strategy that might work well for most teams.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The version numbers are fictitious.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>RetailSDK12<ept id="p1">](./media/retailsdk12.png)](./media/retailsdk12.png)</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Retail SDK mirror branch</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A very important point to emphasize is that the non-customized Retail SDK should be stored in your source control.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>You don't have to store every version, but the versions that your team wants to snap to should be added (these versions might be cumulative updates or hotfixes).</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Only a simple merge of all changes (additions, changes, and deletions) should be done.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>No other development work should occur in this branch.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The Retail SDK has its own version.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>All Retail binaries and packages that are included have the same version.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The version can also be found in the root of the Retail SDK in a file that is named Microsoft-version.txt.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Customization branch</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>After development can start, a new branch should be started (customization branch).</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>At the beginning of the initial branch-out, this branch will be an exact copy of the Retail SDK mirror branch.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This is the branch for a team’s development.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The version of the customization branch must be incremented at least every time that a build is created for testing, or it can even be incremented daily.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The file version to increment is defined in Customization.setting file by using the <bpt id="p1">**</bpt>CustomVersion<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If you update it and rebuild, all binaries, packages, manifest files are updated accordingly.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>CustomAssemblyVersion<ept id="p1">**</ept> property should be updated only when the update isn't backward compatible and/or for major new releases.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>In other words, this update should very rarely.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example, Microsoft’s assembly version stayed the same for the multiple CTP releases for the current version.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Because there are both Microsoft assets and your own changes in the same branch, the branch essentially has two file versions.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The first version is the Microsoft version of the Retail SDK that the current branch is based on, and the second version is the version that is set by the <bpt id="p1">**</bpt>CustomVersion<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>In the previous illustration, the current file version of the customization branch is 1.0.2.<ph id="ph1">\*</ph> (based on Microsoft version 7.0.2200.3).</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The file version of the first rolled-out release was 1.0.0.40 (based on 7.0.2000.0).</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>When a testing phase is completed, and the final packages are being deployed with that version, it's important that you increment the version (or create a source control label).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>