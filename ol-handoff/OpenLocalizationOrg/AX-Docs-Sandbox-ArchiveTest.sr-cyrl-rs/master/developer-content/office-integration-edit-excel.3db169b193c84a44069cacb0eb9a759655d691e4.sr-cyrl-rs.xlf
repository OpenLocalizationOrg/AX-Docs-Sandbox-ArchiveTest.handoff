<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sr-cyrl-rs">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5a646d1" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c583aa668967e3e006877ccdd55947e3b900a619</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\office-integration\office-integration-edit-excel.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">developer-content</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db55940b4ade6c9a83ed9253408cfe31301f6aba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b35c3c7ddfb092d0dced4e1474472d7df7153ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Create Open in Excel experiences</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" restype="x-metadata">
          <source>Learn about creating Open in Office experiences for Excel and Word.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create Open in Excel experiences</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Learn about creating Open in Office experiences for Excel and Word.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What are Open in Excel experiences?</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Open in Excel experiences are:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Based on Entities and the OData services they create.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Dynamically generated or based on a pre-defined template.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Editable and refreshable via the Excel Data Connector App.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following image shows the <bpt id="p1">**</bpt>Excel Data Connector App<ept id="p1">**</ept> inside the Journal Entry in Microsoft.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101a<ept id="p1">](./media/off101a.png)](./media/off101a.png)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Where are the Open in Excel experiences?</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open in Excel experiences are usually found under in the Open in Excel section of the Open in Microsoft Office menu, but an explicit button can be added for these experiences.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>What's the difference between Export to Excel and Open in Excel?</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Export to Excel and experiences are both found in the Open in Microsoft Office menu:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Export to Excel options are static exports of grid data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each one corresponds to a visible grid.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>All the grid data for the current filter is placed into a workbook.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Open in Excel experiences utilize the Excel Data Connector App to facilitate refresh and publish.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following image shows the <bpt id="p1">**</bpt>Open in Microsoft O<ept id="p1">**</ept>ffice menu on the <bpt id="p2">**</bpt>Fleet Customers<ept id="p2">**</ept> form with a template <bpt id="p3">**</bpt>Open in Excel<ept id="p3">**</ept> option, a generated <bpt id="p4">**</bpt>Open in Excel<ept id="p4">**</ept> option, and a static <bpt id="p5">**</bpt>Export to Excel<ept id="p5">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101b<ept id="p1">](./media/off101b.png)](./media/off101b.png)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When will an entity show as an Open in Excel option?</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When an entity has the same root datasource (table) as a form, it will be added as an option in the Open in Excel section of the Open in Microsoft Office menu.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is referred to as a “generated” option.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What fields will be shown in the workbook?</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default fields that will be added into the workbook are the key and mandatory fields of the entity.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If a different set of fields should be provided by default, then those fields can be added into the <bpt id="p1">**</bpt>AutoReport field group<ept id="p1">**</ept> on the entity.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following image show the Visual Studio view of the AutoReport field group for the FMCustomerEntity.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101c<ept id="p1">](./media/off101c.png)](./media/off101c.png)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>What fields will be shown when an entity is the target of a lookup?</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a relationship is defined between two entities, if the identifier for one entity is shown on the other then the fields that will be shown in that lookup are either the key fields, or the fields in the <bpt id="p1">**</bpt>AutoLookup field group<ept id="p1">**</ept> if it is not empty.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Relationship lookups are not currently supported, but they will eventually be displayed in the app in a similar way to the enumeration lookups.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Excel Data Connector App with an enumeration lookup is shown below.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101d<ept id="p1">](./media/off101d.png)](./media/off101d.png)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>What should be done to make an entity ready for use in Excel?</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Define the AutoReport and AutoLookup field groups and test them using the Excel App design experience.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Why does an automatically added entity option have “(unfiltered)” after the entity name?</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Currently no filter is added to these options, hence the term “(unfiltered)”.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the future, an attempt will be made to apply the filter from the form to these options.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, if a list of Customers was filtered to just Customers in the state of California, then, in the future, the entity will be scanned for the state field and if it was found then a filter would be automatically added.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>How can an entity be added as an Open in Excel option on a form that doesn’t share the same root datasource?</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A generated Open in Excel option can be added on any form by implementing the ExportToExcelIGeneratedCustomExport interface.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When adding a generated option programmatically, the set of fields can be explicitly specified.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>What are the regionspecific considerations for defining entities?</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The Open in Excel generated experiences can be made region-specific by adding region-specific fields into the AutoLookup group.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Those region-specific fields will then be included in the generated workbook.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>How can I create a custom lookup for an entity field in Excel?</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A custom lookup can be shown for an Entity field.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Name - The method needs to have a name that is “lookup<ph id="ph1">\_</ph><ph id="ph2">&amp;lt;</ph>fieldname<ph id="ph3">&amp;gt;</ph>” e.g. a field “MyField” could have a lookup method “lookup<ph id="ph4">\_</ph>MyField”.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Attributes – Attributes need to be added to the method:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>SysODataActionAttribute(str <ph id="ph1">&amp;lt;</ph>name<ph id="ph2">&amp;gt;</ph>, Boolean <ph id="ph3">&amp;lt;</ph>isInstanceMethod<ph id="ph4">&amp;gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>SysODataCollectionAttribute(str <ph id="ph1">&amp;lt;</ph>name<ph id="ph2">&amp;gt;</ph>, Types <ph id="ph3">&amp;lt;</ph>type<ph id="ph4">&amp;gt;</ph>, “Value”)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return – The method should return a list of strings.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How does the app get injected into a workbook to start building a template?</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Excel Data Connector App is injected into a workbook when a generated Open in Excel experience is triggered or when a workbook is created using the <bpt id="p1">**</bpt>Common<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Common<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Office integration<ept id="p3">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p4">**</bpt>Excel workbook designer<ept id="p4">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create workbook<ept id="p1">**</ept> button will add the selected entity and fields, a pointer to the server, and the app into a workbook.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create blank workbook<ept id="p1">**</ept> button will simply add a pointer to the server and the app into a workbook.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>View related<ept id="p1">**</ept> form will navigate to the form relating to the currently selected entity to more easily review the effect of data changes made in Excel.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get entity record count<ept id="p1">**</ept> button will show the record count for the currently selected entity.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Currently, the Excel Data Connector App cannot handle large (tall and wide) data sets.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Any unfiltered entity with more than 10,000 records is at risk of crashing the app.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following image shows the <bpt id="p1">**</bpt>Excel workbook designer<ept id="p1">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101e<ept id="p1">](./media/off101e.png)](./media/off101e.png)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After obtaining a workbook containing the Excel Data Connector App, additional datasources can be added via the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Currently, datasources cannot be removed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following image shows the Excel Data Connector App with the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> button highlighted.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101f<ept id="p1">](./media/off101f.png)](./media/off101f.png)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When will a template show as an Open in Excel option?</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When a template listed in the <bpt id="p1">**</bpt>Common<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Common<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Office integration<ept id="p3">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p4">**</bpt>Document templates<ept id="p4">**</ept> form (DocuTemplate) has ShowInOpenInOfficeMenu set to Yes and has the same root datasource (table) as the current form, it will be added as an option in the Open in Excel section of the Open in Microsoft Office menu.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following image shows the <bpt id="p1">**</bpt>Document templates<ept id="p1">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101g<ept id="p1">](./media/off101g.png)](./media/off101g.png)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Will a filter be added to the template?</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Document Templates<ept id="p1">**</ept> form, the standard filter for “current record” can be turned on and off.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the filter is on, then when the template is invoked as an Open in Excel option and a filter for the current record will be added to the workbook.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The filter will be the key fields and their values.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>How can templates be defined in metadata and code and loaded automatically?</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When adding a template into the <bpt id="p1">**</bpt>Document Templates<ept id="p1">**</ept> form, it is added for that instance and is referred to as a “user-defined” template.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Templates can also be defined in metadata and code and loaded in an automatic way, thus making them “system-defined” templates.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To create a system-defined template via metadata and code:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Define the template.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Create a new resource in a project.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Define a new class that extends the DocuTemplateRegistrationBase class and add an implementation of the registerTemplates method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The LedgerJournalLineEntryTemplateRegistration and FMTemplateRegistrations classes are good examples of template registrations defined in code.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>And the LedgerJournalLineEntryTemplate and FMTemplateCustomersWithLocations resources are the corresponding templates stored in metadata as resources.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When a template has a registration class, it will be loaded when the <bpt id="p1">**</bpt>Reload system templates<ept id="p1">**</ept> button is clicked in the <bpt id="p2">**</bpt>Document Templates<ept id="p2">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>How do templates get loaded into a fresh deployment?</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To load system defined templates, click the <bpt id="p1">**</bpt>Reload system templates<ept id="p1">**</ept> button in the <bpt id="p2">**</bpt>Common<ept id="p2">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p3">**</bpt>Common<ept id="p3">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p4">**</bpt>Office integration<ept id="p4">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p5">**</bpt>Document templates<ept id="p5">**</ept> form, as shown below.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101h<ept id="p1">](./media/off101h.png)](./media/off101h.png)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In the near future we will do the equivalent of clicking that button during deployment.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>How do I decide if I should create a template?</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A template is an artifact that needs to be maintained and versioned.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you can avoid defining a template without sacrificing much from the user experience, then you probably should use a template.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Create a template if:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You need additional content or formatting in the template.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You want to combine multiple entities/datasources in the same workbook.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Don’t create a template if:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can just specify a set of fields to show in a table binding.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>What are the regionspecific considerations for templates?</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When creating a template for an entity that has region-specific fields, you should leave those region-specific fields out of the template since otherwise all users will see the region-specific fields.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Templates should cater to the majority of users by default and region-specific users can add those fields using the easy-to-use design experience of the Excel Data Connector App.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The region-specific fields and columns can be added by users as needed and then that template can be either saved to local computer for reuse by a single user or uploaded via the Document Templates form for reuse by any user of that instance.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A couple of other considerations:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If a region has a region-specific entity, then a region-specific template could be created.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If a region is important enough, then you could define a region-specific template as well as a region-generic template.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>How do I add an explicit button for a template Open in Excel option?</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An explicit button can be added for Open in Excel experiences.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The label shown on the button should usually be “Open target in Excel” where target is the name of the target data like “lines” or “catalog”.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The code behind such a button will:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Obtain the template to be used.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Add the desired filter.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Pass the template to the user.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An example of such code can be found on the <bpt id="p1">**</bpt>LedgerJournalTable<ept id="p1">**</ept> form (<bpt id="p2">**</bpt>General ledger<ept id="p2">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p3">**</bpt>Journals<ept id="p3">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p4">**</bpt>General journal<ept id="p4">**</ept>) in the <bpt id="p5">**</bpt>Clicked<ept id="p5">**</ept> method on the <bpt id="p6">**</bpt>OpenLinesInExcel<ept id="p6">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following image shows the <bpt id="p1">**</bpt>General ledger<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Journals<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>General journal<ept id="p3">**</ept> form with the <bpt id="p4">**</bpt>Open lines in Excel<ept id="p4">**</ept> button highlighted.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101i<ept id="p1">](./media/off101i.png)](./media/off101i.png)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To programmatically add generated and template Open in Excel options Open in Excel options can be programmatically added by implementing the ExportToExcelIGeneratedCustomExport and ExportToExcelITemplateCustomExport interfaces.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This allows the addition of options to forms where the entity or template doesn’t have the same table as the root datasource.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A good example of when you would use this capability is on forms without a datasource, potentially containing just a collection of form parts.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example adds generated and template Open in Excel options programmatically to the <bpt id="p1">**</bpt>FMRental<ept id="p1">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>How do I add a filter for a programmatically-added template Open in Excel option?</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A template Open in Excel option can be programmatically added by implementing the ExportToExcelITemplateCustomExport interface and providing a template in the getTemplate method.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A filter for that option can be programmatically added by using the ExportToExcelFilterBuilder API in the updateTemplateSettings method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After a filter has been added programmatically, the resulting filter can be viewed in the Excel Data Connector App using the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following image shows the Excel Data Connector App with the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> button highlighted.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101j<ept id="p1">](./media/off101j.png)](./media/off101j.png)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following image shows the Excel Data Connector App with the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> dialog opened.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101k<ept id="p1">](./media/off101k.png)](./media/off101k.png)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>How do I enable relationship lookups in Excel?</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To enable relationship lookups in the Excel Data Connector, you must ensure the following metadata is set.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The Role and Related Data Entity Role defined on the relationship need to be unique among all relationships on both the source and target entity.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This is particularly important for relationships involving entities with lots of relationships, such as DimensionCombinationEntity.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you're not seeing an expected lookup, try changing the role names to the following format:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Role<ept id="p1">**</ept>: <ph id="ph1">\[</ph>this entity's public name<ph id="ph2">\]</ph><ph id="ph3"> + </ph><ph id="ph4">\[</ph>target entity's public name<ph id="ph5">\]</ph><ph id="ph6"> + </ph><ph id="ph7">\[</ph>target entity field<ph id="ph8">\]</ph> + "Source"</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Related Data Entity Role<ept id="p1">**</ept>: <ph id="ph1">\[</ph>this entity's public name<ph id="ph2">\]</ph><ph id="ph3"> + </ph><ph id="ph4">\[</ph>target entity's public name<ph id="ph5">\]</ph><ph id="ph6"> + </ph><ph id="ph7">\[</ph>target entity field<ph id="ph8">\]</ph> + "Target"</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The Cardinality and Related Data Entity Cardinality need to be set appropriately.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>At least one constraint must be added to the relationship.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>With the exception of dimension relationships, which are a special case, the properties constrained must both be public.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you are not seeing an expected lookup, validate relationship metadata by checking the metadata feed available at <ph id="ph1">\[</ph>YourSiteURL<ph id="ph2">\]</ph>/data/$metadata.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Search the $metadat feed for the public name of your entity to find its EntityType element, then make sure there is a child NavigationProperty element with a name equal to the Role value of the relationship.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the navigation property exists, it will be used by the Excel Data Connector to show a relationship lookup.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Lookups are not shown under the following conditions:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>All of the entity's key fields are included as constraints in the relationship.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The selected field is a key and the selected record is not new.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The authenticated user does not have permission to access the entity targeted by the lookup.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>How do dimensions work?</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The easiest way to set up dimension metadata on data entities is to use the data entity creation wizard, which will automatically create the private relationships and public display value fields exactly as the dimensions framework needs them.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If you want to customize your dimensions setup, see <bpt id="p1">[</bpt>Dimensions Overview<ept id="p1">](../financial/dimensions-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Lookups, at RTW, are only generated automatically for non-Ledger dimensions.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Custom dimensions are not supported for the initial release, but support will be added in a future update.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If you want to enable lookups for Ledger dimensions (MainAccount, Department, CostCenter, etc.), see the link above for guidance on creating relationships on DimensionCombationEntity and DimensionSetEntity fields; once those relationships are present, relationship lookups will be displayed in the Excel Data Connector.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The Excel Data Connector supports two types of dimension data entry: editing the display value directly or each attribute of the display value in a separate column.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If both the display value column and the individual attribute columns are bound, they can both be edited and published separately; if both the display value and an individual attribute are edited in the same row, the individual attribute change overrides the display value change.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>How do I create formula table columns?</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If a formula is needed in a table, then add a formula column.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When in the field selection page for a table binding, click the "Formula" button above the Selected fields list to add a new formula column.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The label and value for the formula are entered in the fields immediately below the Selected fields list.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>After adding a new formula column, leave the value empty and click Update.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Once the field has been added to the table, use standard Excel capabilities to create a formula.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Then copy the formula and paste it into the formula column value field.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When defining a formula, make sure there is more than one row in the table, otherwise the formula that Excel gives you may be for ALL rows instead of THAT row.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To specify just the current row, the at symbol ("@") is needed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For example, sum of four columns for all rows "=SUM(Table1<ph id="ph1">\[</ph><ph id="ph2">\[</ph>ColumnA<ph id="ph3">\]</ph>:<ph id="ph4">\[</ph>ColumnD<ph id="ph5">\]</ph><ph id="ph6">\]</ph>)" versus sum of four columns for the current row "=SUM(Table1<ph id="ph7">\[</ph><ph id="ph8">@</ph><ph id="ph9">\[</ph>ColumnA<ph id="ph10">\]</ph>:<ph id="ph11">\[</ph>ColumnD<ph id="ph12">\]</ph><ph id="ph13">\]</ph>)".</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Known issues</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Refresh doesn’t automatically occur in old templates</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The ability to control “refresh on open” was added as a setting.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To opt-in to the default behavior, existing templates and workbooks need to have the <bpt id="p1">**</bpt>Refresh on open<ept id="p1">**</ept> check box selected in <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p3">**</bpt>Data Connector<ept id="p3">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p4">**</bpt>Refresh Options<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Error finding entity</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The reference to entities changed from using the Private Entity Name (DataEntity.Name) to Public Entity Name (DataEntity.PublicEntityName).</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the public and private names for an entity were different and that entity was used in an Excel template or workbook, then this will cause the following error to be displayed in the Excel App: “Error Finding Entity.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Details: Entity "<ph id="ph1">&amp;lt;</ph>DataEntity.Name<ph id="ph2">&amp;gt;</ph>" not found”.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101l<ept id="p1">](./media/off101l.png)](./media/off101l.png)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To resolve this, change the binding information in the affected template so that it points to DataEntity.PublicEntityName instead of DataEntity.Name.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For the DataEntity.Name that needs to be replaced, determine the DataEntity.PublicEntityName, for exmaple replace FMCustomerEntity with FleetCustomer.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Find the affected template.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Change file extension on template from .xlsx to .zip.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101m<ept id="p1">](./media/off101m.png)](./media/off101m.png)</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The file to be changed will be one of the webextension<ph id="ph1">\*</ph>.xml files in the xlwebextensions directory, such as 2015-05-25-FleetCustomersWithLocations.zipxlwebextensionswebextension2.xml.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Open the file to ensure that you have the correct location.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Find the DataEntity.Name,  such as FMCustomerEntity.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101n<ept id="p1">](./media/off101n.png)](./media/off101n.png)</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Extract the zip file.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101o<ept id="p1">](./media/off101o.png)](./media/off101o.png)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Open the webextension xml file.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Replace the DataEntity.Name with the corresponding DataEntity.PublicEntityName.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Save the webextension xml file changes.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Rename the old zip file e.g. add “.old” to the name.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Create a new zip file of all the previously extracted content.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This usually involves highlighting the content inside the archive/zip folder and creating a zipped folder using that content.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">![</ph>off101p<ept id="p1">](./media/off101p.png)](./media/off101p.png)</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Verify that the zip file has the “<ph id="ph1">\_</ph>rels”, “docProps”, and “xl” folders in the root of the zip file.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Rename the zip file as needed, for example back to 2015-05-25-FleetCustomersWithLocations.zip.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Change the zip file extension back to xlsx.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Re-publish the workbook xlsx file, if needed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>